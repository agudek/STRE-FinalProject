/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:35:44 GMT 2018
 */

package com.jfinal.render;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.config.Constants;
import com.jfinal.render.ContentType;
import com.jfinal.render.ErrorRender;
import com.jfinal.render.JsonRender;
import com.jfinal.render.Render;
import com.jfinal.render.RenderFactory;
import com.jfinal.render.TextRender;
import com.jfinal.template.Engine;
import freemarker.ext.servlet.FreemarkerServlet;
import java.io.File;
import javax.servlet.ServletContext;
import org.apache.struts.mock.MockServletContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class RenderFactory_ESTest extends RenderFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      MockServletContext mockServletContext0 = new MockServletContext();
      // Undeclared exception!
      try { 
        renderFactory0.init((Engine) null, (Constants) null, mockServletContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.RenderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Constants constants0 = new Constants();
      renderFactory0.init((Engine) null, constants0, (ServletContext) null);
      Render render0 = renderFactory0.getDefaultRender("G0lLULlyjm%-3E");
      assertEquals("G0lLULlyjm%-3E.html", render0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getTextRender("com.jfinal.render.RenderFactory$1", (ContentType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.TextRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getQrCodeRender("", (-2152), 1, 'z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // errorCorrectionLevel \u7EA0\u9519\u7EA7\u522B\u53C2\u6570\u503C\uFF0C\u4ECE\u9AD8\u5230\u4F4E\u5FC5\u987B\u4E3A\uFF1A 'H'\u3001'Q'\u3001'M'\u3001'L'
         //
         verifyException("com.jfinal.render.QrCodeRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getQrCodeRender((String) null, 1984, 90000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // content \u4E0D\u80FD\u4E3A\u7A7A
         //
         verifyException("com.jfinal.render.QrCodeRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getJsonRender((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter attrs can not be null.
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      MockFile mockFile0 = new MockFile("{E?BtF/``y", "{E?BtF/``y");
      // Undeclared exception!
      renderFactory0.getJsonRender("", (Object) mockFile0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      FreemarkerServlet freemarkerServlet0 = new FreemarkerServlet();
      // Undeclared exception!
      try { 
        renderFactory0.getJsonRender("] to be rolled at start of every month.", (Object) freemarkerServlet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getJsonRender((String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter key can not be null.
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      renderFactory0.getJsonRender((Object) mockFile0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      FreemarkerServlet freemarkerServlet0 = new FreemarkerServlet();
      // Undeclared exception!
      try { 
        renderFactory0.getJsonRender((Object) freemarkerServlet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getFileRender("", "cX#'TOL._O)VSO8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fileName can not be blank.
         //
         verifyException("com.jfinal.render.FileRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getFileRender("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fileName can not be blank.
         //
         verifyException("com.jfinal.render.FileRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getFileRender((File) null, "CUJY+^bb}*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file can not be null.
         //
         verifyException("com.jfinal.render.FileRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getFileRender((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file can not be null.
         //
         verifyException("com.jfinal.render.FileRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Constants constants0 = new Constants();
      renderFactory0.init((Engine) null, constants0, (ServletContext) null);
      Render render0 = renderFactory0.getRender("RUNNING");
      assertEquals("RUNNING", render0.getView());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getRedirect301Render("YK$Hl");
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getVelocityRender("tUAu<}}6t`J>j}");
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getTemplateRender("/F\"+m-Cz9<W^oiO!$@");
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      MockFile mockFile0 = new MockFile("rw");
      Render render0 = renderFactory0.getFileRender((File) mockFile0, "rw");
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getFileRender("com.jfinal.render.RenderFactory$MainRenderFactory");
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getErrorRender(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.RenderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getJsonRender((Object) "");
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getHtmlRender("com.jfinal.render.RenderFactory$VelocityRenderFactory");
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      JsonRender jsonRender0 = (JsonRender)renderFactory0.getJsonRender("blackList");
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getNullRender();
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getQrCodeRender("vBLweE", 108, 0, 'L');
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getXmlRender("");
      assertEquals("", render0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getJavascriptRender("");
      assertNull(render0.getView());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getFileRender("YK$Hl", "YK$Hl");
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getFreeMarkerRender("");
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getRender("RUNNING");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.RenderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getQrCodeRender("rw", 3837, 20000);
      assertNull(render0.getView());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      String[] stringArray0 = new String[2];
      JsonRender jsonRender0 = (JsonRender)renderFactory0.getJsonRender(stringArray0);
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      ContentType contentType0 = ContentType.JSON;
      Render render0 = renderFactory0.getTextRender("create driver instance error, driver className '", contentType0);
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      JsonRender jsonRender0 = (JsonRender)renderFactory0.getJsonRender();
      assertNull(jsonRender0.getJsonText());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getRedirect301Render("tG", false);
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      ErrorRender errorRender0 = (ErrorRender)renderFactory0.getErrorRender(30000, "tG");
      assertEquals(30000, errorRender0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getRedirectRender("/F\"+m-Cz9<W^oiO!$@");
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getRedirectRender("visitContextParam", true);
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getTextRender("c$ MoXK4yzYafR*|:");
      assertFalse(render0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getCaptchaRender();
      assertEquals("UTF-8", render0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      MockFile mockFile0 = new MockFile("{E?BtF/``y", "{E?BtF/``y");
      Render render0 = renderFactory0.getFileRender((File) mockFile0);
      assertNull(render0.getView());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      // Undeclared exception!
      try { 
        renderFactory0.getDefaultRender((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.RenderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      TextRender textRender0 = (TextRender)renderFactory0.getTextRender("", " END");
      assertEquals(" END", textRender0.getContentType());
      assertEquals("", textRender0.getText());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RenderFactory renderFactory0 = new RenderFactory();
      Render render0 = renderFactory0.getJspRender("com.jfinal.render.RenderFactory$MainRenderFactory");
      Render render1 = renderFactory0.getJsonRender("com.jfinal.render.RenderFactory$VelocityRenderFactory", (Object) render0);
      assertNull(render1.getView());
  }
}
