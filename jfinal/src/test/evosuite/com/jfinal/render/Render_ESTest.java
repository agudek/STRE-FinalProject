/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:15:32 GMT 2018
 */

package com.jfinal.render;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.render.ErrorRender;
import com.jfinal.render.JsonRender;
import com.jfinal.render.JspRender;
import com.jfinal.render.NullRender;
import com.jfinal.render.QrCodeRender;
import com.jfinal.render.Render;
import com.jfinal.render.VelocityRender;
import com.jfinal.render.XmlRender;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.eclipse.jetty.server.Request;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Render_ESTest extends Render_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JspRender jspRender0 = new JspRender("{J6B");
      jspRender0.setView("{J6B");
      assertEquals("UTF-8", jspRender0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullRender nullRender0 = new NullRender();
      nullRender0.render();
      assertEquals("UTF-8", nullRender0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VelocityRender velocityRender0 = new VelocityRender((String) null);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Render.init((String) null, true);
      Render render0 = velocityRender0.setContext((HttpServletRequest) null, (HttpServletResponse) httpServletResponseWrapper0, (String) null);
      assertNull(render0.getView());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRender xmlRender0 = new XmlRender("invalid rounding policy");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Render.init("$p&v,~dS{s", true);
      Render render0 = xmlRender0.setContext((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
      assertEquals("invalid rounding policy", render0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JsonRender jsonRender0 = new JsonRender(stringArray0);
      String string0 = jsonRender0.getView();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JspRender jspRender0 = new JspRender("{J6B");
      String string0 = jspRender0.getView();
      assertEquals("{J6B", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Render.init("", true);
      String string0 = Render.getEncoding();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Render.init("", true);
      boolean boolean0 = Render.getDevMode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JspRender jspRender0 = new JspRender("com.jfinal.render.Render");
      // Undeclared exception!
      try { 
        jspRender0.render();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.render.JspRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QrCodeRender qrCodeRender0 = new QrCodeRender("com.alibaba.druid.pool.DruidPooledConnection", 0, 0);
      // Undeclared exception!
      try { 
        qrCodeRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.QrCodeRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Request request0 = new Request();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(request0);
      XmlRender xmlRender0 = new XmlRender("");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      xmlRender0.setContext((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        xmlRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.TemplateRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRender xmlRender0 = new XmlRender("");
      String string0 = xmlRender0.getView();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Request request0 = new Request();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(request0);
      XmlRender xmlRender0 = new XmlRender("");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Render render0 = xmlRender0.setContext((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, "!RbQ%tq^x");
      assertEquals("", render0.getView());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = Render.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorRender errorRender0 = new ErrorRender((-1655), "UTF-8");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      errorRender0.setContext((HttpServletRequest) null, (HttpServletResponse) httpServletResponseWrapper0, "");
      // Undeclared exception!
      try { 
        errorRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.ErrorRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Render.getDevMode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Render.init((String) null, true);
      String string0 = Render.getEncoding();
      assertNull(string0);
  }
}
