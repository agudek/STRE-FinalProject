/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:12:28 GMT 2018
 */

package com.jfinal.render;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.render.JsonRender;
import com.jfinal.render.Render;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class JsonRender_ESTest extends JsonRender_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/BNB";
      JsonRender jsonRender0 = new JsonRender(stringArray0);
      // Undeclared exception!
      try { 
        jsonRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender();
      jsonRender0.getJsonText();
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender("");
      String string0 = jsonRender0.getJsonText();
      assertFalse(jsonRender0.getForIE());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender();
      assertFalse(jsonRender0.getForIE());
      
      jsonRender0.forIE();
      jsonRender0.getForIE();
      assertTrue(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JsonRender jsonRender0 = new JsonRender(stringArray0);
      jsonRender0.getAttrs();
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonRender jsonRender0 = new JsonRender(stringArray0);
      jsonRender0.getAttrs();
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender("4c~");
      assertFalse(jsonRender0.getForIE());
      
      Render.init("", true);
      jsonRender0.forIE();
      assertTrue(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender();
      // Undeclared exception!
      try { 
        jsonRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender("2");
      // Undeclared exception!
      try { 
        jsonRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[11];
      JsonRender jsonRender0 = new JsonRender(stringArray0[1]);
      assertEquals("null", jsonRender0.getJsonText());
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonRender jsonRender0 = null;
      try {
        jsonRender0 = new JsonRender((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter attrs can not be null.
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonRender jsonRender0 = new JsonRender(stringArray0);
      // Undeclared exception!
      try { 
        jsonRender0.render();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      JsonRender jsonRender0 = null;
      try {
        jsonRender0 = new JsonRender((String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter key can not be null.
         //
         verifyException("com.jfinal.render.JsonRender", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[11];
      JsonRender.removeExcludedAttrs(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonRender.removeExcludedAttrs((String[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JsonRender.addExcludedAttrs(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonRender.addExcludedAttrs((String[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender("", "");
      assertEquals("{\"\":\"\"}", jsonRender0.getJsonText());
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender("2");
      jsonRender0.getAttrs();
      assertEquals("2", jsonRender0.getJsonText());
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonRender.clearExcludedAttrs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender("2");
      String string0 = jsonRender0.getJsonText();
      assertFalse(jsonRender0.getForIE());
      assertEquals("2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      JsonRender jsonRender0 = new JsonRender(object0);
      assertFalse(jsonRender0.getForIE());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonRender jsonRender0 = new JsonRender();
      Boolean boolean0 = jsonRender0.getForIE();
      assertFalse(boolean0);
  }
}
