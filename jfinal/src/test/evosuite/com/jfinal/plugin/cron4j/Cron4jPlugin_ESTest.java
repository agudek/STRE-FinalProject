/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:46:42 GMT 2018
 */

package com.jfinal.plugin.cron4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.Prop;
import com.jfinal.plugin.cron4j.Cron4jPlugin;
import it.sauronsoftware.cron4j.ProcessTask;
import it.sauronsoftware.cron4j.Task;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Cron4jPlugin_ESTest extends Cron4jPlugin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask("cron4j");
      cron4jPlugin0.addTask("eup)uNtT", processTask0, true, false);
      boolean boolean0 = cron4jPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin("", "cron \u4E0D\u80FD\u4E3A\u7A7A.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value of configName: cron \u4E0D\u80FD\u4E3A\u7A7A. can not be blank.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value of configName: cron4j can not be blank.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      Thread thread0 = MockThread.currentThread();
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask((String) null, (Runnable) thread0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "cron4j");
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask("", (Runnable) mockThread0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask((String[]) null);
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask((String) null, (Task) processTask0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask("4Iv6[mTD-%JNv aN2A.", (Task) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // task \u4E0D\u80FD\u4E3A null.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      String[] stringArray0 = new String[3];
      ProcessTask processTask0 = new ProcessTask(stringArray0);
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask("", (Task) processTask0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      String[] stringArray0 = new String[8];
      MockFile mockFile0 = new MockFile(":2b:y=6dOJwkWz,'b2", "}>");
      ProcessTask processTask0 = new ProcessTask(stringArray0, stringArray0, mockFile0);
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask((String) null, processTask0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      String[] stringArray0 = new String[7];
      MockFile mockFile0 = new MockFile("");
      ProcessTask processTask0 = new ProcessTask(stringArray0, stringArray0, mockFile0);
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask("", processTask0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask((String) null);
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask("", processTask0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cron \u4E0D\u80FD\u4E3A\u7A7A.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Prop prop0 = new Prop("");
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin(prop0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value of configName:  can not be blank.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Prop prop0 = new Prop("");
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin(prop0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value of configName: cron4j can not be blank.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask("");
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask("Sl`UZEge>:Cz=u>Wo", (Task) processTask0, false, false);
      assertSame(cron4jPlugin1, cron4jPlugin0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin((Prop) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      MockThread mockThread0 = new MockThread();
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask("(#icJh'__Xd&<W=", (Runnable) mockThread0, false, false);
      assertSame(cron4jPlugin0, cron4jPlugin1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask("cron4j");
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask("cron4j", (Task) processTask0);
      // Undeclared exception!
      try { 
        cron4jPlugin1.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      // Undeclared exception!
      try { 
        cron4jPlugin0.addTask("cron4j", (Runnable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // task \u4E0D\u80FD\u4E3A null.
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      String[] stringArray0 = new String[8];
      ProcessTask processTask0 = new ProcessTask(stringArray0, stringArray0);
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask("cron4j", processTask0, false, false);
      boolean boolean0 = cron4jPlugin1.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask(".+BTmkWS_EW]N");
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask(".+BTmkWS_EW]N", processTask0, true);
      // Undeclared exception!
      try { 
        cron4jPlugin1.start();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid pattern: \".+BTmkWS_EW]N\"
         //
         verifyException("it.sauronsoftware.cron4j.SchedulingPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = null;
      try {
        cron4jPlugin0 = new Cron4jPlugin((Prop) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      MockThread mockThread0 = new MockThread("cron4j");
      cron4jPlugin0.addTask("rGl_?30aG(FaWeJ", (Runnable) mockThread0);
      // Undeclared exception!
      try { 
        cron4jPlugin0.start();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid pattern: \"rGl_?30aG(FaWeJ\"
         //
         verifyException("it.sauronsoftware.cron4j.SchedulingPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      MockThread mockThread0 = new MockThread("cron4j");
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask("cron4j", (Runnable) mockThread0, true);
      assertSame(cron4jPlugin0, cron4jPlugin1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask("cron4j");
      Cron4jPlugin cron4jPlugin1 = cron4jPlugin0.addTask("cron4j", processTask0);
      assertSame(cron4jPlugin0, cron4jPlugin1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cron4jPlugin cron4jPlugin0 = new Cron4jPlugin();
      ProcessTask processTask0 = new ProcessTask("cron4j");
      cron4jPlugin0.addTask("Schdulernotstarted", (Task) processTask0, false);
      // Undeclared exception!
      try { 
        cron4jPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.cron4j.Cron4jPlugin$TaskInfo", e);
      }
  }
}
