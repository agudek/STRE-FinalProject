/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:04:52 GMT 2018
 */

package com.jfinal.plugin.activerecord.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.pool.DruidDataSourceC3P0Adapter;
import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.Table;
import com.jfinal.plugin.activerecord.dialect.MysqlDialect;
import com.mchange.v2.c3p0.DriverManagerDataSource;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class MysqlDialect_ESTest extends MysqlDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      StringBuilder stringBuilder0 = new StringBuilder("i?_AObQ_");
      String string0 = mysqlDialect0.forPaginate(96, 713, stringBuilder0);
      assertEquals("i?_AObQ_ limit 67735, 713", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      // Undeclared exception!
      try { 
        mysqlDialect0.forPaginate(0, 737, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLASTOutputVisitor sQLASTOutputVisitor0 = new SQLASTOutputVisitor(stringBuilder0, true);
      List<Object> list0 = sQLASTOutputVisitor0.getParameters();
      // Undeclared exception!
      try { 
        mysqlDialect0.forModelUpdate((Table) null, (Map<String, Object>) null, linkedHashSet0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      MockDriver mockDriver0 = MockDriver.instance;
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      Properties properties0 = driverManagerDataSource0.getProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "", properties0);
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement(mockConnection0, "");
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      // Undeclared exception!
      try { 
        mysqlDialect0.forModelSave((Table) null, hashMap0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      // Undeclared exception!
      try { 
        mysqlDialect0.forModelDeleteById((Table) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[0];
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        mysqlDialect0.forDbUpdate("+i7?i*{'2 u@*LRW(P", stringArray0, stringArray0, (Record) null, stringBuilder0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      String[] stringArray0 = new String[3];
      Record record0 = new Record();
      MockDriver mockDriver0 = MockDriver.instance;
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "y=!u-1846.61com.jfinal.plugin.activerecord.dialect.MysqlDialect@1 limit 562896, -3909", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "y=!u-1846.61com.jfinal.plugin.activerecord.dialect.MysqlDialect@1 limit 562896, -3909");
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "AhuI; .?O0 F5Fy5W";
      stringArray1[1] = "[PERn^N";
      stringArray1[2] = "y=!u-1846.61com.jfinal.plugin.activerecord.dialect.MysqlDialect@1 limit 562896, -3909";
      stringArray1[3] = "\"5 *ul?4@z";
      stringArray1[4] = "[PERn^N";
      stringArray1[5] = "` where 1 = 2";
      // Undeclared exception!
      try { 
        mysqlDialect0.forDbUpdate("[PERn^N", stringArray1, stringArray0, record0, stringBuilder0, list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      MockDriver mockDriver0 = new MockDriver();
      Properties properties0 = new Properties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "");
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      // Undeclared exception!
      try { 
        mysqlDialect0.forDbSave("", stringArray0, (Record) null, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        mysqlDialect0.forDbFindById((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        mysqlDialect0.forDbDeleteById((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S$qV!7";
      stringArray0[1] = "S$qV!7";
      stringArray0[2] = "S$qV!7";
      stringArray0[3] = "S$qV!7";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder("!H`XJG8'L$Xbfp|4z7'");
      Record record1 = record0.set("S$qV!7", "S$qV!7");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mysqlDialect0.forDbUpdate("S$qV!7", stringArray0, stringArray0, record0, stringBuilder0, linkedList0);
      String[] stringArray1 = new String[0];
      mysqlDialect0.forDbUpdate("select * from `S$qV!7` where 1 = 2", stringArray1, stringArray1, record1, stringBuilder0, linkedList0);
      assertEquals(5, linkedList0.size());
      assertEquals("!H`XJG8'L$Xbfp|4z7'update `S$qV!7` set  where `S$qV!7` = ? and `S$qV!7` = ? and `S$qV!7` = ? and `S$qV!7` = ?update `select * from `S$qV!7` where 1 = 2` set , `S$qV!7` = ?  where ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder("!H`XJG8'L$Xbfp|4z7'");
      Record record1 = record0.set("S$qV!7", "S$qV!7");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[0];
      mysqlDialect0.forDbUpdate("select * from `S$qV!7` where 1 = 2", stringArray0, stringArray0, record1, stringBuilder0, linkedList0);
      assertTrue(linkedList0.contains("S$qV!7"));
      assertEquals("!H`XJG8'L$Xbfp|4z7'update `select * from `S$qV!7` where 1 = 2` set `S$qV!7` = ?  where ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S$qV!7";
      stringArray0[1] = "S$qV!7";
      stringArray0[2] = "S$qV!7";
      stringArray0[3] = "S$qV!7";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder("!H`XJG8'L$Xbfp|4z7'");
      Record record1 = record0.set("S$qV!7", "S$qV!7");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mysqlDialect0.forDbUpdate("S$qV!7", stringArray0, stringArray0, record0, stringBuilder0, linkedList0);
      mysqlDialect0.forDbSave("S$qV!7", stringArray0, record1, stringBuilder0, linkedList0);
      assertEquals(5, linkedList0.size());
      assertEquals("!H`XJG8'L$Xbfp|4z7'update `S$qV!7` set  where `S$qV!7` = ? and `S$qV!7` = ? and `S$qV!7` = ? and `S$qV!7` = ?insert into `S$qV!7`(, `S$qV!7`) values(, ?)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S$qV!7";
      stringArray0[1] = "S$qV!7";
      stringArray0[2] = "S$qV!7";
      stringArray0[3] = "S$qV!7";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder("!H`XJG8'L$Xbfp|4z7'");
      Record record1 = record0.set("S$qV!7", "S$qV!7");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mysqlDialect0.forDbSave("S$qV!7", stringArray0, record1, stringBuilder0, linkedList0);
      assertTrue(linkedList0.contains("S$qV!7"));
      assertEquals("!H`XJG8'L$Xbfp|4z7'insert into `S$qV!7`(`S$qV!7`) values(?)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "maxStatements";
      stringArray0[1] = "maxStatements";
      stringArray0[2] = "maxStatements";
      stringArray0[3] = "d6ZpNt";
      stringArray0[4] = "";
      String string0 = mysqlDialect0.forDbDeleteById("maxStatements", stringArray0);
      assertEquals("delete from `maxStatements` where `maxStatements` = ? and `maxStatements` = ? and `maxStatements` = ? and `d6ZpNt` = ? and `` = ?", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "K/";
      stringArray0[1] = "K/";
      stringArray0[2] = "K/";
      String string0 = mysqlDialect0.forDbFindById("K/", stringArray0);
      assertEquals("select * from `K/` where `K/` = ? and `K/` = ? and `K/` = ?", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      // Undeclared exception!
      try { 
        mysqlDialect0.forModelFindById((Table) null, ".j+W\". %T1p,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.MysqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String string0 = mysqlDialect0.forTableBuilderDoBuild("com.alibaba.druid.sql.ast.SQLSubPartition");
      assertEquals("select * from `com.alibaba.druid.sql.ast.SQLSubPartition` where 1 = 2", string0);
  }
}
