/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:59:19 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.core.JFinalFilter;
import com.jfinal.plugin.activerecord.ModelRecordElResolver;
import com.jfinal.plugin.activerecord.Record;
import java.awt.AWTKeyStroke;
import java.awt.Window;
import java.beans.FeatureDescriptor;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import javax.el.ELContext;
import javax.management.remote.JMXPrincipal;
import javax.servlet.ServletContext;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.text.DefaultEditorKit;
import org.apache.jasper.runtime.ELContextImpl;
import org.eclipse.jetty.server.HandlerContainer;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ModelRecordElResolver_ESTest extends ModelRecordElResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Record record0 = new Record();
      record0.getNumber("");
      Window.Type window_Type0 = Window.Type.NORMAL;
      Window.Type.values();
      modelRecordElResolver0.setValue(eLContextImpl0, record0, window_Type0, eLContextImpl0);
      WebAppContext webAppContext0 = WebAppContext.getCurrentWebAppContext();
      assertNull(webAppContext0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      Record record0 = new Record();
      // Undeclared exception!
      try { 
        modelRecordElResolver0.setValue((ELContext) null, record0, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ModelRecordElResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelRecordElResolver.init((ServletContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jasper.runtime.JspApplicationContextImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      Record record0 = new Record();
      modelRecordElResolver0.getCommonPropertyType(eLContextImpl0, record0);
      // Undeclared exception!
      try { 
        ModelRecordElResolver.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jasper.runtime.JspApplicationContextImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      FeatureDescriptor featureDescriptor0 = new FeatureDescriptor();
      ModelRecordElResolver.setResolveBeanAsModel(true);
      Record record0 = new Record();
      boolean boolean0 = modelRecordElResolver0.isReadOnly(eLContextImpl0, record0, featureDescriptor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      FeatureDescriptor featureDescriptor0 = new FeatureDescriptor();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("get");
      modelRecordElResolver0.setValue(eLContextImpl0, featureDescriptor0, (Object) null, jMXPrincipal0);
      ModelRecordElResolver.setResolveBeanAsModel(true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      eLContextImpl0.getLocale();
      eLContextImpl0.setPropertyResolved(false);
      JFinalFilter jFinalFilter0 = new JFinalFilter();
      modelRecordElResolver0.getCommonPropertyType(eLContextImpl0, jFinalFilter0);
      ModelRecordElResolver.setResolveBeanAsModel(false);
      ELContextImpl eLContextImpl1 = new ELContextImpl(modelRecordElResolver0);
      modelRecordElResolver0.isReadOnly(eLContextImpl1, eLContextImpl1, (Object) null);
      FeatureDescriptor featureDescriptor0 = new FeatureDescriptor();
      modelRecordElResolver0.getType(eLContextImpl1, eLContextImpl0, featureDescriptor0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("default SizeOfEngine");
      modelRecordElResolver0.setValue(eLContextImpl0, integer0, featureDescriptor0, jMXPrincipal0);
      modelRecordElResolver0.getType(eLContextImpl0, (Object) null, jFinalFilter0);
      modelRecordElResolver0.isReadOnly(eLContextImpl0, eLContextImpl0, eLContextImpl0);
      Record record0 = new Record();
      ModelRecordElResolver.setWorking(false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("JMXPrincipal:  default SizeOfEngine", vetoableChangeListener0);
      modelRecordElResolver0.getType(eLContextImpl0, vetoableChangeListenerProxy0, (Object) null);
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke('M');
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      JMenuItem jMenuItem0 = new JMenuItem(defaultEditorKit_PasteAction0);
      modelRecordElResolver0.setValue((ELContext) null, integer0, aWTKeyStroke0, jMenuItem0);
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("JMXPrincipal:  default SizeOfEngine");
      modelRecordElResolver0.isReadOnly(eLContextImpl1, "", jMXPrincipal1);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      modelRecordElResolver0.getCommonPropertyType((ELContext) null, integer1);
      Object object0 = modelRecordElResolver0.getValue(eLContextImpl1, (Object) null, "default SizeOfEngine");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      modelRecordElResolver0.getValue(eLContextImpl0, eLContextImpl0, eLContextImpl0);
      modelRecordElResolver0.getType(eLContextImpl0, (Object) null, (Object) null);
      Record record0 = new Record();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      Record record0 = new Record();
      FeatureDescriptor featureDescriptor0 = new FeatureDescriptor();
      Object object0 = modelRecordElResolver0.getValue(eLContextImpl0, record0, featureDescriptor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      Object object0 = modelRecordElResolver0.getValue(eLContextImpl0, eLContextImpl0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "com.jfinal.plugin.activerecord.ModelRecordElResolver";
      ServletContextHandler servletContextHandler0 = new ServletContextHandler((HandlerContainer) null, "com.jfinal.plugin.activerecord.ModelRecordElResolver");
      servletContextHandler0.setInitParameter("LX%VBK2~ta_1)Q", "LX%VBK2~ta_1)Q");
      ContextHandler.Context contextHandler_Context0 = servletContextHandler0.getServletContext();
      ModelRecordElResolver.init((ServletContext) contextHandler_Context0);
      ModelRecordElResolver.init((ServletContext) contextHandler_Context0);
      int int0 = 1792;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelRecordElResolver modelRecordElResolver0 = new ModelRecordElResolver();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ELContextImpl eLContextImpl0 = new ELContextImpl(modelRecordElResolver0);
      modelRecordElResolver0.getCommonPropertyType(eLContextImpl0, eLContextImpl0);
      modelRecordElResolver0.getFeatureDescriptors(eLContextImpl0, " MERGE SMALLFILES");
      JFinalFilter jFinalFilter0 = new JFinalFilter();
  }
}
