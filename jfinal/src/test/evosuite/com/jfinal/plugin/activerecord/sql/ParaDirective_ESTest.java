/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:13:53 GMT 2018
 */

package com.jfinal.plugin.activerecord.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.plugin.activerecord.sql.ParaDirective;
import com.jfinal.template.EngineConfig;
import com.jfinal.template.Env;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.Ternary;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ParaDirective_ESTest extends ParaDirective_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      // Undeclared exception!
      try { 
        paraDirective0.setExprList((ExprList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.sql.ParaDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 3364);
      // Undeclared exception!
      try { 
        paraDirective0.exec((Env) null, (Scope) null, byteWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.sql.ParaDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      Env env0 = new Env((EngineConfig) null);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>(2, 2);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      CharWriter charWriter0 = new CharWriter(2);
      // Undeclared exception!
      try { 
        paraDirective0.exec(env0, scope0, charWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #para directive invoked by getSqlPara(...) method only
         //
         verifyException("com.jfinal.plugin.activerecord.sql.ParaDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Id id0 = new Id("G}7zNr");
      linkedList0.add((Expr) id0);
      ExprList exprList0 = new ExprList(linkedList0);
      paraDirective0.setExprList(exprList0);
      assertFalse(paraDirective0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      ParaDirective.setCheckParaAssigned(false);
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.FALSE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      paraDirective0.setExprList(exprList0);
      assertEquals(1, exprList0.length());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.FALSE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      paraDirective0.setExprList(exprList0);
      assertFalse(paraDirective0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.FALSE;
      linkedList0.add((Expr) const0);
      Location location0 = new Location("g<J-z", 128);
      Ternary ternary0 = new Ternary(const0, const0, const0, location0);
      linkedList0.offer(ternary0);
      ExprList exprList0 = new ExprList(linkedList0);
      paraDirective0.setExprList(exprList0);
      assertFalse(paraDirective0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParaDirective paraDirective0 = new ParaDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        paraDirective0.setExprList(exprList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #para directive can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.sql.ParaDirective", e);
      }
  }
}
