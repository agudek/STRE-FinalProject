/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:19:29 GMT 2018
 */

package com.jfinal.plugin.activerecord.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.pool.DruidDataSourceC3P0Adapter;
import com.alibaba.druid.sql.visitor.ExportParameterizedOutputVisitor;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.Table;
import com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect;
import java.nio.CharBuffer;
import java.sql.PreparedStatement;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Sqlite3Dialect_ESTest extends Sqlite3Dialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forPaginate(45, (-943), (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      MockDriver mockDriver0 = MockDriver.instance;
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "'aD^`O", properties0);
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("`ib{/fFFX#K]Q9", (-26), (-26));
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement(mockConnection0, (String) null);
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      sqlite3Dialect0.fillStatement(preparedStatement0, list0);
      assertEquals("id", sqlite3Dialect0.getDefaultPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      CharBuffer charBuffer0 = CharBuffer.allocate(1547);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      String string0 = sqlite3Dialect0.forPaginate(0, (-823), stringBuilder0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      StringBuilder stringBuilder0 = new StringBuilder(63);
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forModelSave((Table) null, (Map<String, Object>) null, stringBuilder0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forModelFindById((Table) null, "^{lDJU*qNVb<nYi_/;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forModelDeleteById((Table) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[3];
      Record record0 = new Record();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forDbUpdate("X+T2BXkY^'!F;", stringArray0, stringArray0, record0, (StringBuilder) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      MockDriver mockDriver0 = MockDriver.instance;
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":*N,>bCZ~%ISvS^";
      stringArray0[1] = ":*N,>bCZ~%ISvS^";
      stringArray0[2] = "com.jfinal.template.ext.extensionmethod.StringExt";
      stringArray0[3] = "CROSS";
      stringArray0[4] = "select * from %m where %m = ? and %m = ? and _ = ? and %m = ? and %m = ?";
      stringArray0[5] = ":*N,>bCZ~%ISvS^";
      stringArray0[6] = "%m";
      stringArray0[7] = ":*N,>bCZ~%ISvS^";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder();
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement((MockConnection) null, "select * from %m where %m = ? and %m = ? and _ = ? and %m = ? and %m = ?");
      List<Object> list0 = mockCallableStatement0.getParameters();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forDbUpdate(":*N,>bCZ~%ISvS^", stringArray0, objectArray0, record0, stringBuilder0, list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder();
      ExportParameterizedOutputVisitor exportParameterizedOutputVisitor0 = new ExportParameterizedOutputVisitor();
      List<Object> list0 = exportParameterizedOutputVisitor0.getParameters();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forDbSave("3fEKX iD5|OQQeN;", (String[]) null, record0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forDbFindById((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forDbDeleteById(" = ?", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      MockConnection mockConnection0 = new MockConnection();
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("\u0001.f{", 0, 0, 0);
      // Undeclared exception!
      try { 
        sqlite3Dialect0.fillStatement(preparedStatement0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4yy5";
      stringArray0[1] = "4yy5";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder();
      MockConnection mockConnection0 = new MockConnection();
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "4yy5");
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      sqlite3Dialect0.forDbUpdate("numThreadsAwaitingCheckoutDefaultUser", stringArray0, stringArray0, record0, stringBuilder0, list0);
      assertTrue(list0.contains("4yy5"));
      assertEquals("update numThreadsAwaitingCheckoutDefaultUser set  where 4yy5 = ? and 4yy5 = ?", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      stringArray0[2] = "5";
      stringArray0[3] = "E";
      stringArray0[4] = "CREATE ANY MATERIALIZED VIEW";
      stringArray0[5] = ") values(";
      stringArray0[6] = "E";
      stringArray0[7] = "E";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder(") values(");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      sqlite3Dialect0.forDbSave("E", stringArray0, record0, stringBuilder0, linkedList0);
      assertEquals(") values(insert into E() values()", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "VXHIP3s\u0006l[n<<T't";
      stringArray0[1] = "VXHIP3s\u0006l[n<<T't";
      stringArray0[2] = " limit -45880, -1480";
      String string0 = sqlite3Dialect0.forDbDeleteById("VXHIP3s\u0006l[n<<T't", stringArray0);
      assertEquals("delete from VXHIP3s\u0006l[n<<T't where VXHIP3s\u0006l[n<<T't = ? and VXHIP3s\u0006l[n<<T't = ? and limit -45880, -1480 = ?", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%m";
      stringArray0[1] = "%m";
      stringArray0[2] = "_";
      stringArray0[3] = "%m";
      stringArray0[4] = "%m";
      String string0 = sqlite3Dialect0.forDbFindById("%m", stringArray0);
      assertEquals("select * from %m where %m = ? and %m = ? and _ = ? and %m = ? and %m = ?", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      MockDriver mockDriver0 = MockDriver.instance;
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement((MockConnection) null, "%m");
      Object[] objectArray0 = new Object[1];
      sqlite3Dialect0.fillStatement((PreparedStatement) mockCallableStatement0, objectArray0);
      assertEquals("id", sqlite3Dialect0.getDefaultPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String string0 = sqlite3Dialect0.forTableBuilderDoBuild("");
      assertEquals("select * from  where 1 = 2", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      MockDriver mockDriver0 = MockDriver.instance;
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "z@um[je", properties0);
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("z@um[je", (-2846), (-2846), (-4087));
      // Undeclared exception!
      try { 
        sqlite3Dialect0.fillStatement(preparedStatement0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }
}
