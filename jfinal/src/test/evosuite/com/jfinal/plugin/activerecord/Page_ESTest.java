/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:30:33 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import com.jfinal.plugin.activerecord.Page;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((List<Object>) null, 1, 0, (-1380), 1);
      boolean boolean0 = page0.isLastPage();
      assertEquals(1, page0.getTotalRow());
      assertTrue(boolean0);
      assertEquals((-1380), page0.getTotalPage());
      assertEquals(0, page0.getPageSize());
      assertEquals(1, page0.getPageNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>((List<Integer>) null, 0, 0, 0, 1);
      int int0 = page0.getTotalRow();
      assertEquals(0, page0.getTotalPage());
      assertEquals(1, int0);
      assertEquals(0, page0.getPageNumber());
      assertEquals(0, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((List<Object>) null, 1419, (-2240), (-1781), (-634));
      int int0 = page0.getTotalRow();
      assertEquals((-634), int0);
      assertEquals((-2240), page0.getPageSize());
      assertEquals(1419, page0.getPageNumber());
      assertEquals((-1781), page0.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(linkedList0, 0, 1, 834, 1);
      int int0 = page0.getTotalPage();
      assertEquals(0, page0.getPageNumber());
      assertEquals(1, page0.getPageSize());
      assertEquals(1, page0.getTotalRow());
      assertEquals(834, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((List<Object>) null, 2317, 2317, (-1634), 1);
      int int0 = page0.getTotalPage();
      assertEquals(1, page0.getTotalRow());
      assertEquals(2317, page0.getPageNumber());
      assertEquals(2317, page0.getPageSize());
      assertEquals((-1634), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Page<String> page0 = new Page<String>(linkedList0, (-1142), 1, (-1142), (-202));
      int int0 = page0.getPageSize();
      assertEquals((-1142), page0.getPageNumber());
      assertEquals(1, int0);
      assertEquals((-202), page0.getTotalRow());
      assertTrue(page0.isLastPage());
      assertEquals((-1142), page0.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Page<String> page0 = new Page<String>(linkedList0, 2435, (-346), (-346), 2435);
      int int0 = page0.getPageSize();
      assertEquals(2435, page0.getPageNumber());
      assertEquals((-346), int0);
      assertEquals((-346), page0.getTotalPage());
      assertEquals(2435, page0.getTotalRow());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Page<Integer> page0 = new Page<Integer>(linkedList0, 3018, 3018, (-225), (-225));
      int int0 = page0.getPageNumber();
      assertEquals((-225), page0.getTotalRow());
      assertEquals((-225), page0.getTotalPage());
      assertEquals(3018, int0);
      assertEquals(3018, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(linkedList0, (-1661), (-1661), 0, (-817));
      int int0 = page0.getPageNumber();
      assertEquals(0, page0.getTotalPage());
      assertEquals((-817), page0.getTotalRow());
      assertEquals((-1661), int0);
      assertEquals((-1661), page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Page<String> page0 = new Page<String>(linkedList0, (-711), 2681, (-711), 207);
      page0.getList();
      assertEquals((-711), page0.getPageNumber());
      assertEquals(2681, page0.getPageSize());
      assertEquals(207, page0.getTotalRow());
      assertEquals((-711), page0.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Page<Object> page0 = new Page<Object>(linkedList0, (-1), (-1), (-1), 1);
      page0.getList();
      assertEquals(1, page0.getTotalRow());
      assertEquals((-1), page0.getTotalPage());
      assertEquals((-1), page0.getPageSize());
      assertEquals((-1), page0.getPageNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      boolean boolean0 = page0.isLastPage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(linkedList0, (-100), 19, 19, (-100));
      boolean boolean0 = page0.isLastPage();
      assertFalse(boolean0);
      assertEquals((-100), page0.getPageNumber());
      assertEquals(19, page0.getTotalPage());
      assertEquals(19, page0.getPageSize());
      assertEquals((-100), page0.getTotalRow());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((List<Object>) null, 1, 1, 1, 1);
      boolean boolean0 = page0.isFirstPage();
      assertTrue(boolean0);
      assertEquals(1, page0.getTotalPage());
      assertEquals(1, page0.getPageSize());
      assertEquals(1, page0.getTotalRow());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      int int0 = page0.getPageNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      String string0 = page0.toString();
      assertEquals("pageNumber : 0\npageSize : 0\ntotalPage : 0\ntotalRow : 0", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      List<Object> list0 = page0.getList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      int int0 = page0.getPageSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      int int0 = page0.getTotalRow();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      int int0 = page0.getTotalPage();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Page<Object> page0 = new Page<Object>(linkedList0, (-100), 19, 19, (-100));
      boolean boolean0 = page0.isFirstPage();
      assertEquals(19, page0.getTotalPage());
      assertEquals(19, page0.getPageSize());
      assertFalse(boolean0);
      assertEquals((-100), page0.getPageNumber());
      assertEquals((-100), page0.getTotalRow());
  }
}
