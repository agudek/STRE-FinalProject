/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:19:29 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import com.jfinal.plugin.activerecord.CaseInsensitiveContainerFactory;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class CaseInsensitiveContainerFactory_ESTest extends CaseInsensitiveContainerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CaseInsensitiveContainerFactory.CaseInsensitiveSet caseInsensitiveContainerFactory_CaseInsensitiveSet0 = new CaseInsensitiveContainerFactory.CaseInsensitiveSet();
      CaseInsensitiveContainerFactory.CaseInsensitiveMap<String> caseInsensitiveContainerFactory_CaseInsensitiveMap0 = new CaseInsensitiveContainerFactory.CaseInsensitiveMap<String>();
      Set<String> set0 = caseInsensitiveContainerFactory_CaseInsensitiveMap0.keySet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("OACCZ.`nrVe-_:ZG", "OACCZ.`nrVe-_:ZG");
      caseInsensitiveContainerFactory_CaseInsensitiveMap0.putAll(hashMap0);
      boolean boolean0 = caseInsensitiveContainerFactory_CaseInsensitiveSet0.addAll(set0);
      assertEquals(1, set0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CaseInsensitiveContainerFactory.CaseInsensitiveSet caseInsensitiveContainerFactory_CaseInsensitiveSet0 = new CaseInsensitiveContainerFactory.CaseInsensitiveSet();
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory(true);
      boolean boolean0 = caseInsensitiveContainerFactory_CaseInsensitiveSet0.add(")DT+g/ c2(Rm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory(false);
      CaseInsensitiveContainerFactory.CaseInsensitiveMap<String> caseInsensitiveContainerFactory_CaseInsensitiveMap0 = new CaseInsensitiveContainerFactory.CaseInsensitiveMap<String>();
      String string0 = caseInsensitiveContainerFactory_CaseInsensitiveMap0.put("`=X'", "`=X'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CaseInsensitiveContainerFactory.CaseInsensitiveSet caseInsensitiveContainerFactory_CaseInsensitiveSet0 = new CaseInsensitiveContainerFactory.CaseInsensitiveSet();
      caseInsensitiveContainerFactory_CaseInsensitiveSet0.add("com.jfinal.plugin.activerecord.CaseInsensitiveContainerFactory$CaseInsensitiveMap");
      boolean boolean0 = caseInsensitiveContainerFactory_CaseInsensitiveSet0.addAll(caseInsensitiveContainerFactory_CaseInsensitiveSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory();
      Map<String, Object> map0 = caseInsensitiveContainerFactory0.getColumnsMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory(false);
      Map<String, Object> map0 = caseInsensitiveContainerFactory0.getAttrsMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory();
      Set<String> set0 = caseInsensitiveContainerFactory0.getModifyFlagSet();
      assertTrue(set0.isEmpty());
  }
}
