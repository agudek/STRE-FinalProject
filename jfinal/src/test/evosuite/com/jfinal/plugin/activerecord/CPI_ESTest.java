/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 17:50:00 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.pool.DruidAbstractDataSource;
import com.alibaba.druid.pool.DruidConnectionHolder;
import com.alibaba.druid.pool.DruidPooledConnection;
import com.jfinal.plugin.activerecord.CPI;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.Table;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class CPI_ESTest extends CPI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDriver mockDriver0 = MockDriver.instance;
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "*)Picm.Fq<i\"ns/w", (Properties) null);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        CPI.update("*)Picm.Fq<i\"ns/w", (Connection) mockConnection0, "^w\";p.v'}BoyU", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockConnection mockConnection0 = new MockConnection();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        CPI.paginate((Connection) mockConnection0, 2255, (-1773), "jmx=", "BO(%tFXON+", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Record record0 = new Record();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      CPI.setColumnsMap(record0, hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CPI.setTablePrimaryKey((Table) null, "@j-J!S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.CPI", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockConnection mockConnection0 = new MockConnection();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        CPI.query("Zs5wK|eATX`", (Connection) mockConnection0, "4I'7", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDriver mockDriver0 = new MockDriver();
      Properties properties0 = new Properties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "", properties0);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        CPI.query((Connection) mockConnection0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DruidAbstractDataSource druidAbstractDataSource0 = mock(DruidAbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(druidAbstractDataSource0).createConnectionId();
      doReturn(true).when(druidAbstractDataSource0).isDupCloseLogEnable();
      MockConnection mockConnection0 = new MockConnection();
      DruidConnectionHolder druidConnectionHolder0 = new DruidConnectionHolder(druidAbstractDataSource0, mockConnection0, 8);
      DruidPooledConnection druidPooledConnection0 = new DruidPooledConnection(druidConnectionHolder0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        CPI.find("", (Connection) druidPooledConnection0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DruidAbstractDataSource druidAbstractDataSource0 = mock(DruidAbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(druidAbstractDataSource0).createConnectionId();
      doReturn(false).when(druidAbstractDataSource0).isDupCloseLogEnable();
      MockConnection mockConnection0 = new MockConnection();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DruidConnectionHolder druidConnectionHolder0 = new DruidConnectionHolder(druidAbstractDataSource0, mockConnection0, (-1710L), hashMap0, hashMap0);
      DruidPooledConnection druidPooledConnection0 = new DruidPooledConnection(druidConnectionHolder0);
      // Undeclared exception!
      try { 
        CPI.update((Connection) druidPooledConnection0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        CPI.paginate("", (Connection) null, 1685, 0, "/uaOS", "password", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockConnection mockConnection0 = new MockConnection();
      // Undeclared exception!
      try { 
        CPI.find((Connection) mockConnection0, "ConnectionActiveCount", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CPI.setColumnsMap((Record) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.CPI", e);
      }
  }
}
