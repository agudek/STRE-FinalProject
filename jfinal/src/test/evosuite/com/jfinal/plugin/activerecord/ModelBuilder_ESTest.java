/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:41:49 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockBlob;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.mock.MockNClob;
import com.alibaba.druid.mock.MockResultSet;
import com.alibaba.druid.mock.MockResultSetMetaData;
import com.jfinal.plugin.activerecord.ModelBuilder;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.sql.rowset.RowSetMetaDataImpl;
import javax.sql.rowset.serial.SerialBlob;
import javax.sql.rowset.serial.SerialClob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ModelBuilder_ESTest extends ModelBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      String[] stringArray0 = new String[1];
      modelBuilder0.me.buildLabelNamesAndTypes((ResultSetMetaData) null, stringArray0, (int[]) null);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelBuilder modelBuilder0 = ModelBuilder.me;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[5];
      int[] intArray0 = new int[0];
      try { 
        modelBuilder0.buildLabelNamesAndTypes(rowSetMetaDataImpl0, stringArray0, intArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :1
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelBuilder modelBuilder0 = ModelBuilder.me;
      MockResultSet mockResultSet0 = new MockResultSet((Statement) null);
      ResultSetMetaData resultSetMetaData0 = mockResultSet0.getMetaData();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        modelBuilder0.buildLabelNamesAndTypes(resultSetMetaData0, (String[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ModelBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      char[] charArray0 = new char[0];
      SerialClob serialClob0 = new SerialClob(charArray0);
      String string0 = modelBuilder0.handleClob(serialClob0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelBuilder modelBuilder0 = ModelBuilder.me;
      char[] charArray0 = new char[8];
      SerialClob serialClob0 = new SerialClob(charArray0);
      String string0 = modelBuilder0.handleClob(serialClob0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      String string0 = modelBuilder0.handleClob((Clob) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelBuilder modelBuilder0 = ModelBuilder.me;
      MockNClob mockNClob0 = new MockNClob();
      String string0 = modelBuilder0.handleClob(mockNClob0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      MockBlob mockBlob0 = new MockBlob();
      byte[] byteArray0 = modelBuilder0.handleBlob(mockBlob0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      byte[] byteArray0 = modelBuilder0.handleBlob((Blob) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      byte[] byteArray1 = modelBuilder0.handleBlob(serialBlob0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      MockConnection mockConnection0 = new MockConnection();
      Statement statement0 = mockConnection0.createStatement(2130, 2130);
      MockResultSet mockResultSet0 = new MockResultSet(statement0);
      MockResultSetMetaData mockResultSetMetaData0 = mockResultSet0.getMockMetaData();
      String[] stringArray0 = new String[4];
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        modelBuilder0.buildLabelNamesAndTypes(mockResultSetMetaData0, stringArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelBuilder modelBuilder0 = new ModelBuilder();
      MockConnection mockConnection0 = new MockConnection((MockDriver) null, (String) null, (Properties) null);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, (String) null);
      MockResultSet mockResultSet0 = new MockResultSet(mockCallableStatement0);
      ResultSetMetaData resultSetMetaData0 = mockResultSet0.getMetaData();
      String[] stringArray0 = new String[0];
      int[] intArray0 = new int[9];
      modelBuilder0.buildLabelNamesAndTypes(resultSetMetaData0, stringArray0, intArray0);
      assertEquals(9, intArray0.length);
  }
}
