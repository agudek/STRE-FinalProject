/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:38:38 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.Prop;
import com.jfinal.plugin.activerecord.Sqls;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Sqls_ESTest extends Sqls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sqls.load("");
      Prop prop0 = Sqls.useless("");
      assertNotNull(prop0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sqls.load("");
      String string0 = Sqls.get("", "I(5F+ob4G>yOepS^/B");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sqls.useless((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sqls.load("ISH1AS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties file not found in classpath: ISH1AS
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sqls.load("");
      // Undeclared exception!
      try { 
        Sqls.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Prop prop0 = Sqls.useless("");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sqls.load("");
      Prop prop0 = Sqls.useless("LrFL");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sqls.load("");
      Sqls.load("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sqls.get("", "4`0g60=?^@,v?(%u -");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Init sql propties file by invoking Sqls.load(String fileName) method first.
         //
         verifyException("com.jfinal.plugin.activerecord.Sqls", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sqls.load("");
      // Undeclared exception!
      try { 
        Sqls.get("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sqls.get("{yqC]zI;gG\"nMNY");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Init sql propties file by invoking Sqls.load(String fileName) method first.
         //
         verifyException("com.jfinal.plugin.activerecord.Sqls", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sqls.load("");
      String string0 = Sqls.get("LrFL");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sqls.clear();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sqls.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
