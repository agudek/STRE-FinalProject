/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:20:57 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockArray;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.mock.MockPreparedStatement;
import com.alibaba.druid.mock.MockResultSet;
import com.alibaba.druid.mock.MockStatement;
import com.alibaba.druid.mock.handler.MySqlMockExecuteHandlerImpl;
import com.alibaba.druid.pool.DruidDataSourceC3P0Adapter;
import com.jfinal.plugin.activerecord.Config;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.RecordBuilder;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class RecordBuilder_ESTest extends RecordBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RecordBuilder recordBuilder0 = new RecordBuilder();
      Config config0 = Config.createBrokenConfig();
      MockArray mockArray0 = new MockArray();
      ResultSet resultSet0 = mockArray0.getResultSet();
      List<Record> list0 = recordBuilder0.build(config0, resultSet0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecordBuilder recordBuilder0 = new RecordBuilder();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[5];
      int[] intArray0 = new int[1];
      try { 
        recordBuilder0.buildLabelNamesAndTypes(rowSetMetaDataImpl0, stringArray0, intArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :1
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RecordBuilder recordBuilder0 = RecordBuilder.me;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        recordBuilder0.buildLabelNamesAndTypes((ResultSetMetaData) null, (String[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.RecordBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RecordBuilder recordBuilder0 = RecordBuilder.me;
      Config config0 = Config.createBrokenConfig();
      // Undeclared exception!
      try { 
        recordBuilder0.me.build(config0, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.RecordBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RecordBuilder recordBuilder0 = new RecordBuilder();
      MockDriver mockDriver0 = new MockDriver();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "", (Properties) null);
      MockStatement mockStatement0 = new MockStatement(mockConnection0);
      MockResultSet mockResultSet0 = mockDriver0.createMockResultSet(mockStatement0);
      ResultSetMetaData resultSetMetaData0 = mockResultSet0.getMetaData();
      String[] stringArray0 = new String[2];
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        recordBuilder0.buildLabelNamesAndTypes(resultSetMetaData0, stringArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RecordBuilder recordBuilder0 = new RecordBuilder();
      MockDriver mockDriver0 = new MockDriver();
      MockConnection mockConnection0 = new MockConnection();
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement(mockConnection0, "");
      MockResultSet mockResultSet0 = new MockResultSet(mockCallableStatement0);
      ResultSetMetaData resultSetMetaData0 = mockResultSet0.getMetaData();
      String[] stringArray0 = new String[0];
      int[] intArray0 = new int[1];
      recordBuilder0.buildLabelNamesAndTypes(resultSetMetaData0, stringArray0, intArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RecordBuilder recordBuilder0 = new RecordBuilder();
      MySqlMockExecuteHandlerImpl mySqlMockExecuteHandlerImpl0 = new MySqlMockExecuteHandlerImpl();
      MockDriver mockDriver0 = new MockDriver();
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "NATURAL_INNER_JOIN", properties0);
      MockPreparedStatement mockPreparedStatement0 = new MockPreparedStatement(mockConnection0, "NATURAL_INNER_JOIN");
      ResultSet resultSet0 = mySqlMockExecuteHandlerImpl0.showStatus(mockPreparedStatement0);
      Config config0 = Config.createBrokenConfig();
      List<Record> list0 = recordBuilder0.build(config0, resultSet0);
      assertEquals(1, list0.size());
  }
}
