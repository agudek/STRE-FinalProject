/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:36:44 GMT 2018
 */

package com.jfinal.plugin.activerecord.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.plugin.activerecord.sql.NameSpaceDirective;
import com.jfinal.template.EngineConfig;
import com.jfinal.template.Env;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Logic;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Writer;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.Continue;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class NameSpaceDirective_ESTest extends NameSpaceDirective_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      Continue continue0 = Continue.me;
      nameSpaceDirective0.setStat(continue0);
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Scope scope0 = new Scope(linkedHashMap0, (Map<String, Object>) null);
      Env env0 = new Env((EngineConfig) null);
      nameSpaceDirective0.exec(env0, scope0, (Writer) null);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      // Undeclared exception!
      try { 
        nameSpaceDirective0.setExprList((ExprList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      CharWriter charWriter0 = new CharWriter(0);
      // Undeclared exception!
      try { 
        nameSpaceDirective0.exec((Env) null, (Scope) null, charWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Scope scope0 = new Scope(linkedHashMap0, (Map<String, Object>) null);
      Env env0 = new Env((EngineConfig) null);
      // Undeclared exception!
      try { 
        nameSpaceDirective0.exec(env0, scope0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.GT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      com.jfinal.template.expr.ast.Map map0 = new com.jfinal.template.expr.ast.Map(linkedHashMap0);
      Logic logic0 = new Logic(sym0, map0, (Location) null);
      linkedList0.add((Expr) logic0);
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        nameSpaceDirective0.setExprList(exprList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #namespace directive must be String
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      linkedList0.add((Expr) exprList0);
      linkedList0.push(exprList0);
      ExprList exprList1 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        nameSpaceDirective0.setExprList(exprList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only one parameter allowed for #namespace directive
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      // Undeclared exception!
      try { 
        nameSpaceDirective0.setExprList(exprList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #namespace directive can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.FALSE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        nameSpaceDirective0.setExprList(exprList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #namespace directive must be String
         //
         verifyException("com.jfinal.plugin.activerecord.sql.NameSpaceDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NameSpaceDirective nameSpaceDirective0 = new NameSpaceDirective();
      boolean boolean0 = nameSpaceDirective0.hasEnd();
      assertTrue(boolean0);
  }
}
