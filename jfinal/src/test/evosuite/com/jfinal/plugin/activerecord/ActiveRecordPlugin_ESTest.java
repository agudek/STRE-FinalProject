/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:47:35 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidDataSourceC3P0Adapter;
import com.jfinal.plugin.activerecord.ActiveRecordPlugin;
import com.jfinal.plugin.activerecord.CaseInsensitiveContainerFactory;
import com.jfinal.plugin.activerecord.Config;
import com.jfinal.plugin.activerecord.DbKit;
import com.jfinal.plugin.activerecord.IContainerFactory;
import com.jfinal.plugin.activerecord.IDataSourceProvider;
import com.jfinal.plugin.activerecord.IDbProFactory;
import com.jfinal.plugin.activerecord.OrderedFieldContainerFactory;
import com.jfinal.plugin.activerecord.cache.EhCache;
import com.jfinal.plugin.activerecord.cache.ICache;
import com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect;
import com.jfinal.plugin.activerecord.dialect.Dialect;
import com.jfinal.plugin.activerecord.dialect.MysqlDialect;
import com.jfinal.plugin.activerecord.dialect.OracleDialect;
import com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect;
import com.jfinal.plugin.activerecord.sql.SqlKit;
import com.jfinal.plugin.c3p0.C3p0Plugin;
import com.jfinal.plugin.druid.DruidPlugin;
import com.jfinal.template.source.FileSource;
import com.jfinal.template.source.ISource;
import com.mchange.v2.c3p0.DriverManagerDataSource;
import com.mchange.v2.c3p0.PoolBackedDataSource;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ActiveRecordPlugin_ESTest extends ActiveRecordPlugin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      activeRecordPlugin0.setTransactionLevel(1);
      assertEquals(1, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) oracleDialect0, (IContainerFactory) orderedFieldContainerFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dialect can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory(true);
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((IContainerFactory) caseInsensitiveContainerFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      DbKit.addConfig(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.DbKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource(false);
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin(driverManagerDataSource0, 1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource(true);
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin(driverManagerDataSource0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoolBackedDataSource poolBackedDataSource0 = new PoolBackedDataSource(false);
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("dialect can not be null", poolBackedDataSource0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("", "", "h,C");
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("h,C", druidPlugin0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("", "", "", "");
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin(druidPlugin0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      EhCache ehCache0 = new EhCache();
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) ansiSqlDialect0, (IContainerFactory) orderedFieldContainerFactory0, (ICache) ehCache0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      EhCache ehCache0 = new EhCache();
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) sqlite3Dialect0, (IContainerFactory) null, (ICache) ehCache0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // containerFactory can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EhCache ehCache0 = new EhCache();
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) null, (IContainerFactory) orderedFieldContainerFactory0, (ICache) ehCache0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dialect can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("8fs?z,,@Q[M", (IDataSourceProvider) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataSourceProvider can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("Vph", "", "z{()DK4");
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("", druidPlugin0, (-889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configName can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("|r#/*'O8uo<~\"yp/t]", "l", (String) null, "remove: cache [{}] key [{}] soft locked in foreign transaction, soft lock died, retrying...");
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin(" interval ", druidPlugin0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("u>+}{] /hWI", driverManagerDataSource0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DruidDataSource druidDataSource0 = new DruidDataSource(true);
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("", druidDataSource0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configName can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("main", (DataSource) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataSource can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      SqlKit sqlKit0 = activeRecordPlugin0.getSqlKit();
      assertNull(sqlKit0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory(true);
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) mysqlDialect0, (IContainerFactory) caseInsensitiveContainerFactory0, (ICache) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cache can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      DruidDataSource druidDataSource0 = new DruidDataSource();
      config0.dataSource = (DataSource) druidDataSource0;
      // Undeclared exception!
      try { 
        activeRecordPlugin0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.start();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ActiveRecord start error: ActiveRecordPlugin need DataSource or DataSourceProvider
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      activeRecordPlugin0.setPrimaryKey("vE.J2.8`sJpD", "vE.J2.8`sJpD");
      assertNull(activeRecordPlugin0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.setDbProFactory((IDbProFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dbProFactory can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      IDbProFactory iDbProFactory0 = config0.getDbProFactory();
      ActiveRecordPlugin activeRecordPlugin1 = activeRecordPlugin0.setDbProFactory(iDbProFactory0);
      assertSame(activeRecordPlugin0, activeRecordPlugin1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.setContainerFactory((IContainerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // containerFactory can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      IContainerFactory iContainerFactory0 = IContainerFactory.defaultContainerFactory;
      ActiveRecordPlugin activeRecordPlugin1 = activeRecordPlugin0.setContainerFactory(iContainerFactory0);
      assertSame(activeRecordPlugin0, activeRecordPlugin1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      activeRecordPlugin0.setDialect(ansiSqlDialect0);
      assertEquals(4, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.setCache((ICache) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cache can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      EhCache ehCache0 = new EhCache();
      ActiveRecordPlugin activeRecordPlugin1 = activeRecordPlugin0.setCache(ehCache0);
      assertNull(activeRecordPlugin1.getDevMode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin((Config) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      C3p0Plugin c3p0Plugin0 = new C3p0Plugin("numUnclosedOrphanedConnectionsDefaultUser", "numUnclosedOrphanedConnectionsDefaultUser", "numUnclosedOrphanedConnectionsDefaultUser");
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin(c3p0Plugin0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      FileSource fileSource0 = new FileSource("+f-dE6RXs&shh4@joG", "+f-dE6RXs&shh4@joG", "com.jfinal.plugin.activerecord.ActiveRecordPlugin");
      // Undeclared exception!
      try { 
        activeRecordPlugin0.addSqlTemplate((ISource) fileSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin(driverManagerDataSource0, 10002);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transactionLevel only be 0, 1, 2, 4, 8
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.getEngine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.setDevMode(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.addSqlTemplate("cache can not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      Boolean boolean0 = activeRecordPlugin0.getDevMode();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      activeRecordPlugin0.setShowSql(true);
      assertTrue(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) mysqlDialect0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      boolean boolean0 = activeRecordPlugin0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.setTransactionLevel((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transactionLevel only be 0, 1, 2, 4, 8
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("", druidDataSourceC3P0Adapter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configName can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      Config config1 = activeRecordPlugin0.getConfig();
      assertSame(config0, config1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("", "", "", "");
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin("", druidPlugin0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configName can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((Dialect) null, (IContainerFactory) orderedFieldContainerFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dialect can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        ActiveRecordPlugin.useAsDataTransfer((IContainerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // containerFactory can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin((IDataSourceProvider) null, 33554432);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataSourceProvider can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin((DataSource) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataSource can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      ActiveRecordPlugin activeRecordPlugin0 = new ActiveRecordPlugin(config0);
      // Undeclared exception!
      try { 
        activeRecordPlugin0.setBaseSqlTemplatePath("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ActiveRecordPlugin activeRecordPlugin0 = null;
      try {
        activeRecordPlugin0 = new ActiveRecordPlugin((IDataSourceProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataSourceProvider can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.ActiveRecordPlugin", e);
      }
  }
}
