/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:35:43 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockArray;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.mock.MockStatement;
import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidDataSourceC3P0Adapter;
import com.jfinal.plugin.activerecord.CaseInsensitiveContainerFactory;
import com.jfinal.plugin.activerecord.Config;
import com.jfinal.plugin.activerecord.IContainerFactory;
import com.jfinal.plugin.activerecord.OrderedFieldContainerFactory;
import com.jfinal.plugin.activerecord.cache.EhCache;
import com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect;
import com.jfinal.plugin.activerecord.dialect.Dialect;
import com.jfinal.plugin.activerecord.dialect.OracleDialect;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mchange.v2.c3p0.DriverManagerDataSource;
import com.mchange.v2.c3p0.PoolBackedDataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Config_ESTest extends Config_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      // Undeclared exception!
      try { 
        config0.setDevMode(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DruidDataSource druidDataSource0 = new DruidDataSource(false);
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      EhCache ehCache0 = new EhCache();
      Config config0 = null;
      try {
        config0 = new Config("Dialect can not be null", druidDataSource0, ansiSqlDialect0, false, true, (-1), orderedFieldContainerFactory0, ehCache0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transactionLevel only be 0, 1, 2, 4, 8
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      // Undeclared exception!
      try { 
        config0.setTransactionLevel(1005);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transactionLevel only be 0, 1, 2, 4, 8
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      DruidDataSource druidDataSource0 = new DruidDataSource();
      config0.dataSource = (DataSource) druidDataSource0;
      // Undeclared exception!
      try { 
        config0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Config config0 = null;
      try {
        config0 = new Config("e{z>]wG}(Ml?hl3yv", (DataSource) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DataSource can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      EhCache ehCache0 = new EhCache();
      Config config0 = null;
      try {
        config0 = new Config("Config name can not be blank", (DataSource) null, ansiSqlDialect0, false, false, (-679), (IContainerFactory) null, ehCache0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DataSource can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      MockDriver mockDriver0 = new MockDriver();
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "", properties0);
      config0.close((Connection) mockConnection0);
      assertTrue(mockConnection0.isClosed());
      assertEquals(4, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.close((Connection) null);
      assertFalse(config0.isDevMode());
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      MockConnection mockConnection0 = new MockConnection();
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("%5up}ZVzF`K 12=}zX", (-2482), (-2482));
      MockArray mockArray0 = new MockArray();
      ResultSet resultSet0 = mockArray0.getResultSet();
      config0.close(resultSet0, (Statement) preparedStatement0, (Connection) mockConnection0);
      assertTrue(preparedStatement0.isClosed());
      assertEquals(4, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      MockDriver mockDriver0 = new MockDriver();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      Properties properties0 = driverManagerDataSource0.getProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "U", properties0);
      MockStatement mockStatement0 = mockDriver0.createMockStatement(mockConnection0);
      config0.close((ResultSet) null, (Statement) mockStatement0, (Connection) mockConnection0);
      assertTrue(mockStatement0.isClosed());
      assertFalse(config0.isDevMode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      boolean boolean0 = config0.isInTransaction();
      assertFalse(boolean0);
      assertFalse(config0.isShowSql());
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isDevMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.showSql = true;
      // Undeclared exception!
      try { 
        config0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Config config0 = null;
      try {
        config0 = new Config("(tC}cv]", (DataSource) null, (-1040));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transactionLevel only be 0, 1, 2, 4, 8
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory();
      EhCache ehCache0 = new EhCache();
      Config config0 = null;
      try {
        config0 = new Config(" DROP NOT NULL", druidDataSourceC3P0Adapter0, ansiSqlDialect0, true, true, 8, caseInsensitiveContainerFactory0, ehCache0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      Config config0 = null;
      try {
        config0 = new Config("propertyCycle -> ", driverManagerDataSource0, 2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      assertEquals(4, config0.getTransactionLevel());
      
      config0.setTransactionLevel(1);
      assertEquals(1, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoolBackedDataSource poolBackedDataSource0 = new PoolBackedDataSource(false);
      OracleDialect oracleDialect0 = new OracleDialect();
      EhCache ehCache0 = new EhCache();
      Config config0 = null;
      try {
        config0 = new Config(" is null", poolBackedDataSource0, oracleDialect0, false, false, 0, (IContainerFactory) null, ehCache0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ContainerFactory can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DruidDataSource druidDataSource0 = new DruidDataSource(false);
      Config config0 = null;
      try {
        config0 = new Config("w.0s$m&", druidDataSource0, (Dialect) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dialect can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DruidDataSource druidDataSource0 = new DruidDataSource(true);
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      EhCache ehCache0 = new EhCache();
      Config config0 = null;
      try {
        config0 = new Config("", druidDataSource0, (Dialect) null, true, false, (-1), orderedFieldContainerFactory0, ehCache0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config name can not be blank
         //
         verifyException("com.jfinal.plugin.activerecord.Config", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      boolean boolean0 = config0.isDevMode();
      assertFalse(boolean0);
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getDataSource();
      assertFalse(config0.isDevMode());
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getThreadLocalConnection();
      assertFalse(config0.isShowSql());
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isDevMode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getCache();
      assertFalse(config0.isShowSql());
      assertFalse(config0.isDevMode());
      assertEquals(4, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getDbProFactory();
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isShowSql());
      assertFalse(config0.isDevMode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getSqlKit();
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isDevMode());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComboPooledDataSource comboPooledDataSource0 = new ComboPooledDataSource(false);
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      Config config0 = null;
      try {
        config0 = new Config("N=q7/f9!K8#,4`$", comboPooledDataSource0, ansiSqlDialect0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getDialect();
      assertFalse(config0.isShowSql());
      assertFalse(config0.isDevMode());
      assertEquals(4, config0.getTransactionLevel());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.removeThreadLocalConnection();
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isShowSql());
      assertFalse(config0.isDevMode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getContainerFactory();
      assertFalse(config0.isDevMode());
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.setThreadLocalConnection((Connection) null);
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isDevMode());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      boolean boolean0 = config0.isShowSql();
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isDevMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      config0.getName();
      assertEquals(4, config0.getTransactionLevel());
      assertFalse(config0.isDevMode());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      int int0 = config0.getTransactionLevel();
      assertEquals(4, int0);
      assertFalse(config0.isDevMode());
      assertFalse(config0.isShowSql());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DruidDataSource druidDataSource0 = new DruidDataSource();
      Config config0 = null;
      try {
        config0 = new Config("^$WBu|K,Qon=-=\"A~", druidDataSource0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource(false);
      Config config0 = null;
      try {
        config0 = new Config("*s", driverManagerDataSource0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.Engine
         //
         verifyException("com.jfinal.plugin.activerecord.sql.SqlKit", e);
      }
  }
}
