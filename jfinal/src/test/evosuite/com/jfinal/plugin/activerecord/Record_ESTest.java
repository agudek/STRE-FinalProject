/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:02:08 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.pool.DruidDataSource;
import com.jfinal.plugin.activerecord.Config;
import com.jfinal.plugin.activerecord.DaoContainerFactory;
import com.jfinal.plugin.activerecord.DbKit;
import com.jfinal.plugin.activerecord.Record;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import javax.security.auth.callback.NameCallback;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Record_ESTest extends Record_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Record record0 = new Record();
      Record record1 = record0.clear();
      record1.equals(record0);
      Object[] objectArray0 = record1.getColumnValues();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Record record0 = new Record();
      Timestamp timestamp0 = record0.getTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Record record0 = new Record();
      Long long0 = new Long((-2230L));
      record0.set("Hf/s2V(", long0);
      Long long1 = record0.getLong("Hf/s2V(");
      assertEquals((-2230L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Record record0 = new Record();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Record record1 = record0.set("mj7R", bigDecimal0);
      Double double0 = record1.getDouble("mj7R");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Record record0 = new Record();
      record0.set("", "");
      Map<String, Object> map0 = record0.getColumns();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Record record0 = new Record();
      Boolean boolean0 = record0.get((String) null, (Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Record record0 = new Record();
      record0.hashCode();
      // Undeclared exception!
      try { 
        record0.setContainerFactoryByConfigName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config not found: null
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Record record0 = new Record();
      Map<String, Object> map0 = DaoContainerFactory.daoMap;
      // Undeclared exception!
      try { 
        record0.setColumns(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dao \u53EA\u5141\u8BB8\u8C03\u7528\u67E5\u8BE2\u65B9\u6CD5
         //
         verifyException("com.jfinal.plugin.activerecord.DaoContainerFactory$DaoMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Record record0 = new Record();
      // Undeclared exception!
      try { 
        record0.setColumns((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Record record0 = new Record();
      // Undeclared exception!
      try { 
        record0.setColumns((Record) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Record record0 = new Record();
      Map<String, Object> map0 = DaoContainerFactory.daoMap;
      record0.setColumnsMap(map0);
      String string0 = "";
      // Undeclared exception!
      try { 
        record0.remove("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dao \u53EA\u5141\u8BB8\u8C03\u7528\u67E5\u8BE2\u65B9\u6CD5
         //
         verifyException("com.jfinal.plugin.activerecord.DaoContainerFactory$DaoMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Record record0 = new Record();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      record0.setColumnsMap(hashtable0);
      // Undeclared exception!
      try { 
        record0.getTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Record record0 = new Record();
      Double double0 = new Double(2578.1434);
      record0.set("Config not found: ", double0);
      // Undeclared exception!
      try { 
        record0.getTime("Config not found: ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.sql.Time
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Record record0 = new Record();
      record0.set("SHOW DATABASES", "SHOW DATABASES");
      // Undeclared exception!
      try { 
        record0.getShort("SHOW DATABASES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Record record0 = new Record();
      record0.set("o2hjEMnYUTx4o6_l\"", "o2hjEMnYUTx4o6_l\"");
      // Undeclared exception!
      try { 
        record0.getNumber("o2hjEMnYUTx4o6_l\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Record record0 = new Record();
      record0.set("SHOW DATABASES", "SHOW DATABASES");
      // Undeclared exception!
      try { 
        record0.getLong("SHOW DATABASES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Record record0 = new Record();
      record0.set("SHOW DATABASES", "SHOW DATABASES");
      // Undeclared exception!
      try { 
        record0.getInt("SHOW DATABASES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Record record0 = new Record();
      record0.set("SHOW DATABASES", "SHOW DATABASES");
      // Undeclared exception!
      try { 
        record0.getFloat("SHOW DATABASES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Record record0 = new Record();
      Record record1 = record0.set("\ntotalRow : ", "\ntotalRow : ");
      // Undeclared exception!
      try { 
        record1.getDouble("\ntotalRow : ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Record record0 = new Record();
      Double double0 = new Double(2578.1434);
      record0.set("Config not found: ", double0);
      // Undeclared exception!
      try { 
        record0.getDate("Config not found: ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.util.Date
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Record record0 = new Record();
      Map<String, Object> map0 = record0.getColumns();
      record0.set("vi", map0);
      // Undeclared exception!
      try { 
        record0.getBoolean("vi");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Boolean
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Record record0 = new Record();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      record0.setColumnsMap(hashtable0);
      // Undeclared exception!
      try { 
        record0.getBigInteger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Record record0 = new Record();
      record0.set("te", "te");
      // Undeclared exception!
      try { 
        record0.getBigInteger("te");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.math.BigInteger
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Record record0 = new Record();
      record0.set("SHOW DATABASES", "SHOW DATABASES");
      // Undeclared exception!
      try { 
        record0.getBigDecimal("SHOW DATABASES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.math.BigDecimal
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Record record0 = new Record();
      Record record1 = new Record();
      record0.setColumns(record1);
      record1.toString();
      Double double0 = record1.getDouble("");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Record record0 = new Record();
      Record record1 = record0.keep((String) null);
      String[] stringArray0 = new String[9];
      Record record2 = record1.remove(stringArray0);
      assertSame(record2, record1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Record record0 = new Record();
      Record record1 = new Record();
      record0.setColumns(record1);
      String string0 = record1.toJson();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Record record0 = new Record();
      Record record1 = new Record();
      record0.equals(record1);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Record record0 = new Record();
      Record record1 = record0.set("SHOW DATABASES", "SHOW DATABASES");
      DruidDataSource druidDataSource0 = new DruidDataSource(true);
      Map<String, Object> map0 = druidDataSource0.getStatDataForMBean();
      Record record2 = record1.setColumns(map0);
      record0.getByte("x+V_eDd");
      String string0 = record0.toString();
      String string1 = record2.getStr("SHOW DATABASES");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Record record0 = new Record();
      record0.set("SHOW DATABASES", "SHOW DATABASES");
      record0.getByte("x+V_eDd");
      record0.toString();
      Record record1 = record0.keep("SHOW DATABASES");
      assertSame(record1, record0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Record record0 = new Record();
      record0.getLong("=8");
      record0.getShort((String) null);
      String string0 = record0.getStr("com.jfinal.plugin.activerecord.Record");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Record record0 = new Record();
      record0.remove((String[]) null);
      record0.getFloat("fy#e");
      String string0 = record0.getStr("com.jfinal.plugin.activerecord.Record");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Record record0 = new Record();
      String string0 = "Config not found: ";
      Double double0 = new Double(2578.1434);
      Double.sum(2578.1434, 2578.1434);
      record0.set("Config not found: ", double0);
      String[] stringArray0 = new String[2];
      record0.getDouble("Config not found: ");
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Record record0 = new Record();
      Double double0 = new Double(2578.1434);
      Double.sum(2578.1434, 2578.1434);
      Record record1 = record0.set("Config not found: ", double0);
      String[] stringArray0 = new String[2];
      record0.getInt("Config not found: ");
      record1.setColumnsMap((Map<String, Object>) null);
      assertSame(record1, record0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Record record0 = new Record();
      Double double0 = new Double(2578.1434);
      record0.getInt((String) null);
      record0.setColumnsMap((Map<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Record record0 = new Record();
      String string0 = "wa";
      record0.get("wa", (Object) "wa");
      BigInteger bigInteger0 = record0.getBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Record record0 = new Record();
      record0.getColumnNames();
      Record record1 = record0.keep("fy#e");
      Time time0 = record1.getTime("derby");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Record record0 = new Record();
      Double double0 = new Double(2578.1434);
      Double.sum(2578.1434, 2578.1434);
      Record record1 = record0.set("Config not found: ", double0);
      record1.getLong("Config not found: ");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Config not found: ";
      record0.keep(stringArray0);
      record1.setColumnsMap((Map<String, Object>) null);
      assertSame(record1, record0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Record record0 = new Record();
      record0.toJson();
      record0.getNumber("Z8q#s*");
      record0.set("te", "te");
      Object object0 = new Object();
      boolean boolean0 = record0.equals(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Record record1 = new Record();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{}";
      stringArray0[1] = "Z8q#s*";
      stringArray0[8] = "Z8q#s*";
      record1.keep(stringArray0);
      boolean boolean1 = record0.equals(record1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Record record0 = new Record();
      String[] stringArray0 = new String[0];
      record0.keep(stringArray0);
      BigInteger bigInteger0 = record0.getBigInteger("i6O#kED");
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Record record0 = new Record();
      Record record1 = record0.keep((String[]) null);
      Time time0 = record1.getTime("derby");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Record record0 = new Record();
      String[] stringArray0 = record0.getColumnNames();
      String string0 = record0.getStr("");
      record0.remove(stringArray0);
      Boolean boolean0 = record0.getBoolean(string0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Record record0 = new Record();
      Config config0 = Config.createBrokenConfig();
      DbKit.config = config0;
      record0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Record record0 = new Record();
      // Undeclared exception!
      try { 
        record0.setContainerFactoryByConfigName("hQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config not found: hQ
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Record record0 = new Record();
      String string0 = null;
      record0.getBigDecimal((String) null);
      Record record1 = record0.removeNullValueColumns();
      Properties properties0 = new Properties();
      BigInteger bigInteger0 = record1.getBigInteger("a");
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Record record0 = new Record();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{j{y-c?g[U|");
      record0.getDate(", ");
      Record record1 = record0.removeNullValueColumns();
      assertSame(record1, record0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Record record0 = new Record();
      String string0 = null;
      record0.getBigDecimal((String) null);
      Record record1 = record0.removeNullValueColumns();
      Properties properties0 = new Properties();
      String string1 = "R)I-#f;h7y";
      Record record2 = record1.clear();
      record2.get((String) null);
      record2.getColumns();
      record0.getLong("+TDDL");
      record1.toString();
      String[] stringArray0 = new String[1];
      record1.set("", "a");
      // Undeclared exception!
      try { 
        record0.getTimestamp("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.sql.Timestamp
         //
         verifyException("com.jfinal.plugin.activerecord.Record", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Record record0 = new Record();
      String string0 = record0.toString();
      record0.remove("{}");
      Long long0 = record0.getLong(string0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Record record0 = new Record();
      byte[] byteArray0 = record0.getBytes("{}");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Record record0 = new Record();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DruidDataSource druidDataSource0 = new DruidDataSource(false);
      Map<String, Object> map0 = druidDataSource0.getStatDataForMBean();
      Record record1 = record0.setColumns(map0);
      record0.getNumber(", ");
      druidDataSource0.getUserCallback();
      druidDataSource0.setUserCallback((NameCallback) null);
      Record record2 = record0.removeNullValueColumns();
      record0.getColumnNames();
      record2.toJson();
      Object[] objectArray0 = record1.getColumnValues();
      assertEquals(35, objectArray0.length);
  }
}
