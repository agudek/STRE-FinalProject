/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:33:47 GMT 2018
 */

package com.jfinal.plugin.activerecord.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.mock.MockPreparedStatement;
import com.alibaba.druid.pool.DruidConnectionHolder;
import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidPooledConnection;
import com.alibaba.druid.sql.visitor.SchemaStatVisitor;
import com.jfinal.plugin.activerecord.OrderedFieldContainerFactory;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.Table;
import com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mchange.v2.c3p0.DriverManagerDataSource;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class PostgreSqlDialect_ESTest extends PostgreSqlDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = postgreSqlDialect0.forPaginate((-678), (-3254), stringBuilder0);
      assertEquals(" limit -3254 offset 2209466", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      DruidDataSource druidDataSource0 = new DruidDataSource();
      MockConnection mockConnection0 = new MockConnection();
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      Map<String, Object> map0 = orderedFieldContainerFactory0.getAttrsMap();
      DruidConnectionHolder druidConnectionHolder0 = new DruidConnectionHolder(druidDataSource0, mockConnection0, 0, map0, map0);
      DruidPooledConnection druidPooledConnection0 = new DruidPooledConnection(druidConnectionHolder0);
      PreparedStatement preparedStatement0 = druidPooledConnection0.prepareStatement("", 0, 3);
      Record record0 = new Record();
      String[] stringArray0 = new String[1];
      try { 
        postgreSqlDialect0.getRecordGeneratedKey(preparedStatement0, record0, stringArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Error
         //
         verifyException("com.alibaba.druid.pool.DruidDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      StringBuilder stringBuilder0 = new StringBuilder();
      MockDriver mockDriver0 = MockDriver.instance;
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource(true);
      Properties properties0 = driverManagerDataSource0.getProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection((MockDriver) null, "12299.0\" limit 0 offset 0", properties0);
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      Map<String, Object> map0 = orderedFieldContainerFactory0.getColumnsMap();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement(mockConnection0, "j:u");
      List<Object> list0 = mockCallableStatement0.getParameters();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forModelUpdate((Table) null, map0, set0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      StringBuilder stringBuilder0 = new StringBuilder();
      OrderedFieldContainerFactory orderedFieldContainerFactory0 = new OrderedFieldContainerFactory();
      Map<String, Object> map0 = orderedFieldContainerFactory0.getColumnsMap();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forModelSave((Table) null, map0, stringBuilder0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forModelDeleteById((Table) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[0];
      Record record0 = new Record();
      MockDriver mockDriver0 = new MockDriver();
      DruidDataSource druidDataSource0 = new DruidDataSource(true);
      Properties properties0 = druidDataSource0.getConnectProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "", properties0);
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement(mockConnection0, "M {B)/_*@[");
      List<Object> list0 = mockCallableStatement0.getParameters();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forDbUpdate("", stringArray0, stringArray0, record0, (StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "t$QqgCqXz+^no";
      stringArray0[1] = "t$QqgCqXz+^no";
      stringArray0[2] = "t$QqgCqXz+^no";
      stringArray0[3] = "t$QqgCqXz+^no";
      Object[] objectArray0 = new Object[2];
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "t$QqgCqXz+^no");
      MockConnection mockConnection0 = new MockConnection();
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "t$QqgCqXz+^no");
      List<Object> list0 = mockCallableStatement0.getParameters();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forDbUpdate("t$QqgCqXz+^no", stringArray0, objectArray0, record0, stringBuilder0, list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[6];
      Record record0 = new Record();
      SchemaStatVisitor schemaStatVisitor0 = new SchemaStatVisitor();
      List<Object> list0 = schemaStatVisitor0.getParameters();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forDbSave("", stringArray0, record0, (StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forDbFindById("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forDbDeleteById((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        postgreSqlDialect0.fillStatement((PreparedStatement) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      MockDriver mockDriver0 = MockDriver.instance;
      MockConnection mockConnection0 = new MockConnection();
      MockPreparedStatement mockPreparedStatement0 = mockDriver0.createMockPreparedStatement(mockConnection0, "pd");
      // Undeclared exception!
      try { 
        postgreSqlDialect0.fillStatement((PreparedStatement) mockPreparedStatement0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[8];
      Record record0 = new Record();
      MockDriver mockDriver0 = new MockDriver();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, " limit ", (Properties) null);
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("Z`X$;xmX", stringArray0);
      // Undeclared exception!
      try { 
        postgreSqlDialect0.getRecordGeneratedKey(preparedStatement0, record0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      MockConnection mockConnection0 = new MockConnection();
      MockPreparedStatement mockPreparedStatement0 = new MockPreparedStatement(mockConnection0, "\" = ?");
      Record record0 = new Record();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        postgreSqlDialect0.getRecordGeneratedKey(mockPreparedStatement0, record0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      postgreSqlDialect0.forDbUpdate("", stringArray0, stringArray0, record0, stringBuilder0, linkedList0);
      assertTrue(linkedList0.contains(""));
      assertEquals("update \"\" set  where \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ?", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      postgreSqlDialect0.forDbSave("", stringArray0, record0, stringBuilder0, linkedList0);
      assertEquals("insert into \"\"() values()", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = postgreSqlDialect0.forDbDeleteById("Ny^", stringArray0);
      assertEquals("delete from \"Ny^\" where \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ?", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = postgreSqlDialect0.forDbFindById("", stringArray0);
      assertEquals("select * from \"\" where \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ? and \"\" = ?", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forModelFindById((Table) null, "*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forModelFindById((Table) null, "*<wO44>TcK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.forPaginate(0, 0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      MockDriver mockDriver0 = new MockDriver();
      ComboPooledDataSource comboPooledDataSource0 = new ComboPooledDataSource();
      Properties properties0 = comboPooledDataSource0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "com.alibaba.druid.sql.ast.SQLParameter$ParameterType", properties0);
      int[] intArray0 = new int[7];
      MockPreparedStatement mockPreparedStatement0 = (MockPreparedStatement)mockConnection0.prepareStatement("", intArray0);
      Object[] objectArray0 = new Object[7];
      postgreSqlDialect0.fillStatement((PreparedStatement) mockPreparedStatement0, objectArray0);
      assertFalse(mockPreparedStatement0.isEscapeProcessing());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String string0 = postgreSqlDialect0.forTableBuilderDoBuild("5u(>");
      assertEquals("select * from \"5u(>\" where 1 = 2", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      MockConnection mockConnection0 = new MockConnection();
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("", 277);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "Z`X$;xmX");
      List<Object> list0 = mockCallableStatement0.getParameters();
      postgreSqlDialect0.fillStatement(preparedStatement0, list0);
      assertFalse(postgreSqlDialect0.isTakeOverDbPaginate());
  }
}
