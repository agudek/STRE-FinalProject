/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:42:38 GMT 2018
 */

package com.jfinal.plugin.activerecord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.mock.MockPreparedStatement;
import com.alibaba.druid.mock.MockStatement;
import com.alibaba.druid.mock.MockStatementBase;
import com.alibaba.druid.mock.handler.MySqlMockExecuteHandlerImpl;
import com.alibaba.druid.pool.DruidDataSourceC3P0Adapter;
import com.jfinal.plugin.activerecord.Config;
import com.jfinal.plugin.activerecord.DbKit;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class DbKit_ESTest extends DbKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDriver mockDriver0 = new MockDriver();
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "net.sf.ehcache.search.SearchException", properties0);
      MockPreparedStatement mockPreparedStatement0 = mockDriver0.createMockPreparedStatement(mockConnection0, "");
      DbKit.close(mockPreparedStatement0);
      assertEquals("", mockPreparedStatement0.getSql());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DbKit.close((Statement) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MySqlMockExecuteHandlerImpl mySqlMockExecuteHandlerImpl0 = new MySqlMockExecuteHandlerImpl();
      ResultSet resultSet0 = mySqlMockExecuteHandlerImpl0.showStatus((MockStatementBase) null);
      DbKit.close(resultSet0, (Statement) null);
      assertTrue(resultSet0.isClosed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MySqlMockExecuteHandlerImpl mySqlMockExecuteHandlerImpl0 = new MySqlMockExecuteHandlerImpl();
      MockDriver mockDriver0 = MockDriver.instance;
      ResultSet resultSet0 = mySqlMockExecuteHandlerImpl0.showStatus((MockStatementBase) null);
      DruidDataSourceC3P0Adapter druidDataSourceC3P0Adapter0 = new DruidDataSourceC3P0Adapter();
      Properties properties0 = druidDataSourceC3P0Adapter0.getProperties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "Config can not be null", properties0);
      MockStatement mockStatement0 = mockDriver0.createMockStatement(mockConnection0);
      DbKit.close(resultSet0, mockStatement0);
      assertTrue(mockStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDriver mockDriver0 = new MockDriver();
      MockConnection mockConnection0 = new MockConnection();
      MockCallableStatement mockCallableStatement0 = mockDriver0.createMockCallableStatement(mockConnection0, "");
      DbKit.close((ResultSet) null, mockCallableStatement0);
      assertTrue(mockCallableStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Config config0 = DbKit.removeConfig("Config can not be null");
      assertNull(config0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbKit.addConfig((Config) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config can not be null
         //
         verifyException("com.jfinal.plugin.activerecord.DbKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Config config0 = Config.createBrokenConfig();
      // Undeclared exception!
      try { 
        DbKit.addConfig(config0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config already exists: null
         //
         verifyException("com.jfinal.plugin.activerecord.DbKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set<Map.Entry<String, Config>> set0 = (Set<Map.Entry<String, Config>>)DbKit.getConfigSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Config config0 = DbKit.getConfig();
      assertNull(config0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Config config0 = DbKit.getConfig("constraint ");
      assertNull(config0);
  }
}
