/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:40:05 GMT 2018
 */

package com.jfinal.plugin.activerecord.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.mock.MockPreparedStatement;
import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
import com.jfinal.plugin.activerecord.CaseInsensitiveContainerFactory;
import com.jfinal.plugin.activerecord.Config;
import com.jfinal.plugin.activerecord.ModelBuilder;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.Table;
import com.jfinal.plugin.activerecord.builder.KeepByteAndShortModelBuilder;
import com.jfinal.plugin.activerecord.builder.KeepByteAndShortRecordBuilder;
import com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect;
import com.jfinal.plugin.activerecord.dialect.Dialect;
import com.jfinal.plugin.activerecord.dialect.MysqlDialect;
import com.jfinal.plugin.activerecord.dialect.OracleDialect;
import com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect;
import com.jfinal.plugin.activerecord.dialect.SqlServerDialect;
import com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.ZoneId;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Dialect_ESTest extends Dialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]}{<n-U";
      stringArray0[1] = "]}{<n-U";
      stringArray0[2] = "]}{<n-U";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "]}{<n-U");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      sqlite3Dialect0.forDbUpdate("]}{<n-U", stringArray0, stringArray0, record0, stringBuilder0, linkedList0);
      assertFalse(sqlite3Dialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      MockConnection mockConnection0 = new MockConnection();
      MockCallableStatement mockCallableStatement0 = (MockCallableStatement)mockConnection0.prepareCall("", 0, 0);
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      mysqlDialect0.fillStatementHandleDateType(mockCallableStatement0, list0);
      assertFalse(mysqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      ModelBuilder modelBuilder0 = ModelBuilder.me;
      Dialect dialect0 = oracleDialect0.setModelBuilder(modelBuilder0);
      assertFalse(dialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      assertFalse(postgreSqlDialect0.isKeepByteAndShort());
      
      Dialect dialect0 = postgreSqlDialect0.setKeepByteAndShort(true);
      KeepByteAndShortModelBuilder keepByteAndShortModelBuilder0 = new KeepByteAndShortModelBuilder();
      dialect0.setModelBuilder(keepByteAndShortModelBuilder0);
      assertTrue(postgreSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      sqlServerDialect0.replaceOrderBy("Thread [");
      assertFalse(sqlServerDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      oracleDialect0.replaceOrderBy("");
      assertFalse(oracleDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      ansiSqlDialect0.isTakeOverModelPaginate();
      assertFalse(ansiSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      oracleDialect0.isOracle();
      assertFalse(oracleDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      postgreSqlDialect0.forTableBuilderDoBuild("com.jfinal.plugin.activerecord.dialect.Dialect");
      assertFalse(postgreSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      StringBuilder stringBuilder0 = new StringBuilder();
      postgreSqlDialect0.forPaginate(0, 0, stringBuilder0);
      assertFalse(postgreSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      oracleDialect0.forDbFindById("", stringArray0);
      assertFalse(oracleDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "` where 1 = 2";
      stringArray0[1] = "` where 1 = 2";
      stringArray0[2] = "` where 1 = 2";
      stringArray0[3] = "` where 1 = 2";
      stringArray0[4] = "` where 1 = 2";
      stringArray0[5] = "` where 1 = 2";
      stringArray0[6] = "` where 1 = 2";
      postgreSqlDialect0.forDbDeleteById("` where 1 = 2", stringArray0);
      assertFalse(postgreSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        ansiSqlDialect0.takeOverDbPaginate((Connection) null, 10, 7, (Boolean) null, "DD'|gF$7i!", (StringBuilder) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLASTOutputVisitor sQLASTOutputVisitor0 = new SQLASTOutputVisitor(stringBuilder0);
      List<Object> list0 = sQLASTOutputVisitor0.getParameters();
      CaseInsensitiveContainerFactory caseInsensitiveContainerFactory0 = new CaseInsensitiveContainerFactory();
      Map<String, Object> map0 = caseInsensitiveContainerFactory0.getColumnsMap();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        oracleDialect0.forModelUpdate((Table) null, map0, set0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.OracleDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      // Undeclared exception!
      try { 
        oracleDialect0.forModelFindById((Table) null, "PX5#<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.OracleDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forModelDeleteById((Table) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[9];
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder("HO47OU8,_&P");
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement((MockConnection) null, "S:");
      List<Object> list0 = mockCallableStatement0.getOutParameters();
      // Undeclared exception!
      try { 
        sqlite3Dialect0.forDbUpdate("/xB+?uQh8", (String[]) null, stringArray0, record0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      // Undeclared exception!
      try { 
        mysqlDialect0.forDbFindById("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        oracleDialect0.forDbDeleteById((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.OracleDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        mysqlDialect0.fillStatementHandleDateType((PreparedStatement) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PostgreSqlDialect postgreSqlDialect0 = new PostgreSqlDialect();
      // Undeclared exception!
      try { 
        postgreSqlDialect0.fillStatementHandleDateType((PreparedStatement) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      // Undeclared exception!
      try { 
        mysqlDialect0.fillStatement((PreparedStatement) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DD'|gF$7i!";
      stringArray0[1] = "";
      ansiSqlDialect0.trimPrimaryKeys(stringArray0);
      assertFalse(ansiSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        ansiSqlDialect0.trimPrimaryKeys(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      MockConnection mockConnection0 = new MockConnection();
      CallableStatement callableStatement0 = mockConnection0.prepareCall("T@.tv}z4)G*E1|r", 55, Integer.MAX_VALUE, 55);
      Object[] objectArray0 = new Object[2];
      ansiSqlDialect0.fillStatementHandleDateType(callableStatement0, objectArray0);
      assertFalse(ansiSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      String[] stringArray0 = new String[1];
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLASTOutputVisitor sQLASTOutputVisitor0 = new SQLASTOutputVisitor(stringBuilder0);
      List<Object> list0 = sQLASTOutputVisitor0.getParameters();
      MockConnection mockConnection0 = new MockConnection();
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("", stringArray0);
      sqlite3Dialect0.fillStatement(preparedStatement0, list0);
      assertFalse(sqlite3Dialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      boolean boolean0 = ansiSqlDialect0.isPrimaryKey("", stringArray0);
      assertTrue(boolean0);
      assertFalse(ansiSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[3];
      boolean boolean0 = mysqlDialect0.isPrimaryKey("K);~yj9y", stringArray0);
      assertFalse(boolean0);
      assertFalse(mysqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        mysqlDialect0.fillStatement((PreparedStatement) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      String[] stringArray0 = new String[0];
      MockDriver mockDriver0 = MockDriver.instance;
      ComboPooledDataSource comboPooledDataSource0 = new ComboPooledDataSource();
      Properties properties0 = comboPooledDataSource0.getProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, (String) null, properties0);
      MockPreparedStatement mockPreparedStatement0 = mockDriver0.createMockPreparedStatement(mockConnection0, (String) null);
      mysqlDialect0.fillStatement((PreparedStatement) mockPreparedStatement0, (Object[]) stringArray0);
      assertEquals("1hge14a90dw1hk81ekg|4b", comboPooledDataSource0.getIdentityToken());
      assertEquals("1hge14a90dw1hk81ekg|4b", comboPooledDataSource0.getDataSourceName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      MockConnection mockConnection0 = new MockConnection();
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("", 2712);
      Record record0 = new Record();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        ansiSqlDialect0.getRecordGeneratedKey(preparedStatement0, record0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      MockConnection mockConnection0 = new MockConnection();
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("je", 0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        mysqlDialect0.getRecordGeneratedKey(preparedStatement0, (Record) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      KeepByteAndShortRecordBuilder keepByteAndShortRecordBuilder0 = KeepByteAndShortRecordBuilder.me;
      oracleDialect0.setRecordBuilder(keepByteAndShortRecordBuilder0);
      oracleDialect0.setKeepByteAndShort(false);
      assertFalse(oracleDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      KeepByteAndShortModelBuilder keepByteAndShortModelBuilder0 = new KeepByteAndShortModelBuilder();
      Dialect dialect0 = ansiSqlDialect0.setModelBuilder(keepByteAndShortModelBuilder0);
      dialect0.setKeepByteAndShort(false);
      assertFalse(dialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      assertFalse(sqlServerDialect0.isKeepByteAndShort());
      
      sqlServerDialect0.setKeepByteAndShort(true);
      assertTrue(sqlServerDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      assertFalse(oracleDialect0.isKeepByteAndShort());
      
      Dialect dialect0 = oracleDialect0.setKeepByteAndShort(true);
      KeepByteAndShortRecordBuilder keepByteAndShortRecordBuilder0 = KeepByteAndShortRecordBuilder.me;
      dialect0.setRecordBuilder(keepByteAndShortRecordBuilder0);
      assertTrue(oracleDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        sqlite3Dialect0.takeOverDbPaginate((Connection) null, (-1324), (-4420), (Boolean) null, "v_2wL\"vG*E", (StringBuilder) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You should implements this method in com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MysqlDialect mysqlDialect0 = new MysqlDialect();
      boolean boolean0 = mysqlDialect0.isOracle();
      assertFalse(boolean0);
      assertFalse(mysqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      boolean boolean0 = sqlite3Dialect0.isTakeOverDbPaginate();
      assertFalse(boolean0);
      assertFalse(sqlite3Dialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isTakeOverModelPaginate();
      assertFalse(boolean0);
      assertFalse(sqlServerDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      String string0 = ansiSqlDialect0.getDefaultPrimaryKey();
      assertEquals("id", string0);
      assertFalse(ansiSqlDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AnsiSqlDialect ansiSqlDialect0 = new AnsiSqlDialect();
      KeepByteAndShortRecordBuilder keepByteAndShortRecordBuilder0 = new KeepByteAndShortRecordBuilder();
      Dialect dialect0 = ansiSqlDialect0.setRecordBuilder(keepByteAndShortRecordBuilder0);
      assertFalse(dialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      MockDriver mockDriver0 = MockDriver.instance;
      Properties properties0 = new Properties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "pageNumber : ", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "C3");
      ResultSet resultSet0 = mockCallableStatement0.getResultSet();
      sqlServerDialect0.buildRecordList((Config) null, resultSet0);
      assertFalse(sqlServerDialect0.isKeepByteAndShort());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Sqlite3Dialect sqlite3Dialect0 = new Sqlite3Dialect();
      boolean boolean0 = sqlite3Dialect0.isKeepByteAndShort();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      // Undeclared exception!
      try { 
        oracleDialect0.replaceOrderBy((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Dialect.Holder dialect_Holder0 = new Dialect.Holder();
  }
}
