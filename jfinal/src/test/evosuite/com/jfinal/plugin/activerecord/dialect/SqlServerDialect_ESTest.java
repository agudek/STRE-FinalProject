/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:07:28 GMT 2018
 */

package com.jfinal.plugin.activerecord.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.mock.MockCallableStatement;
import com.alibaba.druid.mock.MockConnection;
import com.alibaba.druid.mock.MockDriver;
import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.sql.visitor.ExportParameterizedOutputVisitor;
import com.alibaba.druid.sql.visitor.SQLEvalVisitorImpl;
import com.alibaba.druid.sql.visitor.SchemaStatVisitor;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.Table;
import com.jfinal.plugin.activerecord.dialect.SqlServerDialect;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import java.sql.PreparedStatement;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SqlServerDialect_ESTest extends SqlServerDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = sqlServerDialect0.forPaginate((-1646), 1168561, stringBuilder0);
      assertEquals("SELECT * FROM ( SELECT row_number() over (order by tempcolumn) temprownumber, * FROM  ( SELECT TOP 1168561 tempcolumn=0,)vip)mvp where temprownumber>0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[7];
      MockDriver mockDriver0 = MockDriver.instance;
      Properties properties0 = new Properties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "P0;xNk zaGS.");
      sqlServerDialect0.fillStatement((PreparedStatement) mockCallableStatement0, (Object[]) stringArray0);
      assertEquals("id", sqlServerDialect0.getDefaultPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forPaginate((-806), (-806), (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      StringBuilder stringBuilder0 = new StringBuilder("9;Da");
      MockDriver mockDriver0 = new MockDriver();
      ComboPooledDataSource comboPooledDataSource0 = new ComboPooledDataSource(true);
      Properties properties0 = comboPooledDataSource0.getProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection((MockDriver) null, "update ", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "insert into");
      List<Object> list0 = mockCallableStatement0.getParameters();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forModelUpdate((Table) null, (Map<String, Object>) null, set0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SQLEvalVisitorImpl sQLEvalVisitorImpl0 = new SQLEvalVisitorImpl();
      List<Object> list0 = sQLEvalVisitorImpl0.getParameters();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forModelSave((Table) null, hashtable0, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forModelFindById((Table) null, "_table_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forModelDeleteById((Table) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SchemaStatVisitor schemaStatVisitor0 = new SchemaStatVisitor();
      List<Object> list0 = schemaStatVisitor0.getParameters();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forDbUpdate("2Wg\"", (String[]) null, (Object[]) null, (Record) null, stringBuilder0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[8];
      ExportParameterizedOutputVisitor exportParameterizedOutputVisitor0 = new ExportParameterizedOutputVisitor();
      List<Object> list0 = exportParameterizedOutputVisitor0.getParameters();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forDbSave(";r[g5+1OLs~7V!<]:Ex", stringArray0, (Record) null, (StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forDbFindById("4", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.forDbDeleteById("9b`pt^#e,63'c-$F", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      MockDriver mockDriver0 = MockDriver.instance;
      DruidDataSource druidDataSource0 = new DruidDataSource();
      Properties properties0 = druidDataSource0.getConnectProperties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "fvm", properties0);
      PreparedStatement preparedStatement0 = mockConnection0.prepareStatement("", (-1));
      // Undeclared exception!
      try { 
        sqlServerDialect0.fillStatement(preparedStatement0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String string0 = sqlServerDialect0.forPaginate(0, 414, stringBuilder0);
      assertEquals("SELECT * FROM ( SELECT row_number() over (order by tempcolumn) temprownumber, * FROM  ( SELECT TOP 414 tempcolumn=0,)vip)mvp where temprownumber>0", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.springframework.jndi.JndiTemplate");
      String string0 = sqlServerDialect0.forPaginate(0, 0, stringBuilder0);
      assertEquals("SELECT * FROM ( SELECT row_number() over (order by tempcolumn) temprownumber, * FROM  ( SELECT TOP 0 tempcolumn=0,org.springframework.jndi.JndiTemplate)vip)mvp where temprownumber>0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "select * from fHjen 'cY*{iCkv44J where 1 = 2";
      stringArray0[1] = "select * from fHjen 'cY*{iCkv44J where 1 = 2";
      stringArray0[2] = "select * from fHjen 'cY*{iCkv44J where 1 = 2";
      stringArray0[3] = "fHjen 'cY*{iCkv44J";
      stringArray0[4] = "fHjen 'cY*{iCkv44J";
      stringArray0[5] = "fHjen 'cY*{iCkv44J";
      stringArray0[6] = "";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder("fHjen 'cY*{iCkv44J");
      MockDriver mockDriver0 = MockDriver.instance;
      Properties properties0 = new Properties();
      MockConnection mockConnection0 = new MockConnection(mockDriver0, "", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "P0;xNk zaGS.");
      List<Object> list0 = mockCallableStatement0.getParameters();
      sqlServerDialect0.forDbUpdate("select * from fHjen 'cY*{iCkv44J where 1 = 2", stringArray0, stringArray0, record0, stringBuilder0, list0);
      assertFalse(list0.isEmpty());
      assertEquals(1001L, mockConnection0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "LM,/>3bW;`";
      stringArray0[1] = "LM,/>3bW;`";
      stringArray0[2] = "LM,/>3bW;`";
      stringArray0[3] = "LM,/>3bW;`";
      stringArray0[4] = "LM,/>3bW;`";
      Record record0 = new Record();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "LM,/>3bW;`");
      SchemaStatVisitor schemaStatVisitor0 = new SchemaStatVisitor();
      List<Object> list0 = schemaStatVisitor0.getParameters();
      sqlServerDialect0.forDbSave("LM,/>3bW;`", stringArray0, record0, stringBuilder0, list0);
      assertEquals("LM,/>3bW;`insert into LM,/>3bW;`() values()", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "mR*iVsu";
      stringArray0[1] = "mR*iVsu";
      stringArray0[2] = "mR*iVsu";
      stringArray0[3] = "mR*iVsu";
      String string0 = sqlServerDialect0.forDbDeleteById("TT=f;uO{", stringArray0);
      assertEquals("delete from TT=f;uO{ where mR*iVsu = ? and mR*iVsu = ? and mR*iVsu = ? and mR*iVsu = ?", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "mR*iVsu";
      stringArray0[1] = "mR*iVsu";
      stringArray0[2] = "mR*iVsu";
      stringArray0[3] = "mR*iVsu";
      String string0 = sqlServerDialect0.forDbFindById("mR*iVsu", stringArray0);
      assertEquals("select * from mR*iVsu where mR*iVsu = ? and mR*iVsu = ? and mR*iVsu = ? and mR*iVsu = ?", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String string0 = sqlServerDialect0.forTableBuilderDoBuild("fHjen 'cY*{iCkv44J");
      assertEquals("select * from fHjen 'cY*{iCkv44J where 1 = 2", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      MockDriver mockDriver0 = MockDriver.instance;
      Properties properties0 = new Properties();
      MockConnection mockConnection0 = mockDriver0.createMockConnection(mockDriver0, "SELECT * FROM ( SELECT row_number() over (order by tempcolumn) temprownumber, * FROM ", properties0);
      MockCallableStatement mockCallableStatement0 = new MockCallableStatement(mockConnection0, "SELECT * FROM ( SELECT row_number() over (order by tempcolumn) temprownumber, * FROM ");
      // Undeclared exception!
      try { 
        sqlServerDialect0.fillStatement((PreparedStatement) mockCallableStatement0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.activerecord.dialect.Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      sqlServerDialect0.fillStatement((PreparedStatement) null, (List<Object>) linkedList0);
      assertFalse(sqlServerDialect0.isKeepByteAndShort());
  }
}
