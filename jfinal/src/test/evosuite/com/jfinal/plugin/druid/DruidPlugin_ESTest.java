/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:43:59 GMT 2018
 */

package com.jfinal.plugin.druid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.druid.filter.Filter;
import com.alibaba.druid.filter.config.ConfigFilter;
import com.alibaba.druid.filter.stat.StatFilter;
import com.alibaba.druid.pool.DruidDataSource;
import com.jfinal.plugin.druid.DruidPlugin;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class DruidPlugin_ESTest extends DruidPlugin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("+7YyS_&;JNO#ndY'}", "+7YyS_&;JNO#ndY'}", (String) null, "select 1 from dual");
      DruidPlugin druidPlugin1 = druidPlugin0.set((-2681), (-253), 2272);
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("", "", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey");
      druidPlugin0.setName("Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey");
      String string0 = druidPlugin0.getName();
      assertEquals("Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("", "", "", (String) null, (String) null);
      druidPlugin0.setName("");
      String string0 = druidPlugin0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("XMmQ=dXXZNn*0/1#oj", "XMmQ=dXXZNn*0/1#oj", (String) null, "XMmQ=dXXZNn*0/1#oj");
      druidPlugin0.start();
      DruidDataSource druidDataSource0 = (DruidDataSource)druidPlugin0.getDataSource();
      assertEquals(60000L, druidDataSource0.getTimeBetweenEvictionRunsMillis());
      assertFalse(druidDataSource0.isLogAbandoned());
      assertFalse(druidDataSource0.isTestOnBorrow());
      assertNotNull(druidDataSource0);
      assertEquals(10, druidDataSource0.getInitialSize());
      assertTrue(druidDataSource0.isTestWhileIdle());
      assertEquals(300000L, druidDataSource0.getRemoveAbandonedTimeoutMillis());
      assertEquals(1800000L, druidDataSource0.getMinEvictableIdleTimeMillis());
      assertFalse(druidDataSource0.isRemoveAbandoned());
      assertEquals(30000L, druidDataSource0.getTimeBetweenConnectErrorMillis());
      assertFalse(druidDataSource0.isTestOnReturn());
      assertEquals((-1L), druidDataSource0.getMaxWait());
      assertEquals("select 1", druidDataSource0.getValidationQuery());
      assertEquals(100, druidDataSource0.getMaxActive());
      assertEquals(10, druidDataSource0.getMinIdle());
      assertEquals((-1), druidDataSource0.getMaxPoolPreparedStatementPerConnectionSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("xVKluaNa", "xVKluaNa", "CROSS_APPLY", (String) null, "xVKluaNa");
      druidPlugin0.addFilter((Filter) null);
      DruidPlugin druidPlugin1 = druidPlugin0.addFilter((Filter) null);
      // Undeclared exception!
      try { 
        druidPlugin1.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.druid.DruidPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("sw.Q^@!bd~2&", "sw.Q^@!bd~2&", "sw.Q^@!bd~2&");
      druidPlugin0.set(0, 0, 0);
      // Undeclared exception!
      try { 
        druidPlugin0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxActive can't not set zero
         //
         verifyException("com.alibaba.druid.pool.DruidDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DruidPlugin druidPlugin0 = null;
      try {
        druidPlugin0 = new DruidPlugin((String) null, (String) null, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DruidPlugin druidPlugin0 = null;
      try {
        druidPlugin0 = new DruidPlugin((String) null, (String) null, (String) null, "korf;Tl:>g/ng");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DruidPlugin druidPlugin0 = null;
      try {
        druidPlugin0 = new DruidPlugin((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("<g!,G1l!b2SG}Cgh", "<g!,G1l!b2SG}Cgh", "2'", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey");
      boolean boolean0 = druidPlugin0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      ConfigFilter configFilter0 = new ConfigFilter();
      druidPlugin0.addFilter(configFilter0);
      druidPlugin0.addFilter(configFilter0);
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "jdbc:hsqldb*GbW0$", "jdbc:hsqldb*GbW0$");
      druidPlugin0.setConnectionProperties("jdbc:hsqldb*GbW0$");
      druidPlugin0.setPublicKey("druid.config.file");
      druidPlugin0.setFilters("config.decrypt.key");
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("\u0004g!,G1l!b2SG}Cgh", "\u0004g!,G1l!b2SG}Cgh", "\u0004g!,G1l!b2SG}Cgh", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey");
      // Undeclared exception!
      try { 
        druidPlugin0.start();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey
         //
         verifyException("com.jfinal.plugin.druid.DruidPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("jdbc:db2", "jdbc:db2", "jdbc:db2", "jdbc:db2");
      druidPlugin0.setConnectionInitSql("jdbc:db2");
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "jdbc:hsqldb*GbW0$", "jdbc:hsqldb*GbW0$");
      druidPlugin0.setName("_Zx!~IFet$=hVq=");
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("\u0004g!,G1l!b2SG}Cgh", "\u0004g!,G1l!b2SG}Cgh", "\u0004g!,G1l!b2SG}Cgh", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey", "Druid\u8FDE\u63A5\u6C60\u7684filter\u8BBE\u5B9A\u4E86config\u65F6\uFF0C\u5FC5\u987B\u8BBE\u5B9ApublicKey");
      DruidPlugin druidPlugin1 = druidPlugin0.setPublicKey("DISA%BLE CONSTRAI>T ");
      druidPlugin1.start();
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "jdbc:hsqldb*GbW0$", "jdbc:hsqldb*GbW0$");
      druidPlugin0.start();
      boolean boolean0 = druidPlugin0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "jdbc:hsqldb*GbW0$", "jdbc:hsqldb*GbW0$");
      ConfigFilter configFilter0 = new ConfigFilter();
      druidPlugin0.addFilter(configFilter0);
      StatFilter statFilter0 = new StatFilter();
      druidPlugin0.addFilter(statFilter0);
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("jdbc:derbycan not^rsstart, activeCount not zero. ", "jdbc:derbycan not^rsstart, activeCount not zero. ", "jdbc:derbycan not^rsstart, activeCount not zero. ", "jdbc:derbycan not^rsstart, activeCount not zero. ", "jdbc:derbycan not^rsstart, activeCount not zero. ");
      assertNull(druidPlugin0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("jdbc:hsqldbKjts6J", "jdbc:hsqldbKjts6J", "jdbc:hsqldbKjts6J", "jdbc:hsqldbKjts6J", "jdbc:hsqldbKjts6J");
      assertNull(druidPlugin0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("jdbc:oraclema$$eQ*BRF'av", "jdbc:oraclema$$eQ*BRF'av", "jdbc:oraclema$$eQ*BRF'av", "jdbc:oraclema$$eQ*BRF'av", "jdbc:oraclema$$eQ*BRF'av");
      assertNull(druidPlugin0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("jdbc:hsqld`b", "jdbc:hsqld`b", "jdbc:hsqld`b", "jdbc:hsqld`b");
      DruidPlugin druidPlugin1 = druidPlugin0.setRemoveAbandonedTimeoutMillis(360L);
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      druidPlugin0.setConnectionProperties("_Zx!~IFet$=hVq=");
      boolean boolean0 = druidPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setMaxActive((-130));
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setRemoveAbandoned(false);
      assertSame(druidPlugin0, druidPlugin1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("sw.Q^@!bd~2&", "sw.Q^@!bd~2&", "sw.Q^@!bd~2&");
      DruidPlugin druidPlugin1 = druidPlugin0.setValidationQuery("sw.Q^@!bd~2&");
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("sw.Q^@!bd~2&", "sw.Q^@!bd~2&", "sw.Q^@!bd~2&");
      DruidPlugin druidPlugin1 = druidPlugin0.setInitialSize(0);
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "jdbc:hsqldb*GbW0$", "jdbc:hsqldb*GbW0$");
      DruidPlugin druidPlugin1 = druidPlugin0.setLogAbandoned(false);
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setTimeBetweenConnectErrorMillis((-421L));
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setMaxPoolPreparedStatementPerConnectionSize((-130));
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("sw.Q^@!bd~2&", "sw.Q^@!bd~2&", "sw.Q^@!bd~2&");
      DruidPlugin druidPlugin1 = druidPlugin0.setMinEvictableIdleTimeMillis(0);
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setTestOnReturn(false);
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setTestWhileIdle(true);
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("xVKluaNa", "xVKluaNa", "CROSS_APPLY", (String) null, "xVKluaNa");
      DruidPlugin druidPlugin1 = druidPlugin0.setTimeBetweenEvictionRunsMillis(0L);
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("jdbc:db2", "jdbc:db2", "jdbc:db2", "jdbc:db2");
      DataSource dataSource0 = druidPlugin0.getDataSource();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("+7YyS_&;JNO#ndY'}", "+7YyS_&;JNO#ndY'}", (String) null, "select 1 from dual");
      DruidPlugin druidPlugin1 = druidPlugin0.setMaxWait((-2681));
      assertNull(druidPlugin1.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setDriverClass("druid.config.decrypt");
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("xVKluaNa", "xVKluaNa", "CROSS_APPLY", (String) null, "xVKluaNa");
      DruidPlugin druidPlugin1 = druidPlugin0.setMinIdle((-1446));
      assertSame(druidPlugin1, druidPlugin0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("can not restart, activeCount not zero. ", "can not restart, activeCount not zero. ", "can not restart, activeCount not zero. ");
      String string0 = druidPlugin0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DruidPlugin druidPlugin0 = new DruidPlugin("_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=", "_Zx!~IFet$=hVq=");
      DruidPlugin druidPlugin1 = druidPlugin0.setTestOnBorrow(true);
      assertSame(druidPlugin1, druidPlugin0);
  }
}
