/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:31:22 GMT 2018
 */

package com.jfinal.plugin.redis.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.plugin.redis.serializer.FstSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FstSerializer_ESTest extends FstSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)2;
      fstSerializer0.valueFromBytes(byteArray0);
      byte[] byteArray1 = null;
      fstSerializer0.fieldFromBytes((byte[]) null);
      // Undeclared exception!
      try { 
        fstSerializer0.keyFromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      String string0 = "com.jfinal.plugin.redis.serializer.FstSerializer";
      fstSerializer0.valueToBytes("com.jfinal.plugin.redis.serializer.FstSerializer");
      FstSerializer fstSerializer1 = new FstSerializer();
      // Undeclared exception!
      try { 
        fstSerializer1.valueToBytes(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Class com.jfinal.plugin.redis.serializer.FstSerializer does not implement Serializable or externalizable
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      // Undeclared exception!
      try { 
        fstSerializer0.keyToBytes((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value sent to redis cannot be null
         //
         verifyException("redis.clients.util.SafeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      byte[] byteArray0 = new byte[0];
      fstSerializer0.keyFromBytes(byteArray0);
      // Undeclared exception!
      try { 
        fstSerializer0.keyToBytes((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value sent to redis cannot be null
         //
         verifyException("redis.clients.util.SafeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      Object object0 = new Object();
      byte[] byteArray0 = fstSerializer0.fieldToBytes(object0);
      FstSerializer fstSerializer1 = (FstSerializer)FstSerializer.me;
      Object object1 = new Object();
      fstSerializer1.valueToBytes(object1);
      FstSerializer fstSerializer2 = new FstSerializer();
      Object object2 = fstSerializer2.fieldFromBytes(byteArray0);
      byte[] byteArray1 = fstSerializer2.valueToBytes(object2);
      fstSerializer2.valueFromBytes(byteArray1);
      fstSerializer2.keyFromBytes(byteArray0);
      fstSerializer2.valueFromBytes(byteArray0);
      fstSerializer2.keyToBytes("\u0000 \u0000");
      byte[] byteArray2 = fstSerializer2.keyToBytes("\u0000 \u0000");
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = fstSerializer0.keyToBytes("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      FstSerializer fstSerializer1 = new FstSerializer();
      fstSerializer1.valueFromBytes(byteArray0);
      Object object0 = fstSerializer1.fieldFromBytes(byteArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      fstSerializer0.keyToBytes("d0,p@MShZ");
      FstSerializer fstSerializer1 = (FstSerializer)FstSerializer.me;
      // Undeclared exception!
      try { 
        fstSerializer1.fieldToBytes(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Class com.jfinal.plugin.redis.serializer.FstSerializer does not implement Serializable or externalizable
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)68;
      byte byte0 = (byte)125;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)0;
      fstSerializer0.keyFromBytes(byteArray0);
      FstSerializer fstSerializer1 = new FstSerializer();
      // Undeclared exception!
      try { 
        fstSerializer1.fieldFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.NullPointerException
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      String string0 = "";
      fstSerializer0.fieldToBytes("");
      FstSerializer fstSerializer1 = new FstSerializer();
      // Undeclared exception!
      try { 
        fstSerializer1.fieldToBytes(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Class com.jfinal.plugin.redis.serializer.FstSerializer does not implement Serializable or externalizable
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      FstSerializer fstSerializer1 = (FstSerializer)FstSerializer.me;
      fstSerializer1.fieldFromBytes((byte[]) null);
      byte[] byteArray0 = fstSerializer0.fieldToBytes((Object) null);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = fstSerializer0.valueToBytes("");
      FstSerializer fstSerializer1 = (FstSerializer)FstSerializer.me;
      fstSerializer1.valueFromBytes(byteArray0);
      FstSerializer fstSerializer2 = new FstSerializer();
      assertFalse(fstSerializer2.equals((Object)fstSerializer1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      byte[] byteArray0 = fstSerializer0.fieldToBytes((Object) null);
      byte[] byteArray1 = fstSerializer0.keyToBytes("h^fNx");
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)24;
      fstSerializer0.keyFromBytes(byteArray0);
      FstSerializer fstSerializer1 = (FstSerializer)FstSerializer.me;
      fstSerializer1.keyToBytes("com.jfinal.plugin.redis.serializer.FstSerializer");
      FstSerializer fstSerializer2 = new FstSerializer();
      // Undeclared exception!
      try { 
        fstSerializer2.valueFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.NullPointerException
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        fstSerializer0.fieldFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.NullPointerException
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      String string0 = fstSerializer0.keyFromBytes(byteArray0);
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = fstSerializer0.valueToBytes("=uJ`_<zN%9)6j<D+");
      FstSerializer fstSerializer1 = new FstSerializer();
      Object object0 = fstSerializer1.valueFromBytes(byteArray0);
      assertEquals("=uJ`_<zN%9)6j<D+", object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      Object object0 = fstSerializer0.valueFromBytes((byte[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = fstSerializer0.fieldToBytes("Z{v< z5`2&^E]+^");
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      Object object0 = new Object();
      fstSerializer0.fieldToBytes(object0);
      fstSerializer0.fieldFromBytes((byte[]) null);
      Object object1 = new Object();
      byte[] byteArray0 = fstSerializer0.fieldToBytes((Object) null);
      byte[] byteArray1 = fstSerializer0.fieldToBytes((Object) null);
      fstSerializer0.fieldToBytes((Object) null);
      fstSerializer0.keyFromBytes(byteArray0);
      fstSerializer0.valueFromBytes(byteArray1);
      fstSerializer0.valueFromBytes(byteArray0);
      byte[] byteArray2 = fstSerializer0.valueToBytes("S|8H?N");
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      byte[] byteArray0 = fstSerializer0.keyToBytes("");
      Object object0 = fstSerializer0.valueFromBytes(byteArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FstSerializer fstSerializer0 = new FstSerializer();
      // Undeclared exception!
      try { 
        fstSerializer0.fieldToBytes(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Class com.jfinal.plugin.redis.serializer.FstSerializer does not implement Serializable or externalizable
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      // Undeclared exception!
      try { 
        fstSerializer0.valueToBytes(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Class com.jfinal.plugin.redis.serializer.FstSerializer does not implement Serializable or externalizable
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = fstSerializer0.keyToBytes("r&$>;Xd=(&. 0(");
      // Undeclared exception!
      try { 
        fstSerializer0.valueFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.NullPointerException
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)118;
      // Undeclared exception!
      try { 
        fstSerializer0.fieldFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: class not found CLASSNAME:\u0000;Xd=(&. 0(j<D+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 loader:org.evosuite.instrumentation.InstrumentingClassLoader@434cf522
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }
}
