/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:38:12 GMT 2018
 */

package com.jfinal.plugin.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.plugin.redis.Cache;
import com.jfinal.plugin.redis.IKeyNamingPolicy;
import com.jfinal.plugin.redis.Redis;
import com.jfinal.plugin.redis.RedisPlugin;
import com.jfinal.plugin.redis.serializer.FstSerializer;
import com.jfinal.plugin.redis.serializer.ISerializer;
import com.jfinal.plugin.redis.serializer.JdkSerializer;
import java.net.URI;
import javax.swing.JLayeredPane;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisShardInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class RedisPlugin_ESTest extends RedisPlugin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("n:~<5IQ!o+9aO@V\"", "n:~<5IQ!o+9aO@V\"", 95);
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      redisPlugin0.setSerializer(jdkSerializer0);
      redisPlugin0.jedisPoolConfig = null;
      redisPlugin0.getJedisPoolConfig();
      // Undeclared exception!
      try { 
        redisPlugin0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("org.springframework.core.env.PropertiesPropertySource", "org.springframework.core.env.PropertiesPropertySource");
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.getJedisPoolConfig();
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      redisPlugin0.keyNamingPolicy = null;
      jedisPoolConfig0.setMinEvictableIdleTimeMillis(0L);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(3);
      redisPlugin0.getJedisPoolConfig();
      jedisPoolConfig0.setBlockWhenExhausted(false);
      redisPlugin0.start();
      redisPlugin0.setTimeBetweenEvictionRunsMillis(434);
      redisPlugin0.stop();
      redisPlugin0.setTimeBetweenEvictionRunsMillis(0);
      redisPlugin0.setNumTestsPerEvictionRun(3);
      redisPlugin0.start();
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("mr:I W#[=`8\"rQ 0.", "pool");
      Jedis jedis0 = new Jedis(jedisShardInfo0);
      redisPlugin0.getJedisPoolConfig();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      RedisPlugin redisPlugin0 = new RedisPlugin("R`OZeFE -LJ0s!", "R`OZeFE -LJ0s!", 1, 0);
      redisPlugin0.start();
      redisPlugin0.stop();
      redisPlugin0.setNumTestsPerEvictionRun(0);
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.host = "#i?tb";
      try { 
        Integer.decode("pool");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"pool\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("_,5!Q#>j-", ",%z!n(9`!q.", (-2020), ",%z!n(9`!q.");
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.getJedisPoolConfig();
      jedisPoolConfig0.setTestOnCreate(true);
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      jedisPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      redisPlugin0.setSerializer(jdkSerializer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jedisPoolConfig0.setNumTestsPerEvictionRun((-2020));
      redisPlugin0.setMinEvictableIdleTimeMillis((-140));
      System.setCurrentTimeMillis(3);
      redisPlugin0.getJedisPoolConfig();
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("org.springframework.core.env.PropertiesPropertySource", "org.springframework.core.env.PropertiesPropertySource");
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.getJedisPoolConfig();
      jedisPoolConfig0.setMaxWaitMillis(0L);
      jedisPoolConfig0.setMinEvictableIdleTimeMillis(0L);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(3);
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.start();
      redisPlugin0.setTimeBetweenEvictionRunsMillis(434);
      redisPlugin0.stop();
      redisPlugin0.setNumTestsPerEvictionRun(3);
      redisPlugin0.start();
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("$QDZXtw]HSOv$3h@", "'+hnp,]ch2t8l@", (-1841), (-1841), "clientName can not be blank.", 61, "2>Y0h#2b<$4G(%;$Y1&");
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.start();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("org.springTramework.coe.env.PropertiesPopertySokrce", "org.springTramework.coe.env.PropertiesPopertySokrce");
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.getJedisPoolConfig();
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      redisPlugin0.keyNamingPolicy = null;
      jedisPoolConfig0.setMinEvictableIdleTimeMillis(0L);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(3);
      JedisPoolConfig jedisPoolConfig1 = redisPlugin0.jedisPoolConfig;
      redisPlugin0.start();
      jedisPoolConfig1.setTestOnReturn(true);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(434);
      redisPlugin0.stop();
      redisPlugin0.setTimeBetweenEvictionRunsMillis(0);
      redisPlugin0.setNumTestsPerEvictionRun(3);
      redisPlugin0.start();
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      redisPlugin0.stop();
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("mr:I W#[=`8\"rQ 0.", "pool");
      Jedis jedis0 = new Jedis(jedisShardInfo0);
      redisPlugin0.getJedisPoolConfig();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("com.jfinal.plugin.redis.RedisPlugin", "org.springframework.beans.factory.serviceloader.ServiceListFactoryBean");
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.start();
      redisPlugin0.setTestWhileIdle(false);
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.setNumTestsPerEvictionRun((-1210));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("*v[z&,we", "pm4Be]R(,zijtz");
      redisPlugin0.password = "";
      redisPlugin0.jedisPoolConfig = null;
      // Undeclared exception!
      try { 
        redisPlugin0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1857);
      RedisPlugin redisPlugin0 = new RedisPlugin("host can not be blank.", "host can not be blank.", (-1857), (-1857), "eAT+,Y!%");
      Integer integer0 = redisPlugin0.timeout;
      redisPlugin0.timeout = integer0;
      redisPlugin0.setMinEvictableIdleTimeMillis((-1857));
      Integer.min((-1857), (-1857));
      Cache cache0 = new Cache();
      IKeyNamingPolicy iKeyNamingPolicy0 = cache0.keyNamingPolicy;
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(1122);
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.jedisPoolConfig = null;
      // Undeclared exception!
      try { 
        redisPlugin0.setMinEvictableIdleTimeMillis((-1857));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "MMo#!";
      int int0 = 17;
      RedisPlugin redisPlugin0 = new RedisPlugin("MMo#!", "MMo#!", 17, 2130, "MMo#!", 1);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(1);
      redisPlugin0.setTestWhileIdle(false);
      redisPlugin0.start();
      Integer integer0 = redisPlugin0.port;
      int int1 = 6379;
      int int2 = 0;
      // Undeclared exception!
      try { 
        redisPlugin0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The cache name already exists
         //
         verifyException("com.jfinal.plugin.redis.Redis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("host can not be blank.", "host can not be blank.", (-1450), (-2515));
      redisPlugin0.start();
      // Undeclared exception!
      try { 
        Redis.setMainCache("org.springframework.beans.factory.config.DependencyDescriptor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the cache not exists: org.springframework.beans.factory.config.DependencyDescriptor
         //
         verifyException("com.jfinal.plugin.redis.Redis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("%pMN6[h=iGuI.Y9GiyE", "org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber");
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.jedisPoolConfig;
      redisPlugin0.jedisPoolConfig = jedisPoolConfig0;
      jedisPoolConfig0.setJmxEnabled(false);
      redisPlugin0.getJedisPoolConfig();
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("host can not be blank.", "6~#!c;n#%{h", 0, 1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // password can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("protectionDomain", "protectionDomain", (-617), 62, "O08E|AS,_fuHHk^rQ@", 62, "protectionDomain");
      redisPlugin0.setMinEvictableIdleTimeMillis(6379);
      Integer integer0 = redisPlugin0.port;
      redisPlugin0.timeout = integer0;
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      redisPlugin0.setSerializer(jdkSerializer0);
      redisPlugin0.start();
      redisPlugin0.setSerializer(jdkSerializer0);
      Integer.compare(62, (-877));
      redisPlugin0.setMinEvictableIdleTimeMillis((-133));
      redisPlugin0.setMinEvictableIdleTimeMillis(6379);
      redisPlugin0.setNumTestsPerEvictionRun(1765);
      redisPlugin0.setTestWhileIdle(true);
      Cache cache0 = new Cache();
      cache0.getKeyNamingPolicy();
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "org.springframework.beans.PropertyValue";
      int int0 = 0;
      String string1 = "oplu&l";
      RedisPlugin redisPlugin0 = new RedisPlugin("org.springframework.beans.PropertyValue", "4<s'ht'xUfQwS*-{oD", 0, 0, "oplu&l", 0);
      redisPlugin0.start();
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.jedisPoolConfig;
      jedisPoolConfig0.setFairness(false);
      JedisPool jedisPool0 = new JedisPool(jedisPoolConfig0, "kxQSc}V4{8*A;$O[", 3, 8, (String) null);
      FstSerializer fstSerializer0 = new FstSerializer();
      Cache cache0 = new Cache();
      String string2 = "lG.^:xV D$j3x:Hbo";
      URI uRI0 = MockURI.URI("pool");
      Jedis jedis0 = null;
      try {
        jedis0 = new Jedis(uRI0, 1148, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot open Redis connection due invalid URI. pool
         //
         verifyException("redis.clients.jedis.BinaryJedis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("W$]{8Pu1ah", "W$]{8Pu1ah", 0, 0, "W$]{8Pu1ah", 0);
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "", 0);
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      Cache cache0 = new Cache("W$]{8Pu1ah", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      IKeyNamingPolicy iKeyNamingPolicy1 = cache0.keyNamingPolicy;
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      redisPlugin0.start();
      // Undeclared exception!
      try { 
        redisPlugin0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The cache name already exists
         //
         verifyException("com.jfinal.plugin.redis.Redis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("host can not be blank.", "host can not be blank.", 1471, 1471, "host can not be blank.", 6379, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clientName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("host can not be blank.", "host can not be blank.", (-1857), (-1857), "eAT+,Y!%");
      Integer integer0 = redisPlugin0.timeout;
      redisPlugin0.timeout = integer0;
      redisPlugin0.setMinEvictableIdleTimeMillis((-1857));
      Integer.min((-1857), 95);
      Cache cache0 = new Cache();
      IKeyNamingPolicy iKeyNamingPolicy0 = cache0.keyNamingPolicy;
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(1122);
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.setMinEvictableIdleTimeMillis((-1857));
      redisPlugin0.setMinEvictableIdleTimeMillis((-1857));
      redisPlugin0.setTimeBetweenEvictionRunsMillis((-5776));
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.start();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin(":k@}L`;8,.%&K", "#ue4!9]", 2971);
      JedisPool jedisPool0 = new JedisPool("cacheName can not be blank.", 0);
      Cache cache0 = new Cache();
      cache0.getSerializer();
      Cache cache1 = new Cache("cacheName can not be blank.", jedisPool0, (ISerializer) null, (IKeyNamingPolicy) null);
      Redis.mainCache = cache1;
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("Caught exception while shutting down: ", "Caught exception while shutting down: ", "Caught exception while shutting down: ");
      Integer integer0 = redisPlugin0.database;
      Integer.compareUnsigned((-1338), (-1338));
      redisPlugin0.host = "";
      Integer.min((-2618), 2518);
      Integer.getInteger("", (-1137));
      redisPlugin0.database = null;
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(0);
      redisPlugin0.setMinEvictableIdleTimeMillis(0);
      redisPlugin0.start();
      FstSerializer fstSerializer0 = (FstSerializer)redisPlugin0.serializer;
      redisPlugin0.setSerializer(fstSerializer0);
      redisPlugin0.getJedisPoolConfig();
      Cache cache0 = new Cache();
      IKeyNamingPolicy iKeyNamingPolicy0 = cache0.keyNamingPolicy;
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("host can not be blank.", "host can not be blank.");
      JedisPool jedisPool0 = new JedisPool("rgaFsem,");
      Cache cache0 = new Cache();
      ISerializer iSerializer0 = cache0.serializer;
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      Cache cache1 = new Cache("", jedisPool0, (ISerializer) null, (IKeyNamingPolicy) null);
      Redis.addCache(cache1);
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("1LZ1<5QRgdhX_txM/", "1LZ1<5QRgdhX_txM/", 2101, 2101, ",WixfhOWe>CXr");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("jsp.error.beans.nomethod.setproperty", "jsp.error.beans.nomethod.setproperty", 2361, 1540483477, "oizK++", 1540483477, "oizK++");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Q]aPz/!n4,R4u3";
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("", "", "Q]aPz/!n4,R4u3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      int int1 = 2000;
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("", "", 0, 2000, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("&", "&", "Q>pi+E,SRn>'");
      redisPlugin0.start();
      redisPlugin0.setNumTestsPerEvictionRun(1394);
      redisPlugin0.setTestWhileIdle(false);
      Cache cache0 = new Cache();
      IKeyNamingPolicy iKeyNamingPolicy0 = cache0.keyNamingPolicy;
      redisPlugin0.keyNamingPolicy = null;
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.setMinEvictableIdleTimeMillis(1394);
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.setNumTestsPerEvictionRun(0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("pEU_2Hz2Psmcu>RK", "C,x}\"C^oU7HS-f4h2`", 2000, 18, "OIyQ%DeR", 2000);
      redisPlugin0.setTimeBetweenEvictionRunsMillis(2000);
      redisPlugin0.setMinEvictableIdleTimeMillis((-1299));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("org.springframework.core.io.ClassPathResource", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // host can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("1j@G=9mYKG`sA0#", "1j@G=9mYKG`sA0#", (-2158));
      redisPlugin0.setMinEvictableIdleTimeMillis((-41));
      redisPlugin0.getJedisPoolConfig();
      FstSerializer fstSerializer0 = new FstSerializer();
      redisPlugin0.setSerializer(fstSerializer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("rD*zAZBcJZ_ybA)?Q9", (String) null, (-383), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // host can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("?", "b>{<w|,I", 0, 0);
      redisPlugin0.getJedisPoolConfig();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("-5Y3>Iz{3\"N]", "-5Y3>Iz{3\"N]", (-342));
      redisPlugin0.clientName = "com.jfinal.plugin.redis.RedisPlugin";
      Integer integer0 = redisPlugin0.timeout;
      redisPlugin0.timeout = null;
      redisPlugin0.serializer = null;
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.start();
      // Undeclared exception!
      try { 
        redisPlugin0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The cache name already exists
         //
         verifyException("com.jfinal.plugin.redis.Redis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("pAy)ugq6Y@3g;AM", "PV')s8fzd:K{E");
      redisPlugin0.password = "PV')s8fzd:K{E";
      redisPlugin0.start();
      redisPlugin0.setMinEvictableIdleTimeMillis(6379);
      redisPlugin0.setMinEvictableIdleTimeMillis(6379);
      redisPlugin0.stop();
      redisPlugin0.setTestWhileIdle(true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("[72?DfZVtw0ix(OI0", "[72?DfZVtw0ix(OI0");
      redisPlugin0.start();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("!eh+WGuCPiG+fT", "!eh+WGuCPiG+fT", "G~S2uowrvJZ4k&vs b~");
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      redisPlugin0.port = integer0;
      redisPlugin0.setMinEvictableIdleTimeMillis(0);
      redisPlugin0.getJedisPoolConfig();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = null;
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin((String) null, "9_ rtk4Jn%6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("cacheName can not be blank.", "cacheName can not be blank.", 2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // password can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("SX44_G{A&e%F2By]\"g", "j%*jPMO8<HEMH1x");
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.setMinEvictableIdleTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("jy>ac~", "jy>ac~", 125, "jy>ac~");
      redisPlugin0.setTimeBetweenEvictionRunsMillis(125);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "z^LjN?.W";
      int int0 = (-1151);
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("", "z^LjN?.W", 62, (-1151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("", "org.springframework.beans.factory.NoUniqueBeanDefinitionException", 1205);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin((String) null, (String) null, 1024, 1024, (String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1987;
      RedisPlugin redisPlugin0 = new RedisPlugin("T+-T-<@;&", "T+-T-<@;&", 1987);
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 34;
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin((String) null, (String) null, 34, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("", "cacheName can not be blank", 1039, 1039, (String) null, (-3112), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("%'TQqhM04k ;P", "%'TQqhM04k ;P", (-32), (-32), "clientName can not be blank.", 196, "%'TQqhM04k ;P");
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("Couldn't invoke destroy method of bean with name '", "Couldn't invoke destroy method of bean with name '", 484);
      redisPlugin0.setNumTestsPerEvictionRun(0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("n:~<5IQ!o+9aO@V\"", "n:~<5IQ!o+9aO@V\"", 95);
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      redisPlugin0.setSerializer(jdkSerializer0);
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.start();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RedisPlugin redisPlugin0 = new RedisPlugin("R`OZeFE -LJ0s!", "R`OZeFE -LJ0s!", 1, 0);
      assertNotNull(redisPlugin0);
      
      boolean boolean0 = redisPlugin0.start();
      assertTrue(boolean0);
      
      boolean boolean1 = redisPlugin0.stop();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      redisPlugin0.setNumTestsPerEvictionRun(0);
      redisPlugin0.host = "#i?tb";
      // Undeclared exception!
      try { 
        redisPlugin0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      RedisPlugin redisPlugin0 = new RedisPlugin("&hXv-^&] At,", "[p$ov&h", (-423), 64, "Hw*]Ev#aW:*oL/7V", 64, "&hXv-^&] At,");
      assertNotNull(redisPlugin0);
      
      boolean boolean0 = redisPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("", "", 1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cacheName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("L@=", "", "L@=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // host can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("tpR):x5g'f,z|", "'sour+eSet' is required", 0, 0, "'sour+eSet' is required", 0);
      redisPlugin0.setMinEvictableIdleTimeMillis(327680);
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      redisPlugin0.start();
      redisPlugin0.setMinEvictableIdleTimeMillis((-1227));
      redisPlugin0.setTimeBetweenEvictionRunsMillis(4141);
      FstSerializer fstSerializer0 = new FstSerializer();
      RedisPlugin redisPlugin1 = null;
      try {
        redisPlugin1 = new RedisPlugin("z J", "%F1f|Zc`3Py)xwxz&A", (-1227), 4141, "jm9.!BRlF", 1461, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clientName can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RedisPlugin redisPlugin0 = null;
      try {
        redisPlugin0 = new RedisPlugin("tpR):x5g'f,z|", "'sourceSet' is required", 0, 0, "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // password can not be blank.
         //
         verifyException("com.jfinal.plugin.redis.RedisPlugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("host can not be blank.", "host can not be blank.", (-1853), (-1853), "eACT+,Yo%");
      Integer integer0 = redisPlugin0.timeout;
      redisPlugin0.timeout = integer0;
      Cache cache0 = new Cache();
      redisPlugin0.setTestWhileIdle(true);
      redisPlugin0.setMinEvictableIdleTimeMillis((-1853));
      redisPlugin0.setTimeBetweenEvictionRunsMillis((-5793));
      boolean boolean0 = redisPlugin0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RedisPlugin redisPlugin0 = new RedisPlugin("org.springframework.core.env.PropertiesPropertySource", "org.springframework.core.env.PropertiesPropertySource");
      IKeyNamingPolicy iKeyNamingPolicy0 = redisPlugin0.keyNamingPolicy;
      redisPlugin0.keyNamingPolicy = null;
      redisPlugin0.getJedisPoolConfig();
      redisPlugin0.start();
      redisPlugin0.setTimeBetweenEvictionRunsMillis(434);
      boolean boolean0 = redisPlugin0.stop();
      assertTrue(boolean0);
      
      redisPlugin0.setTimeBetweenEvictionRunsMillis(0);
      redisPlugin0.start();
      redisPlugin0.setKeyNamingPolicy((IKeyNamingPolicy) null);
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("mr:I W#[=`8\"rQ 0.", "pool");
      Jedis jedis0 = new Jedis(jedisShardInfo0);
      JedisPoolConfig jedisPoolConfig0 = redisPlugin0.getJedisPoolConfig();
      assertEquals(0L, jedisPoolConfig0.getTimeBetweenEvictionRunsMillis());
  }
}
