/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:53:38 GMT 2018
 */

package com.jfinal.plugin.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.plugin.redis.Cache;
import com.jfinal.plugin.redis.IKeyNamingPolicy;
import com.jfinal.plugin.redis.serializer.FstSerializer;
import com.jfinal.plugin.redis.serializer.ISerializer;
import com.jfinal.plugin.redis.serializer.JdkSerializer;
import java.awt.AWTEventMulticaster;
import java.awt.ComponentOrientation;
import java.awt.Dialog;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.RenderingHints;
import java.awt.Window;
import java.awt.event.ContainerListener;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URI;
import java.net.URL;
import java.security.AccessControlContext;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Principal;
import java.security.ProtectionDomain;
import java.security.UnresolvedPermission;
import java.security.cert.Certificate;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLayer;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JSpinner;
import javax.swing.JWindow;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.synth.SynthCheckBoxMenuItemUI;
import javax.swing.plaf.synth.SynthContext;
import javax.swing.plaf.synth.SynthDesktopIconUI;
import javax.swing.plaf.synth.SynthLabelUI;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.plaf.synth.SynthOptionPaneUI;
import javax.swing.plaf.synth.SynthPanelUI;
import javax.swing.plaf.synth.SynthProgressBarUI;
import javax.swing.plaf.synth.SynthSplitPaneUI;
import javax.swing.plaf.synth.SynthTableUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.BaseObjectPoolConfig;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.VfsResource;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisSentinelPool;
import redis.clients.jedis.JedisShardInfo;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;
import redis.clients.jedis.SortingParams;
import redis.clients.jedis.ZParams;
import redis.clients.util.Hashing;
import redis.clients.util.MurmurHash;
import redis.clients.util.Sharded;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Cache_ESTest extends Cache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.SUM;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, (String) null, 78, 9, (String) null, 1892, "pool");
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      Cache cache0 = new Cache("K82(m]ttn -", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      // Undeclared exception!
      try { 
        cache0.ping();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 3936;
      JedisPool jedisPool0 = new JedisPool("p.gA", 3936);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 3936);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iKeyNamingPolicy0).getKeyName(any());
      Cache cache0 = new Cache("p.gA", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        cache0.getCounter((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value sent to redis cannot be null
         //
         verifyException("redis.clients.util.SafeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "t+A`amatRH-ic");
      FstSerializer fstSerializer0 = new FstSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("\" to ", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      // Undeclared exception!
      try { 
        cache0.del((Object) "t+A`amatRH-ic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Cache cache0 = new Cache();
      Cache cache1 = new Cache();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cache1;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      Vector<byte[]> vector0 = new Vector<byte[]>();
      cache1.valueListFromBytesList(vector0);
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache1;
      objectArray0[6] = (Object) cache1;
      objectArray0[7] = (Object) cache1;
      // Undeclared exception!
      try { 
        cache1.ping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Cache cache0 = new Cache();
      String string0 = null;
      // Undeclared exception!
      try { 
        cache0.fieldToBytes((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Cache cache0 = new Cache();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.hmget(integer0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      FstSerializer fstSerializer0 = new FstSerializer();
      Jedis jedis0 = new Jedis((String) null, 8);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      PooledObjectFactory<Jedis> pooledObjectFactory0 = (PooledObjectFactory<Jedis>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      jedisPool0.initPool(genericObjectPoolConfig0, pooledObjectFactory0);
      objectArray0[1] = (Object) jedisPool0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) genericObjectPoolConfig0;
      SynthLabelUI synthLabelUI0 = new SynthLabelUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("8?<[;)M^]lAyg", synthLabelUI0);
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      cache0.getName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "8?<[;)M^]lAyg";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      FstSerializer fstSerializer0 = new FstSerializer();
      Cache cache0 = new Cache("8?<[;)M^]lAyg", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      Jedis jedis0 = new Jedis("pool", (-1));
      cache0.close(jedis0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      LinkedHashSet<byte[]> linkedHashSet0 = new LinkedHashSet<byte[]>();
      cache0.fieldSetFromBytesSet(linkedHashSet0, (Set<Object>) null);
      objectArray0[1] = (Object) jedisPool0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) genericObjectPoolConfig0;
      // Undeclared exception!
      try { 
        cache0.mset(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[6];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      // Undeclared exception!
      try { 
        cache0.objectIdletime(defaultTableModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cache0.zrank(cache0, cache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "pool");
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      genericObjectPoolConfig0.setTestOnBorrow(false);
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache();
      // Undeclared exception!
      try { 
        cache0.flushAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JedisPool jedisPool0 = new JedisPool("No bean named '", 1231);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)123;
      byte byte0 = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("No bean named '", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      URI uRI0 = null;
      Object[] objectArray0 = new Object[3];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "No bean named '");
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.MIN;
      // Undeclared exception!
      try { 
        cache0.get((Object) zParams_Aggregate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "Trying to find master from available Sentinels...";
      int int0 = (-1);
      JedisPool jedisPool0 = new JedisPool("", (-1));
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      Cache cache0 = new Cache("Trying to find master from available Sentinels...", jedisPool0, jdkSerializer0, (IKeyNamingPolicy) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cache0;
      byte[] byteArray0 = jdkSerializer0.fieldToBytes("");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Trying to find master from available Sentinels...");
      objectArray0[1] = (Object) jdkSerializer0;
      jedisPool0.destroy();
      objectArray0[2] = (Object) jedisPool0;
      objectArray0[3] = (Object) cache0;
      cache0.fieldFromBytes(byteArray0);
      objectArray0[4] = (Object) jdkSerializer0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.mget(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Cache cache0 = new Cache();
      Cache cache1 = new Cache();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cache1;
      // Undeclared exception!
      try { 
        cache0.zcard(objectArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 1971, (-43));
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("q,U9n5XS", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      Jedis jedis0 = new Jedis((String) null, 1971, 0);
      // Undeclared exception!
      try { 
        cache0.valueToBytes(jedis0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Class redis.clients.jedis.Jedis does not implement Serializable or externalizable
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[1];
      cache0.serializer = null;
      // Undeclared exception!
      try { 
        cache0.mset(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong number of arguments for met, keysValues length can not be odd
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Cache cache0 = new Cache();
      Object object0 = null;
      // Undeclared exception!
      try { 
        cache0.exists((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) iKeyNamingPolicy0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iKeyNamingPolicy0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Object object0 = new Object();
      String string0 = "";
      JedisPool jedisPool0 = new JedisPool("H[-}zU6", 32);
      IKeyNamingPolicy iKeyNamingPolicy1 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, (ISerializer) null, iKeyNamingPolicy1);
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      genericObjectPoolConfig0.clone();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        cache0.ltrim(integer0, (-1L), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "t*m27H>i4D:@8f-";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, (String) null, 670);
      FstSerializer fstSerializer0 = new FstSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("t*m27H>i4D:@8f-", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      jedisPool0.getNumActive();
      // Undeclared exception!
      try { 
        cache0.zcard("org.apache.commons.pool2.impl.DefaultEvictionPolicy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String string0 = "\" was loaded by [";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("log4j:WARN ", 32768);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "\" was loaded by [", 1832, 8, "KTD).hq-s_}1 9", 1832);
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      PooledObjectFactory<Jedis> pooledObjectFactory0 = (PooledObjectFactory<Jedis>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      jedisPool0.initPool(genericObjectPoolConfig0, pooledObjectFactory0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Cache cache0 = new Cache("protectionDomain", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("org.apache.commons.pool2.impl.DefaultEvictionPolicy", 1046);
      // Undeclared exception!
      try { 
        cache0.move(jedisShardInfo0, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Cache cache0 = new Cache();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      // Undeclared exception!
      try { 
        cache0.move(defaultTableModel0, 134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cache0;
      cache0.removeThreadLocalJedis();
      Jedis jedis0 = null;
      try {
        jedis0 = new Jedis("*)t$7jr%{ *xQr==<a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed escape pair at index 7: *)t$7jr%{ *xQr==<a
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "Uq^OSx3kq`_", 0, 2091, "org.springframework.beans.support.ResourceEditorRegistrar", 45, "pool");
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iKeyNamingPolicy0).getKeyName(any());
      Cache cache0 = new Cache("com.jfinal.plugin.redis.Cache", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      // Undeclared exception!
      try { 
        cache0.keyToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value sent to redis cannot be null
         //
         verifyException("redis.clients.util.SafeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Cache cache0 = new Cache();
      String string0 = "vG^Xfr\"[~!&A`";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "vG^Xfr\"[~!&A`";
      objectArray0[1] = (Object) "vG^Xfr\"[~!&A`";
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) "vG^Xfr\"[~!&A`";
      objectArray0[5] = (Object) "vG^Xfr\"[~!&A`";
      objectArray0[6] = (Object) "vG^Xfr\"[~!&A`";
      objectArray0[7] = (Object) cache0;
      objectArray0[8] = (Object) "vG^Xfr\"[~!&A`";
      // Undeclared exception!
      try { 
        cache0.zrem("vG^Xfr\"[~!&A`", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "", 8, 8, "[a4S37Js9>:", 0);
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      String string0 = "b'U78*`(ai{&/P8iZ";
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("pool", "b'U78*`(ai{&/P8iZ", (-1), 2502, 3);
      // Undeclared exception!
      try { 
        cache0.hget((Object) jedisShardInfo0, (Object) jedisShardInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "MJf*nyT0~euxx)u", 0, (-1), (String) null);
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("CN@/FJ6{yq=DF`'", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      // Undeclared exception!
      try { 
        cache0.expire(jdkSerializer0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Trying to find master from available Sentinels...";
      int int0 = (-1);
      JedisPool jedisPool0 = new JedisPool("", (-1));
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      Cache cache0 = new Cache("Trying to find master from available Sentinels...", jedisPool0, jdkSerializer0, (IKeyNamingPolicy) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) jdkSerializer0;
      jedisPool0.destroy();
      objectArray0[2] = (Object) jedisPool0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) jdkSerializer0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.mget(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Cache cache0 = new Cache();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("", "", 8, (-31), 9);
      // Undeclared exception!
      try { 
        cache0.srandmember((Object) jedisShardInfo0, (-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JedisPool jedisPool0 = new JedisPool();
      FstSerializer fstSerializer0 = new FstSerializer();
      jedisPool0.close();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache(">Q*0T*LD<]k", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      String string0 = "C0ys]PVjc";
      // Undeclared exception!
      try { 
        cache0.sismember((Object) null, "C0ys]PVjc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "WpZLr&y/#v[U>&N", 3, 3);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      genericObjectPoolConfig1.setSoftMinEvictableIdleTimeMillis((-2147483648L));
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-2147483648L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      
      genericObjectPoolConfig1.setTestOnBorrow(false);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-2147483648L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache(") are:", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-2147483648L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(") are:", cache0.getName());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.type(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(jedisPool0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      Cache cache0 = new Cache("8?<[;)M^]lAyg", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(cache0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("8?<[;)M^]lAyg", cache0.getName());
      
      Jedis jedis0 = new Jedis((String) null, (-1));
      assertNotNull(jedis0);
      assertFalse(jedis0.isConnected());
      assertEquals(0L, (long)jedis0.getDB());
      
      cache0.close(jedis0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("8?<[;)M^]lAyg", cache0.getName());
      assertFalse(jedis0.isConnected());
      assertEquals(0L, (long)jedis0.getDB());
      
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.SUM;
      assertEquals(ZParams.Aggregate.SUM, zParams_Aggregate0);
      
      // Undeclared exception!
      try { 
        cache0.lset(zParams_Aggregate0, 8, "com.jfinal.plugin.redis.Cache");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) cache0;
      objectArray0[7] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.valuesToBytesArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 1154;
      Jedis jedis0 = new Jedis(" _[a0{-o5n-v=v", (-4291), 1154, (-4291));
      assertNotNull(jedis0);
      assertFalse(jedis0.isConnected());
      assertEquals(0L, (long)jedis0.getDB());
      
      // Undeclared exception!
      try { 
        cache0.hset(integer0, jedis0, "com.jfinal.plugin.redis.Cache");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotNull(genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, (String) null);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.exists(genericObjectPoolConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "8?<[;)M^]lAyg";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(jedisPool0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      Cache cache0 = new Cache("8?<[;)M^]lAyg", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(cache0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("8?<[;)M^]lAyg", cache0.getName());
      
      genericObjectPoolConfig0.setTestWhileIdle(false);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      
      Jedis jedis0 = new Jedis((String) null, (-1));
      assertNotNull(jedis0);
      assertEquals(0L, (long)jedis0.getDB());
      assertFalse(jedis0.isConnected());
      
      cache0.close(jedis0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("8?<[;)M^]lAyg", cache0.getName());
      assertEquals(0L, (long)jedis0.getDB());
      assertFalse(jedis0.isConnected());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) jedisPool0;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        cache0.scard(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 1154;
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("f{m[B}8hD'MqE-&", "f{m[B}8hD'MqE-&", 1154, 1154, 1154);
      assertNotNull(jedisShardInfo0);
      assertEquals("f{m[B}8hD'MqE-&", jedisShardInfo0.getHost());
      assertEquals(1154, jedisShardInfo0.getSoTimeout());
      assertEquals(1154, jedisShardInfo0.getConnectionTimeout());
      assertNull(jedisShardInfo0.getPassword());
      assertEquals(1154, jedisShardInfo0.getPort());
      assertEquals("f{m[B}8hD'MqE-&", jedisShardInfo0.getName());
      assertEquals(1154, jedisShardInfo0.getWeight());
      assertEquals(0, jedisShardInfo0.getDb());
      
      // Undeclared exception!
      try { 
        cache0.zrevrank(jedisShardInfo0, "f{m[B}8hD'MqE-&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Jedis jedis0 = new Jedis();
      assertNotNull(jedis0);
      assertEquals(0L, (long)jedis0.getDB());
      assertFalse(jedis0.isConnected());
      
      cache0.setThreadLocalJedis(jedis0);
      assertNull(cache0.getName());
      assertEquals(0L, (long)jedis0.getDB());
      assertFalse(jedis0.isConnected());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-9yC8");
      assertFalse(boolean0);
      
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.srandmember((Object) "-9yC8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("y#v,Xs=%5l`jhAJWpE");
      assertNotNull(jMXPrincipal0);
      
      // Undeclared exception!
      try { 
        cache0.type(jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      assertNotNull(jMXPrincipal0);
      
      String string1 = jMXPrincipal0.toString();
      assertEquals("JMXPrincipal:  ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = jMXPrincipal0.equals(cache0);
      assertFalse(boolean0);
      assertNull(cache0.getName());
      
      SynthCheckBoxMenuItemUI synthCheckBoxMenuItemUI0 = new SynthCheckBoxMenuItemUI();
      assertNotNull(synthCheckBoxMenuItemUI0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("JMXPrincipal:  ", synthCheckBoxMenuItemUI0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("JMXPrincipal:  ", propertyChangeListenerProxy0.getPropertyName());
      
      // Undeclared exception!
      try { 
        cache0.incrBy(propertyChangeListenerProxy0, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cache0;
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("QP&Z XN_-;,)@`]b");
      assertNotNull(jMXPrincipal0);
      
      // Undeclared exception!
      try { 
        cache0.zadd((Object) "E)S'%Dg9Hrs+^`)=,", Double.NEGATIVE_INFINITY, (Object) jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.keys("oz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "8?<[;)M^]lAyg";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      Cache cache0 = new Cache("8?<[;)M^]lAyg", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("8?<[;)M^]lAyg", cache0.getName());
      
      Jedis jedis0 = new Jedis((String) null, (-1));
      assertNotNull(jedis0);
      assertFalse(jedis0.isConnected());
      assertEquals(0L, (long)jedis0.getDB());
      
      cache0.close(jedis0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("8?<[;)M^]lAyg", cache0.getName());
      assertFalse(jedis0.isConnected());
      assertEquals(0L, (long)jedis0.getDB());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) jedisPool0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) genericObjectPoolConfig0;
      // Undeclared exception!
      try { 
        cache0.mset(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cache0;
      objectArray0[6] = (Object) cache0;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        cache0.brpop((-2290), objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "q,U\\9n5XS";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 260, (-43));
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(jedisPool0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byte byte0 = (byte)58;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(cache0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.hlen(fstSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, (String) null, 8, 71);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(jedisPool0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      Cache cache0 = new Cache("com.jfinal.plugin.redis.Cache", jedisPool0, jdkSerializer0, (IKeyNamingPolicy) null);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(cache0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("com.jfinal.plugin.redis.Cache", cache0.getName());
      
      Object[] objectArray0 = new Object[0];
      byte[][] byteArray0 = cache0.valuesToBytesArray(objectArray0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(0, objectArray0.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("com.jfinal.plugin.redis.Cache", cache0.getName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "com.jfinal.plugin.redis.Cache";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      
      String string1 = "U6lXHFm_^-[;T[";
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "U6lXHFm_^-[;T[", 0, 8);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(jedisPool0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("com.jfinal.plugin.redis.Cache", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(cache0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("com.jfinal.plugin.redis.Cache", cache0.getName());
      
      int int0 = (-1071);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jdkSerializer0;
      objectArray0[1] = (Object) jdkSerializer0;
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.jfinal.plugin.redis.Cache", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("com.jfinal.plugin.redis.Cache", propertyChangeListenerProxy0.getPropertyName());
      
      // Undeclared exception!
      try { 
        cache0.set(objectArray0[0], propertyChangeListenerProxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Frame frame0 = null;
      String string0 = "";
      Hashtable<Object, Double> hashtable0 = new Hashtable<Object, Double>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        cache0.zadd((Object) null, (Map<Object, Double>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.expire(fileSystemHandling0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.valueListFromBytesList((List<byte[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Jedis jedis0 = cache0.getThreadLocalJedis();
      assertNull(jedis0);
      assertNull(cache0.getName());
      
      cache0.setThreadLocalJedis((Jedis) null);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.sdiff(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      
      ArrayList<JedisShardInfo> arrayList0 = new ArrayList<JedisShardInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ShardedJedisPool shardedJedisPool0 = new ShardedJedisPool(genericObjectPoolConfig0, arrayList0, (Pattern) null);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(shardedJedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ShardedJedis shardedJedis0 = shardedJedisPool0.getResource();
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1, Sharded.DEFAULT_WEIGHT);
      assertNotNull(shardedJedis0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byte[] byteArray0 = new byte[7];
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.zrange(integer0, 0L, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "";
      double double0 = 535.253;
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      
      Stack<JedisShardInfo> stack0 = new Stack<JedisShardInfo>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        cache0.scard(genericObjectPoolConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Stack<byte[]> stack0 = new Stack<byte[]>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        cache0.keyValueListFromBytesList(stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Jedis jedis0 = cache0.getThreadLocalJedis();
      assertNull(jedis0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        cache0.fieldFromBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      ArrayList<byte[]> arrayList0 = new ArrayList<byte[]>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        cache0.keyValueListFromBytesList(arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        cache0.getCounter("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "F}9aE\"pc";
      String string1 = "OF2sqQZ7";
      URI uRI0 = MockURI.URI("OF2sqQZ7", "MIN", "MIN");
      assertNotNull(uRI0);
      assertEquals("OF2sqQZ7", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("OF2sqQZ7:MIN#MIN", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("MIN", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.MAX;
      assertEquals(ZParams.Aggregate.MAX, zParams_Aggregate0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cache0.sadd(zParams_Aggregate0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getFairness());
      
      String string0 = "Overriding bean definition for bean '";
      String string1 = null;
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "Overriding bean definition for bean '", 3, (-2486), (String) null, 1424);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getFairness());
      
      genericObjectPoolConfig0.setJmxNamePrefix("Overriding bean definition for bean '");
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("Overriding bean definition for bean '", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("NyCvpM9T{g`PJm5L", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("Overriding bean definition for bean '", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("NyCvpM9T{g`PJm5L", cache0.getName());
      
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      assertNotNull(synthProgressBarUI0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("org.apache.commons.pool2.impl.DefaultEvictionPolicy", synthProgressBarUI0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", propertyChangeListenerProxy0.getPropertyName());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) synthProgressBarUI0;
      objectArray0[1] = (Object) "NyCvpM9T{g`PJm5L";
      // Undeclared exception!
      try { 
        cache0.spop(objectArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "wrong number of arguments for met, keysValues length can not be odd", (-606));
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("wrong number of arguments for met, keysValues length can not be odd", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("wrong number of arguments for met, keysValues length can not be odd", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.expireAt("org.apache.commons.pool2.impl.DefaultEvictionPolicy", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "wrong number of arguments for met, keysValues length can not be odd";
      // Undeclared exception!
      try { 
        cache0.incr("wrong number of arguments for met, keysValues length can not be odd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      String string0 = "{&X*C6Y{v_u\"m6";
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "{&X*C6Y{v_u\"m6", 0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache((String) null, jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.del(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.sunion(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = fstSerializer0.keyToBytes("Unable to validate object");
      assertEquals(25, byteArray0.length);
      assertNotNull(byteArray0);
      
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.smembers("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "Ry<B~%L$I@Fa%E,A2", 1, 325, "org.apache.oro.text.MalformedCachePatternException");
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      Cache cache0 = new Cache("org.apache.oro.text.MalformedCachePatternException", jedisPool0, jdkSerializer0, (IKeyNamingPolicy) null);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.oro.text.MalformedCachePatternException", cache0.getName());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Ry<B~%L$I@Fa%E,A2";
      objectArray0[1] = (Object) "Ry<B~%L$I@Fa%E,A2";
      // Undeclared exception!
      try { 
        cache0.zrem(jdkSerializer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = null;
      JedisPool jedisPool0 = new JedisPool("", 2);
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache((String) null, jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)54;
      Object object0 = cache0.keyFromBytes(byteArray0);
      assertEquals("~\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD6", object0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte) (-54), (byte) (-1), (byte) (-109), (byte) (-1), (byte) (-15), (byte) (-70), (byte)54}, byteArray0);
      assertNotNull(object0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.decr("~\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("-0z$,|_/*%t;^4#:]", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("-0z$,|_/*%t;^4#:]", cache0.getName());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1022, 0);
      assertNotNull(defaultTableModel0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      defaultTableModel0.setColumnIdentifiers((Vector) stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      byte[] byteArray0 = jdkSerializer0.fieldToBytes(defaultTableModel0);
      assertEquals(36263, byteArray0.length);
      assertNotNull(byteArray0);
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = Double.isFinite(0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cache0.zrank(double0, double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        cache0.keyToBytes(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ":=3y@u%74VbUOycGy";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool");
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache(":=3y@u%74VbUOycGy", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(":=3y@u%74VbUOycGy", cache0.getName());
      
      HashSet<byte[]> hashSet0 = new HashSet<byte[]>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      jedisPool0.close();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      Set<DefaultTableModel> set0 = subject0.getPublicCredentials(class0);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Class<Object> class1 = Object.class;
      Set<Object> set1 = subject0.getPrivateCredentials(class1);
      assertFalse(set1.contains(":=3y@u%74VbUOycGy"));
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      cache0.valueSetFromBytesSet(hashSet0, set1);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(set1.contains(":=3y@u%74VbUOycGy"));
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(":=3y@u%74VbUOycGy", cache0.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      // Undeclared exception!
      try { 
        cache0.lindex((Object) genericObjectPoolConfig0, 407L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "", 8);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.pexpire(fstSerializer0, 1800000L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      
      String string0 = "";
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "", 8);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotNull(jedisPool0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("TRNC(b;J=,|V7,0z2x", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotNull(cache0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("TRNC(b;J=,|V7,0z2x", cache0.getName());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.objectIdletime(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "5?,";
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("5?,", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("5?,", cache0.getName());
      
      IKeyNamingPolicy iKeyNamingPolicy1 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache1 = new Cache("5?,", jedisPool0, fstSerializer0, iKeyNamingPolicy1);
      assertFalse(cache1.equals((Object)cache0));
      assertNotNull(cache1);
      assertEquals("5?,", cache1.getName());
      
      // Undeclared exception!
      try { 
        cache1.zscore(jedisPool0, jedisPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      assertNotNull(jMXPrincipal0);
      
      // Undeclared exception!
      try { 
        cache0.expireAt(jMXPrincipal0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        cache0.set(double0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("H=c9(6~PRGN|", (JedisPool) null, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("H=c9(6~PRGN|", cache0.getName());
      
      int int0 = (-4082);
      // Undeclared exception!
      try { 
        cache0.lpop((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      int int0 = 0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.blpop(0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) cache0;
      objectArray0[7] = (Object) integer0;
      String string0 = "";
      Integer integer1 = Integer.getInteger("", (-2985));
      assertEquals((-2985), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      objectArray0[8] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.srem(integer0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      String string0 = "org.springframework.core.convert.converter.ConvertingComparator$ConversionServiceConverter";
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "org.springframework.core.convert.converter.ConvertingComparator$ConversionServiceConverter");
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      Cache cache0 = new Cache("", jedisPool0, jdkSerializer0, (IKeyNamingPolicy) null);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("", cache0.getName());
      
      long long0 = 0L;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jedisPool0;
      objectArray0[1] = (Object) jedisPool0;
      // Undeclared exception!
      try { 
        cache0.lindex((Object) null, (-1001L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "Kn$#]HIQX~\"8", 3, 220);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(jedisPool0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      
      Cache cache0 = new Cache("Jar URL", jedisPool0, (ISerializer) null, (IKeyNamingPolicy) null);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(cache0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("Jar URL", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.rename((Object) null, "Kn$#]HIQX~\"8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "org.apache.commons.pool2.impl.DefaultEvictionPolicy", (-242), (-242));
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      
      ISerializer iSerializer0 = null;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("Invalid autowire-marked constructors: ", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("Invalid autowire-marked constructors: ", cache0.getName());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iKeyNamingPolicy0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.getSet((Object) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        cache0.del((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.del((Object) "/d$`}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, (String) null);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("`<jof\"KBuM$[m", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("`<jof\"KBuM$[m", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.srandmember((Object) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, (String) null, 0, 0);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("W25", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("W25", cache0.getName());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-118);
      // Undeclared exception!
      try { 
        cache0.valueFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("com.jfinal.plugin.redis.serializer.JdkSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        cache0.keyFromBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.mget(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "org.springframework.beans.TypeMismatchException";
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      int int0 = jedisPool0.getNumIdle();
      assertEquals(0, int0);
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("org.springframework.beans.TypeMismatchException", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("org.springframework.beans.TypeMismatchException", cache0.getName());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        cache0.hmget(jedisPool0, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.ping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JedisPool jedisPool0 = null;
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("wrong number of arguments for met, keysValues length can not be odd", (JedisPool) null, jdkSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("wrong number of arguments for met, keysValues length can not be odd", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.flushDB();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = " ld@gK)8-{bA";
      // Undeclared exception!
      try { 
        cache0.migrate(" ld@gK)8-{bA", 0, " ld@gK)8-{bA", (-1110), (-1110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.flushDB();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "v$m";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.lpush((Object) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      int int0 = 160;
      JedisPool jedisPool0 = new JedisPool("", 160);
      assertNotNull(jedisPool0);
      
      ISerializer iSerializer0 = null;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("", cache0.getName());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) iKeyNamingPolicy0;
      // Undeclared exception!
      try { 
        cache0.zrangeByScore(objectArray0[0], 160, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "org.apache.commons.pool2.impl.DefaultEvictionPolicy";
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.SUM;
      assertEquals(ZParams.Aggregate.SUM, zParams_Aggregate0);
      
      // Undeclared exception!
      try { 
        cache0.get((Object) zParams_Aggregate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      Cache cache0 = new Cache("", jedisPool0, (ISerializer) null, (IKeyNamingPolicy) null);
      assertNotNull(cache0);
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.zrangeByScore(jedisPool0, (-1849.24011), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "org.apache.commons.pool2.impl.DefaultEvictionPolicy", 815, 2);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("8T/`zU[", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("8T/`zU[", cache0.getName());
      
      genericObjectPoolConfig0.setJmxNamePrefix("'expectedType' must not be null");
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("'expectedType' must not be null", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      
      // Undeclared exception!
      try { 
        cache0.incrBy((Object) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        cache0.decr(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        cache0.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "org.apache.commons.pool2.impl.DefaultEvictionPolicy", 8, 0, "org.apache.commons.pool2.impl.DefaultEvictionPolicy");
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(jedisPool0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("1ry$", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(cache0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("1ry$", cache0.getName());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      assertNotNull(defaultTableModel0);
      
      // Undeclared exception!
      try { 
        cache0.pexpireAt(defaultTableModel0, 1637L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object object0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.fieldsToBytesArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = null;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.hlen(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "DrQtMqavy6~";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "pool", 0, 3, "org.apache.commons.pool2.impl.DefaultEvictionPolicy");
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("DrQtMqavy6~", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals("DrQtMqavy6~", cache0.getName());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.hgetAll(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "7,+2Yt53o]*DmU9N";
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.rpoplpush((Object) "7,+2Yt53o]*DmU9N", (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      assertNotNull(jMXPrincipal0);
      
      double double0 = 535.253;
      // Undeclared exception!
      try { 
        cache0.zincrby(jMXPrincipal0, 535.253, jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      int int0 = 668;
      int int1 = Integer.min(668, 668);
      assertEquals(668, int1);
      assertTrue(int1 == int0);
      
      String string0 = "";
      int int2 = 93;
      Cache cache1 = new Cache();
      assertFalse(cache1.equals((Object)cache0));
      assertNotNull(cache1);
      assertNull(cache1.getName());
      
      // Undeclared exception!
      try { 
        cache1.rpoplpush((Object) cache0, (Object) cache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "com.jfinal.plugin.redis.Cache";
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      // Undeclared exception!
      try { 
        cache0.zincrby(defaultTableColumnModel0, 0.0, defaultTableColumnModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[0];
      cache0.serializer = null;
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.mset(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("wrong number of arguments for met, keysValues length can not be odd", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("wrong number of arguments for met, keysValues length can not be odd", cache0.getName());
      
      jedisPool0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "wrong number of arguments for met, keysValues length can not be odd";
      byte[] byteArray0 = new byte[0];
      Object object0 = fstSerializer0.fieldFromBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(object0);
      
      objectArray0[1] = (Object) iKeyNamingPolicy0;
      objectArray0[2] = (Object) "wrong number of arguments for met, keysValues length can not be odd";
      // Undeclared exception!
      try { 
        cache0.hexists(jedisPool0, objectArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "gFn&s;QJ+QkkFe";
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("gFn&s;QJ+QkkFe", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("gFn&s;QJ+QkkFe", cache0.getName());
      
      byte[] byteArray0 = null;
      Object object0 = cache0.fieldFromBytes((byte[]) null);
      assertNull(object0);
      assertEquals("gFn&s;QJ+QkkFe", cache0.getName());
      
      Object[] objectArray0 = new Object[9];
      IKeyNamingPolicy iKeyNamingPolicy1 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache1 = new Cache("", jedisPool0, jdkSerializer0, iKeyNamingPolicy1);
      assertFalse(cache1.equals((Object)cache0));
      assertNotNull(cache1);
      assertEquals("", cache1.getName());
      
      Cache cache2 = new Cache();
      assertFalse(cache2.equals((Object)cache1));
      assertFalse(cache2.equals((Object)cache0));
      assertNotNull(cache2);
      assertNull(cache2.getName());
      
      // Undeclared exception!
      try { 
        cache2.valueFromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "lMXj";
      JedisPool jedisPool0 = new JedisPool("lMXj");
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      String string1 = fstSerializer0.keyFromBytes(byteArray0);
      assertEquals("\u0011", string1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("lMXj", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("lMXj", cache0.getName());
      
      String string2 = fstSerializer0.keyFromBytes(byteArray0);
      assertEquals("\u0011", string2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ISerializer iSerializer0 = cache0.getSerializer();
      assertSame(fstSerializer0, iSerializer0);
      assertSame(iSerializer0, fstSerializer0);
      assertNotNull(iSerializer0);
      assertEquals("lMXj", cache0.getName());
      
      String string3 = cache0.getName();
      assertSame(fstSerializer0, iSerializer0);
      assertEquals("lMXj", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("lMXj", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.flushAll();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Jedis jedis0 = cache0.getThreadLocalJedis();
      assertNull(jedis0);
      assertNull(cache0.getName());
      
      cache0.close((Jedis) null);
      assertNull(cache0.getName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.lset("x-\"x[D']CL}3Q{Y(", (-1880L), "x-\"x[D']CL}3Q{Y(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      // Undeclared exception!
      try { 
        cache0.hincrByFloat(defaultTableModel0, defaultTableModel0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "Bean named '", 3207);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertNotNull(jedisPool0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      
      ISerializer iSerializer0 = null;
      int int0 = jedisPool0.getNumActive();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, int0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis((-847L));
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-847L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      
      Cache cache0 = new Cache("`dx||(CD,}D", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertNotNull(cache0);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-847L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("`dx||(CD,}D", cache0.getName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      jedisPool0.close();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-847L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.hincrBy(object0, integer0, 3207);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "org.springframework.core.type.StandardAnnotationMetadata";
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("org.springframework.core.type.StandardAnnotationMetadata", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("org.springframework.core.type.StandardAnnotationMetadata", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.objectRefcount("org.springframework.core.type.StandardAnnotationMetadata");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byte byte0 = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)96;
      // Undeclared exception!
      try { 
        cache0.valueFromBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cache0.rpush((Object) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      int int0 = 894;
      Integer integer0 = new Integer(894);
      assertEquals(894, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = Integer.max(894, 894);
      assertEquals(894, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        cache0.objectRefcount(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)75;
      // Undeclared exception!
      try { 
        cache0.valueFromBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("$V_A9!YpR 2EVrL");
      assertNotNull(jMXPrincipal0);
      
      // Undeclared exception!
      try { 
        cache0.rpush(jMXPrincipal0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.rename((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.keys((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "j?_:.hZLmAhRI^Sr2:A");
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      genericObjectPoolConfig1.setNumTestsPerEvictionRun(3);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iKeyNamingPolicy0).toString();
      Cache cache0 = new Cache("!TQ>-c;*,Bg0MVF%+E", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("!TQ>-c;*,Bg0MVF%+E", cache0.getName());
      
      IKeyNamingPolicy iKeyNamingPolicy1 = cache0.getKeyNamingPolicy();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertSame(iKeyNamingPolicy1, iKeyNamingPolicy0);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(iKeyNamingPolicy1);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals("!TQ>-c;*,Bg0MVF%+E", cache0.getName());
      
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        jedisPool0.getResource();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory";
      JedisPool jedisPool0 = null;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory", (JedisPool) null, (ISerializer) null, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory", cache0.getName());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        cache0.decrBy(integer0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "3r%d/D6Z->>Cm_4@u_j", 3, 8, "pool", 8, "org.springframework.core.io.ByteArrayResource");
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("", cache0.getName());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      Object object0 = cache0.keyFromBytes(byteArray0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertEquals("\uFFFD\u0000\u0000\u0001", object0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)1}, byteArray0);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(object0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("", cache0.getName());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.llen(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, (String) null, (-3368), 8, (String) null, (-3368));
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(jedisPool0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("'o%.hkt5Q", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(cache0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("'o%.hkt5Q", cache0.getName());
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cache0.sinter(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "Root bean: ", 8, 6379);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertNotNull(jedisPool0);
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("/XPq3^yKeQ,M", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertNotNull(cache0);
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("/XPq3^yKeQ,M", cache0.getName());
      
      genericObjectPoolConfig0.setMinIdle(6379);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(6379, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      
      byte[] byteArray0 = fstSerializer0.fieldToBytes("/XPq3^yKeQ,M");
      assertEquals(14, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        cache0.zrevrange(fstSerializer0, 1L, (-840L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      
      genericObjectPoolConfig0.setMaxIdle(499);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(499, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, (String) null, (-1), 0, (String) null);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(jedisPool0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(499, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      genericObjectPoolConfig0.setMaxTotal((-1));
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1), genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(499, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(cache0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1), genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(499, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("", cache0.getName());
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        cache0.lrange("", 0L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)9;
      // Undeclared exception!
      try { 
        cache0.keyFromBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "VhvD_W", 0, 0, "uDT01");
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(jedisPool0);
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      Cache cache0 = new Cache("", jedisPool0, jdkSerializer0, (IKeyNamingPolicy) null);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotNull(cache0);
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.llen((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = cache0.getKeyNamingPolicy();
      assertNull(iKeyNamingPolicy0);
      assertNull(cache0.getName());
      
      int int0 = 0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        cache0.hget(objectArray0[0], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "wrong number of arguments for met, keysValues length can not be odd";
      Double double0 = new Double(681.9);
      assertEquals(681.9, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        cache0.hincrBy((Object) null, double0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        cache0.pexpireAt(integer0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "", 8);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(jedisPool0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("wrong number of arguments for met, keysValues length can not be odd", jedisPool0, (ISerializer) null, iKeyNamingPolicy0);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(cache0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("wrong number of arguments for met, keysValues length can not be odd", cache0.getName());
      
      IKeyNamingPolicy iKeyNamingPolicy1 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache1 = new Cache("", jedisPool0, (ISerializer) null, iKeyNamingPolicy1);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(cache1.equals((Object)cache0));
      assertNotNull(cache1);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("", cache1.getName());
      
      Jedis jedis0 = cache1.getThreadLocalJedis();
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotSame(cache1, cache0);
      assertFalse(cache1.equals((Object)cache0));
      assertNull(jedis0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("", cache1.getName());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache1;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) iKeyNamingPolicy1;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache1.srandmember((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("org.springframework.core.convert.support.StringToCharacterConverter");
      assertNotNull(jMXPrincipal0);
      
      // Undeclared exception!
      try { 
        cache0.pexpireAt(jMXPrincipal0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Object[][] objectArray0 = new Object[9][6];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cache0;
      objectArray1[1] = (Object) cache0;
      objectArray1[2] = (Object) cache0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[5];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      // Undeclared exception!
      try { 
        cache0.srandmember(objectArray1[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      String string0 = "TBN);TG)XP";
      // Undeclared exception!
      try { 
        cache0.ltrim("TBN);TG)XP", (-2316L), 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "r|<IKf2'ln6co4WOq";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "i5%&n!-%f@!ueF@yO", 0, 0, "wrong number of arguments for met, keysValues length can not be odd");
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(jedisPool0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("r|<IKf2'ln6co4WOq", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertNotNull(cache0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("r|<IKf2'ln6co4WOq", cache0.getName());
      
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("", 0, 0);
      assertNotNull(jedisShardInfo0);
      assertEquals(0, jedisShardInfo0.getDb());
      assertEquals("", jedisShardInfo0.getHost());
      assertEquals(0, jedisShardInfo0.getConnectionTimeout());
      assertEquals(0, jedisShardInfo0.getSoTimeout());
      assertNull(jedisShardInfo0.getPassword());
      assertEquals(1, jedisShardInfo0.getWeight());
      assertNull(jedisShardInfo0.getName());
      assertEquals(0, jedisShardInfo0.getPort());
      
      Jedis jedis0 = jedisShardInfo0.createResource();
      assertNotNull(jedis0);
      assertEquals(0, jedisShardInfo0.getDb());
      assertEquals("", jedisShardInfo0.getHost());
      assertEquals(0, jedisShardInfo0.getConnectionTimeout());
      assertEquals(0, jedisShardInfo0.getSoTimeout());
      assertNull(jedisShardInfo0.getPassword());
      assertEquals(1, jedisShardInfo0.getWeight());
      assertNull(jedisShardInfo0.getName());
      assertEquals(0, jedisShardInfo0.getPort());
      assertEquals(0L, (long)jedis0.getDB());
      assertFalse(jedis0.isConnected());
      
      // Undeclared exception!
      try { 
        cache0.rpop((Object) jedis0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)6;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      objectArray0[6] = (Object) cache0;
      objectArray0[7] = (Object) cache0;
      objectArray0[8] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.keysToBytesArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        cache0.rpop((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "U6lXHFm_^-[;T[", 0, 8);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(jedisPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("com.jfinal.plugin.redis.Cache", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(cache0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("com.jfinal.plugin.redis.Cache", cache0.getName());
      
      int int0 = (-1071);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jdkSerializer0;
      objectArray0[1] = (Object) jdkSerializer0;
      objectArray0[2] = (Object) "U6lXHFm_^-[;T[";
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) "com.jfinal.plugin.redis.Cache";
      objectArray0[6] = (Object) cache0;
      objectArray0[7] = (Object) iKeyNamingPolicy0;
      objectArray0[8] = (Object) iKeyNamingPolicy0;
      // Undeclared exception!
      try { 
        cache0.brpop((-1071), objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool("com.jfinal.plugin.redis.Cache");
      assertNotNull(jedisPool0);
      
      FstSerializer fstSerializer0 = new FstSerializer();
      assertNotNull(fstSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("com.jfinal.plugin.redis.Cache", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      assertNotNull(cache0);
      assertEquals("com.jfinal.plugin.redis.Cache", cache0.getName());
      
      // Undeclared exception!
      try { 
        cache0.randomKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.lindex(objectArray0[4], 1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 3, 0, "org.springframework.beans.PropertyBatchUpdateException", 3, "org.springframework.beans.PropertyBatchUpdateException");
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(jedisPool0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      assertNotNull(jdkSerializer0);
      
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(cache0);
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals("", cache0.getName());
      
      JLayer<Window> jLayer0 = new JLayer<Window>();
      assertNotNull(jLayer0);
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      assertFalse(jLayer0.isFocusCycleRoot());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("pool", jLayer0);
      assertNotNull(propertyChangeListenerProxy0);
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      assertFalse(jLayer0.isFocusCycleRoot());
      assertEquals("pool", propertyChangeListenerProxy0.getPropertyName());
      
      // Undeclared exception!
      try { 
        cache0.lpop((Object) propertyChangeListenerProxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Cache cache1 = new Cache();
      assertFalse(cache1.equals((Object)cache0));
      assertNotNull(cache1);
      assertNull(cache1.getName());
      
      // Undeclared exception!
      try { 
        cache1.lindex((Object) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Cache cache0 = new Cache();
      assertNotNull(cache0);
      assertNull(cache0.getName());
      
      Cache cache1 = new Cache();
      assertFalse(cache1.equals((Object)cache0));
      assertNotNull(cache1);
      assertNull(cache1.getName());
      
      // Undeclared exception!
      try { 
        cache1.lpop((Object) cache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Cache cache0 = new Cache();
      Object object0 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = null;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      Double double0 = new Double(2641.939687);
      Double.isFinite(2641.939687);
      double double1 = 708.7921926;
      Double.isFinite(708.7921926);
      Double.sum(0.0, 0.0);
      // Undeclared exception!
      try { 
        cache0.pttl(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "T(7Svo-HooCSmS$S", 0, 0, "", 3);
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("Ny/o2zP3MQ#BC-]q|H", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("<*U`z!");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "T(7Svo-HooCSmS$S";
      objectArray0[2] = (Object) jMXPrincipal0;
      // Undeclared exception!
      try { 
        cache0.hdel(jMXPrincipal0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Cache cache0 = new Cache();
      // Undeclared exception!
      try { 
        cache0.select(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Cache cache0 = new Cache();
      double double0 = (-4744.444);
      Double double1 = new Double((-4744.444));
      Double.isFinite((-1105.341006));
      Double.sum((-1105.341006), (-4744.444));
      // Undeclared exception!
      try { 
        cache0.getSet((Object) double1, (Object) double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Cache cache0 = new Cache();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-126);
      byte byte0 = (byte) (-1);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      // Undeclared exception!
      try { 
        cache0.pexpire(defaultTableModel0, (byte)37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("t", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("t");
      // Undeclared exception!
      try { 
        cache0.pttl(jMXPrincipal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Cache cache0 = new Cache();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.hdel(integer0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Cache cache0 = new Cache();
      // Undeclared exception!
      try { 
        cache0.select(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Cache cache0 = new Cache();
      Object object0 = null;
      // Undeclared exception!
      try { 
        cache0.getSet((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Cache cache0 = new Cache();
      String string0 = "Z5WC\\UdeP(?`&ZihP";
      String string1 = "";
      // Undeclared exception!
      try { 
        cache0.pexpire("", (-1121L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Cache cache0 = new Cache();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("@0A!FV\f4u");
      // Undeclared exception!
      try { 
        cache0.pttl(jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "rp>-C{]e%j b", 0, 3, "", 3);
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("reset", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      // Undeclared exception!
      try { 
        cache0.hvals("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "";
      int int0 = 32;
      JedisPool jedisPool0 = new JedisPool("", 32);
      FstSerializer fstSerializer0 = new FstSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      Object[] objectArray0 = new Object[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        cache0.fieldFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: unable to encodeValue class from code 102
         //
         verifyException("com.jfinal.plugin.redis.serializer.FstSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Cache cache0 = new Cache();
      // Undeclared exception!
      try { 
        cache0.hkeys((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Cache cache0 = new Cache();
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.MIN;
      // Undeclared exception!
      try { 
        cache0.hget((Object) zParams_Aggregate0, (Object) zParams_Aggregate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Cache cache0 = new Cache();
      // Undeclared exception!
      try { 
        cache0.randomKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Cache cache0 = new Cache();
      // Undeclared exception!
      try { 
        cache0.getJedis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Cache cache0 = new Cache();
      String string0 = null;
      // Undeclared exception!
      try { 
        cache0.lrem((Object) null, 1745L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Cache cache0 = new Cache();
      String string0 = "";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      jMXPrincipal0.getName();
      // Undeclared exception!
      try { 
        cache0.ttl(jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Cache cache0 = new Cache();
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.SUM;
      // Undeclared exception!
      try { 
        cache0.hget((Object) zParams_Aggregate0, (Object) zParams_Aggregate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Cache cache0 = new Cache();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      try { 
        cache0.smembers(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Cache cache0 = new Cache();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.jfinal.plugin.redis.Cache", defaultTableColumnModel0);
      // Undeclared exception!
      try { 
        cache0.lrem(propertyChangeListenerProxy0, 5000L, "com.jfinal.plugin.redis.Cache");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Cache cache0 = new Cache();
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.MAX;
      String string0 = "6h4NJs}`d28p`";
      long long0 = 1000L;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        cache0.lrange("6h4NJs}`d28p`", 1000L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Cache cache0 = new Cache();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      int int0 = 668;
      Integer.min(668, 668);
      // Undeclared exception!
      try { 
        cache0.valueToBytes(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Cache cache0 = new Cache();
      cache0.getSerializer();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) null;
      String string0 = null;
      JMXPrincipal jMXPrincipal0 = null;
      try {
        jMXPrincipal0 = new JMXPrincipal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // illegal null input
         //
         verifyException("javax.management.remote.JMXPrincipal", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Cache cache0 = new Cache();
      int int0 = (-862);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        cache0.spop((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.sinter(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Cache cache0 = new Cache();
      Box box0 = Box.createHorizontalBox();
      // Undeclared exception!
      try { 
        cache0.hgetAll(box0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Cache cache0 = new Cache();
      String string0 = "";
      // Undeclared exception!
      try { 
        cache0.spop((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.del(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("BJa.uviCr", (JedisPool) null, jdkSerializer0, iKeyNamingPolicy0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iKeyNamingPolicy0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jdkSerializer0;
      objectArray0[3] = (Object) "BJa.uviCr";
      objectArray0[4] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.brpop(1682, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Cache cache0 = new Cache();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        cache0.fieldFromBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      GenericObjectPoolConfig genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig1, "org.apache.commons.pool2.impl.DefaultEvictionPolicy");
      FstSerializer fstSerializer0 = new FstSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      // Undeclared exception!
      try { 
        cache0.keyValueListFromBytesList((List<byte[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Cache cache0 = new Cache();
      Cache cache1 = new Cache();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cache1;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache1;
      objectArray0[6] = (Object) cache0;
      objectArray0[7] = (Object) cache1;
      objectArray0[8] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.fieldsToBytesArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Cache cache0 = new Cache();
      JedisShardInfo jedisShardInfo0 = new JedisShardInfo("@", (-781), "QqnsMLl65*KjAI4x");
      TreeSet<byte[]> treeSet0 = new TreeSet<byte[]>();
      TreeSet<JMXPrincipal> treeSet1 = new TreeSet<JMXPrincipal>();
      Subject subject0 = new Subject(false, treeSet1, treeSet0, treeSet0);
      Class<Object> class0 = Object.class;
      Set<Object> set0 = subject0.getPrivateCredentials(class0);
      cache0.valueSetFromBytesSet(treeSet0, set0);
      jedisShardInfo0.setPassword("");
      jedisShardInfo0.toString();
      // Undeclared exception!
      try { 
        cache0.expire("", (-781));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JedisPool jedisPool0 = new JedisPool();
      JdkSerializer jdkSerializer0 = (JdkSerializer)JdkSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      int int0 = 3;
      Object[] objectArray0 = new Object[8];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)9;
      cache0.keyFromBytes(byteArray0);
      objectArray0[0] = (Object) "\u0000\uFFFD\uFFFD\b\uFFFDkF\u0003\t";
      objectArray0[1] = (Object) iKeyNamingPolicy0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) jdkSerializer0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) iKeyNamingPolicy0;
      // Undeclared exception!
      try { 
        cache0.valueFromBytes(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.StreamCorruptedException: invalid stream header: 0092BD08
         //
         verifyException("com.jfinal.plugin.redis.serializer.JdkSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Cache cache0 = new Cache();
      cache0.getThreadLocalJedis();
      cache0.setThreadLocalJedis((Jedis) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      objectArray0[6] = (Object) cache0;
      objectArray0[7] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.keysToBytesArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "8?<[;)M^]lAyg";
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      FstSerializer fstSerializer0 = new FstSerializer();
      Cache cache0 = new Cache("8?<[;)M^]lAyg", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      Jedis jedis0 = new Jedis("pool", 3);
      cache0.close(jedis0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      LinkedHashSet<byte[]> linkedHashSet0 = new LinkedHashSet<byte[]>();
      cache0.fieldSetFromBytesSet(linkedHashSet0, (Set<Object>) null);
      objectArray0[1] = (Object) jedisPool0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) genericObjectPoolConfig0;
      // Undeclared exception!
      try { 
        cache0.mset(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Cache cache0 = new Cache();
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.SUM;
      // Undeclared exception!
      try { 
        cache0.hvals(zParams_Aggregate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 8);
      FstSerializer fstSerializer0 = new FstSerializer();
      Cache cache0 = new Cache("8?<[;)M^]lAyg", jedisPool0, fstSerializer0, (IKeyNamingPolicy) null);
      Jedis jedis0 = new Jedis((String) null, (-1));
      cache0.close(jedis0);
      SynthLabelUI synthLabelUI0 = new SynthLabelUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("8?<[;)M^]lAyg", synthLabelUI0);
      // Undeclared exception!
      try { 
        cache0.srandmember((Object) propertyChangeListenerProxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Cache cache0 = new Cache();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)90;
      ZParams.Aggregate zParams_Aggregate0 = ZParams.Aggregate.MAX;
      // Undeclared exception!
      try { 
        cache0.zcard(zParams_Aggregate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Cache cache0 = new Cache();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("vG^Xfr\"[~!&A`", (PropertyChangeListener) null);
      // Undeclared exception!
      try { 
        cache0.zrevrange(propertyChangeListenerProxy0, (-669L), 477L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Cache cache0 = new Cache();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cache0;
      objectArray0[1] = (Object) cache0;
      objectArray0[2] = (Object) cache0;
      objectArray0[3] = (Object) cache0;
      objectArray0[4] = (Object) cache0;
      objectArray0[5] = (Object) cache0;
      // Undeclared exception!
      try { 
        cache0.valuesToBytesArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.plugin.redis.Cache", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = 3936;
      JedisPool jedisPool0 = new JedisPool("p.gA", 3936);
      JdkSerializer jdkSerializer0 = new JdkSerializer();
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("p.gA", jedisPool0, jdkSerializer0, iKeyNamingPolicy0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        cache0.getCounter((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      GenericObjectPoolConfig genericObjectPoolConfig0 = new GenericObjectPoolConfig();
      JedisPool jedisPool0 = new JedisPool(genericObjectPoolConfig0, "pool", 260, (-43));
      FstSerializer fstSerializer0 = (FstSerializer)FstSerializer.me;
      IKeyNamingPolicy iKeyNamingPolicy0 = mock(IKeyNamingPolicy.class, new ViolatedAssumptionAnswer());
      Cache cache0 = new Cache("q,U9n5XS", jedisPool0, fstSerializer0, iKeyNamingPolicy0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      // Undeclared exception!
      try { 
        cache0.zadd((Object) genericObjectPoolConfig0, (Map<Object, Double>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get a resource from the pool
         //
         verifyException("redis.clients.util.Pool", e);
      }
  }
}
