/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:14:41 GMT 2018
 */

package com.jfinal.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.json.JFinalJson;
import com.jfinal.json.JacksonFactory;
import com.jfinal.json.Json;
import com.jfinal.json.MixedJsonFactory;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.render.ContentType;
import com.jfinal.render.ViewType;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.JapaneseDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class JFinalJson_ESTest extends JFinalJson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("MOr%e7TqY&Km");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      jFinalJson0.convertDepth = 2;
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      JFinalJson jFinalJson2 = jFinalJson1.setConvertDepth(5);
      assertNotNull(jFinalJson2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson2.getDefaultDatePattern());
      assertNull(jFinalJson2.getDatePattern());
      assertSame(jFinalJson0, jFinalJson2);
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson2);
      assertSame(jFinalJson1, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson1);
      
      Iterator<Date> iterator0 = (Iterator<Date>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = jFinalJson2.iteratorToJson(iterator0, 2);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson2.getDefaultDatePattern());
      assertNull(jFinalJson2.getDatePattern());
      assertSame(jFinalJson0, jFinalJson2);
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson2);
      assertSame(jFinalJson1, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson1);
      assertEquals("[]", string0);
      
      String string1 = jFinalJson2.toJson(jFinalJson0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson2.getDefaultDatePattern());
      assertNull(jFinalJson2.getDatePattern());
      assertSame(jFinalJson0, jFinalJson2);
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson2);
      assertSame(jFinalJson1, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson1);
      assertEquals("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}}}}}}", string1);
      
      JFinalJson.setDefaultConvertDepth(2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      String string0 = jFinalJson0.toJson((Object) integer0, Integer.MIN_VALUE);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals("null", string0);
      
      int int0 = 8;
      String string1 = "";
      Class<String> class0 = String.class;
      HashMap<ContentType, Record> hashMap0 = new HashMap<ContentType, Record>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = jFinalJson0.mapToJson(hashMap0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("{}", string2);
      
      // Undeclared exception!
      try { 
        jFinalJson0.otherToJson(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class com.jfinal.json.JFinalJson can not access a member of class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl with modifiers \"public final\"
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      jFinalJson0.timestampPattern = "";
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 4;
      jFinalJson0.toKeyValue("fOtG/", "fOtG/", stringBuilder0, 114);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals("\"fOtG/\":\"fOtG/\"", stringBuilder0.toString());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add("Dialect can not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertTrue(linkedHashSet0.contains("Dialect can not be null"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jFinalJson0.iteratorToJson(iterator0, 706);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      StringBuilder stringBuilder0 = new StringBuilder("1RFJaZ? Np89t");
      assertNotNull(stringBuilder0);
      assertEquals("1RFJaZ? Np89t", stringBuilder0.toString());
      
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertNotNull(stringBuilder1);
      assertEquals("1RFJaZ? Np89t", stringBuilder0.toString());
      assertEquals("1RFJaZ? Np89t", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((StringBuffer) null);
      assertNotNull(stringBuilder2);
      assertEquals("1RFJaZ? Np89tnull", stringBuilder0.toString());
      assertEquals("1RFJaZ? Np89tnull", stringBuilder1.toString());
      assertEquals("1RFJaZ? Np89tnull", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Record record0 = new Record();
      assertNotNull(record0);
      
      StringBuilder stringBuilder3 = stringBuilder1.append(1608);
      assertNotNull(stringBuilder3);
      assertEquals("1RFJaZ? Np89tnull1608", stringBuilder0.toString());
      assertEquals("1RFJaZ? Np89tnull1608", stringBuilder1.toString());
      assertEquals("1RFJaZ? Np89tnull1608", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      jFinalJson0.toKeyValue("1RFJaZ? Np89t", "1RFJaZ? Np89t", stringBuilder3, (-908));
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("1RFJaZ? Np89tnull1608\"1RFJaZ? Np89t\":null", stringBuilder0.toString());
      assertEquals("1RFJaZ? Np89tnull1608\"1RFJaZ? Np89t\":null", stringBuilder1.toString());
      assertEquals("1RFJaZ? Np89tnull1608\"1RFJaZ? Np89t\":null", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Json json0 = jFinalJson0.setDatePattern("af0!\b,{.Pvd");
      assertNotNull(json0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(json0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(json0, jFinalJson0);
      
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      jFinalJson0.iteratorToJson(iterator0, 195);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      HashMap<ContentType, ViewType> hashMap0 = new HashMap<ContentType, ViewType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 630;
      jFinalJson0.convertDepth = 630;
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      ContentType contentType0 = ContentType.HTML;
      ViewType viewType0 = ViewType.FREE_MARKER;
      jFinalJson0.timestampPattern = null;
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      hashMap0.put(contentType0, viewType0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Set<Map.Entry<ContentType, ViewType>> set0 = (Set<Map.Entry<ContentType, ViewType>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      ContentType contentType1 = ContentType.HTML;
      Function<Object, ViewType> function0 = (Function<Object, ViewType>) mock(Function.class, new ViolatedAssumptionAnswer());
      ViewType viewType1 = hashMap0.computeIfAbsent(contentType1, function0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertSame(contentType1, contentType0);
      assertSame(viewType1, viewType0);
      assertEquals(ViewType.FREE_MARKER, viewType1);
      
      String string0 = jFinalJson0.mapToJson(hashMap0, (-489));
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("{\"text/html\":null}", string0);
      
      String string1 = jFinalJson0.otherToJson("{\"text/html\":null}", (-489));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("{\"bytes\":null,\"empty\":null}", string1);
      
      Iterator<StringTokenizer> iterator0 = (Iterator<StringTokenizer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      int int1 = 0;
      String string2 = jFinalJson0.iteratorToJson(iterator0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("[]", string2);
      
      JFinalJson jFinalJson1 = jFinalJson0.setConvertDepth(630);
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      // Undeclared exception!
      try { 
        jFinalJson1.beanToJson(contentType0, 630);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class com.jfinal.json.JFinalJson can not access a member of class sun.misc.Launcher$ExtClassLoader with modifiers \"public static\"
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      Json json0 = Json.getJson();
      assertFalse(json0.equals((Object)jFinalJson0));
      assertNotNull(json0);
      assertNull(json0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertNotSame(json0, jFinalJson0);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      String string0 = jFinalJson0.otherToJson(short0, (short)9);
      assertFalse(jFinalJson0.equals((Object)json0));
      assertNotNull(string0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNotSame(jFinalJson0, json0);
      assertEquals("{}", string0);
      
      Record record0 = new Record();
      assertNotNull(record0);
      
      Boolean boolean0 = record0.getBoolean("EhgM(E}g5)V~R~");
      assertNull(boolean0);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      String string1 = jFinalJson0.toJson((Object) null, (int) (short)9);
      assertFalse(jFinalJson0.equals((Object)json0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNotSame(jFinalJson0, json0);
      assertEquals("null", string1);
      
      Short short1 = new Short((short)9);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)9, (short)short1);
      
      int int1 = Short.compare((short)9, (short)9);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = jFinalJson0.toJson((Object) short1, 2);
      assertFalse(jFinalJson0.equals((Object)json0));
      assertTrue(short1.equals((Object)short0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNotSame(jFinalJson0, json0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Character character0 = Character.valueOf('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      int int0 = Character.compare('D', 'L');
      assertEquals((-8), int0);
      
      String string0 = jFinalJson0.otherToJson(character0, 8447);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      HashMap<StringTokenizer, Double> hashMap0 = new HashMap<StringTokenizer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = jFinalJson0.mapToJson(hashMap0, 8447);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("{}", string1);
      
      String string2 = "";
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jFinalJson0.parse("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jfinal 3.4\u9ED8\u8BA4 json \u5B9E\u73B0\u6682\u4E0D\u652F\u6301 json \u5230 object \u7684\u8F6C\u6362,\u5EFA\u8BAE\u4F7F\u7528 active recrord \u7684 Generator \u751F\u6210 base model\uFF0C\u518D\u901A\u8FC7 me.setJsonFactory(new MixedJsonFactory()) \u6765\u652F\u6301
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Json json0 = jFinalJson0.setDatePattern("I9i45D~t\u0002h71");
      assertNotNull(json0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertNull(json0.getDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(json0, jFinalJson0);
      
      String string0 = "A9LVur";
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("A9LVur");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, json0);
      assertSame(jFinalJson1, jFinalJson0);
      
      JFinalJson jFinalJson2 = jFinalJson0.setTimestampPattern("I9i45D~t\u0002h71");
      assertNotNull(jFinalJson2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson2.getDefaultDatePattern());
      assertNull(jFinalJson2.getDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson0, jFinalJson2);
      assertSame(jFinalJson2, jFinalJson1);
      assertSame(jFinalJson2, json0);
      assertSame(jFinalJson2, jFinalJson0);
      
      Iterator<StringTokenizer> iterator0 = (Iterator<StringTokenizer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      int int0 = (-1124);
      JacksonFactory jacksonFactory0 = new JacksonFactory();
      assertNotNull(jacksonFactory0);
      
      Json.setDefaultDatePattern("A9LVur");
      Json json1 = jacksonFactory0.getJson();
      assertNotNull(json1);
      assertNull(json1.getDatePattern());
      assertEquals("A9LVur", json1.getDefaultDatePattern());
      
      Json json2 = jacksonFactory0.getJson();
      assertFalse(json2.equals((Object)json1));
      assertNotNull(json2);
      assertNull(json2.getDatePattern());
      assertEquals("A9LVur", json2.getDefaultDatePattern());
      assertNotSame(json2, json1);
      
      Json json3 = jacksonFactory0.getJson();
      assertFalse(json3.equals((Object)json1));
      assertFalse(json3.equals((Object)json2));
      assertNotNull(json3);
      assertNull(json3.getDatePattern());
      assertEquals("A9LVur", json3.getDefaultDatePattern());
      assertNotSame(json3, json1);
      assertNotSame(json3, json2);
      
      Json.setDefaultJsonFactory(jacksonFactory0);
      String string1 = jFinalJson1.iteratorToJson(iterator0, (-1124));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A9LVur", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertEquals("A9LVur", jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson0, jFinalJson2);
      assertSame(jFinalJson1, jFinalJson2);
      assertSame(jFinalJson1, json0);
      assertSame(jFinalJson1, jFinalJson0);
      assertEquals("[]", string1);
      
      // Undeclared exception!
      try { 
        jFinalJson1.toJson(jFinalJson0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      HashMap<Character, Date> hashMap0 = new HashMap<Character, Date>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Json json0 = jFinalJson0.setDatePattern("<");
      assertNotNull(json0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(json0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(json0, jFinalJson0);
      
      int int0 = 5;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      String string0 = jFinalJson0.otherToJson(hashMap0, 569);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jFinalJson0, json0);
      
      Timestamp timestamp0 = new Timestamp(5);
      assertNotNull(timestamp0);
      assertEquals("1970-01-01 00:00:00.005", timestamp0.toString());
      assertEquals(5000000, timestamp0.getNanos());
      
      Date date0 = hashMap0.put((Character) null, timestamp0);
      assertNull(date0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("1970-01-01 00:00:00.005", timestamp0.toString());
      assertEquals(5000000, timestamp0.getNanos());
      
      MockDate mockDate0 = new MockDate(5, 5, 0, (-377), 0, (-1188));
      assertNotNull(mockDate0);
      
      Date date1 = hashMap0.put(character0, mockDate0);
      assertNull(date1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("Mon May 15 06:40:12 GMT 1905", mockDate0.toString());
      
      Json json1 = Json.getJson();
      assertFalse(json1.equals((Object)jFinalJson0));
      assertFalse(json1.equals((Object)json0));
      assertNotNull(json1);
      assertNull(json1.getDefaultDatePattern());
      assertNull(json1.getDatePattern());
      assertNotSame(json1, jFinalJson0);
      assertNotSame(json1, json0);
      
      String string1 = jFinalJson0.mapToJson(hashMap0, 5);
      assertFalse(jFinalJson0.equals((Object)json1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertSame(jFinalJson0, json0);
      assertNotSame(jFinalJson0, json1);
      assertEquals("{\"null\":\"1970-01-01 00:00:00\",\"T\":\"<\"}", string1);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jFinalJson0.parse("File for ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jfinal 3.4\u9ED8\u8BA4 json \u5B9E\u73B0\u6682\u4E0D\u652F\u6301 json \u5230 object \u7684\u8F6C\u6362,\u5EFA\u8BAE\u4F7F\u7528 active recrord \u7684 Generator \u751F\u6210 base model\uFF0C\u518D\u901A\u8FC7 me.setJsonFactory(new MixedJsonFactory()) \u6765\u652F\u6301
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      Json.setDefaultDatePattern("com.jfinal.plugin.activerecord.Page");
      HashMap<Timestamp, Short> hashMap0 = new HashMap<Timestamp, Short>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = jFinalJson0.mapToJson(hashMap0, 0);
      assertNotNull(string0);
      assertEquals("com.jfinal.plugin.activerecord.Page", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("{}", string0);
      
      Time time0 = new Time(0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      // Undeclared exception!
      try { 
        jFinalJson0.beanToJson(time0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Record record0 = new Record();
      assertNotNull(record0);
      
      Timestamp timestamp0 = record0.getTimestamp("");
      assertNull(timestamp0);
      
      // Undeclared exception!
      try { 
        jFinalJson0.otherToJson((Object) null, (-2527));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      JFinalJson jFinalJson1 = jFinalJson0.setConvertDepth(2);
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      String string0 = jFinalJson1.escape("Ah9<(#XgDS0Eq<({");
      assertNotNull(string0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      assertEquals("Ah9<(#XgDS0Eq<({", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string0 = "Y~d3v,lV";
      String string1 = jFinalJson0.escape("Y~d3v,lV");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("Y~d3v,lV", string1);
      
      Json json0 = jFinalJson0.setDatePattern(".IIL1b^Y");
      assertNotNull(json0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(json0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(json0, jFinalJson0);
      
      int int0 = 4;
      String string2 = jFinalJson0.otherToJson(json0, 4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(json0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(json0, jFinalJson0);
      assertEquals("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}}}}}}", string2);
      
      String string3 = jFinalJson0.beanToJson("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}}}}}}", 4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, json0);
      
      int int1 = 1644;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1644);
      assertNotNull(zoneOffset0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      Clock clock0 = MockClock.system(zoneOffset0);
      assertNotNull(clock0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      assertNotNull(thaiBuddhistDate0);
      
      String string4 = jFinalJson0.toJson(thaiBuddhistDate0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, json0);
      
      String string5 = jFinalJson0.beanToJson("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}}}}}}", 1644);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, json0);
      
      JFinalJson jFinalJson1 = JFinalJson.getJson();
      assertFalse(jFinalJson1.equals((Object)jFinalJson0));
      assertFalse(jFinalJson1.equals((Object)json0));
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNotSame(jFinalJson1, jFinalJson0);
      assertNotSame(jFinalJson1, json0);
      
      int int2 = 0;
      String string6 = jFinalJson0.toJson((Object) "Y~d3v,lV", 0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(jFinalJson0.equals((Object)jFinalJson1));
      assertNotNull(string6);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, json0);
      assertNotSame(jFinalJson0, jFinalJson1);
      assertEquals("\"Y~d3v,lV\"", string6);
      
      JFinalJson.setDefaultConvertDepth(1644);
      Record record0 = new Record();
      assertNotNull(record0);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2869), (CharSequence) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2869
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      JapaneseDate japaneseDate0 = MockJapaneseDate.from(zonedDateTime0);
      assertNotNull(japaneseDate0);
      
      String string0 = jFinalJson0.toJson(japaneseDate0);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("{\"era\":{\"value\":java.lang.Integer@0000000002},\"chronology\":{\"calendarType\":\"japanese\",\"id\":\"Japanese\"},\"leapYear\":java.lang.Boolean@0000000003}", "");
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2110, 2110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2110
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      HashMap<StringTokenizer, ContentType> hashMap0 = new HashMap<StringTokenizer, ContentType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ContentType contentType0 = ContentType.JAVASCRIPT;
      ContentType contentType1 = hashMap0.getOrDefault(jFinalJson0, contentType0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("application/javascript", contentType1.toString());
      assertEquals("application/javascript", contentType1.value());
      assertSame(contentType0, contentType1);
      assertSame(contentType1, contentType0);
      assertEquals(ContentType.JAVASCRIPT, contentType1);
      
      ContentType contentType2 = ContentType.TEXT;
      ContentType contentType3 = hashMap0.getOrDefault(jFinalJson0, contentType2);
      assertFalse(contentType2.equals((Object)contentType1));
      assertFalse(contentType2.equals((Object)contentType0));
      assertFalse(contentType3.equals((Object)contentType1));
      assertFalse(contentType3.equals((Object)contentType0));
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("text/plain", contentType3.value());
      assertEquals("text/plain", contentType3.toString());
      assertNotSame(contentType2, contentType1);
      assertNotSame(contentType2, contentType0);
      assertSame(contentType2, contentType3);
      assertNotSame(contentType3, contentType1);
      assertSame(contentType3, contentType2);
      assertNotSame(contentType3, contentType0);
      assertEquals(ContentType.TEXT, contentType3);
      
      String string0 = jFinalJson0.mapToJson(hashMap0, (-5416));
      assertNotNull(string0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("{}", string0);
      
      String string1 = jFinalJson0.otherToJson(contentType2, (-1590));
      assertFalse(contentType2.equals((Object)contentType1));
      assertFalse(contentType2.equals((Object)contentType0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNotSame(contentType2, contentType1);
      assertNotSame(contentType2, contentType0);
      assertSame(contentType2, contentType3);
      assertEquals("\"text/plain\"", string1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string2 = jFinalJson0.iteratorToJson(iterator0, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(linkedHashSet0.contains(string0));
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", string2);
      
      StringBuilder stringBuilder0 = new StringBuilder("[]");
      assertNotNull(stringBuilder0);
      assertEquals("[]", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.delete(123, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertNotNull(stringBuilder1);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'x';
      charArray0[2] = '`';
      charArray0[3] = 't';
      charArray0[4] = '2';
      charArray0[5] = '=';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertNotNull(stringBuilder2);
      assertEquals("trueHx`t2=", stringBuilder0.toString());
      assertEquals("trueHx`t2=", stringBuilder1.toString());
      assertEquals("trueHx`t2=", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'x', '`', 't', '2', '='}, charArray0);
      
      StringBuilder stringBuilder3 = stringBuilder2.replace(0, 0, "");
      assertNotNull(stringBuilder3);
      assertEquals("trueHx`t2=", stringBuilder0.toString());
      assertEquals("trueHx`t2=", stringBuilder1.toString());
      assertEquals("trueHx`t2=", stringBuilder2.toString());
      assertEquals("trueHx`t2=", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'x', '`', 't', '2', '='}, charArray0);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((Object) jFinalJson0);
      assertNotNull(stringBuilder4);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'x', '`', 't', '2', '='}, charArray0);
      
      jFinalJson0.escape("", stringBuilder4);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'x', '`', 't', '2', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("datePattern can not be blank.");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      // Undeclared exception!
      try { 
        jFinalJson0.beanToJson((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern(",WEZ$");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("", ",WEZ$");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      boolean boolean0 = stringTokenizer0.hasMoreTokens();
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(boolean0);
      
      String string0 = jFinalJson1.otherToJson(stringTokenizer0, 8);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertEquals(0, stringTokenizer0.countTokens());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string0 = "\\t";
      jFinalJson0.datePattern = "\t";
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      int int0 = (-328);
      // Undeclared exception!
      try { 
        jFinalJson0.iteratorToJson((Iterator) null, (-328));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("CfP53mauh7f?!pfF)");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      Json.setDefaultDatePattern("CfP53mauh7f?!pfF)");
      String string0 = null;
      Integer integer0 = Integer.valueOf(3582);
      assertNotNull(integer0);
      assertEquals(3582, (int)integer0);
      
      String string1 = jFinalJson0.toJson((Object) integer0, 92);
      assertNotNull(string1);
      assertEquals("CfP53mauh7f?!pfF)", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CfP53mauh7f?!pfF)");
      assertNotNull(stringBuilder0);
      assertEquals("CfP53mauh7f?!pfF)", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        jFinalJson0.escape((String) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Long long0 = new Long(1046L);
      assertNotNull(long0);
      assertEquals(1046L, (long)long0);
      
      String string0 = jFinalJson0.toJson((Object) long0, (-527));
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      jFinalJson0.timestampPattern = "";
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = jFinalJson0.mapToJson(hashMap0, 4);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", string0);
      
      jFinalJson0.toKeyValue("fOtG/", "fOtG/", stringBuilder0, 114);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("\"fOtG/\":\"fOtG/\"", stringBuilder0.toString());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertTrue(linkedHashSet0.contains(""));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertTrue(linkedHashSet0.contains(""));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string1 = jFinalJson0.iteratorToJson(iterator0, 706);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(linkedHashSet0.contains("fOtG/"));
      assertTrue(linkedHashSet0.contains(""));
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("[\"\"]", string1);
      
      jFinalJson0.toKeyValue("", hashMap0, stringBuilder0, 114);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("\"fOtG/\":\"fOtG/\"\"\":{}", stringBuilder0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Time time0 = new Time((-234L));
      assertNotNull(time0);
      assertEquals("23:59:59", time0.toString());
      
      // Undeclared exception!
      try { 
        jFinalJson0.toKeyValue((String) null, time0, (StringBuilder) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      byte byte1 = (byte)0;
      int int0 = Byte.toUnsignedInt((byte)0);
      assertEquals(0, int0);
      
      Json.setDefaultDatePattern("XML");
      String string0 = jFinalJson0.otherToJson(byte0, (-965));
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(string0);
      assertEquals("XML", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("{}", string0);
      
      String string1 = jFinalJson0.beanToJson(byte0, (-1928));
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("XML", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("{}", string1);
      
      String string2 = null;
      String string3 = jFinalJson0.escape((String) null);
      assertNull(string3);
      assertEquals("XML", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      // Undeclared exception!
      try { 
        jFinalJson0.setConvertDepth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // convert depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string0 = jFinalJson0.escape("");
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("", string0);
      
      String string1 = "com.jfinal.json.Json";
      jFinalJson0.timestampPattern = "";
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      String string2 = jFinalJson0.toJson(float0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      int int0 = 291;
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertNotNull(stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      float float1 = Float.max(0.0F, (-1423.7682F));
      assertEquals(0.0F, float1, 0.01F);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(291, (CharSequence) stringBuilder1, 291, 1671);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 291
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string0 = jFinalJson0.escape("LvDcI2\"rI0+lZ6");
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("LvDcI2\\\"rI0+lZ\\u007F6", string0);
      
      int int0 = (-695);
      String string1 = jFinalJson0.beanToJson("LvDcI2\"rI0+lZ6", (-695));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("{\"bytes\":null,\"empty\":null}", string1);
      
      int int1 = (-1);
      String string2 = jFinalJson0.otherToJson("LvDcI2\"rI0+lZ6", (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("{\"bytes\":null,\"empty\":null}", string2);
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("yyyy-MM-dd");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      jFinalJson1.timestampPattern = "{\"bytes\":null,\"empty\":null}";
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      
      // Undeclared exception!
      try { 
        JFinalJson.setDefaultConvertDepth((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultConvertDepth depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      assertEquals(ThaiBuddhistEra.BE, thaiBuddhistEra0);
      
      Json json0 = jFinalJson0.setDatePattern("+ U21&`S3*J");
      assertNotNull(json0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(json0.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertSame(jFinalJson0, json0);
      assertSame(json0, jFinalJson0);
      
      int int0 = 0;
      String string0 = jFinalJson0.toJson((Object) "+ U21&`S3*J", 0);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, json0);
      assertEquals("\"+ U\\u007F21&`S3*J\"", string0);
      
      String string1 = jFinalJson0.escape("+ U21&`S3*J");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, json0);
      assertEquals("+ U\\u007F21&`S3*J", string1);
      
      // Undeclared exception!
      try { 
        MockJapaneseDate.from(thaiBuddhistEra0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: BE of type java.time.chrono.ThaiBuddhistEra
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      JFinalJson jFinalJson1 = jFinalJson0.setConvertDepth(2194);
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      String string0 = jFinalJson1.otherToJson(jFinalJson0, (-174));
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      assertEquals("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}", string0);
      
      String string1 = jFinalJson0.escape("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertEquals("{\\\"defaultDatePattern\\\":null,\\\"datePattern\\\":null,\\\"json\\\":null}", string1);
      
      // Undeclared exception!
      try { 
        jFinalJson1.setDatePattern((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      String string0 = "timestampPattern can not be blank.";
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("timestampPattern can not be blank.");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      // Undeclared exception!
      try { 
        JFinalJson.setDefaultConvertDepth((-1041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultConvertDepth depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "Class";
      Json.setDefaultDatePattern("Class");
      int int0 = 8447;
      String string1 = jFinalJson0.mapToJson(hashMap0, 8447);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Class", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", string1);
      
      Record record0 = new Record();
      assertNotNull(record0);
      
      String string2 = jFinalJson0.toJson((Object) record0, 8447);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Class", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("{}", string2);
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("Class");
      assertNotNull(jFinalJson1);
      assertEquals("Class", jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("Class", jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      StringBuilder stringBuilder0 = new StringBuilder(8447);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(8447);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8447
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(2134L);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      String string0 = jFinalJson0.toJson((Object) null);
      assertNotNull(string0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals("null", string0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      mockDate0.setTime(1L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      String string1 = jFinalJson0.toJson((Object) mockDate0, 127);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("\"1970-01-01\"", string1);
      
      JFinalJson.setDefaultConvertDepth(127);
      JFinalJson jFinalJson1 = JFinalJson.getJson();
      assertFalse(jFinalJson1.equals((Object)jFinalJson0));
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson1.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNotSame(jFinalJson1, jFinalJson0);
      
      // Undeclared exception!
      try { 
        jFinalJson1.setTimestampPattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timestampPattern can not be blank.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(false, false);
      assertFalse(boolean1);
      
      String string0 = jFinalJson0.toJson((Object) boolean0, 125);
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string1 = jFinalJson0.escape("[vnk4");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("[vnk4", string1);
      
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(2654);
      assertNotNull(integer0);
      assertEquals(2654, (int)integer0);
      
      Integer integer1 = hashMap0.put((Byte) null, integer0);
      assertNull(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string2 = jFinalJson0.mapToJson(hashMap0, 125);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string0 = jFinalJson0.escape("");
      assertNotNull(string0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("", string0);
      
      String string1 = jFinalJson0.mapToJson((Map) null, 48);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("null", string1);
      
      Byte byte0 = new Byte((byte)12);
      assertNotNull(byte0);
      assertEquals((byte)12, (byte)byte0);
      
      String string2 = jFinalJson0.toJson((Object) byte0, 48);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      String string3 = jFinalJson0.mapToJson((Map) null, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertEquals("null", string3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      String string0 = "#Hf(|pbav$";
      String string1 = null;
      // Undeclared exception!
      try { 
        jFinalJson0.setDatePattern((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      MixedJsonFactory mixedJsonFactory0 = MixedJsonFactory.me();
      assertNotNull(mixedJsonFactory0);
      
      Json.setDefaultJsonFactory(mixedJsonFactory0);
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("44C=GrnK *O");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      Class<Record> class0 = Record.class;
      // Undeclared exception!
      try { 
        jFinalJson1.parse("44C=GrnK *O", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jfinal 3.4\u9ED8\u8BA4 json \u5B9E\u73B0\u6682\u4E0D\u652F\u6301 json \u5230 object \u7684\u8F6C\u6362,\u5EFA\u8BAE\u4F7F\u7528 active recrord \u7684 Generator \u751F\u6210 base model\uFF0C\u518D\u901A\u8FC7 me.setJsonFactory(new MixedJsonFactory()) \u6765\u652F\u6301
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      // Undeclared exception!
      try { 
        jFinalJson0.setTimestampPattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timestampPattern can not be blank.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson0.getDatePattern());
      
      // Undeclared exception!
      try { 
        jFinalJson0.setConvertDepth((-647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // convert depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = jFinalJson0.iteratorToJson(listIterator0, 120);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(120));
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("[]", string0);
      
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("SystemResourceAsStream");
      assertNotNull(jFinalJson1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson1, jFinalJson0);
      
      Record record0 = new Record();
      assertNotNull(record0);
      
      String string1 = jFinalJson0.toJson(record0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertEquals("{}", string1);
      
      Json json0 = jFinalJson1.setDatePattern("SerializerProvider");
      assertNotNull(json0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson1.getDefaultDatePattern());
      assertNull(jFinalJson1.getDatePattern());
      assertNull(json0.getDefaultDatePattern());
      assertNull(json0.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson0, json0);
      assertSame(jFinalJson1, jFinalJson0);
      assertSame(jFinalJson1, json0);
      assertSame(json0, jFinalJson0);
      assertSame(json0, jFinalJson1);
      
      JFinalJson jFinalJson2 = jFinalJson0.setTimestampPattern("SystemResourceAsStream");
      assertNotNull(jFinalJson2);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      assertNull(jFinalJson2.getDefaultDatePattern());
      assertNull(jFinalJson2.getDatePattern());
      assertSame(jFinalJson0, jFinalJson1);
      assertSame(jFinalJson0, json0);
      assertSame(jFinalJson0, jFinalJson2);
      assertSame(jFinalJson2, json0);
      assertSame(jFinalJson2, jFinalJson0);
      assertSame(jFinalJson2, jFinalJson1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      assertNotNull(jFinalJson0);
      assertNull(jFinalJson0.getDatePattern());
      assertNull(jFinalJson0.getDefaultDatePattern());
      
      // Undeclared exception!
      try { 
        jFinalJson0.setConvertDepth((-366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // convert depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      JFinalJson jFinalJson1 = JFinalJson.getJson();
      Float float0 = new Float(2607.25834485);
      jFinalJson1.otherToJson(float0, 8);
      ContentType contentType0 = ContentType.TEXT;
      Iterator<ContentType> iterator0 = (Iterator<ContentType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(contentType0).when(iterator0).next();
      String string0 = jFinalJson1.iteratorToJson(iterator0, 8);
      assertEquals("[\"text/plain\"]", string0);
      
      Record record0 = new Record();
      String string1 = jFinalJson0.toJson((Object) record0, 8);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      int int0 = 101;
      MockDate mockDate0 = new MockDate(8, 101, 101, 8, 3340);
      mockDate0.setTime(3340);
      JFinalJson.getJson();
      jFinalJson0.toJson(mockDate0);
      String string0 = "DeclaredConstructor";
      jFinalJson0.setDatePattern("DeclaredConstructor");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\"1970-01-01\"");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(101, (float) 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 101
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      int int0 = 8;
      int int1 = 101;
      int int2 = 3340;
      MockDate mockDate0 = new MockDate(8, 101, 101, 8, 3340);
      mockDate0.setTime(3340);
      mockDate0.toInstant();
      JFinalJson.getJson();
      jFinalJson0.toJson(mockDate0);
      String string0 = "DeclaredConstructor";
      jFinalJson0.setDatePattern("DeclaredConstructor");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\"1970-01-01\"");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(101, (float) 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 101
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      JFinalJson jFinalJson1 = jFinalJson0.setConvertDepth(8447);
      Iterator<ContentType> iterator0 = (Iterator<ContentType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      MixedJsonFactory mixedJsonFactory0 = new MixedJsonFactory();
      Json.setDefaultJsonFactory(mixedJsonFactory0);
      jFinalJson0.iteratorToJson(iterator0, 31);
      jFinalJson1.escape("s|N#");
      StringBuilder stringBuilder0 = new StringBuilder(" can not be null.");
      jFinalJson1.toKeyValue("", "[]", stringBuilder0, 31);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      jFinalJson1.mapToJson(hashMap0, 125);
      jFinalJson1.mapToJson(hashMap0, 91);
      jFinalJson1.escape("UKZ]Mcz{^$D:1Gqgpi");
      jFinalJson1.escape("v*q$");
      JFinalJson.getJson();
      jFinalJson0.escape("IdcgrCNq]e}C", stringBuilder0);
      assertEquals(" can not be null.\"\":\"[]\"IdcgrCNq]e}C", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      Double double0 = new Double(0.0);
      JFinalJson.getJson();
      Double.sum(0.0, 0.0);
      String string0 = jFinalJson0.toJson((Object) double0, 8447);
      String string1 = jFinalJson0.beanToJson(double0, 8447);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("MOr%e7TqY&Km");
      JFinalJson jFinalJson2 = jFinalJson1.setConvertDepth(5);
      Character character0 = new Character(')');
      jFinalJson2.otherToJson(character0, 5);
      jFinalJson2.toJson((Object) null);
      // Undeclared exception!
      try { 
        jFinalJson1.setConvertDepth((-880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // convert depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      JFinalJson jFinalJson1 = jFinalJson0.setTimestampPattern("s]c<^sMZt");
      assertNull(jFinalJson1.getDatePattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      int int0 = 8;
      JFinalJson jFinalJson1 = jFinalJson0.setConvertDepth(8);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jFinalJson1.parse("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jfinal 3.4\u9ED8\u8BA4 json \u5B9E\u73B0\u6682\u4E0D\u652F\u6301 json \u5230 object \u7684\u8F6C\u6362,\u5EFA\u8BAE\u4F7F\u7528 active recrord \u7684 Generator \u751F\u6210 base model\uFF0C\u518D\u901A\u8FC7 me.setJsonFactory(new MixedJsonFactory()) \u6765\u652F\u6301
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      // Undeclared exception!
      try { 
        jFinalJson0.setDatePattern("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JFinalJson jFinalJson0 = new JFinalJson();
      jFinalJson0.setTimestampPattern("!v0}|5");
      String string0 = "null";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-165.194F));
      StringBuilder stringBuilder2 = stringBuilder1.append(0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1417), (CharSequence) stringBuilder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1417
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
