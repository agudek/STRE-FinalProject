/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:49:30 GMT 2018
 */

package com.jfinal.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.jfinal.json.FastJsonRecordSerializer;
import com.jfinal.plugin.activerecord.Record;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FastJsonRecordSerializer_ESTest extends FastJsonRecordSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FastJsonRecordSerializer fastJsonRecordSerializer0 = new FastJsonRecordSerializer();
      Record record0 = new Record();
      // Undeclared exception!
      try { 
        fastJsonRecordSerializer0.write((JSONSerializer) null, record0, "@ \",G", (Type) null, 83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.FastJsonRecordSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FastJsonRecordSerializer fastJsonRecordSerializer0 = new FastJsonRecordSerializer();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Class<Record> class0 = Record.class;
      String[] stringArray0 = new String[7];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        fastJsonRecordSerializer0.write(jSONSerializer0, serializeConfig0, serializeConfig0, class1, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.serializer.SerializeConfig cannot be cast to com.jfinal.plugin.activerecord.Record
         //
         verifyException("com.jfinal.json.FastJsonRecordSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FastJsonRecordSerializer fastJsonRecordSerializer0 = new FastJsonRecordSerializer();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Class<Record> class0 = Record.class;
      String[] stringArray0 = new String[7];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      fastJsonRecordSerializer0.write(jSONSerializer0, (Object) null, (Object) null, class1, 333);
      assertFalse(class1.isInterface());
  }
}
