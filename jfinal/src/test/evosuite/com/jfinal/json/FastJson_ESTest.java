/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:23:15 GMT 2018
 */

package com.jfinal.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.ParserConfig;
import com.jfinal.json.FastJson;
import com.jfinal.json.Json;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FastJson_ESTest extends FastJson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FastJson fastJson0 = FastJson.getJson();
      Json.setDefaultDatePattern("{}");
      String string0 = fastJson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      Class<String> class0 = String.class;
      String string0 = fastJson0.parse("", class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      JSON.DEFAULT_GENERATE_FEATURE = 1141048066;
      // Undeclared exception!
      try { 
        fastJson0.toJson("com.jfinal.json.FastJson");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        fastJson0.parse("i6<", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      ParserConfig.global = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        fastJson0.parse("g siE+ ", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FastJson fastJson0 = FastJson.getJson();
      fastJson0.setDatePattern("com.jfinal.jso91FastJso");
      // Undeclared exception!
      try { 
        fastJson0.toJson("com.jfinal.jso91FastJso");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }
}
