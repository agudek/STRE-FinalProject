/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:12:22 GMT 2018
 */

package com.jfinal.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.jfinal.json.FastJson;
import com.jfinal.json.FastJsonFactory;
import com.jfinal.json.IJsonFactory;
import com.jfinal.json.JFinalJson;
import com.jfinal.json.JFinalJsonFactory;
import com.jfinal.json.Jackson;
import com.jfinal.json.JacksonFactory;
import com.jfinal.json.Json;
import com.jfinal.json.MixedJsonFactory;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.time.chrono.ThaiBuddhistEra;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Stack;
import javax.swing.JProgressBar;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Json_ESTest extends Json_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1167;
      JFinalJson.setDefaultConvertDepth(1167);
      FastJson fastJson0 = FastJson.getJson();
      String string0 = "aSXL](KG kh";
      Json json0 = fastJson0.setDatePattern("aSXL](KG kh");
      Json.getJson();
      JFinalJsonFactory jFinalJsonFactory0 = JFinalJsonFactory.me();
      Json.setDefaultJsonFactory(jFinalJsonFactory0);
      IJsonFactory iJsonFactory0 = null;
      Json json1 = Json.getJson();
      // Undeclared exception!
      try { 
        json1.toJson(json0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FastJson fastJson0 = FastJson.getJson();
      JProgressBar jProgressBar0 = new JProgressBar();
      jProgressBar0.getToolTipLocation((MouseEvent) null);
      // Undeclared exception!
      fastJson0.toJson(jProgressBar0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jackson jackson0 = new Jackson();
      Json json0 = jackson0.setDatePattern("*f>[,");
      // Undeclared exception!
      try { 
        json0.toJson(jackson0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      String string0 = "datePattern can not be blank.";
      String string1 = "sm:j";
      Json.setDefaultDatePattern("sm:j");
      fastJson0.datePattern = "datePattern can not be blank.";
      fastJson0.getDatePattern();
      JFinalJson jFinalJson0 = new JFinalJson();
      jFinalJson0.setConvertDepth(2234);
      Jackson jackson0 = new Jackson();
      MixedJsonFactory mixedJsonFactory0 = MixedJsonFactory.me();
      Json.setDefaultJsonFactory(mixedJsonFactory0);
      jackson0.setGenerateNullValue(true);
      Stack<FloatNode> stack0 = new Stack<FloatNode>();
      DefaultTableModel defaultTableModel0 = null;
      try {
        defaultTableModel0 = new DefaultTableModel(stack0, (-123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -123
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      Class<String> class0 = String.class;
      fastJson0.parse("", class0);
      JFinalJson jFinalJson0 = new JFinalJson();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jFinalJson0.setConvertDepth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // convert depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jackson jackson0 = new Jackson();
      Jackson jackson1 = jackson0.setGenerateNullValue(true);
      Jackson.setDefaultGenerateNullValue(false);
      Jackson.setDefaultGenerateNullValue(false);
      Jackson.getJson();
      jackson0.config();
      jackson1.datePattern = "";
      Boolean boolean0 = Boolean.TRUE;
      jackson1.generateNullValue = boolean0;
      Boolean.getBoolean("");
      jackson1.getDatePattern();
      jackson1.config();
      Json.getJson();
      JacksonFactory jacksonFactory0 = JacksonFactory.me();
      jacksonFactory0.getJson();
      Json.setDefaultJsonFactory(jacksonFactory0);
      Json.getJson();
      JFinalJson.getJson();
      jackson1.getObjectMapper();
      FastJson fastJson0 = new FastJson();
      Class<String> class0 = String.class;
      FastJson.getJson();
      // Undeclared exception!
      try { 
        fastJson0.parse(") to output; max is 0x10FFFF as per RFC 4627", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ), pos 0
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "CLOSE_CLOSEABLE";
      Json.setDefaultDatePattern("CLOSE_CLOSEABLE");
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      JFinalJson jFinalJson1 = jFinalJson0.setConvertDepth(2528);
      int int0 = 0;
      jFinalJson1.beanToJson(jFinalJson0, 0);
      MixedJsonFactory mixedJsonFactory0 = MixedJsonFactory.me();
      Json.setDefaultJsonFactory(mixedJsonFactory0);
      jFinalJson0.getDefaultDatePattern();
      Object object0 = null;
      String string1 = null;
      FastJson fastJson0 = FastJson.getJson();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        fastJson0.parse("CLOSE_CLOSEABLE", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jackson jackson0 = Jackson.getJson();
      Json json0 = Json.getJson();
      ObjectMapper objectMapper0 = jackson0.getObjectMapper();
      jackson0.setGenerateNullValue(false);
      String string0 = ") not of boolean type";
      json0.datePattern = ") not of boolean type";
      Json.setDefaultDatePattern("36i|_G=");
      // Undeclared exception!
      try { 
        json0.toJson(objectMapper0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Jackson jackson0 = Jackson.getJson();
      Jackson jackson1 = jackson0.setGenerateNullValue(true);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      // Undeclared exception!
      try { 
        jackson1.parse((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Json.setDefaultJsonFactory((IJsonFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultJsonFactory can not be null.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastJson fastJson0 = FastJson.getJson();
      Json.setDefaultDatePattern("NON_EMPTY");
      String string0 = "";
      // Undeclared exception!
      try { 
        fastJson0.setDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      Class<Object> class0 = Object.class;
      Json json0 = Json.getJson();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      json0.toJson(thaiBuddhistEra0);
      fastJson0.parse("", class0);
      String string0 = "";
      // Undeclared exception!
      try { 
        fastJson0.setDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JFinalJson.getJson();
      String string0 = "";
      // Undeclared exception!
      try { 
        Json.setDefaultDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultDatePattern can not be blank.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      jFinalJson0.setDatePattern("<lVT~%@;|P");
      jFinalJson0.setTimestampPattern("<lVT~%@;|P");
      JFinalJson.setDefaultConvertDepth(110);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      jFinalJson0.datePattern = "~dRL&:>?:";
      jFinalJson0.toJson("~dRL&:>?:");
      Class<FloatNode> class0 = FloatNode.class;
      // Undeclared exception!
      try { 
        jFinalJson0.parse("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jfinal 3.4\u9ED8\u8BA4 json \u5B9E\u73B0\u6682\u4E0D\u652F\u6301 json \u5230 object \u7684\u8F6C\u6362,\u5EFA\u8BAE\u4F7F\u7528 active recrord \u7684 Generator \u751F\u6210 base model\uFF0C\u518D\u901A\u8FC7 me.setJsonFactory(new MixedJsonFactory()) \u6765\u652F\u6301
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MixedJsonFactory mixedJsonFactory0 = MixedJsonFactory.me();
      Json.setDefaultJsonFactory(mixedJsonFactory0);
      Json json0 = mixedJsonFactory0.getJson();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        json0.parse("com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastJsonFactory fastJsonFactory0 = new FastJsonFactory();
      Json json0 = fastJsonFactory0.getJson();
      json0.datePattern = "";
      String string0 = json0.getDefaultDatePattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Jackson jackson0 = new Jackson();
      JacksonFactory jacksonFactory0 = new JacksonFactory();
      jacksonFactory0.getJson();
      jackson0.datePattern = "JDs'R?R$Q2Ax";
      jackson0.setGenerateNullValue(true);
      Json.setDefaultJsonFactory(jacksonFactory0);
      jackson0.config();
      FastJson.getJson();
      FastJson.getJson();
      Json.setDefaultDatePattern("_;Txz0m/Xg");
      Json.getJson();
      FastJson fastJson0 = FastJson.getJson();
      assertNull(fastJson0.getDatePattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Json.setDefaultDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultDatePattern can not be blank.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JacksonFactory jacksonFactory0 = new JacksonFactory();
      Json.setDefaultJsonFactory(jacksonFactory0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastJson fastJson0 = new FastJson();
      Json json0 = fastJson0.setDatePattern("-@z8p?={yB%=X");
      assertSame(json0, fastJson0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Json json0 = Json.getJson();
      MixedJsonFactory.me();
      String string0 = json0.getDatePattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastJson fastJson0 = FastJson.getJson();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      fastJson0.datePattern = null;
      fastJson0.toJson(thaiBuddhistEra0);
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jFinalJson0.iteratorToJson((Iterator) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastJson fastJson0 = FastJson.getJson();
      fastJson0.setDatePattern("aSXL](KG kh");
      Json.getJson();
      JFinalJsonFactory jFinalJsonFactory0 = JFinalJsonFactory.me();
      jFinalJsonFactory0.getJson();
      Json.setDefaultJsonFactory(jFinalJsonFactory0);
      Json.setDefaultDatePattern("aSXL](KG kh");
      IJsonFactory iJsonFactory0 = null;
      // Undeclared exception!
      try { 
        Json.setDefaultJsonFactory((IJsonFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultJsonFactory can not be null.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Json.setDefaultDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultDatePattern can not be blank.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastJson fastJson0 = FastJson.getJson();
      // Undeclared exception!
      try { 
        fastJson0.setDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.json.Json", e);
      }
  }
}
