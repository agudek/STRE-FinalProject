/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:03:37 GMT 2018
 */

package com.jfinal.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.core.ActionException;
import com.jfinal.render.ErrorRender;
import com.jfinal.render.HtmlRender;
import com.jfinal.render.Render;
import com.jfinal.render.VelocityRender;
import com.jfinal.render.XmlRender;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ActionException_ESTest extends ActionException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ErrorRender errorRender0 = new ErrorRender(0, "Trying to find [");
      ActionException actionException0 = new ActionException((-1), errorRender0);
      actionException0.getErrorRender();
      assertEquals((-1), actionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlRender xmlRender0 = new XmlRender("&iP$E\"A{E");
      ActionException actionException0 = new ActionException(0, xmlRender0, "&iP$E\"A{E");
      int int0 = actionException0.getErrorCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VelocityRender velocityRender0 = new VelocityRender((String) null);
      ActionException actionException0 = new ActionException((-3067), velocityRender0, (String) null);
      int int0 = actionException0.getErrorCode();
      assertEquals((-3067), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ActionException actionException0 = null;
      try {
        actionException0 = new ActionException(1452, (Render) null, "com.jfinal.core.ActionException$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter errorRender can not be null.
         //
         verifyException("com.jfinal.core.ActionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ActionException actionException0 = null;
      try {
        actionException0 = new ActionException((-247), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter errorView can not be blank.
         //
         verifyException("com.jfinal.core.ActionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ActionException actionException0 = null;
      try {
        actionException0 = new ActionException(490, "]T*;.|b\"~tA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.core.ActionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ActionException actionException0 = null;
      try {
        actionException0 = new ActionException((-1960), (Render) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter errorRender can not be null.
         //
         verifyException("com.jfinal.core.ActionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HtmlRender htmlRender0 = new HtmlRender("ISO8859_1");
      ActionException actionException0 = new ActionException(4695, htmlRender0, "ISO8859_1");
      int int0 = actionException0.getErrorCode();
      assertEquals(4695, int0);
  }
}
