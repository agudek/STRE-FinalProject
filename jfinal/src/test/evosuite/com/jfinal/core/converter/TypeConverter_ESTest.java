/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:44:28 GMT 2018
 */

package com.jfinal.core.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.core.converter.Converters;
import com.jfinal.core.converter.IConverter;
import com.jfinal.core.converter.TypeConverter;
import java.sql.Date;
import java.text.ParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class TypeConverter_ESTest extends TypeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<Date> class0 = Date.class;
      try { 
        typeConverter0.convert(class0, "Du]");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Du]\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        typeConverter0.convert(class0, "com.jfinal.core.converter.TypeConverter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not parse to boolean type of value: com.jfinal.core.converter.TypeConverter
         //
         verifyException("com.jfinal.core.converter.Converters$BooleanConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        typeConverter0.convert(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.core.converter.TypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        typeConverter0.convert(class0, "_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<Converters.DateConverter> class0 = Converters.DateConverter.class;
      Object object0 = typeConverter0.convert(class0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<String> class0 = String.class;
      Object object0 = typeConverter0.convert(class0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<String> class0 = String.class;
      Object object0 = typeConverter0.convert(class0, "M|KA^;o(`Exc+84!kPn");
      assertEquals("M|KA^;o(`Exc+84!kPn", object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeConverter typeConverter0 = TypeConverter.me();
      Class<Converters.DateConverter> class0 = Converters.DateConverter.class;
      IConverter<Converters.DateConverter> iConverter0 = (IConverter<Converters.DateConverter>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      typeConverter0.regist(class0, iConverter0);
  }
}
