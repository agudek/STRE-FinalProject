/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:14:37 GMT 2018
 */

package com.jfinal.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.config.Constants;
import com.jfinal.config.Routes;
import com.jfinal.core.ActionHandler;
import com.jfinal.core.ActionMapping;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.eclipse.jetty.io.ByteArrayEndPoint;
import org.eclipse.jetty.server.BlockingHttpConnection;
import org.eclipse.jetty.server.LocalConnector;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Response;
import org.eclipse.jetty.server.Server;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ActionHandler_ESTest extends ActionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ActionHandler actionHandler0 = new ActionHandler();
      LocalConnector localConnector0 = new LocalConnector();
      ByteArrayEndPoint byteArrayEndPoint0 = new ByteArrayEndPoint();
      Server server0 = new Server(0);
      BlockingHttpConnection blockingHttpConnection0 = new BlockingHttpConnection(localConnector0, byteArrayEndPoint0, server0);
      Request request0 = new Request(blockingHttpConnection0);
      Response response0 = request0.getResponse();
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        actionHandler0.handle("ohgb>+d$/", request0, response0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.core.ActionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ActionHandler actionHandler0 = new ActionHandler();
      Routes routes0 = mock(Routes.class, new ViolatedAssumptionAnswer());
      ActionMapping actionMapping0 = new ActionMapping(routes0);
      Constants constants0 = new Constants();
      actionHandler0.init(actionMapping0, constants0);
      Request request0 = new Request();
      LocalConnector localConnector0 = new LocalConnector();
      ByteArrayEndPoint byteArrayEndPoint0 = new ByteArrayEndPoint();
      Server server0 = new Server();
      BlockingHttpConnection blockingHttpConnection0 = new BlockingHttpConnection(localConnector0, byteArrayEndPoint0, server0);
      Response response0 = blockingHttpConnection0.getResponse();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(response0);
      boolean[] booleanArray0 = new boolean[6];
      // Undeclared exception!
      try { 
        actionHandler0.handle("", request0, httpServletResponseWrapper0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.core.ActionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ActionHandler actionHandler0 = new ActionHandler();
      Request request0 = new Request();
      boolean[] booleanArray0 = new boolean[9];
      actionHandler0.handle("org.eclipse.multiPartContext", request0, (HttpServletResponse) null, booleanArray0);
      assertNull(request0.getRequestedSessionId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ActionHandler actionHandler0 = new ActionHandler();
      // Undeclared exception!
      try { 
        actionHandler0.init((ActionMapping) null, (Constants) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.core.ActionHandler", e);
      }
  }
}
