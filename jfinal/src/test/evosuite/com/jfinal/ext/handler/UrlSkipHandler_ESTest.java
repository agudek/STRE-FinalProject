/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:14:37 GMT 2018
 */

package com.jfinal.ext.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.ext.handler.UrlSkipHandler;
import java.util.regex.PatternSyntaxException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class UrlSkipHandler_ESTest extends UrlSkipHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UrlSkipHandler urlSkipHandler0 = null;
      try {
        urlSkipHandler0 = new UrlSkipHandler("AgEBqj4G;[v@@", false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 12
         // AgEBqj4G;[v@@
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      boolean[] booleanArray0 = new boolean[5];
      UrlSkipHandler urlSkipHandler0 = new UrlSkipHandler("com.jfifal.6it.StrKit", true);
      urlSkipHandler0.handle("com.jfifal.6it.StrKit", httpServletRequest0, httpServletResponse0, booleanArray0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UrlSkipHandler urlSkipHandler0 = new UrlSkipHandler(".t;C~q*!rMy ,v~@Co", false);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        urlSkipHandler0.handle(".t;C~q*!rMy ,v~@Co", httpServletRequest0, httpServletResponseWrapper0, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.ext.handler.UrlSkipHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UrlSkipHandler urlSkipHandler0 = null;
      try {
        urlSkipHandler0 = new UrlSkipHandler("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The para excludedUrlRegx can not be blank.
         //
         verifyException("com.jfinal.ext.handler.UrlSkipHandler", e);
      }
  }
}
