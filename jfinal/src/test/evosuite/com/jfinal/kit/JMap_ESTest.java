/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:24:19 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.JMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class JMap_ESTest extends JMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.by(object0, object0);
      JMap jMap1 = JMap.fail();
      Boolean boolean0 = new Boolean(false);
      JMap jMap2 = jMap1.set((Object) boolean0, object0);
      JMap jMap3 = JMap.by(object0, jMap1);
      JMap jMap4 = JMap.by((Object) null, jMap3);
      Integer integer0 = new Integer((-1232));
      JMap.ok((Object) integer0, (Object) boolean0);
      Object object1 = null;
      jMap4.isNull((Object) null);
      jMap4.isFalse(jMap2);
      jMap1.clone();
      jMap0.isFail();
      JMap jMap5 = jMap1.set(jMap3);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer.max(0, 0);
      // Undeclared exception!
      try { 
        jMap1.getInt(jMap5);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JMap jMap0 = new JMap();
      jMap0.isFail();
      JMap jMap1 = jMap0.setOk();
      jMap1.isOk();
      jMap0.toJson();
      Object object0 = new Object();
      Object object1 = new Object();
      jMap0.notNull(object1);
      JMap jMap2 = JMap.ok();
      jMap2.putAll(jMap0);
      JMap jMap3 = jMap0.set(object0, (Object) jMap2);
      JMap jMap4 = JMap.create();
      jMap4.getAs((Object) jMap0);
      Object object2 = new Object();
      jMap3.remove((Object) jMap1, object2);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap2.merge("{\"isOk\":java.lang.Boolean@0000000003,\"isFail\":java.lang.Boolean@0000000004}", "{\"isOk\":java.lang.Boolean@0000000003,\"isFail\":java.lang.Boolean@0000000004}", biFunction0);
      JMap jMap5 = JMap.ok();
      BiFunction<Integer, String, Integer> biFunction1 = (BiFunction<Integer, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap0.computeIfPresent(jMap5, biFunction1);
      Integer integer0 = new Integer(125);
      jMap3.getBoolean(integer0);
      JMap jMap6 = jMap2.set((Map) jMap0);
      jMap6.getStr("{\"isOk\":java.lang.Boolean@0000000003,\"isFail\":java.lang.Boolean@0000000004}");
      jMap3.set(jMap5);
      JMap.create();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      assertEquals(2, jMap0.size());
      
      JMap jMap1 = JMap.ok((Object) jMap0, (Object) "u~5K.FqH =G");
      Object object0 = new Object();
      Object object1 = new Object();
      JMap jMap2 = JMap.ok(object0, (Object) jMap0);
      jMap2.isFail();
      jMap0.notNull("u~5K.FqH =G");
      jMap0.getStr("u~5K.FqH =G");
      JMap jMap3 = jMap0.setFail();
      jMap3.set(jMap1);
      // Undeclared exception!
      try { 
        jMap2.isNull(jMap3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      JMap jMap1 = new JMap();
      jMap1.put(jMap0, jMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer(125);
      Object object1 = new Object();
      jMap1.replace(object0, (Object) integer0, object1);
      JMap jMap2 = jMap0.set((Map) jMap1);
      // Undeclared exception!
      try { 
        jMap2.getStr(jMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JMap jMap0 = JMap.create();
      jMap0.isOk();
      Object object0 = new Object();
      JMap jMap1 = JMap.create((Object) jMap0, object0);
      JMap jMap2 = jMap0.set((Object) jMap1, object0);
      Object object1 = new Object();
      JMap jMap3 = JMap.fail(object1, (Object) null);
      Long long0 = new Long((-3339L));
      BiFunction<JMap, String, Object> biFunction0 = (BiFunction<JMap, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap3.computeIfPresent(long0, biFunction0);
      JMap jMap4 = jMap0.set(jMap3);
      jMap3.isFail();
      jMap3.setOk();
      jMap4.clear();
      Object object2 = new Object();
      jMap3.equals(object2);
      JMap jMap5 = JMap.fail();
      JMap.create((Object) null, (Object) jMap5);
      JMap jMap6 = JMap.ok();
      jMap0.isNull(jMap6);
      jMap5.getBoolean((Object) null);
      JMap jMap7 = JMap.by(jMap4, (Object) null);
      jMap3.isOk();
      jMap3.notNull((Object) null);
      jMap4.set((Map) jMap7);
      Boolean boolean0 = Boolean.TRUE;
      jMap1.delete(boolean0);
      Object object3 = new Object();
      JMap.ok(object3, (Object) null);
      jMap3.toJson();
      // Undeclared exception!
      try { 
        jMap5.set((Object) jMap2, (Object) "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JMap jMap0 = JMap.create();
      Object object0 = new Object();
      jMap0.notNull(object0);
      long long0 = 0L;
      Object object1 = new Object();
      jMap0.put(object1, object0);
      Long long1 = new Long(0L);
      JMap jMap1 = JMap.ok((Object) long1, (Object) jMap0);
      Long.toUnsignedString(0L);
      jMap0.equals("0");
      JMap jMap2 = jMap0.set(jMap1);
      jMap2.getBoolean("0");
      // Undeclared exception!
      try { 
        jMap1.notNull(jMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.by(object0, object0);
      JMap jMap1 = JMap.fail();
      Boolean boolean0 = new Boolean(false);
      JMap jMap2 = JMap.by(object0, jMap1);
      JMap jMap3 = JMap.by((Object) null, jMap2);
      jMap3.isNull(boolean0);
      jMap3.isFalse(jMap0);
      jMap1.clone();
      jMap0.isFail();
      jMap1.set(jMap2);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JMap jMap4 = JMap.by(integer0, jMap3);
      jMap4.isOk();
      jMap2.isOk();
      jMap4.isTrue(jMap0);
      jMap1.setOk();
      // Undeclared exception!
      try { 
        jMap0.delete(jMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JMap jMap0 = JMap.create();
      jMap0.isOk();
      Object object0 = new Object();
      JMap jMap1 = JMap.create((Object) jMap0, object0);
      jMap0.set((Object) jMap1, object0);
      Object object1 = new Object();
      Object object2 = null;
      JMap jMap2 = JMap.fail(object1, (Object) null);
      Long long0 = new Long((-3339L));
      BiFunction<JMap, String, Object> biFunction0 = (BiFunction<JMap, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap2.computeIfPresent(long0, biFunction0);
      jMap0.set(jMap2);
      jMap2.isFail();
      // Undeclared exception!
      try { 
        JMap.ok((Object) jMap0, (Object) biFunction0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JMap jMap0 = JMap.ok();
      Long long0 = new Long(0L);
      jMap0.isTrue(long0);
      Long.min(0L, 3058L);
      JMap jMap1 = jMap0.set((Object) long0, (Object) long0);
      jMap1.getOrDefault((Object) null, long0);
      JMap jMap2 = JMap.create();
      jMap1.putIfAbsent("yyyy-MM-dd", "yyyy-MM-dd");
      jMap1.getLong(long0);
      JMap.ok();
      Long long1 = new Long(0L);
      JMap jMap3 = JMap.fail();
      JMap jMap4 = jMap2.set((Object) long1, (Object) jMap3);
      assertNotSame(jMap3, jMap4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JMap jMap0 = JMap.create();
      jMap0.isOk();
      Object object0 = new Object();
      JMap jMap1 = JMap.create((Object) jMap0, object0);
      jMap0.set((Object) jMap1, object0);
      Object object1 = new Object();
      JMap jMap2 = JMap.fail(object1, (Object) null);
      Long long0 = new Long((-3339L));
      BiFunction<JMap, String, Object> biFunction0 = (BiFunction<JMap, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap2.computeIfPresent(long0, biFunction0);
      JMap jMap3 = jMap0.set(jMap2);
      jMap2.isFail();
      jMap2.setOk();
      jMap3.clear();
      Object object2 = new Object();
      jMap2.equals(object2);
      JMap jMap4 = JMap.fail();
      JMap.create((Object) null, (Object) jMap4);
      JMap jMap5 = JMap.ok();
      jMap0.isNull(jMap5);
      jMap4.getBoolean((Object) null);
      JMap jMap6 = JMap.by(jMap3, (Object) null);
      jMap2.isOk();
      jMap2.notNull((Object) null);
      jMap3.set((Map) jMap6);
      Long long1 = new Long(64L);
      // Undeclared exception!
      try { 
        JMap.create((Object) jMap3, (Object) long1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      JMap jMap0 = JMap.by(boolean0, (Object) null);
      Integer integer0 = new Integer(3602);
      jMap0.getInt(integer0);
      JMap jMap1 = JMap.ok();
      jMap1.getAs((Object) null);
      JMap jMap2 = jMap1.set((Map) jMap0);
      String string0 = "w2)4qco)b$k;UO(OM";
      jMap2.replace((Object) null, (Object) "w2)4qco)b$k;UO(OM", (Object) null);
      JMap jMap3 = JMap.fail();
      jMap0.getAs((Object) integer0);
      JMap jMap4 = JMap.fail();
      JMap jMap5 = JMap.create();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap4.isNull((Object) null);
      jMap5.replaceAll(biFunction0);
      jMap3.setFail();
      JMap jMap6 = jMap4.set((Object) jMap0, (Object) jMap2);
      jMap0.set((Map) jMap6);
      jMap1.isFail();
      jMap5.delete((Object) null);
      Object object0 = new Object();
      jMap5.equals(object0);
      jMap3.isFalse((Object) null);
      // Undeclared exception!
      try { 
        jMap6.set(jMap4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(493);
      Integer.toUnsignedString(493);
      Integer integer1 = new Integer(1);
      JMap jMap0 = JMap.ok((Object) integer0, (Object) integer1);
      jMap0.entrySet();
      Integer.compareUnsigned(493, 0);
      Integer.compare(1, 3715);
      Integer integer2 = new Integer((-2388));
      JMap jMap1 = jMap0.set((Object) integer0, (Object) integer2);
      Integer integer3 = jMap0.getInt(integer0);
      JMap jMap2 = JMap.create((Object) null, (Object) null);
      jMap1.getBoolean((Object) null);
      Long long0 = new Long(678L);
      jMap0.put((Object) null, long0);
      Integer.getInteger("isOk");
      Object object0 = new Object();
      Integer integer4 = new Integer((-2388));
      Integer.sum(493, (-1));
      BiFunction<Integer, String, Object> biFunction0 = (BiFunction<Integer, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = jMap2.merge("493", integer4, biFunction0);
      JMap jMap3 = JMap.create(object0, (Object) integer3);
      jMap3.getStr(object1);
      JMap jMap4 = JMap.create();
      jMap2.getLong(jMap4);
      jMap0.getInt(object0);
      jMap4.setOk();
      boolean boolean0 = jMap0.isFalse(integer0);
      assertEquals(4, jMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(9);
      Integer.max(235, 235);
      Integer.remainderUnsigned(235, (-1));
      JMap jMap0 = JMap.fail((Object) integer0, (Object) integer0);
      Integer integer1 = jMap0.getInt(integer0);
      assertEquals(9, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      JMap jMap0 = JMap.by(boolean0, boolean0);
      Boolean boolean1 = Boolean.valueOf("isFail");
      Boolean.getBoolean("isFail");
      Boolean.compare(true, true);
      Boolean.getBoolean("isFail");
      Boolean.compare(false, false);
      jMap0.getAs((Object) boolean1);
      BiConsumer<Integer, Long> biConsumer0 = (BiConsumer<Integer, Long>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jMap0.forEach(biConsumer0);
      JMap jMap1 = JMap.fail((Object) jMap0, (Object) "isFail");
      jMap0.isOk();
      Boolean boolean2 = Boolean.TRUE;
      Object object0 = new Object();
      JMap jMap2 = JMap.fail((Object) boolean2, object0);
      JMap jMap3 = JMap.create();
      jMap3.getLong(boolean1);
      JMap jMap4 = JMap.fail((Object) jMap3, (Object) jMap1);
      Object object1 = new Object();
      jMap4.getInt(object1);
      jMap4.set((Map) jMap0);
      JMap jMap5 = jMap0.set(jMap2);
      JMap jMap6 = null;
      // Undeclared exception!
      try { 
        jMap5.getLong(boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Long
         //
         verifyException("com.jfinal.kit.JMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JMap jMap0 = JMap.create();
      JMap jMap1 = JMap.ok();
      Long long0 = new Long((-184L));
      Long.min(0L, (-898L));
      jMap1.isNull(long0);
      jMap0.isNull(jMap1);
      JMap jMap2 = JMap.ok((Object) jMap1, (Object) jMap0);
      Object object0 = new Object();
      jMap2.remove(object0);
      jMap1.clone();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      jMap1.clear();
      jMap0.putIfAbsent(jMap2, integer0);
      jMap1.getLong(integer0);
      JMap jMap3 = JMap.by(integer0, jMap2);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        JMap.by(jMap3, object1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JMap jMap0 = JMap.ok();
      JMap jMap1 = JMap.fail();
      JMap jMap2 = JMap.create();
      jMap1.replace((Object) jMap0, (Object) jMap0);
      JMap jMap3 = JMap.by(jMap0, jMap0);
      JMap jMap4 = JMap.create();
      JMap jMap5 = jMap0.delete(jMap4);
      Object object0 = new Object();
      jMap5.put(jMap3, object0);
      Object object1 = new Object();
      jMap4.remove(object1, (Object) jMap2);
      // Undeclared exception!
      try { 
        jMap3.getBoolean(jMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      JMap jMap1 = jMap0.set((Object) "yyyy-MM-dd HH:mm:ss", (Object) "yyyy-MM-dd HH:mm:ss");
      jMap0.replace((Object) jMap1, (Object) jMap1, (Object) jMap1);
      jMap0.equals(jMap1);
      jMap1.isOk();
      JMap jMap2 = JMap.create();
      jMap2.set((Map) jMap1);
      JMap jMap3 = jMap2.set(jMap0);
      Integer integer0 = new Integer(0);
      jMap1.isFalse(integer0);
      Boolean boolean0 = new Boolean(false);
      jMap1.isTrue(boolean0);
      Integer.divideUnsigned(1275, 1275);
      Object object0 = new Object();
      jMap3.getLong(object0);
      jMap3.delete(integer0);
      assertTrue(jMap2.equals((Object)jMap0));
      assertTrue(jMap0.equals((Object)jMap3));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-4178);
      Integer integer0 = new Integer((-4178));
      JMap jMap0 = JMap.ok((Object) integer0, (Object) integer0);
      JMap jMap1 = JMap.fail();
      Object object0 = new Object();
      jMap0.putIfAbsent(jMap1, object0);
      JMap jMap2 = JMap.create();
      jMap2.setOk();
      long long0 = 0L;
      jMap0.remove((Object) jMap1, (Object) integer0);
      Long long1 = Long.valueOf(0L);
      JMap jMap3 = JMap.by(long1, (Object) null);
      jMap3.getStr(integer0);
      jMap1.put(jMap0, jMap3);
      // Undeclared exception!
      try { 
        jMap0.set((Map) jMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.by(object0, object0);
      JMap jMap1 = JMap.fail();
      Boolean boolean0 = new Boolean(false);
      JMap jMap2 = jMap1.set((Object) boolean0, object0);
      JMap jMap3 = JMap.by(object0, jMap1);
      JMap jMap4 = JMap.by((Object) null, jMap3);
      Object object1 = null;
      jMap4.isNull((Object) null);
      jMap4.isFalse(jMap2);
      jMap1.clone();
      jMap0.isFail();
      jMap1.set(jMap3);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer.max(0, 0);
      JMap jMap5 = JMap.by(integer0, jMap4);
      jMap5.isOk();
      jMap3.isOk();
      // Undeclared exception!
      try { 
        jMap5.isTrue(jMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Object object1 = new Object();
      JMap.by(long0, object1);
      JMap.create();
      jMap0.isFalse(object0);
      Long long1 = new Long(0L);
      JMap jMap1 = JMap.ok((Object) long1, (Object) long1);
      Long long2 = new Long(0L);
      String string0 = "isFail";
      Long.getLong("isFail", 0L);
      jMap1.clone();
      jMap0.getLong(long2);
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      jMap1.computeIfPresent(long2, biFunction0);
      // Undeclared exception!
      try { 
        jMap1.getStr("isOk");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("com.jfinal.kit.JMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long.getLong("Gx9u9+`z5b+");
      Object object0 = new Object();
      JMap jMap0 = JMap.create((Object) null, object0);
      Integer integer0 = new Integer((-3502));
      jMap0.isTrue(integer0);
      jMap0.setOk();
      // Undeclared exception!
      try { 
        jMap0.getInt((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException("com.jfinal.kit.JMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long((-1473L));
      Long.getLong((String) null, long0);
      JMap jMap0 = JMap.ok((Object) long0, (Object) long0);
      Integer integer0 = new Integer(0);
      Integer.min((-3979), (-3979));
      boolean boolean0 = jMap0.isFalse(integer0);
      jMap0.getLong(long0);
      boolean boolean1 = jMap0.isTrue(long0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JMap jMap0 = JMap.by(object0, object1);
      JMap jMap1 = JMap.fail();
      Long long0 = new Long(291L);
      Long.compare((-873L), (-873L));
      boolean boolean0 = jMap1.equals(long0);
      JMap jMap2 = jMap0.setFail();
      jMap2.getBoolean(jMap0);
      Long long1 = new Long(470L);
      Boolean boolean1 = new Boolean(false);
      BiFunction<Integer, Integer, JMap> biFunction0 = (BiFunction<Integer, Integer, JMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap1.merge(long1, boolean1, biFunction0);
      Long.sum((-2048L), 0L);
      boolean boolean2 = jMap1.isTrue(long1);
      assertTrue(boolean2 == boolean0);
      
      jMap1.getLong((Object) null);
      JMap jMap3 = JMap.fail();
      assertFalse(jMap3.equals((Object)jMap0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.by("", object0);
      Object object1 = new Object();
      JMap jMap1 = JMap.create(object1, object1);
      Object object2 = jMap1.clone();
      JMap jMap2 = JMap.ok((Object) jMap0, (Object) jMap1);
      Boolean boolean0 = new Boolean("d>P+1tV/1zSrZ]&D");
      jMap2.delete(boolean0);
      JMap jMap3 = jMap0.delete(jMap2);
      JMap jMap4 = JMap.by(jMap2, object0);
      JMap jMap5 = JMap.ok((Object) jMap4, (Object) jMap0);
      jMap3.getLong(jMap5);
      JMap jMap6 = jMap5.set(jMap0);
      jMap4.getBoolean(object1);
      JMap.ok(object0, object2);
      // Undeclared exception!
      try { 
        jMap6.getBoolean("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Boolean
         //
         verifyException("com.jfinal.kit.JMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("\r");
      JMap jMap0 = JMap.create((Object) boolean0, (Object) boolean0);
      Boolean.compare(false, false);
      JMap jMap1 = jMap0.delete("\r");
      jMap1.isOk();
      jMap0.replace((Object) boolean0, (Object) "\r", (Object) null);
      jMap1.entrySet();
      jMap1.isOk();
      jMap1.isOk();
      JMap jMap2 = JMap.create((Object) boolean0, (Object) null);
      jMap0.getBoolean(boolean0);
      JMap.create();
      JMap.ok();
      jMap0.isTrue("\r");
      JMap.fail();
      JMap jMap3 = jMap0.setFail();
      jMap3.getInt(jMap2);
      String string0 = "S,/lvpK|Hp>?A";
      try { 
        Long.valueOf("S,/lvpK|Hp>?A", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JMap jMap0 = JMap.create();
      jMap0.toJson();
      jMap0.values();
      jMap0.values();
      JMap jMap1 = JMap.create();
      jMap1.put("{}", jMap0);
      jMap1.remove((Object) "HY1<El4FP", (Object) "{}");
      jMap0.isNull((Object) null);
      jMap0.isFail();
      Boolean boolean0 = new Boolean(true);
      jMap0.replace((Object) boolean0, (Object) jMap1, (Object) "HY1<El4FP");
      jMap0.equals((Object) null);
      jMap0.isFail();
      JMap jMap2 = jMap0.set((Map) jMap1);
      JMap jMap3 = JMap.fail();
      jMap0.toJson();
      JMap.create();
      Integer integer0 = new Integer((-1));
      jMap3.isFalse(integer0);
      jMap2.setFail();
      // Undeclared exception!
      try { 
        jMap2.getLong(jMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JMap jMap0 = JMap.fail(object0, object1);
      JMap jMap1 = JMap.ok(object1, (Object) null);
      JMap jMap2 = JMap.fail();
      jMap1.notNull(jMap2);
      jMap0.isFalse(jMap1);
      jMap0.values();
      jMap0.isNull(object0);
      Object object2 = new Object();
      JMap jMap3 = jMap0.delete(object2);
      jMap2.replace((Object) jMap1, (Object) "vonZnVj`I_Z;", object1);
      jMap3.getAs(object1);
      jMap1.set(jMap2);
      JMap jMap4 = JMap.by(object2, jMap3);
      jMap3.getInt(jMap4);
      Long long0 = new Long(4779L);
      Long long1 = jMap0.getAs((Object) long0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.by(object0, object0);
      jMap0.isFail();
      JMap jMap1 = JMap.create((Object) "]2Cfv[_3`Zt'nM", (Object) jMap0);
      Long long0 = new Long(0L);
      jMap1.notNull(long0);
      Integer.getInteger("]2Cfv[_3`Zt'nM");
      jMap1.remove((Object) null, (Object) jMap0);
      jMap0.set((Map) jMap1);
      Integer integer0 = new Integer(1387);
      Integer.getInteger("", integer0);
      Integer.toUnsignedLong(0);
      JMap jMap2 = JMap.create((Object) integer0, (Object) "");
      JMap jMap3 = JMap.create();
      BiFunction<Integer, Boolean, Boolean> biFunction0 = (BiFunction<Integer, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap2.computeIfPresent(jMap3, biFunction0);
      Object object1 = new Object();
      jMap2.isFalse(object1);
      JMap jMap4 = jMap0.setFail();
      JMap jMap5 = jMap2.setOk();
      Boolean boolean0 = Boolean.TRUE;
      jMap4.delete(boolean0);
      Object object2 = new Object();
      jMap5.delete(object2);
      JMap jMap6 = JMap.by(boolean0, "");
      jMap0.getInt(jMap6);
      // Undeclared exception!
      try { 
        jMap3.getAs((Object) jMap4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      JMap jMap0 = JMap.ok(object0, (Object) integer0);
      // Undeclared exception!
      try { 
        jMap0.set((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JMap jMap0 = JMap.fail(object0, object1);
      jMap0.values();
      jMap0.isTrue(object1);
      // Undeclared exception!
      try { 
        jMap0.getLong(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Long
         //
         verifyException("com.jfinal.kit.JMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      jMap0.remove(object0, (Object) boolean0);
      Object object1 = new Object();
      jMap0.isNull(object1);
      Integer integer0 = jMap0.getInt(object1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Long long0 = new Long(5335L);
      JMap jMap0 = JMap.fail((Object) long0, (Object) long0);
      boolean boolean0 = jMap0.equals(long0);
      assertFalse(boolean0);
      
      JMap jMap1 = JMap.ok();
      jMap0.isOk();
      JMap jMap2 = jMap0.set(jMap1);
      Long long1 = jMap0.getLong(long0);
      JMap jMap3 = JMap.create((Object) long0, (Object) null);
      Integer integer0 = new Integer(44);
      Integer.compare(0, 0);
      BiFunction<Long, Long, Long> biFunction0 = (BiFunction<Long, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer.toUnsignedString(1870);
      jMap3.clear();
      jMap0.computeIfPresent(integer0, biFunction0);
      JMap jMap4 = JMap.fail();
      BiConsumer<Integer, String> biConsumer0 = (BiConsumer<Integer, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jMap4.forEach(biConsumer0);
      jMap0.notNull(jMap1);
      jMap1.set(jMap4);
      jMap1.isFail();
      Boolean boolean1 = Boolean.valueOf("");
      JMap jMap5 = jMap3.delete(boolean1);
      jMap5.getBoolean((Object) null);
      JMap jMap6 = JMap.fail();
      JMap.create((Object) jMap6, (Object) long1);
      JMap jMap7 = jMap3.setOk();
      Object object0 = new Object();
      jMap7.remove(object0);
      JMap jMap8 = JMap.fail((Object) jMap2, (Object) "");
      jMap6.getBoolean(jMap8);
      assertTrue(jMap1.equals((Object)jMap4));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Integer integer0 = new Integer(579);
      jMap0.remove((Object) integer0, (Object) integer0);
      boolean boolean0 = jMap0.isFail();
      Boolean boolean1 = new Boolean("defaultConvertDepth depth can not less than 2.");
      JMap jMap1 = JMap.ok();
      jMap0.putIfAbsent("defaultConvertDepth depth can not less than 2.", "defaultConvertDepth depth can not less than 2.");
      JMap jMap2 = JMap.create((Object) boolean1, (Object) jMap1);
      JMap jMap3 = jMap0.set(jMap2);
      assertEquals(4, jMap0.size());
      
      Boolean boolean2 = Boolean.valueOf(false);
      jMap0.set((Object) boolean2, (Object) boolean2);
      JMap.ok();
      Object object0 = new Object();
      Integer integer1 = new Integer((-3864));
      JMap.ok(object0, (Object) integer1);
      JMap.ok((Object) jMap3, (Object) "Hxy");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JMap jMap0 = JMap.ok();
      Object object0 = new Object();
      JMap jMap1 = JMap.fail((Object) jMap0, object0);
      jMap1.set((Object) jMap0, (Object) "/}a7Z9.");
      try { 
        Long.valueOf("/}a7Z9.", 791);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 791 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JMap jMap0 = JMap.ok();
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(false, false);
      jMap0.put(boolean0, boolean0);
      Long long0 = new Long(4867L);
      JMap.by(boolean0, long0);
      JMap jMap1 = jMap0.setOk();
      boolean boolean1 = jMap1.notNull(boolean0);
      boolean boolean2 = jMap0.isTrue(jMap1);
      assertFalse(boolean2);
      
      boolean boolean3 = jMap0.isOk();
      assertTrue(boolean3 == boolean1);
      
      Boolean boolean4 = new Boolean("Eqvb");
      jMap1.getStr(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JMap jMap0 = new JMap();
      Boolean boolean0 = Boolean.TRUE;
      JMap jMap1 = JMap.ok((Object) jMap0, (Object) boolean0);
      Long long0 = new Long(0L);
      JMap jMap2 = JMap.ok((Object) jMap1, (Object) long0);
      jMap2.toJson();
      Object object0 = new Object();
      Boolean.logicalXor(false, false);
      JMap jMap3 = JMap.ok(object0, (Object) jMap2);
      boolean boolean1 = jMap2.equals(jMap3);
      assertFalse(boolean1);
      
      JMap.by(jMap0, "convert depth can not less than 2.");
      assertFalse(jMap0.equals((Object)jMap1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      JMap jMap1 = new JMap();
      JMap jMap2 = jMap0.set((Map) jMap1);
      jMap0.isOk();
      JMap jMap3 = JMap.by("m1A?`[", jMap0);
      jMap0.isTrue("m1A?`[");
      Long long0 = new Long((-1610L));
      jMap1.replace((Object) "m1A?`[", (Object) jMap2);
      jMap0.getLong(long0);
      jMap1.getBoolean(jMap0);
      jMap0.setFail();
      jMap2.isOk();
      JMap jMap4 = jMap2.set(jMap0);
      jMap4.isOk();
      jMap3.isOk();
      jMap4.isFalse((Object) null);
      JMap jMap5 = jMap2.set((Object) jMap4, (Object) "m1A?`[");
      Object object0 = new Object();
      Object object1 = new Object();
      jMap5.put(object0, object1);
      Object object2 = new Object();
      JMap.by(object2, long0);
      // Undeclared exception!
      try { 
        JMap.fail((Object) jMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JMap jMap0 = JMap.ok();
      Object object0 = new Object();
      Long long0 = jMap0.getLong(object0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JMap jMap0 = JMap.create(object0, object1);
      JMap jMap1 = jMap0.setFail();
      assertSame(jMap1, jMap0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      jMap0.replace((Object) "<mXkP7)gm=^/'b>+e", (Object) "<mXkP7)gm=^/'b>+e");
      Boolean boolean0 = Boolean.valueOf("<mXkP7)gm=^/'b>+e");
      Boolean.logicalAnd(false, false);
      Boolean.logicalXor(true, true);
      jMap0.isFalse(boolean0);
      JMap jMap1 = JMap.fail((Object) jMap0, (Object) jMap0);
      Object object0 = new Object();
      Object object1 = new Object();
      jMap0.replace((Object) null, object0, object1);
      jMap0.set((Map) jMap1);
      // Undeclared exception!
      try { 
        jMap1.isFalse(jMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JMap jMap0 = new JMap();
      Object object0 = new Object();
      boolean boolean0 = jMap0.isFalse(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Boolean boolean0 = new Boolean("@H*4#MJJ?");
      jMap0.getBoolean(boolean0);
      JMap jMap1 = JMap.ok();
      jMap1.clear();
      jMap0.toJson();
      jMap1.isTrue(jMap0);
      jMap0.isOk();
      JMap jMap2 = JMap.by(jMap0, "{\"isOk\":java.lang.Boolean@0000000004,\"isFail\":java.lang.Boolean@0000000005}");
      JMap jMap3 = jMap0.set((Map) jMap1);
      jMap1.isFail();
      jMap2.set(jMap1);
      JMap jMap4 = jMap3.set(jMap0);
      assertNotSame(jMap1, jMap4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JMap jMap0 = JMap.create();
      JMap jMap1 = JMap.ok((Object) jMap0, (Object) jMap0);
      JMap jMap2 = jMap0.set((Map) jMap1);
      assertNotSame(jMap2, jMap1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JMap jMap0 = JMap.create();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf(true);
      jMap0.replace((Object) boolean0, (Object) boolean1);
      jMap0.toJson();
      String string0 = jMap0.toJson();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.fail((Object) null, object0);
      JMap jMap1 = JMap.fail();
      JMap jMap2 = jMap0.delete(jMap1);
      assertFalse(jMap2.equals((Object)jMap1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Long long0 = new Long(512L);
      Long.compareUnsigned(512L, 512L);
      jMap0.equals(long0);
      Object object0 = new Object();
      Boolean boolean0 = jMap0.getBoolean(object0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.fail(object0, object0);
      Object object1 = new Object();
      boolean boolean0 = jMap0.isTrue(object1);
      assertFalse(boolean0);
      
      JMap jMap1 = jMap0.setOk();
      assertEquals(3, jMap1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JMap jMap0 = JMap.create();
      Object object0 = new Object();
      JMap jMap1 = JMap.ok((Object) jMap0, object0);
      assertNotSame(jMap0, jMap1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JMap jMap0 = JMap.create();
      Integer integer0 = new Integer((-2117));
      JMap jMap1 = JMap.by(jMap0, integer0);
      jMap0.isOk();
      JMap jMap2 = JMap.fail();
      Integer integer1 = jMap1.getInt(jMap2);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Long long0 = new Long(1L);
      boolean boolean0 = jMap0.notNull(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      Integer.getInteger((String) null, (-5429));
      Object object0 = new Object();
      JMap jMap0 = JMap.create((Object) integer1, object0);
      jMap0.getStr(object0);
      JMap jMap1 = null;
      // Undeclared exception!
      try { 
        jMap0.set((JMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JMap jMap0 = new JMap();
      JMap jMap1 = new JMap();
      JMap jMap2 = jMap0.set((Map) jMap1);
      assertSame(jMap0, jMap2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      jMap0.isOk();
      JMap jMap1 = JMap.ok();
      JMap jMap2 = jMap0.set(jMap1);
      jMap1.getInt(jMap0);
      Boolean boolean0 = Boolean.TRUE;
      jMap2.replace((Object) "", (Object) boolean0, (Object) jMap1);
      jMap0.isFail();
      assertTrue(jMap0.equals((Object)jMap1));
      
      JMap jMap3 = JMap.fail();
      jMap0.set(jMap3);
      jMap0.getStr(jMap3);
      assertTrue(jMap0.equals((Object)jMap3));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JMap jMap0 = new JMap();
      boolean boolean0 = jMap0.isOk();
      Object object0 = new Object();
      boolean boolean1 = jMap0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JMap jMap0 = new JMap();
      Object object0 = new Object();
      jMap0.getAs(object0);
      JMap jMap1 = JMap.by(jMap0, jMap0);
      assertFalse(jMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      jMap0.toJson();
      Integer integer0 = new Integer(0);
      Boolean boolean0 = jMap0.getBoolean(integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Integer integer0 = new Integer((-102));
      JMap jMap1 = jMap0.delete(integer0);
      assertFalse(jMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      Long long0 = new Long(1L);
      boolean boolean0 = jMap0.isTrue(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Long long0 = new Long(0L);
      JMap jMap0 = JMap.ok((Object) long0, (Object) long0);
      boolean boolean0 = jMap0.notNull(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JMap jMap0 = JMap.ok((Object) null, (Object) null);
      jMap0.getStr((Object) null);
      JMap jMap1 = jMap0.setOk();
      assertFalse(jMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      JMap.fail((Object) null, object0);
      JMap jMap0 = JMap.create();
      JMap jMap1 = JMap.create();
      JMap jMap2 = jMap0.set(jMap1);
      assertTrue(jMap2.equals((Object)jMap1));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Long long0 = new Long((-345L));
      Object object0 = new Object();
      JMap jMap0 = JMap.create((Object) long0, object0);
      assertEquals(1, jMap0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JMap jMap0 = JMap.ok();
      jMap0.isFalse("isOk");
      JMap jMap1 = jMap0.delete("isOk");
      jMap1.set((Map) jMap0);
      assertEquals(1, jMap0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JMap jMap0 = JMap.create();
      JMap jMap1 = jMap0.set((Map) jMap0);
      jMap0.equals(jMap1);
      JMap jMap2 = JMap.create();
      jMap2.clone();
      JMap jMap3 = new JMap();
      jMap0.setOk();
      jMap3.getLong(jMap1);
      jMap3.setOk();
      Integer integer0 = new Integer((-1244));
      String string0 = "";
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      JMap jMap0 = JMap.by(boolean0, (Object) null);
      JMap jMap1 = JMap.ok();
      jMap1.getAs((Object) null);
      JMap jMap2 = jMap1.set((Map) jMap0);
      jMap2.isFalse(jMap1);
      jMap2.replace((Object) null, (Object) "w2)4qco)b$k;UO(OM", (Object) null);
      JMap jMap3 = JMap.fail();
      JMap.ok();
      JMap jMap4 = JMap.create();
      jMap3.isNull(jMap2);
      JMap jMap5 = jMap2.set((Object) jMap0, (Object) jMap2);
      jMap1.isFail();
      jMap4.delete((Object) null);
      jMap5.set(jMap0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.by(object0, object0);
      JMap jMap1 = JMap.fail();
      JMap jMap2 = JMap.by(object0, jMap1);
      JMap jMap3 = JMap.by((Object) null, jMap2);
      Object object1 = null;
      jMap3.isNull((Object) null);
      jMap1.clone();
      jMap0.isFail();
      jMap1.set(jMap2);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer.max(0, 0);
      JMap jMap4 = JMap.by(integer0, jMap3);
      jMap4.isOk();
      jMap2.isOk();
      JMap jMap5 = jMap0.delete((Object) null);
      // Undeclared exception!
      try { 
        jMap5.isFalse(jMap4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      jMap0.isFalse("isOk");
      jMap0.delete("isOk");
      assertEquals(1, jMap0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JMap jMap0 = new JMap();
      jMap0.isTrue((Object) null);
      jMap0.isOk();
      Integer integer0 = new Integer((-1));
      Integer.getInteger((String) null, (-1519));
      Integer.remainderUnsigned((-1), (-1));
      jMap0.getStr(integer0);
      Boolean boolean0 = Boolean.FALSE;
      JMap jMap1 = JMap.by((Object) null, boolean0);
      JMap jMap2 = jMap1.set(jMap0);
      JMap jMap3 = jMap0.delete(jMap1);
      jMap1.notNull(jMap2);
      Long long0 = new Long((-1519));
      JMap jMap4 = JMap.create((Object) long0, (Object) null);
      Boolean boolean1 = Boolean.valueOf(false);
      jMap3.notNull("");
      BiFunction<Object, Long, JMap> biFunction0 = (BiFunction<Object, Long, JMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(jMap0).when(biFunction0).apply(any() , anyLong());
      jMap4.compute(boolean1, biFunction0);
      jMap0.entrySet();
      jMap0.setOk();
      Boolean.compare(false, true);
      jMap2.isTrue((Object) null);
      Object object0 = new Object();
      Integer integer1 = new Integer((-1519));
      JMap jMap5 = JMap.create((Object) long0, (Object) null);
      assertTrue(jMap5.equals((Object)jMap4));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JMap jMap0 = new JMap();
      jMap0.isTrue((Object) null);
      jMap0.isOk();
      Integer integer0 = new Integer((-1));
      Integer.getInteger((String) null, (-1519));
      Integer.remainderUnsigned((-1), (-1));
      jMap0.getStr(integer0);
      Boolean boolean0 = Boolean.FALSE;
      JMap jMap1 = JMap.by((Object) null, boolean0);
      JMap jMap2 = jMap1.set(jMap0);
      JMap jMap3 = new JMap();
      Long long0 = new Long((-1519));
      JMap jMap4 = JMap.create((Object) long0, (Object) null);
      Boolean boolean1 = Boolean.valueOf(false);
      jMap3.notNull("");
      BiFunction<Object, Long, JMap> biFunction0 = (BiFunction<Object, Long, JMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(jMap0).when(biFunction0).apply(any() , anyLong());
      jMap4.compute(boolean1, biFunction0);
      jMap0.entrySet();
      jMap0.setOk();
      Boolean.compare(false, true);
      jMap2.isTrue((Object) null);
      Object object0 = new Object();
      Integer integer1 = jMap4.getInt(object0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      JMap jMap0 = JMap.fail(object0, object0);
      Long long0 = new Long((-3339L));
      BiFunction<JMap, String, Object> biFunction0 = (BiFunction<JMap, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jMap0.computeIfPresent(long0, biFunction0);
      boolean boolean0 = jMap0.isFail();
      jMap0.setOk();
      Object object1 = new Object();
      boolean boolean1 = jMap0.equals(object1);
      assertFalse(boolean1);
      
      JMap jMap1 = JMap.fail();
      JMap.ok();
      jMap1.getBoolean((Object) null);
      boolean boolean2 = jMap0.isOk();
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = jMap0.notNull(object0);
      assertEquals(3, jMap0.size());
      
      JMap jMap2 = JMap.create();
      Boolean boolean4 = Boolean.TRUE;
      JMap jMap3 = JMap.create();
      assertTrue(jMap3.equals((Object)jMap2));
      
      boolean boolean5 = jMap1.isFalse((Object) null);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JMap jMap0 = JMap.fail();
      JMap.ok((Object) jMap0, (Object) "u~5K.FqH =G");
      Object object0 = new Object();
      Object object1 = new Object();
      JMap.create();
      jMap0.setFail();
      boolean boolean0 = jMap0.isOk();
      boolean boolean1 = jMap0.notNull(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JMap jMap0 = JMap.create();
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(0L);
      JMap jMap1 = JMap.create((Object) long0, (Object) long0);
      JMap jMap2 = jMap0.set(jMap1);
      assertFalse(jMap0.isEmpty());
      
      JMap jMap3 = jMap0.set((Map) jMap1);
      JMap jMap4 = JMap.ok();
      JMap jMap5 = JMap.fail(object0, (Object) jMap0);
      jMap5.entrySet();
      JMap.by(jMap4, object0);
      jMap5.getStr(object1);
      JMap jMap6 = new JMap();
      jMap6.replace((Object) jMap0, (Object) long0, (Object) jMap2);
      Long long1 = new Long(0L);
      JMap jMap7 = JMap.create(object0, (Object) null);
      Long.compareUnsigned(0L, 2L);
      jMap4.replace((Object) jMap6, (Object) long1);
      jMap4.isFalse(jMap5);
      jMap2.equals(jMap4);
      jMap1.toJson();
      JMap jMap8 = JMap.create((Object) jMap2, (Object) jMap4);
      jMap8.set((Map) jMap3);
      JMap jMap9 = JMap.create();
      jMap8.getBoolean(jMap4);
      jMap9.isTrue((Object) null);
      jMap6.isOk();
      JMap jMap10 = JMap.fail();
      assertFalse(jMap10.equals((Object)jMap7));
  }
}
