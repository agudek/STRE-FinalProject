/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:50:35 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.Prop;
import com.jfinal.kit.PropKit;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class PropKit_ESTest extends PropKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Prop prop0 = PropKit.use("");
      Prop prop1 = PropKit.useless("");
      assertSame(prop1, prop0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Prop prop0 = PropKit.use("");
      Prop prop1 = PropKit.getProp("");
      assertSame(prop1, prop0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("FIc*4%oO]],SW7,Ia", "o}bK\"", (File) mockFile0);
      PropKit.use(file0);
      Long long0 = PropKit.getLong("$t5iD8iMQ,DK8O", (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("G_BUxTQuYA(", "G_BUxTQuYA(");
      PropKit.appendIfExists(file0);
      Long long0 = new Long(0L);
      Long long1 = PropKit.getLong("", long0);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropKit.appendIfExists("");
      Long long0 = new Long(1L);
      Long long1 = PropKit.getLong("", long0);
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropKit.appendIfExists("");
      Long long0 = new Long((-1L));
      Long long1 = PropKit.getLong("))4Ub6x^M;N0cZz#", long0);
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropKit.use("");
      Long long0 = PropKit.getLong("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropKit.append("");
      Integer integer0 = PropKit.getInt("", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropKit.use("");
      Integer integer0 = new Integer(0);
      Integer integer1 = PropKit.getInt("", integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropKit.use("");
      Integer integer0 = new Integer(25);
      Integer integer1 = PropKit.getInt("", integer0);
      assertEquals(25, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropKit.use("");
      Integer integer0 = new Integer((-1));
      Integer integer1 = PropKit.getInt("", integer0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      PropKit.use(file0, "UTF-8");
      Integer integer0 = PropKit.getInt("UTF-8");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropKit.appendIfExists("");
      Boolean boolean0 = PropKit.getBoolean("Kfy}@^YZ=_'@#R}mcM", (Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.createNewFile();
      boolean boolean0 = mockFile0.delete();
      PropKit.append((File) mockFile0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = PropKit.getBoolean("", boolean1);
      assertTrue(boolean2.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("g&kKY)7", "g&kKY)7");
      PropKit.appendIfExists(file0);
      Boolean boolean0 = new Boolean((String) null);
      Boolean boolean1 = PropKit.getBoolean("g&kKY)7", boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      PropKit.use(file0, "UTF-8");
      Boolean boolean0 = PropKit.getBoolean("UTF-8");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("IZ@$dy5$&Z", "IZ@$dy5$&Z");
      PropKit.append(file0);
      String string0 = PropKit.get("IZ@$dy5$&Z", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropKit.use("");
      String string0 = PropKit.get("", "7ff6?g$w,d?zBRO&");
      assertEquals("7ff6?g$w,d?zBRO&", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/com.jfinal.kit.PropKit0com.jfinal.kit.PropKit");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.jfinal.kit.PropKit");
      File file0 = MockFile.createTempFile("com.jfinal.kit.PropKit", "com.jfinal.kit.PropKit");
      PropKit.append(file0);
      String string0 = PropKit.get("com.jfinal.kit.PropKit", "com.jfinal.kit.PropKit");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropKit.use("");
      String string0 = PropKit.get("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80UTF-8");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "UTF-8");
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      PropKit.use(file0, "UTF-8");
      boolean boolean1 = PropKit.containsKey("UTF-8");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Prop prop0 = PropKit.appendIfExists("?8vW`Cq1dsc~ig=0");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-dQ");
      File file0 = MockFile.createTempFile("-dQ", "");
      Prop prop0 = PropKit.append(file0);
      Prop prop1 = PropKit.appendIfExists((File) mockFile0, "-dQ");
      assertSame(prop1, prop0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      Prop prop0 = PropKit.appendIfExists((File) mockFile0);
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Prop prop0 = PropKit.append(".", "UTF-8");
      assertNotNull(prop0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Prop prop0 = PropKit.use("");
      Prop prop1 = PropKit.append(prop0);
      assertSame(prop0, prop1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.useless((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use("-dQ", "-dQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties file not found in classpath: -dQ
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use("`XdnL006?Wp/T=u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties file not found in classpath: `XdnL006?Wp/T=u
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("must be readable.", "l,R*qV*9R#8k)PzjM8g");
      // Undeclared exception!
      try { 
        PropKit.use(file0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = MockFile.createTempFile("IZ@$dy5$&Z", "IZ@$dy5$&Z");
      // Undeclared exception!
      try { 
        PropKit.use(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        PropKit.use((File) mockFile0, "UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : 
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!Pe<7c[;<U!o{", "}");
      // Undeclared exception!
      try { 
        PropKit.use((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.use((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        PropKit.use((File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : 
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.getProp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropKit.append("");
      // Undeclared exception!
      try { 
        PropKit.getLong((String) null, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      PropKit.use(file0, "UTF-8");
      // Undeclared exception!
      try { 
        PropKit.getLong((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/com.jfinal.kit.PropKit0com.jfinal.kit.PropKit");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.jfinal.kit.PropKit");
      File file0 = MockFile.createTempFile("com.jfinal.kit.PropKit", "com.jfinal.kit.PropKit");
      PropKit.append(file0);
      // Undeclared exception!
      try { 
        PropKit.getInt("com.jfinal.kit.PropKit");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropKit.use("");
      // Undeclared exception!
      try { 
        PropKit.getInt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      File file0 = MockFile.createTempFile("g&kKY)7", "g&kKY)7");
      PropKit.appendIfExists(file0);
      PropKit.appendIfExists((String) null, (String) null);
      // Undeclared exception!
      try { 
        PropKit.getInt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("g&kKY)7", "g&kKY)7");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/g&kKY)70g&kKY)7");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "g&kKY)7");
      PropKit.appendIfExists(file0);
      Boolean boolean0 = new Boolean((String) null);
      // Undeclared exception!
      try { 
        PropKit.getBoolean("g&kKY)7", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value can not parse to Boolean : 
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropKit.use("");
      // Undeclared exception!
      try { 
        PropKit.getBoolean((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropKit.use("");
      // Undeclared exception!
      try { 
        PropKit.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.appendIfExists((File) null, "l@{*LKS\"r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+c(.]=IF=)NK/$WwI", "+c(.]=IF=)NK/$WwI");
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        PropKit.appendIfExists((File) mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : $WwI
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = MockFile.createTempFile("G_BUxTQuYA(", "G_BUxTQuYA(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        PropKit.appendIfExists(file0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.appendIfExists((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        PropKit.appendIfExists((File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : 
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.append("", "com.jfinal.kit.PropKit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.append((String) null, "ze~_<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.append("Cache is read only, and file for key '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties file not found in classpath: Cache is read only, and file for key '
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cached file for ", "false");
      // Undeclared exception!
      try { 
        PropKit.append(file0, "Cached file for ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      File file0 = MockFile.createTempFile("log4j.factory.", "log4j.factory.");
      // Undeclared exception!
      try { 
        PropKit.append(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.append((File) null, "#t-@P(Fu\\~4~#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File can not be null.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8", "");
      // Undeclared exception!
      try { 
        PropKit.append((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        PropKit.append((File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : 
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Prop prop0 = PropKit.use("");
      Prop prop1 = PropKit.getProp();
      assertSame(prop1, prop0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.getProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("...", "");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        PropKit.appendIfExists((File) mockFile0, "...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file.
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Prop prop0 = PropKit.append((Prop) null);
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PropKit.use("");
      // Undeclared exception!
      try { 
        PropKit.append((Prop) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prop can not be null
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      File file0 = MockFile.createTempFile("g&kKY)7", "g&kKY)7");
      Prop prop0 = PropKit.use(file0);
      Prop prop1 = PropKit.use(file0, "g&kKY)7");
      assertSame(prop1, prop0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Prop prop0 = PropKit.use("");
      Prop prop1 = PropKit.use("", "EpHb");
      assertSame(prop1, prop0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Prop prop0 = PropKit.appendIfExists((String) null, (String) null);
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      PropKit.use(file0, "UTF-8");
      boolean boolean0 = PropKit.containsKey("UTF-8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-dQ");
      Prop prop0 = PropKit.appendIfExists((File) mockFile0, "-dQ");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Prop prop0 = PropKit.useless("T1x");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PropKit.use("");
      Prop prop0 = PropKit.useless("l,R*qV*9R38k)PzjM8g");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      Prop prop0 = PropKit.use(file0, "UTF-8");
      Prop prop1 = PropKit.use("", "UTF-8");
      assertFalse(prop1.equals((Object)prop0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      File file0 = MockFile.createTempFile("...", "...");
      PropKit.append(file0, "UTF-8");
      // Undeclared exception!
      try { 
        PropKit.containsKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PropKit.append("");
      // Undeclared exception!
      try { 
        PropKit.get((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.getLong((String) null, (Long) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.containsKey((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      // Undeclared exception!
      try { 
        PropKit.getBoolean("g&kKY)7", boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.getInt((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.get((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Prop prop0 = PropKit.getProp("1IKlvXLo,n(|");
      assertNull(prop0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.append("HkC8=aDsc{4", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties file not found in classpath: HkC8=aDsc{4
         //
         verifyException("com.jfinal.kit.Prop", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PropKit.clear();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer((-915));
      // Undeclared exception!
      try { 
        PropKit.getInt((String) null, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.get("com.jfinal.kit.PropKit", "UTF-8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      File file0 = MockFile.createTempFile("g&kKY)7", "g&kKY)7");
      Prop prop0 = PropKit.appendIfExists(file0);
      Prop prop1 = PropKit.use(file0);
      assertFalse(prop1.equals((Object)prop0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PropKit.appendIfExists("");
      Integer integer0 = new Integer((-915));
      // Undeclared exception!
      try { 
        PropKit.getInt((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.getLong((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropKit.getBoolean("UTF-8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Load propties file by invoking PropKit.use(String fileName) method first.
         //
         verifyException("com.jfinal.kit.PropKit", e);
      }
  }
}
