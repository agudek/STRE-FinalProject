/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:24:28 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.Ret;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Ret_ESTest extends Ret_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("qHQ0ea;l4#,6*'3G,~8");
      Boolean.logicalOr(false, true);
      Boolean.compare(true, false);
      Object object0 = new Object();
      Ret ret0 = Ret.by(boolean0, object0);
      ret0.delete(boolean0);
      ret0.getNumber(boolean0);
      Ret ret1 = ret0.set((Object) boolean0, (Object) boolean0);
      ret1.putAll(ret0);
      Ret ret2 = ret1.setFail();
      Ret.setToOldWorkMode();
      ret2.isTrue(boolean0);
      Ret ret3 = ret1.set((Object) ret2, (Object) "qHQ0ea;l4#,6*'3G,~8");
      Boolean boolean1 = new Boolean((String) null);
      ret3.isTrue(boolean1);
      // Undeclared exception!
      try { 
        ret3.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ret ret0 = Ret.fail();
      Object object0 = new Object();
      ret0.getBoolean(object0);
      short short0 = (short)0;
      Byte byte0 = new Byte((byte)119);
      ret0.remove((Object) byte0);
      Short short1 = new Short((short)0);
      int int0 = new Short((short)0);
      short short2 = (short)9;
      ret0.remove((Object) null);
      Float float0 = new Float((double) (byte)119);
      Ret ret1 = Ret.create((Object) ret0, (Object) float0);
      ret0.set((Map) ret1);
      // Undeclared exception!
      try { 
        Ret.by(ret0, short1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ret ret0 = Ret.create();
      Float float0 = new Float(1.0F);
      Ret ret1 = Ret.create((Object) ret0, (Object) float0);
      Ret ret2 = Ret.ok();
      ret0.set((Map) ret1);
      Ret ret3 = Ret.fail();
      // Undeclared exception!
      try { 
        ret3.set((Object) ret0, (Object) ret2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /*@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ret ret0 = Ret.fail();
      ret0.toJson();
      Ret ret1 = ret0.setOk();
      ret0.clone();
      Object object0 = new Object();
      Ret ret2 = ret0.set(object0, (Object) ret1);
      Boolean boolean0 = Boolean.FALSE;
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret2.computeIfPresent(boolean0, biFunction0);
      Ret.ok((Object) boolean0, (Object) null);
      ret1.notNull((Object) null);
      BiFunction<Ret, Integer, Boolean> biFunction1 = (BiFunction<Ret, Integer, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyMap() , anyInt());
      ret2.compute("{\"state\":\"fail\"}", biFunction1);
      // Undeclared exception!
      try { 
        ret2.delete(ret0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }*/

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Ret ret0 = Ret.ok((Object) byte0, (Object) byte0);
      Integer integer0 = ret0.getInt(byte0);
      Ret ret1 = Ret.create((Object) byte0, (Object) integer0);
      ret1.keySet();
      ret1.putIfAbsent((Object) null, (Object) null);
      Object object0 = new Object();
      Ret ret2 = Ret.create(object0, (Object) ret1);
      Object object1 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalXor(true, true);
      Ret ret3 = ret0.set(object1, (Object) boolean0);
      Long long0 = new Long((-588L));
      Double double0 = new Double(0.0);
      Double.sum((byte)0, 0.0);
      Boolean.logicalXor(false, true);
      ret0.entrySet();
      ret2.putIfAbsent(long0, double0);
      Ret ret4 = Ret.create();
      ret2.getInt(ret4);
      ret3.isOk();
      ret2.toJson();
      ret1.getStr((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Object object0 = new Object();
      Ret ret1 = Ret.ok(object0, (Object) ret0);
      Ret ret2 = Ret.by(ret1, ret1);
      ret0.isFail();
      ret0.clear();
      ret2.getLong(object0);
      ret2.equals(ret0);
      Object object1 = new Object();
      ret0.isNull(object1);
      Ret ret3 = ret1.setOk();
      ret3.isOk();
      Object object2 = new Object();
      Long long0 = new Long((-3107L));
      ret2.replace(object2, (Object) long0);
      Ret ret4 = ret1.set(ret0);
      Ret ret5 = ret4.setOk();
      BiFunction<Ret, Long, String> biFunction0 = (BiFunction<Ret, Long, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret5.merge(ret2, object0, biFunction0);
      String string0 = "T6.}nP]27))Og.^A";
      ret3.set((Object) "T6.}nP]27))Og.^A", object1);
      // Undeclared exception!
      try { 
        Ret.fail((Object) ret4, (Object) "T6.}nP]27))Og.^A");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Object object0 = new Object();
      ret0.isFalse(object0);
      Ret ret1 = Ret.ok(object0, (Object) ret0);
      ret1.notNull(ret0);
      Ret ret2 = Ret.by(ret1, ret1);
      ret0.isFail();
      ret0.clear();
      ret2.getLong(object0);
      ret2.equals(ret0);
      Object object1 = new Object();
      ret0.isNull(object1);
      Ret ret3 = ret1.setOk();
      ret3.isOk();
      Object object2 = new Object();
      Long long0 = new Long((-3107L));
      ret2.replace(object2, (Object) long0);
      Ret ret4 = ret1.set(ret0);
      Ret ret5 = ret4.setOk();
      BiFunction<Ret, Long, String> biFunction0 = (BiFunction<Ret, Long, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret5.merge(ret2, object0, biFunction0);
      String string0 = "T6.}nP]27))Og.^A";
      Ret ret6 = ret3.set((Object) "T6.}nP]27))Og.^A", object1);
      Object object3 = new Object();
      Double double0 = new Double(2103.1975646517);
      // Undeclared exception!
      try { 
        Ret.ok((Object) ret6, (Object) double0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float(0.0);
      Ret ret0 = Ret.fail((Object) float0, (Object) float0);
      Integer integer0 = new Integer(0);
      ret0.getInt(integer0);
      ret0.getNumber(float0);
      ret0.isOk();
      ret0.isFalse((Object) null);
      try { 
        Double.valueOf("9I!h3ahZZ%~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ret ret0 = Ret.create();
      Ret ret1 = Ret.fail((Object) ret0, (Object) "");
      Ret ret2 = Ret.fail((Object) ret0, (Object) ret1);
      ret2.remove((Object) "");
      ret2.replace((Object) ret0, (Object) ret0, (Object) ret0);
      Ret ret3 = Ret.ok();
      ret2.getLong(ret3);
      ret0.set(ret2);
      ret0.getStr((Object) null);
      Ret.ok();
      Integer integer0 = new Integer(0);
      Integer.getInteger("");
      ret0.equals(integer0);
      ret1.isTrue(integer0);
      Byte byte0 = new Byte((byte)8);
      ret2.getBoolean(byte0);
      // Undeclared exception!
      try { 
        ret2.toJson();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ret ret0 = new Ret();
      Ret ret1 = Ret.by(ret0, ret0);
      Ret ret2 = ret0.set(ret1);
      Ret.ok();
      Ret.ok();
      long long0 = 248L;
      Long long1 = new Long(248L);
      Ret ret3 = ret2.delete(long1);
      // Undeclared exception!
      try { 
        ret2.isTrue(ret3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, true);
      Ret ret0 = Ret.create((Object) boolean0, (Object) boolean0);
      Object object0 = new Object();
      boolean boolean1 = ret0.isFalse(object0);
      boolean boolean2 = ret0.isFalse(boolean0);
      assertFalse(boolean2 == boolean1);
      
      Double double0 = new Double(889.1266333664);
      ret0.getAs((Object) double0);
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      ret0.getBoolean(short0);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ret0.setFail();
      assertFalse(boolean0.equals((Object)boolean2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf("sAlHOcC");
      Boolean.logicalXor(false, false);
      Ret ret0 = Ret.fail(object0, (Object) boolean0);
      ret0.toJson();
      ret0.getStr("sAlHOcC");
      ret0.getBoolean((Object) null);
      Boolean.logicalOr(true, true);
      Object object1 = new Object();
      Ret.fail((Object) null, object1);
      Ret ret1 = ret0.delete(boolean0);
      Boolean boolean1 = ret1.getBoolean(object0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      Byte.toUnsignedLong((byte) (-29));
      Ret ret0 = Ret.ok((Object) byte0, (Object) byte0);
      Integer integer0 = ret0.getInt(byte0);
      ret0.remove((Object) integer0);
      ret0.notNull(integer0);
      Double double0 = new Double((byte)18);
      Ret ret1 = ret0.delete(double0);
      ret0.isFalse(byte0);
      ret0.getStr(byte0);
      Ret ret2 = ret0.setOk();
      ret2.set((Map) ret0);
      Ret ret3 = ret2.set(ret0);
      Ret ret4 = Ret.ok((Object) null, (Object) ret1);
      ret2.getBoolean(ret4);
      ret3.replace((Object) null, (Object) null);
      Object object0 = new Object();
      Float float0 = new Float((float) 227L);
      Ret ret5 = Ret.by(object0, float0);
      assertFalse(ret5.equals((Object)ret0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Object object0 = new Object();
      Long long0 = new Long((-126L));
      Long.max((-126L), 0L);
      ret0.set((Map) ret0);
      ret0.getNumber((Object) null);
      Object object1 = new Object();
      Ret ret1 = Ret.by(object1, ret0);
      Ret ret2 = ret1.setFail();
      ret2.isFalse(ret0);
      ret0.equals(ret0);
      Ret ret3 = Ret.fail();
      Float float0 = new Float(0.0F);
      ret3.isFalse(float0);
      // Undeclared exception!
      try { 
        ret2.computeIfPresent(ret3, (BiFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-2147483645));
      Integer.divideUnsigned((-2147483645), (-2147483645));
      Ret ret0 = Ret.ok((Object) integer0, (Object) integer0);
      ret0.notNull(integer0);
      ret0.clone();
      ret0.getInt(integer0);
      Boolean boolean0 = Boolean.FALSE;
      Integer.min((-1436015561), 1);
      try { 
        Integer.parseUnsignedInt("fail");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fail\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ret.setToOldWorkMode();
      Ret ret0 = Ret.fail();
      byte byte0 = (byte)61;
      Byte byte1 = new Byte((byte)61);
      ret0.getStr(byte1);
      Ret ret1 = Ret.create((Object) byte1, (Object) ret0);
      ret1.set((Object) null, (Object) byte1);
      Boolean boolean0 = Boolean.valueOf(true);
      BiConsumer<Byte, Long> biConsumer0 = (BiConsumer<Byte, Long>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ret1.forEach(biConsumer0);
      Ret.fail((Object) null, (Object) boolean0);
      ret0.putAll(ret1);
      Object object0 = new Object();
      ret0.replace(object0, object0);
      Float float0 = new Float((-437.88254F));
      ret0.isTrue(float0);
      ret0.isOk();
      Ret.fail();
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Ret ret0 = Ret.ok(object0, object0);
      ret0.getStr(object0);
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ret0.forEach(biConsumer0);
      Ret ret1 = Ret.ok();
      Object object1 = new Object();
      ret1.getAs(object1);
      Ret ret2 = Ret.ok();
      Ret.create();
      Ret.create();
      Ret ret3 = Ret.ok(object0, (Object) ret0);
      ret3.remove(object0);
      ret3.equals(ret2);
      assertEquals(1, ret3.size());
      
      boolean boolean0 = ret0.isFalse(ret2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ret ret0 = new Ret();
      Object object0 = new Object();
      ret0.getBoolean(object0);
      Ret ret1 = Ret.ok();
      ret1.isTrue((Object) null);
      ret1.entrySet();
      ret0.isNull((Object) null);
      Boolean.logicalXor(true, false);
      Set set0 = ret1.entrySet();
      ret1.isFail();
      String string0 = "defaultDatePattern can not be blank.";
      Boolean.getBoolean("defaultDatePattern can not be blank.");
      Ret ret2 = ret0.set(ret1);
      ret0.getLong(set0);
      Ret ret3 = ret2.setOk();
      ret3.setFail();
      Ret ret4 = ret0.set((Object) ret3, (Object) null);
      // Undeclared exception!
      try { 
        ret2.isNull(ret4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer.sum(1, 0);
      Ret ret0 = Ret.ok((Object) integer0, (Object) integer0);
      Ret ret1 = ret0.setFail();
      ret1.remove((Object) integer0, (Object) ret0);
      Ret.fail();
      Ret.setToOldWorkMode();
      ret1.toJson();
      // Undeclared exception!
      try { 
        ret0.getBoolean(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Boolean
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Ret ret0 = Ret.fail(object0, object0);
      // Undeclared exception!
      try { 
        ret0.getInt(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ret ret0 = new Ret();
      Set set0 = ret0.entrySet();
      Ret.create((Object) set0, (Object) ret0);
      ret0.getBoolean("-!\":w");
      BiFunction<Long, Integer, Ret> biFunction0 = (BiFunction<Long, Integer, Ret>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret0.computeIfPresent((Object) null, biFunction0);
      BiConsumer<Integer, Float> biConsumer0 = (BiConsumer<Integer, Float>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ret0.forEach(biConsumer0);
      Boolean.logicalXor(true, true);
      Ret ret1 = Ret.by("-!\":w", ret0);
      Boolean.logicalXor(false, false);
      Ret ret2 = ret0.set(ret1);
      Object object0 = new Object();
      BiFunction<Ret, Double, Short> biFunction1 = (BiFunction<Ret, Double, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret1.merge((Object) null, object0, biFunction1);
      // Undeclared exception!
      try { 
        ret0.getStr(ret2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Short short0 = new Short((short) (-812));
      Short.compare((short) (-812), (short) (-812));
      Short.toUnsignedLong((short) (-812));
      Double double0 = new Double((short) (-812));
      Ret ret0 = Ret.by(short0, double0);
      Ret.setToOldWorkMode();
      Short.compare((short) (-812), (short) (-812));
      Long long0 = Long.valueOf((long) (short) (-812));
      Ret ret1 = Ret.create((Object) ret0, (Object) long0);
      Integer integer0 = new Integer(0);
      ret0.getNumber(ret1);
      ret0.getInt(integer0);
      ret0.getLong(short0);
      ret1.setFail();
      Long long1 = new Long(64724L);
      Long long2 = Long.getLong(">#f/vEA`uR)7{Dg0[G", long1);
      Long.getLong(">#f/vEA`uR)7{Dg0[G", long2);
      ret0.delete(ret1);
      // Undeclared exception!
      try { 
        ret0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ret ret0 = Ret.create();
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 2096.7922F);
      Float.min(1625.0F, 0.0F);
      BiFunction<Ret, Object, String> biFunction0 = (BiFunction<Ret, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret0.merge(float0, "[nU2I/*b`&| t.F8jL", biFunction0);
      Ret ret1 = Ret.create((Object) ret0, (Object) ret0);
      Ret ret2 = ret0.set((Map) ret1);
      // Undeclared exception!
      try { 
        ret1.set((Map) ret2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ret ret0 = new Ret();
      Short short0 = new Short((short)4235);
      Short.toUnsignedLong((short)0);
      Float float0 = new Float(1.0F);
      Short.compare((short)4235, (short) (-20));
      Float.isFinite(0.0F);
      ret0.replace((Object) short0, (Object) short0, (Object) float0);
      Ret.setToOldWorkMode();
      BiFunction<Double, Boolean, Object> biFunction0 = (BiFunction<Double, Boolean, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyBoolean());
      ret0.compute(short0, biFunction0);
      ret0.remove((Object) null, (Object) null);
      Double double0 = new Double(370.4787081);
      Double.min(4635.2, 1.0F);
      Ret ret1 = Ret.fail((Object) double0, (Object) "isFail");
      ret0.putAll(ret1);
      ret0.isFalse((Object) null);
      ret0.isFail();
      Ret.setToOldWorkMode();
      Byte byte0 = new Byte((byte)9);
      Ret.create((Object) ret0, (Object) byte0);
      assertEquals(3, ret0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ret ret0 = new Ret();
      Ret ret1 = Ret.create();
      ret1.values();
      ret0.set(ret1);
      Ret.create();
      Ret.setToOldWorkMode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ret ret0 = Ret.fail();
      Boolean boolean0 = Boolean.valueOf("S$)FT");
      Ret ret1 = Ret.create((Object) ret0, (Object) boolean0);
      Ret ret2 = Ret.create();
      Object object0 = new Object();
      BiFunction<String, Byte, String> biFunction0 = (BiFunction<String, Byte, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean1 = Boolean.valueOf("");
      ret2.getAs((Object) boolean1);
      Boolean.logicalXor(true, false);
      ret2.computeIfPresent(object0, biFunction0);
      ret0.putAll(ret1);
      Ret ret3 = Ret.ok();
      Ret ret4 = ret1.setOk();
      Float float0 = new Float((-1969.0));
      Object object1 = new Object();
      Ret.by(object1, "S$)FT");
      Boolean.logicalXor(true, true);
      Float.min(553.445F, 553.445F);
      Float.sum(0.0F, 1.0F);
      ret1.isNull(float0);
      Boolean boolean2 = Boolean.valueOf("S$)FT");
      ret2.isTrue(boolean2);
      ret2.set((Map) ret3);
      // Undeclared exception!
      try { 
        ret4.equals(ret0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long.getLong("\u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5");
      Ret ret0 = Ret.ok((Object) null, (Object) null);
      Double double0 = new Double(0.0);
      ret0.remove((Object) double0);
      Boolean boolean0 = Boolean.valueOf(true);
      Ret ret1 = Ret.ok((Object) boolean0, (Object) boolean0);
      Integer integer0 = new Integer((-1));
      Integer.max(0, (-3926));
      boolean boolean1 = ret1.isNull(integer0);
      assertTrue(boolean1);
      
      Boolean boolean2 = ret1.getBoolean(boolean0);
      Ret.fail((Object) "\u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5", (Object) boolean2);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Ret ret2 = ret0.set((Map) hashMap0);
      ret2.getAs((Object) null);
      Integer integer1 = new Integer((-1));
      Boolean boolean3 = Boolean.valueOf("");
      Ret ret3 = Ret.fail((Object) boolean3, (Object) ret2);
      Ret.by(integer1, ret3);
      Integer integer2 = new Integer(0);
      ret3.delete(integer2);
      assertFalse(boolean3.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Integer integer0 = new Integer(1945);
      boolean boolean0 = true;
      int int0 = 3517;
      Integer.remainderUnsigned(1945, 3517);
      Boolean boolean1 = Boolean.valueOf(true);
      Ret ret1 = Ret.create((Object) boolean1, (Object) integer0);
      Ret ret2 = Ret.by(boolean1, ret1);
      ret0.equals(integer0);
      ret1.putIfAbsent(ret2, (Object) null);
      ret0.isFail();
      boolean boolean2 = true;
      Ret ret3 = ret1.set((Map) ret2);
      // Undeclared exception!
      try { 
        ret3.set(ret1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(3599);
      Integer.getInteger(";;!LiR)", integer0);
      Ret ret0 = Ret.fail((Object) integer0, (Object) integer0);
      Integer.min(3599, 3599);
      Integer.sum((-3101), 0);
      Long long0 = ret0.getLong(integer0);
      ret0.isOk();
      ret0.isTrue(long0);
      Ret ret1 = Ret.ok();
      assertFalse(ret1.equals((Object)ret0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ret ret0 = Ret.ok((Object) "", (Object) "");
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(any() , anyString());
      ret0.replaceAll(biFunction0);
      ret0.getBoolean("");
      Object object0 = new Object();
      BiFunction<Ret, Object, Integer> biFunction1 = (BiFunction<Ret, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret0.merge((Object) null, object0, biFunction1);
      ret0.clone();
      // Undeclared exception!
      try { 
        ret0.set((Ret) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      String string1 = "com.jfinal.json.Json";
      Boolean boolean0 = Boolean.valueOf("com.jfinal.json.Json");
      Ret ret0 = Ret.fail((Object) "", (Object) boolean0);
      ret0.isTrue(boolean0);
      Boolean.logicalAnd(false, false);
      Ret.ok();
      // Undeclared exception!
      try { 
        ret0.getNumber("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Float float0 = new Float((-66.0F));
      Float.sum(0.0F, (-66.0F));
      Float.sum(3296.77F, 0.0F);
      Ret ret0 = Ret.by(float0, float0);
      Object object0 = new Object();
      ret0.getStr(object0);
      Integer integer0 = ret0.getInt(float0);
      assertEquals((-66), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      Ret ret0 = Ret.by(object0, object0);
      ret0.clone();
      // Undeclared exception!
      try { 
        ret0.getLong(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Float float0 = new Float((-649.0296586758998));
      Long long0 = new Long(829L);
      Ret ret0 = Ret.by(float0, long0);
      Ret.setToOldWorkMode();
      Double double0 = new Double(829L);
      Ret ret1 = ret0.set((Object) double0, (Object) long0);
      ret1.setFail();
      Short short0 = new Short((short)1);
      ret0.set((Object) short0, (Object) short0);
      assertEquals(5, ret0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Ret.setToOldWorkMode();
      Ret ret0 = Ret.fail();
      ret0.clear();
      Double double0 = new Double(0.0);
      Collection collection0 = ret0.values();
      Double.sum(0.0, 2985.08);
      Ret ret1 = ret0.delete(double0);
      Object object0 = null;
      Ret ret2 = Ret.ok((Object) null, (Object) double0);
      Ret.ok((Object) collection0, (Object) ret0);
      Ret ret3 = ret0.set((Map) ret2);
      Short short0 = new Short((short)0);
      ret3.isTrue(short0);
      Object object1 = new Object();
      Float float0 = new Float(2985.08);
      ret1.set((Object) float0, (Object) ret2);
      Ret ret4 = Ret.create((Object) ret2, object1);
      ret2.setOk();
      // Undeclared exception!
      try { 
        ret4.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.isFinite(0.0);
      Ret ret0 = Ret.create((Object) double0, (Object) double0);
      ret0.getAs((Object) double0);
      Float float0 = new Float((-1514.3F));
      Ret ret1 = Ret.fail((Object) ret0, (Object) float0);
      assertEquals(2, ret1.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Ret ret0 = new Ret();
      Ret ret1 = new Ret();
      Ret ret2 = Ret.ok((Object) ret0, (Object) ret1);
      ret0.set((Map) ret2);
      // Undeclared exception!
      try { 
        Ret.create((Object) ret2, (Object) ret1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ret ret0 = Ret.fail((Object) null, (Object) null);
      short short0 = (short)2228;
      Short short1 = new Short((short)2228);
      ret0.putIfAbsent(short1, (Object) null);
      Short.compare((short) (-1314), (short)480);
      Short.toUnsignedLong((short)480);
      ret0.getStr(short1);
      Ret ret1 = Ret.create((Object) null, (Object) ret0);
      ret1.keySet();
      ret0.equals(ret1);
      Ret.ok();
      // Undeclared exception!
      try { 
        ret0.set((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Ret ret0 = Ret.ok((Object) "get", (Object) "get");
      ret0.toJson();
      Float float0 = new Float(0.0);
      Float.sum((-1592.8276F), (-1592.8276F));
      ret0.put("get", float0);
      Ret ret1 = Ret.fail();
      ret0.set((Map) ret1);
      ret0.entrySet();
      boolean boolean0 = ret0.isNull("get");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Ret ret0 = Ret.ok((Object) "get", (Object) "get");
      ret0.toJson();
      Float.sum((-1592.8276F), (-1592.8276F));
      ret0.set((Map) ret0);
      ret0.entrySet();
      boolean boolean0 = ret0.isNull("get");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Ret ret0 = Ret.fail();
      ret0.isFail();
      Short short0 = new Short((short)1356);
      Short.toUnsignedInt((short)1356);
      Ret ret1 = ret0.set((Object) short0, (Object) short0);
      Short.toUnsignedInt((short)1356);
      Integer integer0 = new Integer(1356);
      Float float0 = new Float((float) 1356);
      Ret ret2 = Ret.ok((Object) integer0, (Object) float0);
      ret0.getNumber(ret2);
      Float float1 = new Float((double) (short)1356);
      ret0.notNull(float1);
      ret1.keySet();
      Boolean boolean0 = new Boolean("m@{%,xN--eQ-'0yVlN");
      ret1.getNumber(boolean0);
      Ret ret3 = Ret.fail();
      assertFalse(ret3.equals((Object)ret0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Ret.setToOldWorkMode();
      Ret ret0 = Ret.create();
      String string0 = ret0.toJson();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Long long0 = new Long(0L);
      Ret ret0 = Ret.fail((Object) long0, (Object) long0);
      String string0 = ret0.getStr(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Byte byte0 = new Byte((byte)71);
      Short short0 = new Short((byte)71);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedInt((byte)71);
      Ret ret0 = Ret.fail((Object) byte0, (Object) short0);
      Byte.toUnsignedLong((byte)71);
      ret0.getLong(short0);
      Long.sum(0L, 0);
      boolean boolean0 = ret0.notNull((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ret0.notNull(byte0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Object object0 = new Object();
      Object object1 = new Object();
      ret0.getBoolean(object1);
      ret0.getStr(object0);
      ret0.isTrue((Object) null);
      Ret ret1 = Ret.create((Object) "", (Object) null);
      Integer integer0 = new Integer(0);
      ret1.values();
      Ret ret2 = ret0.set((Object) integer0, (Object) integer0);
      ret2.getNumber((Object) null);
      Ret ret3 = ret0.set((Map) ret1);
      Integer integer1 = new Integer(0);
      Integer.compare(0, 405);
      ret3.clone();
      ret2.getStr(integer1);
      ret3.setOk();
      String string0 = ret1.getStr(integer1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Ret ret0 = Ret.create();
      Byte byte0 = new Byte((byte) (-94));
      ret0.toJson();
      Float float0 = new Float((double) (byte) (-94));
      Float.max((-1.0F), (-1.0F));
      Float.min((-1.0F), (-1.0F));
      Byte byte1 = new Byte((byte) (-94));
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret0.merge(float0, byte1, biFunction0);
      Byte.toUnsignedInt((byte) (-94));
      Byte.toUnsignedLong((byte) (-42));
      ret0.isNull(byte0);
      ret0.setFail();
      Ret ret1 = Ret.ok();
      Float float1 = Float.valueOf((-1.0F));
      ret1.equals(float1);
      ret1.remove((Object) byte1);
      Ret ret2 = Ret.create((Object) byte1, (Object) ret1);
      // Undeclared exception!
      try { 
        ret2.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Ret ret0 = Ret.fail();
      Object object0 = new Object();
      Ret.create();
      Ret ret1 = ret0.delete(object0);
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short) (-1232));
      ret1.getLong(short0);
      boolean boolean0 = ret0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Ret ret0 = Ret.fail();
      Long long0 = new Long(0L);
      Long.divideUnsigned(1705L, (-4829L));
      Ret.setToOldWorkMode();
      ret0.notNull(long0);
      Object object0 = new Object();
      ret0.getLong(object0);
      // Undeclared exception!
      try { 
        ret0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Ret.setToOldWorkMode();
      Object object0 = new Object();
      Short short0 = new Short((short)93);
      Ret ret0 = Ret.fail(object0, (Object) short0);
      Boolean boolean0 = Boolean.valueOf(false);
      ret0.getLong(boolean0);
      assertEquals(3, ret0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Ret ret0 = Ret.fail();
      Long long0 = new Long(93L);
      String string0 = ret0.getStr(long0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Ret ret0 = new Ret();
      Boolean boolean0 = new Boolean((String) null);
      Ret ret1 = Ret.fail((Object) boolean0, (Object) null);
      Ret ret2 = ret0.set((Map) ret1);
      assertFalse(ret2.isEmpty());
      assertTrue(ret2.equals((Object)ret1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Ret ret0 = new Ret();
      ret0.toJson();
      Object object0 = new Object();
      Double double0 = new Double(2261.2711);
      Ret ret1 = ret0.set(object0, (Object) double0);
      assertSame(ret0, ret1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Ret ret0 = new Ret();
      Float float0 = new Float(463.0F);
      String string0 = ret0.getAs((Object) float0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Double double0 = new Double(2726.689);
      Ret ret0 = Ret.ok((Object) double0, (Object) double0);
      Double.max(2726.689, 915.826885411);
      Double.isFinite(420.43955);
      Float float0 = new Float((-1841.0F));
      Float.max(1882.0175F, 1882.0175F);
      Float float1 = new Float((-2185.0));
      ret0.replace((Object) float0, (Object) float1, (Object) float0);
      ret0.isFail();
      ret0.equals(double0);
      Ret.setToOldWorkMode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Ret ret0 = Ret.create((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        ret0.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Float float0 = new Float((-1.0));
      boolean boolean0 = ret0.isNull(float0);
      assertTrue(boolean0);
      
      ret0.setOk();
      Ret ret1 = ret0.setOk();
      assertEquals(1, ret1.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      Double.max(0.0, 0.0);
      Double.sum(0.0, 0.0);
      Ret ret0 = Ret.ok((Object) double0, (Object) double0);
      Ret.ok();
      Object object0 = new Object();
      boolean boolean0 = ret0.equals(object0);
      assertFalse(boolean0);
      assertEquals(2, ret0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Ret ret0 = Ret.fail();
      Double double0 = new Double((-2222.67167847));
      Number number0 = ret0.getNumber(double0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Long long0 = new Long((-2633L));
      Integer integer0 = new Integer(125);
      Ret ret0 = Ret.create((Object) long0, (Object) integer0);
      assertFalse(ret0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Short short0 = new Short((short)92);
      Ret ret0 = Ret.by(float0, short0);
      Ret ret1 = ret0.setFail();
      assertFalse(ret1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Ret ret0 = Ret.create();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalAnd(false, false);
      ret0.isTrue(boolean0);
      // Undeclared exception!
      try { 
        ret0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Ret ret0 = new Ret();
      Short short0 = new Short((short)1077);
      Boolean boolean0 = ret0.getBoolean(short0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Ret ret0 = Ret.create();
      Short short0 = new Short((short)0);
      ret0.getInt(short0);
      // Undeclared exception!
      try { 
        ret0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Ret ret0 = new Ret();
      Object object0 = new Object();
      Ret ret1 = ret0.getAs(object0);
      assertNull(ret1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Ret ret0 = Ret.create();
      Object object0 = new Object();
      Ret ret1 = ret0.delete(object0);
      assertSame(ret0, ret1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Ret.setToOldWorkMode();
      Ret ret0 = new Ret();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Ret ret1 = ret0.set((Map) hashMap0);
      assertSame(ret0, ret1);
      
      // Undeclared exception!
      try { 
        ret0.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Ret ret0 = new Ret();
      Integer integer0 = new Integer((-1));
      boolean boolean0 = ret0.isTrue(integer0);
      boolean boolean1 = ret0.notNull(integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Ret ret0 = Ret.create();
      // Undeclared exception!
      try { 
        ret0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Ret ret0 = new Ret();
      boolean boolean0 = ret0.isTrue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Ret ret0 = new Ret();
      Ret ret1 = Ret.fail((Object) ret0, (Object) ret0);
      assertFalse(ret1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.getBoolean("qHQ0ea;l4#,6*'3G,~8");
      Boolean.logicalOr(false, true);
      Boolean.compare(true, false);
      Object object0 = new Object();
      Ret ret0 = Ret.by(boolean0, object0);
      ret0.delete(boolean0);
      ret0.getNumber(boolean0);
      Ret ret1 = ret0.set((Object) boolean0, (Object) boolean0);
      ret1.putAll(ret0);
      Ret ret2 = ret1.setFail();
      Ret.setToOldWorkMode();
      ret2.isTrue(boolean0);
      Ret ret3 = ret1.set((Object) ret2, (Object) "qHQ0ea;l4#,6*'3G,~8");
      Boolean boolean1 = new Boolean((String) null);
      ret3.isTrue(boolean1);
      // Undeclared exception!
      try { 
        ret3.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer((-2147483645));
      Integer.divideUnsigned((-2147483645), (-2147483645));
      Ret ret0 = Ret.ok((Object) integer0, (Object) integer0);
      ret0.notNull(integer0);
      ret0.clone();
      ret0.getInt(integer0);
      Boolean boolean0 = Boolean.FALSE;
      Integer.min((-1436015561), 1);
      try { 
        Integer.parseUnsignedInt("jL1i/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jL1i/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, true);
      Ret ret0 = Ret.create((Object) boolean0, (Object) boolean0);
      Object object0 = new Object();
      ret0.isFalse(object0);
      ret0.isFalse(boolean0);
      Boolean.logicalXor(false, false);
      Double double0 = new Double(889.1266333664);
      ret0.getAs((Object) double0);
      long long0 = Short.toUnsignedLong((short) (-40));
      assertEquals(65496L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, true);
      Ret ret0 = Ret.create((Object) boolean0, (Object) boolean0);
      Object object0 = new Object();
      ret0.isFalse(object0);
      // Undeclared exception!
      try { 
        ret0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Ret ret0 = Ret.create();
      Byte byte0 = new Byte((byte) (-94));
      Float float0 = new Float((double) (byte) (-94));
      Float.max((-1.0F), (byte) (-94));
      Float.min((-1.0F), (-1.0F));
      Byte byte1 = new Byte((byte) (-94));
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret0.merge(float0, byte1, biFunction0);
      Byte.toUnsignedInt((byte) (-94));
      Byte.compare((byte) (-42), (byte) (-94));
      Byte.toUnsignedLong((byte) (-42));
      ret0.isNull(byte0);
      ret0.setFail();
      Ret ret1 = Ret.ok();
      Float.valueOf((-1.0F));
      ret1.remove((Object) byte1);
      Ret ret2 = Ret.create((Object) byte1, (Object) ret1);
      Ret.ok((Object) "fail", (Object) ret2);
      // Undeclared exception!
      try { 
        ret2.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Ret ret0 = Ret.fail();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ret0.forEach(biConsumer0);
      boolean boolean0 = ret0.isOk();
      Ret ret1 = ret0.setOk();
      boolean boolean1 = ret1.isFail();
      Boolean boolean2 = Boolean.FALSE;
      Boolean.logicalAnd(false, false);
      ret1.isFalse(boolean2);
      Ret ret2 = ret1.setFail();
      boolean boolean3 = ret1.isFalse(ret2);
      assertTrue(boolean3 == boolean1);
      
      ret2.isOk();
      ret2.getAs((Object) null);
      Float float0 = new Float((double) 48);
      Float.isFinite((-485.10394F));
      Float float1 = new Float((float) 48);
      Ret ret3 = Ret.fail();
      boolean boolean4 = ret3.equals(ret0);
      assertFalse(boolean4 == boolean0);
      
      Byte byte0 = new Byte((byte)127);
      ret1.getNumber(byte0);
      Long long0 = new Long((-1817L));
      ret2.getStr(long0);
      assertTrue(ret0.equals((Object)ret3));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Ret ret0 = Ret.ok();
      Object object0 = new Object();
      ret0.isFalse(object0);
      Ret ret1 = Ret.ok(object0, (Object) ret0);
      Ret ret2 = Ret.by(ret1, ret1);
      ret0.isFail();
      ret0.clear();
      ret2.getLong(object0);
      ret2.equals(ret0);
      Object object1 = new Object();
      ret0.isNull(object1);
      Ret ret3 = ret1.setOk();
      ret3.isOk();
      Object object2 = new Object();
      Long long0 = new Long((-3107L));
      ret2.replace(object2, (Object) long0);
      Ret ret4 = ret1.set(ret0);
      Ret ret5 = ret4.setOk();
      BiFunction<Ret, Long, String> biFunction0 = (BiFunction<Ret, Long, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ret5.merge(ret2, object0, biFunction0);
      String string0 = "T6.}nP]27))Og.^A";
      ret3.set((Object) "T6.}nP]27))Og.^A", object1);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        ret3.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Ret ret0 = Ret.create();
      ret0.toJson();
      Float float0 = new Float((-762.55721237));
      ret0.notNull(float0);
      ret0.isNull(float0);
      Object object0 = new Object();
      Float float1 = new Float((-982.854F));
      Ret ret1 = Ret.fail();
      Ret.setToOldWorkMode();
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      ret0.containsKey("{}");
      ret0.getNumber("{}");
      Boolean boolean0 = Boolean.FALSE;
      Float.isFinite((byte)0);
      Ret ret2 = Ret.fail((Object) float0, (Object) boolean0);
      ret0.getInt(object0);
      Boolean.compare(false, true);
      ret2.set((Map) ret0);
      Byte byte1 = new Byte((byte)0);
      ret2.getNumber(ret1);
      ret2.set(ret1);
      ret1.toJson();
      Object object1 = new Object();
      ret0.delete(object1);
      Ret.ok();
      ret1.getStr((Object) null);
      // Undeclared exception!
      try { 
        ret1.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Ret", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Ret ret0 = Ret.fail();
      BiFunction<String, Integer, Ret> biFunction0 = (BiFunction<String, Integer, Ret>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(biFunction0).toString();
      Short.toUnsignedLong((short)9);
      Short.toUnsignedInt((short)0);
      ret0.isEmpty();
      Object object0 = new Object();
      Short short0 = new Short((short)0);
      Short.compare((short)9, (short)1379);
      Boolean boolean0 = Boolean.FALSE;
      Ret ret1 = Ret.ok((Object) biFunction0, (Object) biFunction0);
      ret1.setFail();
      Ret.create();
      ret1.getBoolean("null");
      assertEquals(2, ret1.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Ret ret0 = Ret.create();
      Ret ret1 = Ret.fail((Object) null, (Object) "");
      Ret ret2 = Ret.fail((Object) null, (Object) ret1);
      ret2.remove((Object) "");
      ret2.replace((Object) ret0, (Object) ret0, (Object) ret0);
      Ret ret3 = Ret.ok();
      ret2.getLong(ret3);
      Ret ret4 = ret0.set(ret2);
      ret0.getStr((Object) null);
      Ret ret5 = Ret.ok();
      Integer integer0 = new Integer(0);
      Integer.getInteger("");
      Integer.getInteger("", 1342);
      ret0.equals(integer0);
      assertFalse(ret0.isEmpty());
      
      ret1.isTrue(integer0);
      ret1.notNull((Object) null);
      Byte byte0 = new Byte((byte)8);
      ret2.getBoolean(byte0);
      ret2.toJson();
      ret5.getNumber("{\"null\":{\"null\":\"\",\"state\":\"fail\"},\"state\":\"fail\"}");
      Float float0 = new Float(1.0F);
      ret1.isTrue(float0);
      ret4.isFail();
      Ret ret6 = ret5.delete((Object) null);
      assertTrue(ret6.equals((Object)ret3));
  }
}
