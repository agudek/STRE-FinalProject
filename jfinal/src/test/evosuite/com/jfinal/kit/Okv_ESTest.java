/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:38:31 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.Okv;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Okv_ESTest extends Okv_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Okv okv0 = Okv.by(byte0, byte0);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Double double0 = new Double((byte) (-1));
      Double.max(0.0, 0.0);
      hashMap0.put(double0, byte0);
      Set set0 = okv0.entrySet();
      Okv okv1 = okv0.set((Map) hashMap0);
      Object object0 = new Object();
      Double double1 = new Double(0.0);
      hashMap0.put(double1, (Byte) null);
      okv1.toJson();
      okv1.putIfAbsent(byte0, object0);
      okv1.notNull(hashMap0);
      BiFunction<Byte, Boolean, Okv> biFunction0 = (BiFunction<Byte, Boolean, Okv>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv1.computeIfPresent(set0, biFunction0);
      Byte byte1 = okv1.getAs((Object) byte0);
      okv1.toJson();
      okv0.getStr(byte1);
      okv0.toJson();
      Boolean boolean0 = okv0.getAs((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Okv okv0 = Okv.create();
      boolean boolean0 = okv0.isFalse("'7Ln u");
      assertFalse(boolean0);
      
      Double double0 = new Double((-2264.1));
      Double.isFinite((-1372.0));
      Double.sum((-3093.43651252), 699.872);
      Double.min(1.0, 1.0);
      Double.sum((-3093.43651252), 2023.3099);
      Float float0 = new Float((-1.0F));
      Okv okv1 = Okv.by(double0, float0);
      okv0.set((Map) okv1);
      Integer integer0 = okv0.getInt(double0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      boolean boolean1 = okv0.notNull(object0);
      Okv okv2 = Okv.create();
      okv2.isTrue("'7Ln u");
      Double double1 = new Double((-402.65001487));
      boolean boolean2 = okv2.isTrue(double1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      byte byte2 = (byte)69;
      Byte.compare((byte)69, (byte)102);
      Okv okv0 = Okv.by(object0, byte1);
      Byte.toUnsignedLong((byte)102);
      Okv okv1 = Okv.by(byte1, okv0);
      okv0.set((Map) okv1);
      Object object1 = new Object();
      Object object2 = new Object();
      okv0.remove(object1, object2);
      Number number0 = okv0.getNumber(object0);
      // Undeclared exception!
      try { 
        okv0.getNumber(number0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.jfinal.kit.Okv cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Okv", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(4760.15);
      Okv okv0 = Okv.by(double0, double0);
      Okv okv1 = Okv.create();
      okv0.putAll(okv1);
      Number number0 = okv0.getNumber(double0);
      Integer integer0 = okv0.getInt(number0);
      Integer.toUnsignedString(15);
      Integer.sum(366, 366);
      Double.min(0.0, 4760.15);
      okv0.getInt(integer0);
      Okv okv2 = Okv.create();
      okv2.set((Map) okv0);
      okv0.set((Map) okv2);
      // Undeclared exception!
      try { 
        okv0.set((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Okv okv0 = Okv.create();
      Okv okv1 = Okv.by(okv0, okv0);
      okv0.getLong(okv1);
      okv0.set(okv1);
      String string0 = "GL[ddV6";
      long long0 = (-2721L);
      // Undeclared exception!
      try { 
        okv1.isFalse(okv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte.compare((byte)1, (byte)71);
      Integer integer0 = new Integer((-1));
      Integer.remainderUnsigned(906, (-1));
      Byte.compare((byte)1, (byte) (-27));
      Okv okv0 = Okv.by(byte0, integer0);
      Okv okv1 = Okv.create();
      Long long0 = okv0.getLong(byte0);
      assertNotNull(long0);
      
      Object object0 = new Object();
      okv0.getBoolean(object0);
      Object object1 = new Object();
      Okv okv2 = Okv.by(byte0, object1);
      Integer integer1 = new Integer((-1));
      okv0.getStr((Object) null);
      okv1.getInt(integer1);
      okv0.toJson();
      Okv okv3 = okv2.delete((Object) null);
      Okv okv4 = Okv.create();
      okv0.set((Object) okv4, (Object) okv3);
      Boolean boolean0 = new Boolean("{\"1\":java.lang.Integer@0000000005}");
      okv4.getInt(boolean0);
      boolean boolean1 = okv2.isFalse((Object) null);
      assertFalse(boolean1);
      
      Object object2 = new Object();
      okv1.getBoolean(object2);
      Boolean boolean2 = new Boolean(true);
      Byte byte1 = new Byte((byte) (-27));
      Okv.by(boolean2, byte1);
      assertFalse(boolean2.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      Byte.compare((byte)44, (byte)12);
      Okv okv0 = new Okv();
      Okv okv1 = Okv.by(byte0, okv0);
      Okv okv2 = okv1.set(okv0);
      okv2.getStr(byte0);
      Okv okv3 = okv1.set(okv0);
      Byte byte1 = Byte.valueOf((byte) (-1));
      okv3.isTrue(byte1);
      Object object0 = new Object();
      okv3.isNull(object0);
      Okv okv4 = okv0.set(okv2);
      assertEquals(1, okv0.size());
      
      // Undeclared exception!
      try { 
        okv4.getNumber(okv1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Okv okv0 = new Okv();
      Okv okv1 = new Okv();
      okv1.notNull(okv0);
      Okv okv2 = okv0.set((Map) okv1);
      Short short0 = new Short((short)0);
      okv0.getLong(short0);
      Long long0 = new Long((short)0);
      Long.getLong("", 986L);
      okv1.getBoolean(long0);
      BiConsumer<Boolean, Okv> biConsumer0 = (BiConsumer<Boolean, Okv>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      okv2.forEach(biConsumer0);
      okv0.notNull((Object) null);
      okv2.putAll(okv1);
      Short.compare((short)1487, (short)626);
      Short.toUnsignedLong((short) (-1220));
      Float float0 = new Float((double) (short)0);
      Okv okv3 = okv2.set((Object) null, (Object) float0);
      Float.max((-1.0F), 64316L);
      okv0.toJson();
      Okv okv4 = okv3.set(okv2);
      Object object0 = new Object();
      okv2.isTrue(object0);
      Okv okv5 = okv2.set((Map) okv1);
      okv5.set((Object) okv4, (Object) "{\"null\":java.lang.Float@0000000004}");
      Okv okv6 = Okv.by((Object) null, (Object) null);
      Okv okv7 = okv4.set((Map) okv6);
      // Undeclared exception!
      try { 
        Okv.by(okv7, okv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Okv okv0 = new Okv();
      Double double0 = new Double(0.0);
      BiConsumer<Integer, Byte> biConsumer0 = (BiConsumer<Integer, Byte>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      okv0.forEach(biConsumer0);
      Okv okv1 = Okv.by(okv0, double0);
      Okv okv2 = okv0.set((Map) okv1);
      // Undeclared exception!
      try { 
        okv1.delete(okv2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Okv okv0 = Okv.by(byte0, byte0);
      Byte.toUnsignedLong((byte)1);
      Okv okv1 = new Okv();
      Okv okv2 = okv0.set((Map) okv1);
      boolean boolean0 = okv2.isFalse("Reg$EV");
      Boolean boolean1 = new Boolean("Reg$EV");
      Boolean.compare(false, false);
      Boolean.logicalAnd(false, false);
      Boolean.logicalOr(false, false);
      Float float0 = new Float((-453.26F));
      Float.max(1L, (byte)1);
      Boolean.logicalOr(false, false);
      BiFunction<Short, Double, String> biFunction0 = (BiFunction<Short, Double, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyShort() , anyDouble());
      okv1.compute(float0, biFunction0);
      okv2.getOrDefault(boolean1, "Reg$EV");
      Okv okv3 = Okv.create();
      Boolean.logicalAnd(false, false);
      Long long0 = new Long(1L);
      Long.getLong("o29$d;+b", (long) 0);
      Long.max(0, 1L);
      Long long1 = Long.getLong("Reg$EV", long0);
      boolean boolean2 = okv3.notNull(long1);
      okv3.getAs((Object) "Reg$EV");
      okv3.getBoolean(okv1);
      okv3.set((Map) okv0);
      Okv okv4 = Okv.by((Object) null, "Reg$EV");
      okv0.isTrue(okv4);
      okv0.getLong(byte0);
      boolean boolean3 = okv2.isNull(okv1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = okv3.isTrue(okv2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Okv okv0 = Okv.create();
      Okv okv1 = new Okv();
      Okv okv2 = okv0.set((Map) okv1);
      BiFunction<Boolean, Okv, Byte> biFunction0 = (BiFunction<Boolean, Okv, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv2.replaceAll(biFunction0);
      okv2.put(okv1, okv1);
      Collection collection0 = okv2.values();
      okv1.replace((Object) okv0, (Object) okv0, (Object) collection0);
      okv1.isFalse(okv2);
      okv1.equals(okv2);
      Long long0 = new Long(0L);
      Long.min((-1L), 0L);
      Long.compare(0L, 0L);
      Okv okv3 = okv1.set((Object) okv0, (Object) long0);
      okv1.getNumber(long0);
      // Undeclared exception!
      try { 
        okv1.getLong(okv3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Okv okv0 = Okv.create();
      Float float0 = new Float(0.0F);
      okv0.equals(float0);
      Object object0 = new Object();
      Float.isFinite(0.0F);
      okv0.notNull(object0);
      okv0.isNull(object0);
      Okv okv1 = Okv.by(float0, float0);
      Okv okv2 = okv0.set(okv1);
      Float float1 = Float.valueOf(0.0F);
      BiFunction<Long, Double, Object> biFunction0 = (BiFunction<Long, Double, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyLong() , anyDouble());
      okv1.compute(float1, biFunction0);
      okv2.isNull(object0);
      Short short0 = new Short((short)50);
      okv2.replace((Object) okv0, (Object) short0, (Object) float0);
      Okv okv3 = okv2.set(okv1);
      Object object1 = new Object();
      okv1.remove((Object) float1, object1);
      Object object2 = okv3.clone();
      okv3.getAs((Object) okv2);
      okv0.equals(object2);
      okv1.getBoolean((Object) null);
      okv2.isFalse((Object) null);
      okv3.equals((Object) null);
      Okv okv4 = okv3.set(okv1);
      Object object3 = new Object();
      Okv okv5 = okv1.delete(object3);
      okv0.getInt(float1);
      okv4.getNumber(okv5);
      assertFalse(okv0.isEmpty());
      assertTrue(okv0.equals((Object)object2));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Okv okv0 = new Okv();
      Short short0 = new Short((short)3030);
      Short.toUnsignedLong((short) (-6547));
      Short.toUnsignedInt((short)0);
      Short.toUnsignedLong((short)3030);
      okv0.get(short0);
      okv0.getNumber("}Q");
      okv0.getInt((Object) null);
      int int0 = (-280);
      Short short1 = new Short((short)0);
      Short.compare((short)0, (short) (-1253));
      okv0.putIfAbsent(short1, (Object) null);
      Integer.toUnsignedLong((-280));
      Integer.sum((-280), (-1958));
      okv0.isFalse((Object) null);
      Okv okv1 = Okv.by((Object) null, okv0);
      okv1.remove((Object) null, (Object) "m65(U6~U(5({xFNlT");
      okv0.set(okv1);
      // Undeclared exception!
      try { 
        okv0.getStr(okv1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Okv okv0 = Okv.create();
      okv0.clear();
      Short short0 = new Short((short)0);
      okv0.putIfAbsent(short0, short0);
      Object object0 = new Object();
      okv0.replace(object0, object0, object0);
      Integer integer0 = new Integer(34);
      okv0.getOrDefault((Object) null, object0);
      Integer.toUnsignedString(34);
      okv0.getInt(integer0);
      Double double0 = new Double(34);
      Double.isFinite(0.0);
      okv0.isFalse(double0);
      okv0.getAs((Object) integer0);
      Okv okv1 = Okv.create();
      // Undeclared exception!
      try { 
        okv1.set((Okv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Okv okv0 = Okv.create();
      Short short0 = new Short((short)0);
      Short.compare((short) (-627), (short) (-627));
      boolean boolean0 = okv0.isFalse(short0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Float float0 = new Float((-2827.036F));
      okv0.replace(object0, object0, (Object) float0);
      Short short1 = new Short((short) (-1512));
      boolean boolean1 = okv0.notNull(short1);
      Short short2 = new Short((short)0);
      Short.toUnsignedInt((short)12);
      Boolean boolean2 = new Boolean(false);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(false, true);
      Okv okv1 = Okv.by(short2, boolean2);
      boolean boolean3 = okv0.equals(okv1);
      assertTrue(boolean3 == boolean1);
      
      Boolean boolean4 = okv1.getBoolean(short0);
      assertNotNull(boolean4);
      
      Short short3 = new Short((short)93);
      okv1.equals(short3);
      Boolean boolean5 = new Boolean("");
      okv0.delete(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)0);
      Float float0 = new Float(0.0);
      Okv okv0 = Okv.by(short0, float0);
      Okv okv1 = okv0.set((Object) short0, (Object) short0);
      okv1.getInt(okv0);
      Integer integer0 = new Integer((short)0);
      okv1.isFalse(integer0);
      Boolean boolean0 = Boolean.FALSE;
      Short.toUnsignedLong((short)0);
      okv0.isTrue(boolean0);
      okv0.isNull("");
      Float float1 = new Float((double) (short)0);
      okv0.delete(float1);
      okv1.getStr(float0);
      Float.max((-1.0F), (-1.0F));
      Long long0 = okv1.getLong(short0);
      okv0.isNull(long0);
      Short short1 = new Short((short)878);
      Integer integer1 = okv1.getAs((Object) short1);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Okv okv0 = new Okv();
      BiFunction<Integer, Integer, Boolean> biFunction0 = (BiFunction<Integer, Integer, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv0.replaceAll(biFunction0);
      BiFunction<Float, Okv, Object> biFunction1 = (BiFunction<Float, Okv, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv0.replaceAll(biFunction1);
      Okv okv1 = Okv.by(okv0, okv0);
      Okv okv2 = okv0.set(okv1);
      okv2.getStr((Object) null);
      Float float0 = new Float(0.0F);
      Float.isFinite((-1805.4031F));
      Float.isFinite((-2051.9158F));
      okv0.isTrue(float0);
      okv2.isTrue((Object) null);
      okv0.getLong((Object) null);
      Long long0 = new Long((-1914L));
      Okv okv3 = Okv.by(long0, okv1);
      Okv okv4 = okv3.delete((Object) null);
      okv1.getInt((Object) null);
      okv1.notNull((Object) null);
      okv1.toJson();
      Short short0 = new Short((short)2458);
      okv2.notNull(short0);
      // Undeclared exception!
      try { 
        okv2.isTrue(okv4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Okv okv0 = new Okv();
      Short short0 = new Short((short) (-1122));
      Short.toUnsignedLong((short) (-2697));
      Object object0 = null;
      Okv okv1 = Okv.by(short0, (Object) null);
      okv0.put((Object) null, okv1);
      BiFunction<Byte, Object, Object> biFunction0 = (BiFunction<Byte, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.lang.Byte.class) , any());
      okv0.compute(short0, biFunction0);
      Long long0 = new Long(0L);
      okv0.isFalse(long0);
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      okv1.forEach(biConsumer0);
      okv0.equals((Object) null);
      // Undeclared exception!
      try { 
        okv0.getInt((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.jfinal.kit.Okv cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Okv", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Okv okv0 = Okv.create();
      okv0.entrySet();
      Object object0 = new Object();
      okv0.get(object0);
      Byte byte0 = new Byte((byte) (-1));
      okv0.getAs((Object) byte0);
      Byte.toUnsignedLong((byte)1);
      String string0 = "y?)$!";
      Integer.toUnsignedLong((byte) (-1));
      // Undeclared exception!
      try { 
        okv0.set((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)13);
      Okv okv0 = Okv.by(boolean0, short0);
      okv0.isFalse(short0);
      HashMap<Okv, Object> hashMap0 = new HashMap<Okv, Object>();
      Okv okv1 = okv0.set((Map) hashMap0);
      okv1.isNull(hashMap0);
      okv0.getInt(boolean0);
      Okv okv2 = okv0.set((Map) hashMap0);
      Integer integer0 = new Integer((short)13);
      okv2.getBoolean(integer0);
      Double double0 = Double.valueOf((double) (short)13);
      Okv okv3 = Okv.by((Object) null, double0);
      assertNotSame(okv3, okv1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float(204.4);
      Okv okv0 = Okv.by((Object) null, float0);
      okv0.notNull((Object) null);
      Okv okv1 = Okv.create();
      Object object0 = new Object();
      okv0.replace((Object) okv1, object0);
      Float.isFinite(0.0F);
      okv0.getNumber((Object) null);
      Okv okv2 = Okv.create();
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)2098);
      Short.toUnsignedLong((short)0);
      okv2.putIfAbsent(short0, okv1);
      Float.min(0.0F, 0.0F);
      okv2.values();
      okv0.isFalse(float0);
      Boolean boolean0 = Boolean.valueOf(true);
      okv2.getLong(boolean0);
      okv0.isNull((Object) null);
      Object object1 = new Object();
      okv2.getStr(object1);
      Short short1 = new Short((short) (-2356));
      Short.compare((short)0, (short)0);
      Okv okv3 = Okv.by(okv2, short1);
      Okv okv4 = okv1.set(okv0);
      Object object2 = new Object();
      Okv okv5 = okv3.delete(object2);
      assertNotSame(okv5, okv4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Okv okv0 = new Okv();
      Float float0 = new Float(1.0);
      Float.max(1.0F, 1.0F);
      okv0.notNull(float0);
      Okv okv1 = Okv.create();
      Set set0 = okv0.keySet();
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      okv1.clone();
      okv1.compute(okv0, biFunction0);
      Object object0 = new Object();
      okv0.put(set0, object0);
      Okv okv2 = okv0.set((Map) okv1);
      // Undeclared exception!
      try { 
        okv1.getInt(okv2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)0);
      Okv okv0 = Okv.by(byte0, byte0);
      okv0.notNull(byte0);
      Byte.toUnsignedInt((byte)0);
      Byte.toUnsignedLong((byte)0);
      okv0.replace((Object) byte0, (Object) byte0, (Object) byte0);
      Object object0 = new Object();
      Okv okv1 = okv0.delete(object0);
      Byte.toUnsignedLong((byte)0);
      Okv okv2 = okv0.set(okv1);
      BiConsumer<Okv, Boolean> biConsumer0 = (BiConsumer<Okv, Boolean>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      okv2.forEach(biConsumer0);
      Okv.by(object0, object0);
      okv0.getNumber(byte0);
      okv1.toJson();
      Okv okv3 = Okv.create();
      Okv okv4 = okv1.set((Map) okv3);
      assertNotSame(okv4, okv3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(1438);
      Integer integer1 = Integer.getInteger("", integer0);
      Okv okv0 = Okv.by(integer0, integer0);
      Integer.remainderUnsigned(1438, 1438);
      boolean boolean0 = okv0.notNull(integer0);
      okv0.replace((Object) integer1, (Object) "", (Object) integer1);
      boolean boolean1 = okv0.isFalse(integer0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      Boolean.logicalXor(false, true);
      okv0.getStr(boolean2);
      Float float0 = new Float((-1.0));
      Okv okv1 = okv0.set((Object) integer0, (Object) float0);
      boolean boolean3 = okv0.isNull(integer0);
      assertFalse(boolean3 == boolean0);
      
      okv1.set(okv0);
      Long long0 = okv1.getLong(float0);
      assertNull(long0);
      assertEquals(1, okv0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Short short0 = new Short((short) (-1581));
      Okv okv0 = Okv.by(short0, short0);
      Okv okv1 = okv0.set((Object) short0, (Object) short0);
      okv1.keySet();
      boolean boolean0 = okv0.notNull(short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Okv okv0 = Okv.create();
      okv0.toJson();
      Object object0 = new Object();
      Okv okv1 = Okv.by(object0, "{}");
      Long long0 = new Long(0L);
      boolean boolean0 = okv1.isFalse(long0);
      assertFalse(boolean0);
      
      okv0.toJson();
      Okv okv2 = Okv.create();
      boolean boolean1 = okv0.equals(okv2);
      boolean boolean2 = okv0.isTrue(okv1);
      assertFalse(boolean2 == boolean1);
      
      Object object1 = new Object();
      Float float0 = new Float((float) 0L);
      Okv okv3 = Okv.by(object1, float0);
      assertFalse(okv3.equals((Object)okv0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Okv okv0 = Okv.by(object0, object0);
      Okv okv1 = Okv.create();
      Okv okv2 = okv1.set((Object) okv0, object0);
      okv1.set((Map) okv2);
      Okv okv3 = okv0.set(okv1);
      okv3.isNull(object0);
      // Undeclared exception!
      try { 
        okv2.set(okv3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Okv okv0 = Okv.create();
      Long long0 = new Long(0L);
      okv0.getNumber(long0);
      okv0.isTrue((Object) null);
      okv0.isTrue((Object) null);
      Okv okv1 = Okv.by(long0, okv0);
      okv0.getAs((Object) okv1);
      Double double0 = new Double(0L);
      Double.sum((-1615.911322175838), 1.0);
      Double.max(0.0, 1121.196789019746);
      okv1.isNull(double0);
      Object object0 = new Object();
      Okv okv2 = Okv.by(okv0, object0);
      Boolean boolean0 = Boolean.valueOf("P] =dS:ya");
      okv2.replace((Object) boolean0, (Object) "P] =dS:ya");
      okv0.set((Map) okv1);
      // Undeclared exception!
      try { 
        okv0.notNull(okv2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Okv okv0 = new Okv();
      okv0.isTrue("?");
      Boolean boolean0 = Boolean.valueOf("?");
      Boolean boolean1 = new Boolean(false);
      okv0.remove((Object) boolean0, (Object) boolean1);
      okv0.clear();
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, false);
      BiConsumer<Boolean, String> biConsumer0 = (BiConsumer<Boolean, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      okv0.forEach(biConsumer0);
      Boolean.logicalXor(false, false);
      Boolean.logicalXor(false, false);
      Boolean.logicalXor(false, false);
      BiFunction<Okv, Object, Integer> biFunction0 = (BiFunction<Okv, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv0.merge("?", boolean0, biFunction0);
      Boolean.logicalOr(false, true);
      Object object0 = new Object();
      okv0.remove(object0, (Object) boolean0);
      Object object1 = new Object();
      okv0.isNull(object1);
      // Undeclared exception!
      try { 
        okv0.getNumber("?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Okv", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Okv okv0 = Okv.create();
      Double double0 = new Double(0.0);
      Double.min((-1.0), 0.0);
      Okv okv1 = new Okv();
      okv0.getOrDefault(double0, okv1);
      Float float0 = new Float((-1.0));
      okv0.getAs((Object) float0);
      Okv okv2 = Okv.by(okv0, okv0);
      Short short0 = new Short((short)0);
      okv2.put("", short0);
      okv0.set(okv2);
      Okv.create();
      // Undeclared exception!
      try { 
        okv1.set((Map) okv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Okv okv0 = Okv.by(object0, "OI");
      Byte byte0 = new Byte((byte) (-30));
      Byte.compare((byte) (-30), (byte)0);
      okv0.isNull(byte0);
      Okv okv1 = Okv.by("OI", "OI");
      Okv okv2 = okv0.set((Map) okv1);
      BiFunction<Object, Integer, String> biFunction0 = (BiFunction<Object, Integer, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(any() , anyInt());
      okv0.replaceAll(biFunction0);
      BiFunction<Boolean, String, Float> biFunction1 = (BiFunction<Boolean, String, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyBoolean() , anyString());
      okv2.compute((Object) null, biFunction1);
      Float float0 = new Float(1620.554383461194);
      okv1.putIfAbsent(float0, (Object) null);
      // Undeclared exception!
      try { 
        okv1.getBoolean("OI");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("com.jfinal.kit.Okv", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Okv okv0 = new Okv();
      okv0.keySet();
      Okv okv1 = Okv.by(okv0, okv0);
      okv0.equals(okv1);
      // Undeclared exception!
      try { 
        okv1.getLong(okv0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.jfinal.kit.Okv cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Okv", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      Okv okv0 = Okv.by(object0, object0);
      okv0.clone();
      // Undeclared exception!
      try { 
        okv0.getLong(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Okv", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Okv okv0 = Okv.create();
      Short short0 = new Short((short) (-1));
      Okv okv1 = Okv.by(short0, short0);
      Okv okv2 = okv0.set((Map) okv1);
      assertNotSame(okv2, okv1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Okv okv0 = Okv.create();
      okv0.notNull((Object) null);
      Short short0 = new Short((short) (-3206));
      Short.toUnsignedInt((short)0);
      okv0.remove((Object) short0);
      Object object0 = new Object();
      Short.toUnsignedLong((short) (-3206));
      okv0.replace(object0, object0, object0);
      Object object1 = new Object();
      okv0.getNumber(object1);
      String string0 = okv0.getAs((Object) short0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Okv okv0 = Okv.create();
      Short short0 = new Short((short)1);
      okv0.getLong(short0);
      Object object0 = new Object();
      okv0.getBoolean(object0);
      Object object1 = new Object();
      boolean boolean0 = okv0.isNull(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Okv okv0 = Okv.create();
      Object object0 = new Object();
      boolean boolean0 = okv0.isTrue(object0);
      assertFalse(boolean0);
      
      Okv okv1 = new Okv();
      okv0.set(okv1);
      okv1.getOrDefault(object0, object0);
      okv0.getInt((Object) null);
      Integer.getInteger((String) null);
      Okv okv2 = okv0.delete((Object) null);
      boolean boolean1 = okv2.notNull(okv1);
      boolean boolean2 = okv0.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      
      Okv okv3 = okv0.set((Map) okv2);
      assertTrue(okv3.equals((Object)okv1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Okv okv0 = new Okv();
      okv0.getStr((Object) null);
      Okv.create();
      Long long0 = okv0.getLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Okv okv0 = Okv.create();
      Okv okv1 = Okv.create();
      okv1.getBoolean(okv0);
      boolean boolean0 = okv0.isTrue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long long0 = new Long(1L);
      Long.divideUnsigned(0L, 1L);
      Okv okv0 = Okv.by(long0, long0);
      boolean boolean0 = okv0.equals(long0);
      assertFalse(boolean0);
      
      Okv okv1 = new Okv();
      Okv okv2 = okv0.set(okv1);
      Float float0 = new Float((double) 1L);
      okv2.get(float0);
      Okv okv3 = Okv.create();
      assertTrue(okv3.equals((Object)okv1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Okv okv0 = Okv.create();
      Byte byte0 = new Byte((byte) (-60));
      Byte.toUnsignedInt((byte) (-60));
      Okv okv1 = okv0.set((Object) byte0, (Object) byte0);
      Integer integer0 = new Integer((-1488));
      Okv okv2 = okv1.delete(integer0);
      assertSame(okv1, okv2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Okv okv0 = Okv.create();
      Byte byte0 = new Byte((byte)103);
      Byte.compare((byte)103, (byte)103);
      Long long0 = okv0.getLong(byte0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Okv okv0 = new Okv();
      okv0.toJson();
      okv0.getAs((Object) "{}");
      okv0.getInt("{}");
      Float float0 = new Float((-269.3831849));
      Float.isFinite(0.0F);
      Float.min(590.0F, 590.0F);
      okv0.delete(float0);
      Double double0 = okv0.getAs((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Okv okv0 = Okv.by((Object) null, (Object) null);
      Integer integer0 = okv0.getAs((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Okv okv0 = Okv.create();
      Byte byte0 = new Byte((byte)1);
      boolean boolean0 = okv0.isTrue(byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Okv okv0 = Okv.create();
      boolean boolean0 = okv0.isFalse((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Okv okv0 = new Okv();
      Okv okv1 = Okv.create();
      Number number0 = okv0.getNumber(okv1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Okv okv0 = new Okv();
      Integer integer0 = new Integer(2534);
      String string0 = okv0.getStr(integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Okv okv0 = new Okv();
      Object object0 = new Object();
      Boolean boolean0 = okv0.getBoolean(object0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Okv okv0 = new Okv();
      Byte byte0 = new Byte((byte)0);
      Long long0 = okv0.getLong(byte0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      Byte.compare((byte)44, (byte)12);
      Okv okv0 = new Okv();
      Okv okv1 = Okv.by(byte0, okv0);
      Okv okv2 = okv1.set(okv0);
      okv2.getStr(byte0);
      Okv okv3 = okv1.set(okv0);
      okv2.toJson();
      Byte byte1 = Byte.valueOf((byte) (-14));
      okv3.isTrue(byte1);
      Object object0 = new Object();
      okv3.isNull(object0);
      okv0.set(okv2);
      assertFalse(okv0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte.compare((byte)31, (byte) (-42));
      Byte byte1 = new Byte((byte) (-106));
      assertEquals((byte) (-106), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Okv okv0 = Okv.create();
      Okv okv1 = new Okv();
      Okv okv2 = Okv.by(okv0, okv0);
      Short short0 = new Short((short) (-1777));
      Short.toUnsignedLong((short) (-1));
      Okv okv3 = okv0.set(okv1);
      Okv okv4 = Okv.create();
      okv2.set((Object) okv4, (Object) short0);
      okv1.notNull(okv3);
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(442.7598329);
      okv3.equals(float0);
      okv3.getStr(boolean0);
      okv2.getLong(okv1);
      okv2.getBoolean((Object) null);
      Integer.getInteger((String) null);
      okv2.isFalse((Object) null);
      Okv okv5 = Okv.create();
      okv0.isFalse(okv5);
      okv0.getBoolean((Object) null);
      okv2.set(okv0);
      try { 
        Short.decode("timestampPattern can not be blank.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"timestampPattern can not be blank.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Okv okv0 = Okv.create();
      okv0.isFalse("'7Ln u");
      Double double0 = new Double((-2264.1));
      Double.isFinite((-1372.0));
      Double.sum((-3093.43651252), 699.872);
      Double.min(1.0, 1.0);
      Double.sum((-3093.43651252), 2023.3099);
      Float float0 = new Float((-1.0F));
      Okv okv1 = Okv.by(double0, float0);
      okv0.set((Map) okv1);
      assertTrue(okv1.equals((Object)okv0));
      
      Integer integer0 = okv0.getInt(double0);
      Object object0 = new Object();
      boolean boolean0 = okv0.equals(integer0);
      assertFalse(boolean0);
      
      Okv okv2 = Okv.create();
      okv2.isTrue("'7Ln u");
      Double double1 = new Double((-402.65001487));
      boolean boolean1 = okv2.isTrue(double1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Long long0 = Long.valueOf((-413L));
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      Okv okv0 = Okv.by(long0, boolean0);
      Float float0 = new Float((float) (-413L));
      okv0.putIfAbsent(float0, boolean0);
      okv0.isFalse(long0);
      Okv okv1 = okv0.set((Object) float0, (Object) float0);
      Double double0 = new Double(392.0);
      Okv okv2 = Okv.create();
      BiFunction<String, Okv, Integer> biFunction0 = (BiFunction<String, Okv, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv0.merge(double0, okv2, biFunction0);
      Boolean.compare(true, true);
      Object object0 = new Object();
      okv0.getAs(object0);
      okv0.toJson();
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte) (-1));
      okv0.getAs((Object) byte0);
      okv0.isNull(boolean0);
      Okv okv3 = okv2.delete(object0);
      assertNotSame(okv3, okv1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Long long0 = Long.valueOf((-413L));
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      Okv okv0 = Okv.by(long0, boolean0);
      Float float0 = new Float((float) (-413L));
      okv0.putIfAbsent(float0, boolean0);
      okv0.isFalse(long0);
      okv0.set((Object) float0, (Object) float0);
      Double double0 = new Double(392.0);
      Okv okv1 = Okv.create();
      BiFunction<String, Okv, Integer> biFunction0 = (BiFunction<String, Okv, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      okv0.merge(double0, okv1, biFunction0);
      Boolean.compare(true, true);
      Object object0 = new Object();
      okv0.getAs(object0);
      okv0.toJson();
      okv0.getInt((Object) null);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte) (-1));
      okv0.getAs((Object) byte0);
      okv0.isNull(boolean0);
      Okv okv2 = okv1.delete(object0);
      assertSame(okv2, okv1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Okv okv0 = Okv.create();
      Object object0 = new Object();
      Okv okv1 = new Okv();
      Long long0 = new Long(1202L);
      Long.divideUnsigned(0L, (-2769L));
      Long.min(1202L, 1202L);
      Number number0 = okv0.getNumber(long0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Okv okv0 = Okv.create();
      Okv okv1 = Okv.by(okv0, okv0);
      okv0.getLong(okv1);
      Okv okv2 = okv0.set(okv1);
      Okv okv3 = new Okv();
      okv0.notNull(okv3);
      Integer integer0 = new Integer(3);
      okv3.isTrue(integer0);
      Integer integer1 = new Integer(3);
      Object object0 = new Object();
      okv1.putIfAbsent(integer1, object0);
      okv1.notNull(integer1);
      okv2.toJson();
      // Undeclared exception!
      try { 
        okv0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
