/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:55:37 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.json.JFinalJson;
import com.jfinal.kit.JsonKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class JsonKit_ESTest extends JsonKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JsonKit.toJson(object0, 1399);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JsonKit.toJson((Object) class0, 2097);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class com.jfinal.json.JFinalJson can not access a member of class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl with modifiers \"public final\"
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonKit.toJson((Object) "\"{}\"", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // convert depth can not less than 2.
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      JFinalJson.setDefaultConvertDepth(2088);
      // Undeclared exception!
      JsonKit.toJson((Object) jFinalJson0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JsonKit.toJson((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class com.jfinal.json.JFinalJson can not access a member of class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl with modifiers \"public final\"
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      // Undeclared exception!
      JsonKit.toJson((Object) jFinalJson0, 422);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JFinalJson jFinalJson0 = JFinalJson.getJson();
      String string0 = JsonKit.toJson((Object) jFinalJson0);
      assertEquals("{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":{\"defaultDatePattern\":null,\"datePattern\":null,\"json\":null}}}}}}}}}}}}}}}}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JsonKit jsonKit0 = new JsonKit();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JsonKit.parse("rEXL)UO3%R", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jfinal 3.4\u9ED8\u8BA4 json \u5B9E\u73B0\u6682\u4E0D\u652F\u6301 json \u5230 object \u7684\u8F6C\u6362,\u5EFA\u8BAE\u4F7F\u7528 active recrord \u7684 Generator \u751F\u6210 base model\uFF0C\u518D\u901A\u8FC7 me.setJsonFactory(new MixedJsonFactory()) \u6765\u652F\u6301
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }
}
