/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:33:12 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.AesKit;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class AesKit_ESTest extends AesKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)15;
      // Undeclared exception!
      try { 
        AesKit.PKCS7Encoder.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > -13
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, "com.jfinal.kit.AesKit$PKCS7Encoder");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt("!whG#al", "utf-8", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = AesKit.encrypt(byteArray0, "________________________________");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = AesKit.PKCS7Encoder.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertEquals(64, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        AesKit.encrypt(byteArray0, byteArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("________________________________", "________________________________");
      assertNotNull(byteArray0);
      assertEquals(64, byteArray0.length);
      
      String string0 = AesKit.decryptToStr(byteArray0, "________________________________");
      assertEquals("________________________________", string0);
      assertNotNull(string0);
      assertEquals(64, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-74);
      byte[] byteArray1 = AesKit.PKCS7Encoder.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte)0, (byte)126, (byte) (-74)}, byteArray0);
      
      byte[] byteArray2 = AesKit.decrypt(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte)0, (byte)126, (byte) (-74)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("________________________________", "________________________________");
      assertNotNull(byteArray0);
      assertEquals(64, byteArray0.length);
      
      byte[] byteArray1 = AesKit.decrypt(byteArray0, "________________________________");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(64, byteArray0.length);
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        AesKit.encrypt(byteArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt("SHA-384", "MD5", "F`J[D=Pu.x!x");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // MD5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt("_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", "", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt((String) null, "utf-8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt("Tt:4", "#S1Lo/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesKit.encrypt((String) null, "SHA-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("________________________________", "________________________________");
      assertNotNull(byteArray0);
      assertEquals(64, byteArray0.length);
      
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, "________________________________", "5n42juBB:");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 5n42juBB:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("________________________________", "________________________________");
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, "________________________________", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        AesKit.decrypt(byteArray0, "}03F9J._ax;Lh1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        AesKit.decrypt(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = AesKit.PKCS7Encoder.encode(byteArray0);
      assertEquals(32, byteArray1.length);
      
      byte[] byteArray2 = AesKit.encrypt(byteArray1, byteArray1);
      assertEquals(64, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)119;
      byte[] byteArray1 = AesKit.PKCS7Encoder.decode(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("________________________________", "________________________________");
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, "________________________________", "<[4k+*4*:5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <[4k+*4*:5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("com.jfinal.kit.AesKit", "________________________________");
      byte[] byteArray1 = AesKit.decrypt(byteArray0, byteArray0);
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AesKit.PKCS7Encoder aesKit_PKCS7Encoder0 = new AesKit.PKCS7Encoder();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = AesKit.genAesKey();
      assertEquals("________________________________", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        AesKit.decryptToStr(byteArray0, "com.jfinal.kit.AesKit", "com.jfinal.kit.AesKit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = AesKit.encrypt("com.jfinal.kit.AesKit", "________________________________");
      // Undeclared exception!
      try { 
        AesKit.encrypt(byteArray0, "com.jfinal.kit.AesKit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IllegalAesKey, aesKey's length must be 32
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        AesKit.decrypt(byteArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.AesKit", e);
      }
  }
}
