/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:53:52 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.StrKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class StrKit_ESTest extends StrKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = StrKit.equals("$", "$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StrKit.toCamelCase("he_D<w0kx(]V@b_QT");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StrKit.firstCharToUpperCase("z}hr+7}e>Qo");
      assertEquals("Z}hr+7}e>Qo", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StrKit.firstCharToUpperCase("aGp4Fm6m$E].fP:");
      assertEquals("AGp4Fm6m$E].fP:", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StrKit.firstCharToLowerCase("ZIGD?\"fl!");
      assertEquals("zIGD?\"fl!", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StrKit.firstCharToLowerCase("AlGrBz}");
      assertEquals("alGrBz}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StrKit.toCamelCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = StrKit.slowEquals("$", "$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StrKit.join(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.toCamelCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.StrKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.join((String[]) null, "v.!p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.StrKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.join((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.StrKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.firstCharToUpperCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.firstCharToUpperCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.StrKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.firstCharToLowerCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrKit.firstCharToLowerCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.StrKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StrKit.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = StrKit.equals((String) null, ",%e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StrKit.slowEquals("+,Ve8>W-N }AU;9J 'j#AR/RBB%?+,Ve8>W-N }AU;9J+,Ve8>W-N }AU;9J 'j#AR/RBB%?+,Ve8>W-N }AU;9J 'j#AR/RBB%?+,Ve8>W-N }AU;9J", " 'j#AR/RBB%?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = StrKit.slowEquals((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = StrKit.join(stringArray0, stringArray0[4]);
      assertEquals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StrKit.join(stringArray0, "00000000010040008200000003000000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StrKit.join(stringArray0);
      assertEquals("nullnullnullnullnullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StrKit.toCamelCase("8KXjtyhlD)ZH_");
      assertEquals("8kxjtyhld)zh", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+,Ve8>W-N }AU;9J";
      stringArray0[1] = " 'j#AR/RBB%?";
      stringArray0[2] = "+,Ve8>W-N }AU;9J";
      stringArray0[3] = "+,Ve8>W-N }AU;9J";
      stringArray0[4] = " 'j#AR/RBB%?";
      stringArray0[5] = "+,Ve8>W-N }AU;9J";
      stringArray0[6] = " 'j#AR/RBB%?";
      stringArray0[7] = "+,Ve8>W-N }AU;9J";
      boolean boolean0 = StrKit.notNull(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = StrKit.notNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StrKit.notNull(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Sd{F/";
      stringArray0[1] = "Sd{F/";
      boolean boolean0 = StrKit.notBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StrKit.notBlank(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StrKit.notBlank(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StrKit.notBlank((String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StrKit.notBlank(",%e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StrKit.notBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = StrKit.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = StrKit.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = StrKit.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = StrKit.isBlank("tlQ2b3vYZ`MItbg.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = StrKit.firstCharToUpperCase("~2k7`y<d &)wX.[");
      assertEquals("~2k7`y<d &)wX.[", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = StrKit.firstCharToUpperCase(":p{pSpjRR");
      assertEquals(":p{pSpjRR", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = StrKit.firstCharToLowerCase("y5cD$.Yz?`W,");
      assertEquals("y5cD$.Yz?`W,", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = StrKit.firstCharToLowerCase("00000000010040008200000003000000");
      assertEquals("00000000010040008200000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = StrKit.getRandomUUID();
      assertEquals("00000000010040008200000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrKit strKit0 = new StrKit();
  }
}
