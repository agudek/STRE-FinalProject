/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:00:55 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.Kv;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Kv_ESTest extends Kv_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Kv kv0 = Kv.create();
      Object object0 = new Object();
      Kv kv1 = Kv.by(kv0, object0);
      Kv kv2 = kv0.set((Map) kv1);
      Kv.create();
      kv2.toJson();
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        kv1.notNull(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /*@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Kv kv0 = Kv.fail();
      kv0.notNull("");
      kv0.isFalse("isOk");
      Float float0 = new Float((-98.18901F));
      BiFunction<Kv, Integer, Float> biFunction0 = (BiFunction<Kv, Integer, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(biFunction0).apply(anyMap() , anyInt());
      kv0.computeIfPresent("isOk", biFunction0);
      kv0.isTrue("isOk");
      Kv kv1 = new Kv();
      kv0.isOk();
      boolean boolean0 = kv0.isOk();
      assertEquals(1, kv0.size());
      assertFalse(boolean0);
  }*/

  /*@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Kv kv0 = Kv.ok();
      kv0.notNull("");
      kv0.isFalse("isOk");
      BiFunction<Kv, Integer, Float> biFunction0 = (BiFunction<Kv, Integer, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyMap() , anyInt());
      kv0.computeIfPresent("isOk", biFunction0);
      kv0.isTrue("isOk");
      Kv kv1 = new Kv();
      boolean boolean0 = kv0.isOk();
      assertEquals(1, kv0.size());
      assertTrue(boolean0);
  }*/

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Float float0 = new Float((-2750.85141));
      Boolean boolean0 = Boolean.FALSE;
      Kv kv0 = Kv.fail((Object) float0, (Object) boolean0);
      kv0.getInt("<oo5v\"\"mT}RO_ba,}");
      boolean boolean1 = kv0.isFalse(float0);
      boolean boolean2 = kv0.notNull(boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      kv0.getBoolean(float0);
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(2);
      Kv kv0 = Kv.ok((Object) boolean0, (Object) integer0);
      Object object0 = new Object();
      Kv kv1 = Kv.fail((Object) integer0, object0);
      BiFunction<Double, Object, Boolean> biFunction0 = (BiFunction<Double, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(biFunction0).apply(anyDouble() , any());
      kv1.replaceAll(biFunction0);
      Float float0 = new Float(0.0);
      kv0.replace(object0, (Object) integer0, (Object) float0);
      Boolean.logicalAnd(false, false);
      Kv kv2 = kv1.setOk();
      kv0.getNumber(boolean0);
      Kv kv3 = kv1.set(kv0);
      Boolean boolean1 = Boolean.FALSE;
      Kv kv4 = kv1.setFail();
      kv3.getNumber(boolean1);
      kv1.toJson();
      kv1.getBoolean(integer0);
      boolean boolean2 = kv4.isOk();
      Float float1 = new Float(737.4646202);
      Kv.ok((Object) float1, (Object) "*jy%hH/|})");
      kv2.isOk();
      kv3.delete((Object) null);
      assertEquals(4, kv1.size());
      assertTrue(boolean0.equals((Object)boolean2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float(156.2686F);
      Float.max(0.0F, (-2939.3142F));
      Float.sum((-1993.7716F), 0.0F);
      Kv kv0 = Kv.ok((Object) float0, (Object) "isOk");
      kv0.entrySet();
      Object object0 = new Object();
      kv0.getOrDefault(object0, float0);
      kv0.isOk();
      kv0.isFalse("isOk");
      Kv kv1 = Kv.fail();
      assertEquals(2, kv1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Double double0 = new Double(2037.69343);
      double double1 = Double.min(0.0, 2037.69343);
      Double double2 = new Double(2037.69343);
      kv0.set((Object) double0, (Object) double2);
      Byte byte0 = new Byte((byte)1);
      kv0.getAs((Object) byte0);
      Double double3 = new Double(2037.69343);
      Number number0 = kv0.getNumber(double3);
      assertFalse(number0.equals((Object)double1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(0.8000651170224213);
      Kv kv0 = Kv.by(double0, double0);
      Double.sum(0.8000651170224213, 0.8000651170224213);
      Kv.by(double0, kv0);
      kv0.getLong(double0);
      Kv kv1 = kv0.setOk();
      kv0.setFail();
      Kv.create();
      Boolean boolean0 = Boolean.valueOf(")FmT'K");
      Long long0 = new Long(0L);
      Kv kv2 = Kv.fail((Object) boolean0, (Object) long0);
      assertFalse(kv2.equals((Object)kv1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.ok();
      kv1.getInt(kv0);
      Kv kv2 = kv0.set((Map) kv1);
      Kv kv3 = Kv.fail((Object) null, (Object) null);
      Boolean boolean0 = Boolean.FALSE;
      kv3.set((Object) kv0, (Object) boolean0);
      kv3.toJson();
      Long long0 = new Long(3L);
      kv2.getOrDefault(long0, (Object) null);
      Short.toUnsignedInt((short)770);
      Kv kv4 = Kv.fail();
      kv3.isTrue(kv0);
      boolean boolean1 = kv1.equals((Object) null);
      assertFalse(boolean1);
      
      Short short0 = new Short((short)6306);
      Integer integer0 = new Integer(770);
      Kv kv5 = kv3.setFail();
      kv3.notNull(kv1);
      kv4.getLong("ipLBw");
      Kv.fail((Object) null, (Object) kv3);
      boolean boolean2 = kv5.isFalse(kv0);
      assertTrue(kv0.equals((Object)kv1));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv kv1 = Kv.fail();
      Short short0 = Short.valueOf((short) (-331));
      Short.toUnsignedInt((short)468);
      kv1.isFalse(short0);
      kv0.getAs((Object) kv1);
      kv0.toJson();
      Kv kv2 = kv0.set((Map) kv1);
      BiFunction<String, Double, Object> biFunction0 = (BiFunction<String, Double, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      kv2.merge(kv1, "", biFunction0);
      kv1.set((Object) "{\"isOk\":java.lang.Boolean@0000000004,\"isFail\":java.lang.Boolean@0000000005}", (Object) kv0);
      Kv.fail();
      // Undeclared exception!
      try { 
        Kv.ok((Object) kv2, (Object) "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("QBn>v=sI");
      Kv kv0 = Kv.fail((Object) boolean0, (Object) boolean0);
      Double double0 = new Double((-1533.184284));
      Double.isFinite(918.556445);
      Kv kv1 = kv0.set((Object) double0, (Object) "");
      Kv.ok();
      Kv kv2 = kv1.set((Object) "QBn>v=sI", (Object) "QBn>v=sI");
      Object object0 = new Object();
      kv2.putIfAbsent(kv1, object0);
      Kv kv3 = Kv.ok();
      kv2.getStr(kv3);
      Boolean boolean1 = Boolean.FALSE;
      Double double1 = new Double((-1190.46589182));
      Boolean.getBoolean("");
      Kv kv4 = Kv.by(double1, "QBn>v=sI");
      Kv.fail((Object) boolean1, (Object) kv4);
      Boolean boolean2 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      kv3.getLong(boolean2);
      kv2.set(kv4);
      // Undeclared exception!
      try { 
        kv4.isFalse(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.by((Object) null, object0);
      Short short0 = new Short((short)0);
      kv0.getNumber(object0);
      Short.toUnsignedInt((short)0);
      Kv kv1 = Kv.ok((Object) kv0, (Object) short0);
      kv1.isNull(short0);
      kv1.remove(object0);
      Short.toUnsignedLong((short)0);
      kv1.getBoolean("");
      Kv kv2 = kv0.set((Map) kv1);
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      Kv kv3 = kv1.delete(byte1);
      kv3.isFalse((Object) null);
      // Undeclared exception!
      try { 
        kv2.delete(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv kv1 = kv0.delete("");
      kv1.remove((Object) "isOk");
      kv0.setFail();
      kv0.isTrue("isOk");
      Kv kv2 = new Kv();
      Kv kv3 = Kv.ok((Object) kv0, (Object) kv2);
      kv1.delete(kv3);
      assertEquals(2, kv1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Short short0 = new Short((short)18);
      Short.toUnsignedLong((short)18);
      Short.compare((short)18, (short)18);
      Kv kv0 = Kv.fail((Object) short0, (Object) short0);
      kv0.getInt(short0);
      Short.compare((short)18, (short)18);
      Kv kv1 = kv0.delete(kv0);
      kv1.isFail();
      kv1.values();
      kv0.isTrue(short0);
      kv0.isOk();
      short short1 = (short)95;
      Short.compare((short)18, (short)95);
      short short2 = (short)1;
      try { 
        Integer.decode("W*jXOI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"W*jXOI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv.ok((Object) kv0, (Object) kv0);
      Kv kv1 = new Kv();
      Kv kv2 = Kv.fail((Object) kv1, (Object) kv1);
      kv2.getLong(kv0);
      Object object0 = new Object();
      Function<Boolean, Boolean> function0 = Function.identity();
      Function<Boolean, Boolean> function1 = function0.compose((Function<? super Boolean, ? extends Boolean>) function0);
      Function<Boolean, Boolean> function2 = function1.andThen((Function<? super Boolean, ? extends Boolean>) function0);
      kv1.computeIfAbsent(kv2, function2);
      // Undeclared exception!
      try { 
        Kv.by(kv1, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.ok();
      kv1.getInt(kv0);
      Kv kv2 = kv0.set((Map) kv1);
      Kv kv3 = Kv.fail((Object) null, (Object) null);
      Boolean boolean0 = new Boolean(true);
      kv3.set((Object) kv0, (Object) boolean0);
      kv3.toJson();
      Short short0 = new Short((short)31);
      Short.toUnsignedInt((short)31);
      Long long0 = new Long(0L);
      kv2.getOrDefault(long0, (Object) null);
      int int0 = new Integer(31);
      kv0.isNull(short0);
      kv0.notNull(short0);
      Kv kv4 = Kv.by((Object) null, boolean0);
      Integer integer0 = new Integer((short)31);
      kv0.isTrue(integer0);
      kv3.isTrue(kv0);
      Kv kv5 = kv4.delete(integer0);
      kv1.equals((Object) null);
      kv4.getBoolean((Object) null);
      Short short1 = new Short((short)6306);
      Integer integer1 = new Integer(31);
      kv5.remove((Object) short1, (Object) integer1);
      kv5.isFalse(kv3);
      kv1.setFail();
      kv3.notNull(kv1);
      kv4.getLong("");
      Kv.fail((Object) null, (Object) kv3);
      kv2.isNull(short0);
      // Undeclared exception!
      try { 
        kv5.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.ok();
      kv1.getInt(kv0);
      Kv kv2 = kv0.set((Map) kv1);
      Kv kv3 = Kv.fail((Object) null, (Object) null);
      Boolean boolean0 = new Boolean(true);
      kv3.set((Object) kv0, (Object) boolean0);
      kv3.toJson();
      Short short0 = new Short((short)31);
      Short.toUnsignedInt((short)31);
      Long long0 = new Long(0L);
      kv2.getOrDefault(long0, (Object) null);
      Short.toUnsignedInt((short)770);
      kv0.isNull(short0);
      kv0.notNull(short0);
      Kv kv4 = Kv.fail();
      Integer integer0 = new Integer((short)31);
      kv0.isTrue(integer0);
      kv3.isTrue(kv0);
      Kv kv5 = kv4.delete(integer0);
      boolean boolean1 = kv1.equals((Object) null);
      assertFalse(boolean1);
      
      kv4.getBoolean((Object) null);
      Short short1 = new Short((short)6306);
      Integer integer1 = new Integer(770);
      kv5.remove((Object) short1, (Object) integer1);
      kv5.isFalse(kv3);
      Kv kv6 = kv1.setFail();
      kv3.notNull(kv1);
      kv4.getLong("ipLBw");
      Kv.fail((Object) null, (Object) kv3);
      kv2.isNull(short0);
      kv5.isFail();
      boolean boolean2 = kv6.isFalse(kv0);
      assertTrue(kv1.equals((Object)kv4));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Kv kv0 = Kv.ok((Object) float0, (Object) float0);
      Number number0 = kv0.getNumber(float0);
      assertEquals((-1.0F), number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Short short0 = new Short((short) (-8));
      Short.toUnsignedLong((short) (-8));
      Short.compare((short) (-8), (short) (-8));
      Kv kv0 = Kv.fail((Object) short0, (Object) short0);
      kv0.getInt(short0);
      int int0 = new Short((short) (-8));
      Kv kv1 = kv0.delete(kv0);
      kv1.isFail();
      kv1.values();
      kv0.isTrue(short0);
      kv0.isOk();
      short short1 = (short)93;
      Short.compare((short) (-8), (short)93);
      short short2 = (short)1;
      try { 
        Integer.decode("W*jXOI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"W*jXOI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.by(object0, object0);
      Float float0 = new Float(0.0F);
      Float.min(1.0F, (-1.0F));
      Float.sum(0.0F, (-2184.18F));
      kv0.put(float0, "FgX+J`KRv*G}12NMEXu");
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      kv0.forEach(biConsumer0);
      Kv kv1 = kv0.delete((Object) null);
      Kv kv2 = Kv.create();
      kv1.equals(object0);
      Kv kv3 = kv1.setOk();
      kv1.getNumber((Object) null);
      Object object1 = new Object();
      Kv kv4 = kv3.delete(object1);
      kv4.entrySet();
      kv2.putIfAbsent(kv1, (Object) null);
      Object object2 = new Object();
      kv2.isTrue("FgX+J`KRv*G}12NMEXu");
      Kv.by("2", object2);
      kv3.isFail();
      Kv kv5 = kv3.set((Map) kv2);
      kv5.getNumber((Object) null);
      kv3.isFail();
      kv1.notNull((Object) null);
      // Undeclared exception!
      try { 
        kv3.getInt(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Kv kv0 = Kv.create();
      Double double0 = new Double(0.0);
      Kv kv1 = Kv.ok((Object) kv0, (Object) double0);
      kv0.set(kv1);
      Byte byte0 = new Byte((byte)0);
      kv0.getAs((Object) byte0);
      BiFunction<Integer, String, Long> biFunction0 = (BiFunction<Integer, String, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      kv0.computeIfPresent((Object) null, biFunction0);
      kv0.isOk();
      Kv kv2 = kv0.setOk();
      // Undeclared exception!
      try { 
        kv0.getAs((Object) kv2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Object object0 = new Object();
      Kv kv1 = Kv.ok(object0, (Object) kv0);
      kv1.putAll(kv0);
      Kv kv2 = kv0.set(kv1);
      kv0.isFail();
      // Undeclared exception!
      try { 
        kv2.getStr(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Short short0 = new Short((short) (-1828));
      Short.compare((short) (-1828), (short) (-1828));
      Kv kv0 = Kv.by(short0, short0);
      Long long0 = kv0.getLong(short0);
      Set set0 = kv0.keySet();
      Integer integer0 = new Integer((short) (-1828));
      kv0.getInt(integer0);
      Integer integer1 = new Integer((short) (-1828));
      Integer.compare(0, 0);
      kv0.clear();
      Object object0 = new Object();
      Kv kv1 = Kv.by(kv0, object0);
      Integer integer2 = new Integer(0);
      BiFunction<Integer, Double, Kv> biFunction0 = (BiFunction<Integer, Double, Kv>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      kv1.merge(integer1, integer2, biFunction0);
      Kv kv2 = Kv.fail((Object) integer1, (Object) kv1);
      kv2.values();
      Kv kv3 = kv0.setFail();
      kv3.equals((Object) null);
      boolean boolean0 = kv3.isFalse(long0);
      assertFalse(boolean0);
      
      Kv.ok();
      Kv kv4 = Kv.fail((Object) integer0, (Object) set0);
      assertFalse(kv4.equals((Object)kv2));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.ok();
      kv1.getInt(kv0);
      Kv kv2 = kv0.set((Map) kv1);
      Kv kv3 = Kv.fail((Object) null, (Object) null);
      Boolean boolean0 = new Boolean(true);
      Kv kv4 = kv3.set((Object) kv0, (Object) boolean0);
      kv3.toJson();
      Short short0 = new Short((short)31);
      Short.toUnsignedInt((short)31);
      Long long0 = new Long(0L);
      Object object0 = null;
      kv2.getOrDefault(long0, (Object) null);
      Short.toUnsignedInt((short)770);
      kv0.isNull(short0);
      Integer integer0 = new Integer((short)31);
      kv0.isTrue(integer0);
      Kv kv5 = kv0.set((Map) kv4);
      // Undeclared exception!
      try { 
        kv5.isTrue(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.ok((Object) kv0, (Object) "iGvH<py");
      kv0.getLong(kv1);
      kv0.set((Map) kv1);
      Kv.ok();
      Float float0 = new Float(1398.0875F);
      Float.sum((-1.0F), 472.42F);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        Kv.fail((Object) kv0, (Object) boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Byte byte0 = new Byte((byte) (-1));
      Kv kv0 = Kv.fail(object0, (Object) byte0);
      Object object1 = kv0.getAs(object0);
      assertEquals((byte) (-1), object1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Kv kv0 = Kv.create();
      String string0 = "aJf7HGQI}*Z|p";
      Kv kv1 = Kv.ok((Object) kv0, (Object) "aJf7HGQI}*Z|p");
      Kv kv2 = kv0.setFail();
      Integer integer0 = new Integer(12);
      kv2.putIfAbsent("aJf7HGQI}*Z|p", integer0);
      Object object0 = new Object();
      kv2.getLong(object0);
      kv1.getBoolean(kv0);
      BiFunction<Kv, Boolean, Object> biFunction0 = (BiFunction<Kv, Boolean, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("y>w@qO{PIk?", (String) null).when(biFunction0).toString();
      Kv kv3 = Kv.by(object0, biFunction0);
      Kv kv4 = (Kv)kv3.clone();
      Kv kv5 = Kv.ok();
      kv5.putAll(kv3);
      Kv kv6 = Kv.fail();
      kv6.equals(kv4);
      // Undeclared exception!
      try { 
        kv4.toJson();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class com.jfinal.json.JFinalJson can not access a member of class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler with modifiers \"public\"
         //
         verifyException("com.jfinal.json.JFinalJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.ok((Object) kv0, (Object) "iGvH<py");
      kv0.getLong(kv1);
      Kv kv2 = kv0.set((Map) kv1);
      Kv kv3 = Kv.ok();
      Object object0 = new Object();
      Float float0 = new Float(1398.0875F);
      Float.sum((-1.0F), 472.42F);
      kv0.remove(object0, (Object) float0);
      kv2.clear();
      Kv kv4 = kv0.set(kv3);
      kv4.notNull(kv2);
      kv3.toJson();
      kv3.getAs((Object) kv2);
      Kv kv5 = kv0.set(kv4);
      Kv.ok();
      Boolean boolean0 = new Boolean(false);
      kv0.set((Object) kv1, (Object) boolean0);
      kv5.setFail();
      // Undeclared exception!
      try { 
        kv1.toJson();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.create();
      kv0.set(kv1);
      Object object0 = new Object();
      kv0.isFalse(object0);
      Object object1 = new Object();
      Kv kv2 = kv0.setFail();
      kv0.getNumber(object1);
      kv0.isFalse(object0);
      kv0.isFail();
      kv0.isFail();
      boolean boolean0 = kv2.isFalse(kv0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = Kv.by(kv0, kv0);
      Kv kv2 = Kv.fail();
      Kv kv3 = kv0.setFail();
      Kv kv4 = Kv.fail();
      Integer integer0 = new Integer(0);
      Kv kv5 = Kv.by(kv4, integer0);
      kv5.remove((Object) kv3);
      kv0.getOrDefault(kv4, kv2);
      Object object0 = new Object();
      Float float0 = new Float(0.0);
      Kv kv6 = Kv.by(object0, float0);
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
      kv6.compute(object0, biFunction0);
      Kv.create();
      Float float1 = new Float((-1155.146F));
      Float.min(609.48883F, (-1155.146F));
      Float.max((-1155.146F), 609.48883F);
      Float.isFinite(0.0F);
      Kv kv7 = Kv.fail((Object) kv1, (Object) float1);
      Kv kv8 = kv7.delete((Object) null);
      Kv kv9 = kv0.setOk();
      kv5.set((Map) kv6);
      Kv kv10 = kv8.setOk();
      Integer integer1 = new Integer(0);
      kv10.isNull(integer1);
      kv4.delete("\u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5");
      kv7.getBoolean(kv9);
      assertEquals(2, kv0.size());
      
      Kv kv11 = Kv.create();
      assertTrue(kv11.equals((Object)kv6));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.by(object0, object0);
      Float float0 = new Float(0.0F);
      Float.min(1.0F, (-1.0F));
      Float.sum(0.0F, (-2184.18F));
      kv0.put(float0, "FgX+J`KRv*G}12NMEXu");
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      kv0.forEach(biConsumer0);
      Object object1 = null;
      Kv kv1 = kv0.delete((Object) null);
      Kv kv2 = kv1.setFail();
      kv1.equals(object0);
      Kv kv3 = kv1.setOk();
      kv1.getNumber((Object) null);
      Object object2 = new Object();
      kv3.delete(object2);
      kv2.putIfAbsent(kv1, (Object) null);
      Object object3 = new Object();
      kv2.isTrue("FgX+J`KRv*G}12NMEXu");
      Kv.by("2", object3);
      kv3.isFail();
      // Undeclared exception!
      try { 
        kv3.set((Map) kv2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Kv kv1 = kv0.setFail();
      kv1.clone();
      Kv kv2 = Kv.fail();
      kv1.isOk();
      Integer integer0 = new Integer(12);
      kv0.putIfAbsent(integer0, kv2);
      Kv kv3 = Kv.ok();
      Kv kv4 = kv2.set((Object) kv1, (Object) kv0);
      kv4.isNull(kv3);
      kv1.values();
      kv0.setFail();
      Long long0 = new Long(695L);
      Long.compareUnsigned(695L, 540L);
      kv0.getLong(long0);
      Byte byte0 = new Byte((byte) (-1));
      kv1.isNull(byte0);
      // Undeclared exception!
      try { 
        kv4.isNull(kv1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Kv kv1 = Kv.fail();
      kv0.put(kv1, kv1);
      Kv kv2 = kv0.setFail();
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      kv0.delete(byte1);
      kv1.set((Object) null, (Object) kv0);
      Object object0 = new Object();
      kv0.getStr(object0);
      // Undeclared exception!
      try { 
        kv2.equals(kv1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Kv kv0 = Kv.create();
      Kv kv1 = null;
      // Undeclared exception!
      try { 
        kv0.set((Kv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv kv1 = kv0.setOk();
      Kv kv2 = kv0.delete("@BySP<;o");
      Double double0 = new Double((-1377.97223106238));
      short short0 = (short)1812;
      Short short1 = new Short((short)1812);
      BiFunction<String, Kv, String> biFunction0 = (BiFunction<String, Kv, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2750L);
      kv0.putIfAbsent(kv2, long0);
      kv2.merge(double0, short1, biFunction0);
      // Undeclared exception!
      try { 
        kv1.getNumber(kv0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Byte byte0 = new Byte((byte)53);
      Byte.toUnsignedLong((byte)53);
      Byte.toUnsignedInt((byte)53);
      Kv kv0 = Kv.fail((Object) byte0, (Object) byte0);
      Object object0 = new Object();
      kv0.getNumber(object0);
      kv0.isNull(byte0);
      Kv kv1 = Kv.by(kv0, (Object) null);
      assertFalse(kv1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Byte byte0 = new Byte((byte) (-1));
      Kv kv1 = kv0.delete(byte0);
      BiFunction<Boolean, Boolean, Byte> biFunction0 = (BiFunction<Boolean, Boolean, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(anyBoolean() , anyBoolean());
      kv1.replaceAll(biFunction0);
      Long long0 = Long.valueOf(902L);
      kv1.isNull(long0);
      Kv kv2 = kv1.set((Map) kv0);
      kv2.setFail();
      Double double0 = new Double((byte)0);
      Kv.by(byte0, (Object) null);
      kv0.remove((Object) kv2, (Object) double0);
      kv1.isFail();
      kv2.setOk();
      Byte.toUnsignedLong((byte)0);
      Kv kv3 = Kv.ok((Object) null, (Object) kv0);
      kv3.putAll(kv1);
      Kv.ok();
      kv1.set(kv3);
      kv1.notNull((Object) null);
      Kv kv4 = kv0.delete("\b");
      kv4.setOk();
      kv4.clone();
      // Undeclared exception!
      try { 
        kv2.getBoolean(kv4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float float0 = (-1015.8F);
      Float float1 = new Float((-1015.8F));
      Float.min(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Object object0 = new Object();
      Kv kv0 = Kv.fail((Object) float1, object0);
      Kv kv1 = kv0.setOk();
      BiConsumer<Object, Double> biConsumer0 = (BiConsumer<Object, Double>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      kv1.forEach(biConsumer0);
      Object object1 = new Object();
      kv0.isFalse(object1);
      kv0.isTrue(object1);
      Object object2 = new Object();
      Kv kv2 = Kv.by(kv0, object2);
      Kv kv3 = kv2.setOk();
      Kv kv4 = kv3.setOk();
      kv0.notNull(object1);
      kv4.isFail();
      Kv kv5 = kv0.delete(kv2);
      Kv kv6 = kv1.set((Map) kv2);
      BiFunction<Integer, Integer, Object> biFunction0 = (BiFunction<Integer, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(biFunction0).apply(anyInt() , anyInt());
      kv6.replaceAll(biFunction0);
      kv0.setOk();
      Kv.ok();
      kv3.toJson();
      // Undeclared exception!
      try { 
        kv3.set(kv5);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Kv kv0 = new Kv();
      Object object0 = new Object();
      kv0.clear();
      kv0.getLong(object0);
      BiFunction<Object, Short, String> biFunction0 = (BiFunction<Object, Short, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyShort());
      kv0.compute((Object) null, biFunction0);
      Long.sum(0L, 0L);
      kv0.getLong((Object) null);
      Kv kv1 = Kv.create();
      Object object1 = new Object();
      kv1.put(kv0, object1);
      Kv kv2 = kv0.set(kv1);
      Kv kv3 = kv1.setOk();
      Double double0 = new Double(726.5);
      Double.sum(726.5, 0L);
      Double.min(0.0, 1.0);
      Kv kv4 = Kv.fail();
      kv3.notNull(double0);
      Kv kv5 = kv2.setOk();
      Double double1 = new Double(726.5);
      // Undeclared exception!
      try { 
        kv4.set((Object) kv5, (Object) double1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      Kv kv0 = Kv.by(object0, float0);
      Kv kv1 = kv0.setOk();
      BiFunction<Short, Boolean, String> biFunction0 = (BiFunction<Short, Boolean, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Float.min(0.0F, 0.0F);
      kv1.computeIfPresent(kv0, biFunction0);
      Float.min(0.0F, 0.0F);
      Float.isFinite((-914.9F));
      Float.min(0.0F, 1280.8381F);
      kv1.getNumber(object0);
      kv0.isFail();
      Kv kv2 = kv0.delete(kv1);
      Object object1 = new Object();
      Kv kv3 = Kv.fail(object1, (Object) kv1);
      Long long0 = new Long(782L);
      kv2.isTrue(long0);
      kv2.getStr(object0);
      kv0.equals(kv2);
      kv0.getBoolean(float0);
      kv2.keySet();
      kv0.delete((Object) null);
      kv0.isTrue(kv2);
      Kv kv4 = kv3.set(kv0);
      Kv kv5 = Kv.ok((Object) kv3, (Object) "java.lang.Float@0000000003");
      kv4.set(kv5);
      assertEquals(5, kv3.size());
      assertEquals(5, kv4.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Kv kv0 = new Kv();
      kv0.toJson();
      Kv kv1 = Kv.by("{}", "{}");
      Kv kv2 = kv0.set(kv1);
      kv2.replace((Object) "{}", (Object) kv1);
      Kv kv3 = Kv.ok((Object) kv0, (Object) kv0);
      Short short0 = new Short((short)1497);
      kv3.equals(short0);
      kv3.isOk();
      Kv kv4 = kv3.delete(kv0);
      kv3.isFail();
      kv0.getStr(kv4);
      kv3.clear();
      kv0.isFalse("{}");
      kv3.isFalse(kv4);
      // Undeclared exception!
      try { 
        kv2.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Kv kv0 = new Kv();
      kv0.getOrDefault("']/6n3M9p LSQw-0l", "']/6n3M9p LSQw-0l");
      Boolean boolean0 = new Boolean("']/6n3M9p LSQw-0l");
      Boolean.logicalOr(true, true);
      kv0.getStr(boolean0);
      Set set0 = kv0.keySet();
      Boolean boolean1 = Boolean.TRUE;
      Double double0 = new Double(1.0);
      Kv kv1 = Kv.ok((Object) double0, (Object) set0);
      Kv kv2 = kv0.set(kv1);
      Boolean.logicalAnd(true, true);
      Kv kv3 = Kv.by(boolean1, kv0);
      kv3.getStr(boolean1);
      Kv kv4 = kv2.set(kv1);
      Kv.by(kv4, kv0);
      kv1.setFail();
      kv0.getNumber("']/6n3M9p LSQw-0l");
      Boolean boolean2 = Boolean.TRUE;
      try { 
        Byte.valueOf("']/6n3M9p LSQw-0l", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Kv kv0 = new Kv();
      Integer integer0 = new Integer((-2934));
      Kv kv1 = kv0.delete(integer0);
      Object object0 = new Object();
      kv1.getOrDefault((Object) null, object0);
      Long long0 = new Long((-2934));
      Long.divideUnsigned((-749L), 3294L);
      String string0 = kv1.getStr(long0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.fail(object0, object0);
      kv0.setFail();
      kv0.isTrue(object0);
      // Undeclared exception!
      try { 
        kv0.getInt(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.fail(object0, object0);
      Float float0 = new Float(0.0);
      Float.sum((-1.0F), 631.196F);
      kv0.getNumber(float0);
      kv0.getInt(float0);
      kv0.toJson();
      // Undeclared exception!
      try { 
        kv0.set((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Float float0 = new Float((-1.0));
      Kv kv1 = Kv.fail((Object) float0, (Object) kv0);
      kv1.isFail();
      Kv kv2 = Kv.create();
      Float float1 = new Float(0.0);
      boolean boolean0 = kv1.equals(float1);
      assertFalse(boolean0);
      
      Float float2 = new Float(0.0);
      Short short0 = new Short((short)3252);
      Kv kv3 = Kv.ok((Object) float2, (Object) short0);
      assertFalse(kv3.equals((Object)kv2));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      Short.compare((short)0, (short)0);
      Kv kv0 = Kv.fail((Object) short0, (Object) short0);
      kv0.getInt(short0);
      Short.compare((short)0, (short)0);
      Kv kv1 = kv0.delete((Object) null);
      kv1.values();
      kv0.isTrue(short0);
      kv0.isOk();
      short short1 = (short)93;
      Short.compare((short)0, (short)93);
      short short2 = (short)1;
      try { 
        Integer.decode("W*jXOI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"W*jXOI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Kv kv0 = Kv.fail();
      kv0.isOk();
      Double double0 = new Double(967.3);
      kv0.put(double0, double0);
      kv0.getLong((Object) null);
      boolean boolean0 = kv0.isTrue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Kv kv0 = new Kv();
      Short short0 = new Short((short)579);
      boolean boolean0 = kv0.equals(short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Kv kv0 = new Kv();
      kv0.setFail();
      Object object0 = new Object();
      Integer integer0 = kv0.getInt(object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Boolean boolean0 = new Boolean(true);
      Boolean.getBoolean("is");
      Kv kv1 = kv0.delete(boolean0);
      assertSame(kv0, kv1);
      assertFalse(kv1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Kv kv0 = Kv.create();
      Short short0 = new Short((short)602);
      Short.toUnsignedLong((short)695);
      Set set0 = kv0.entrySet();
      Short.compare((short)695, (short)695);
      kv0.isTrue(short0);
      kv0.setFail();
      kv0.getBoolean(short0);
      kv0.getInt(set0);
      Kv.fail();
      Float float0 = new Float((double) 695L);
      Number number0 = kv0.getNumber(float0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Object object0 = new Object();
      Integer integer0 = kv0.getInt(object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv.ok();
      boolean boolean0 = kv0.isTrue("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Kv kv0 = new Kv();
      Kv kv1 = Kv.ok();
      Kv kv2 = new Kv();
      kv1.putAll(kv2);
      kv1.getLong(kv0);
      // Undeclared exception!
      try { 
        kv0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Kv kv0 = Kv.ok();
      BiFunction<Object, Integer, Object> biFunction0 = (BiFunction<Object, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(any() , anyInt());
      short short0 = (short)1235;
      Short short1 = new Short((short)1235);
      Short.toUnsignedInt((short)1235);
      Kv kv1 = Kv.fail();
      Short.toUnsignedInt((short)1235);
      kv0.putAll(kv1);
      BiFunction<Object, Integer, Double> biFunction1 = (BiFunction<Object, Integer, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      kv0.computeIfPresent(short1, biFunction1);
      kv0.replaceAll(biFunction0);
      Object object0 = new Object();
      kv0.getOrDefault(object0, (Object) null);
      kv0.toJson();
      Float float0 = new Float((float) (short)1235);
      Float.isFinite((short)1235);
      Float.min(1235, 1235);
      kv0.getNumber(float0);
      // Undeclared exception!
      try { 
        kv0.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Kv kv0 = new Kv();
      // Undeclared exception!
      try { 
        kv0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv.fail((Object) kv0, (Object) kv0);
      Kv kv1 = Kv.create();
      Kv kv2 = Kv.fail();
      kv1.remove((Object) kv2);
      kv0.set((Map) kv2);
      Kv kv3 = kv0.set((Map) kv1);
      assertEquals(2, kv3.size());
      
      kv3.clear();
      kv0.set((Object) kv1, (Object) kv1);
      Object object0 = new Object();
      boolean boolean0 = kv3.isNull(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Kv kv0 = Kv.fail();
      kv0.getBoolean((Object) null);
      Double double0 = new Double((-1.0));
      boolean boolean0 = kv0.isFalse(double0);
      Kv kv1 = Kv.ok();
      boolean boolean1 = kv0.equals(kv1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Object object0 = new Object();
      Long long0 = kv0.getLong(object0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Kv kv0 = Kv.fail(object0, object1);
      Object object2 = new Object();
      kv0.remove(object2, object2);
      Kv kv1 = kv0.set(object0, object0);
      assertEquals(3, kv1.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Kv kv0 = new Kv();
      kv0.toJson();
      Integer integer0 = new Integer(34);
      Integer.toUnsignedLong(1209);
      kv0.getStr(integer0);
      Object object0 = new Object();
      boolean boolean0 = kv0.notNull(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Kv kv0 = Kv.create();
      kv0.values();
      Double double0 = new Double((-1991.694258448294));
      kv0.getAs((Object) double0);
      kv0.getInt((Object) null);
      Kv kv1 = Kv.create();
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)0);
      kv0.isFalse(byte0);
      Float float0 = new Float((float) (byte)0);
      Kv kv2 = Kv.by((Object) null, float0);
      assertFalse(kv2.equals((Object)kv1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Kv kv0 = new Kv();
      Double double0 = new Double(9.5754);
      Kv kv1 = Kv.by(kv0, double0);
      Kv kv2 = kv1.setOk();
      assertFalse(kv2.equals((Object)kv0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Integer integer0 = new Integer(8192);
      boolean boolean0 = kv0.notNull(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Object object0 = new Object();
      Kv kv1 = Kv.ok((Object) null, object0);
      Kv kv2 = kv1.set((Map) kv0);
      kv2.setOk();
      kv1.toJson();
      String string0 = kv0.getStr(kv1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.by(object0, object0);
      Kv kv1 = Kv.ok(object0, object0);
      kv0.set(kv1);
      kv0.setOk();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        kv0.getLong(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Kv kv0 = Kv.ok();
      kv0.isOk();
      Boolean boolean0 = Boolean.valueOf(",DGP_T");
      Short short0 = new Short((short)1);
      Kv kv1 = Kv.by(boolean0, short0);
      // Undeclared exception!
      try { 
        kv1.getBoolean(boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Boolean
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Kv kv0 = Kv.create();
      kv0.remove((Object) boolean0);
      Boolean.compare(true, true);
      Kv kv1 = Kv.fail((Object) boolean0, (Object) kv0);
      kv1.putIfAbsent(boolean0, (Object) null);
      // Undeclared exception!
      try { 
        kv1.getNumber(boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.jfinal.kit.Kv cannot be cast to java.lang.Number
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Kv kv0 = Kv.create();
      Short short0 = new Short((short)3396);
      Kv kv1 = Kv.fail((Object) kv0, (Object) short0);
      kv0.set(kv1);
      // Undeclared exception!
      try { 
        kv0.getLong(kv1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Long long0 = new Long(2913L);
      Kv kv0 = Kv.ok();
      Kv kv1 = Kv.ok((Object) long0, (Object) kv0);
      boolean boolean0 = kv1.isOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Kv kv0 = new Kv();
      Double double0 = new Double(0.0);
      Boolean boolean0 = kv0.getBoolean(double0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Kv kv0 = Kv.ok((Object) "com.jfinal.json.Json", (Object) "com.jfinal.json.Json");
      Integer integer0 = new Integer(0);
      Kv kv1 = Kv.by(kv0, integer0);
      Kv kv2 = kv0.set((Map) kv1);
      assertEquals(4, kv2.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Kv kv0 = Kv.fail();
      Double double0 = new Double(4908.733908813784);
      Number number0 = kv0.getNumber(double0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer((-56));
      Byte byte0 = new Byte((byte) (-58));
      Kv kv0 = Kv.fail((Object) integer0, (Object) byte0);
      assertEquals(3, kv0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Kv kv0 = Kv.ok();
      kv0.isTrue((Object) null);
      String string0 = kv0.toJson();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = new Object();
      Kv kv0 = Kv.ok(object0, object0);
      boolean boolean0 = kv0.notNull(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Kv kv0 = Kv.create();
      String string0 = kv0.getStr((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Object object0 = kv0.getAs((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Kv kv0 = Kv.ok((Object) boolean0, (Object) boolean0);
      assertFalse(kv0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Kv.fail();
      Long long0 = new Long((-2053L));
      Object object0 = new Object();
      Kv kv0 = Kv.by(long0, object0);
      assertEquals(1, kv0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Double double0 = new Double(1.0);
      Kv kv0 = Kv.by(double0, double0);
      kv0.getLong(double0);
      kv0.setOk();
      kv0.setFail();
      assertEquals(3, kv0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Kv kv0 = Kv.create();
      Boolean boolean0 = Boolean.valueOf(true);
      Float float0 = new Float(1.0F);
      Float.min(1.0F, 0.0F);
      Float.min(1.0F, 1.0F);
      kv0.put(boolean0, float0);
      Boolean.logicalXor(true, false);
      kv0.getStr(boolean0);
      Kv kv1 = kv0.set((Object) null, (Object) null);
      kv1.getInt(kv0);
      // Undeclared exception!
      try { 
        kv0.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Kv kv0 = Kv.ok();
      boolean boolean0 = kv0.isFalse("isOk");
      boolean boolean1 = kv0.isTrue("isOk");
      assertFalse(boolean1 == boolean0);
      
      Kv.fail();
      kv0.isOk();
      boolean boolean2 = kv0.isOk();
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      Short.compare((short)0, (short)0);
      Kv kv0 = Kv.fail((Object) short0, (Object) short0);
      Integer integer0 = kv0.getInt(short0);
      Kv kv1 = kv0.delete(kv0);
      kv1.isFail();
      kv1.values();
      kv0.isTrue(short0);
      kv0.isOk();
      kv0.setFail();
      Kv kv2 = Kv.create();
      kv2.getLong(integer0);
      Integer integer1 = new Integer(0);
      kv2.getBoolean(integer1);
      Short.compare((short)93, (short)93);
      Kv kv3 = Kv.fail();
      kv0.isFail();
      Kv kv4 = Kv.create();
      assertFalse(kv4.equals((Object)kv3));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Kv kv0 = Kv.create();
      String string0 = "aJf7HGQI}*Z|p";
      Kv kv1 = Kv.ok((Object) kv0, (Object) "aJf7HGQI}*Z|p");
      Kv kv2 = kv0.setFail();
      Integer integer0 = new Integer(12);
      kv2.putIfAbsent("aJf7HGQI}*Z|p", integer0);
      kv1.getBoolean(kv0);
      BiFunction<Kv, Boolean, Object> biFunction0 = (BiFunction<Kv, Boolean, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("aJf7HGQI}*Z|p", "aJf7HGQI}*Z|p", "aJf7HGQI}*Z|p").when(biFunction0).toString();
      Kv kv3 = Kv.by((Object) null, biFunction0);
      Object object0 = kv3.clone();
      Kv kv4 = Kv.ok();
      kv4.putAll(kv3);
      Kv kv5 = Kv.fail();
      kv5.equals(object0);
      Kv kv6 = kv3.set((Object) kv1, (Object) kv0);
      // Undeclared exception!
      try { 
        kv6.isFail();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isFail() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Kv kv0 = Kv.create();
      // Undeclared exception!
      try { 
        kv0.isOk();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u8C03\u7528 isOk() \u4E4B\u524D\uFF0C\u5FC5\u987B\u5148\u8C03\u7528 ok()\u3001fail() \u6216\u8005 setOk()\u3001setFail() \u65B9\u6CD5
         //
         verifyException("com.jfinal.kit.Kv", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Kv kv0 = new Kv();
      Kv kv1 = Kv.ok((Object) kv0, (Object) kv0);
      boolean boolean0 = kv1.isNull(kv0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv kv1 = Kv.ok();
      kv1.getInt(kv0);
      kv0.set((Map) kv1);
      Kv kv2 = Kv.fail((Object) null, (Object) null);
      Boolean boolean0 = Boolean.FALSE;
      kv2.set((Object) kv0, (Object) boolean0);
      boolean boolean1 = kv2.isTrue(kv0);
      boolean boolean2 = kv1.equals(boolean0);
      assertFalse(boolean2);
      
      Kv kv3 = kv2.setFail();
      boolean boolean3 = kv2.notNull(kv1);
      kv0.getLong("ipLBw");
      Kv.fail((Object) null, (Object) kv2);
      boolean boolean4 = kv3.isFalse(kv0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Kv kv0 = Kv.ok();
      kv0.clear();
      Kv kv1 = kv0.set(kv0);
      assertSame(kv0, kv1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Kv kv0 = Kv.ok();
      Kv kv1 = new Kv();
      Boolean boolean0 = Boolean.FALSE;
      Kv kv2 = Kv.create();
      kv1.getAs((Object) "+R`OR}3$6\"2;Qj4\"");
      Short short0 = new Short((short) (-1));
      kv0.isFalse(short0);
      kv2.set((Map) kv0);
      kv0.getNumber(kv1);
      Boolean boolean1 = Boolean.TRUE;
      kv0.getStr(boolean1);
      Object object0 = new Object();
      kv1.isNull(object0);
      String string0 = kv0.toJson();
      assertNotNull(string0);
  }
}
