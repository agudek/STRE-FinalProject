/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:10:41 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.HashKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class HashKit_ESTest extends HashKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = HashKit.sha384("");
      assertNotNull(string0);
      assertEquals("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)1;
      String string1 = HashKit.toHex(byteArray0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)111, (byte)71, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("01046f4701", string1);
      
      String string2 = HashKit.toHex(byteArray0);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)111, (byte)71, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("01046f4701", string2);
      
      boolean boolean0 = HashKit.slowEquals(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)111, (byte)71, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      String string3 = HashKit.sha256("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("f170a4803c7e3adec5dcaca121063864601c436f0135422acca1d33efb3aa4b9", string3);
      
      String string4 = HashKit.generateSaltForSha256();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("________________________________", string4);
      
      String string5 = HashKit.sha512("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", string5);
      
      long long0 = HashKit.fnv1a64("m@{QC[:$*Y/(xc");
      assertEquals((-8952632723103537720L), long0);
      
      String string6 = HashKit.sha256("01046f4701");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("49296cae92b7ec62b03a46f2a442a23f1b17a38c0d81a98a692e9d8d761245b8", string6);
      
      // Undeclared exception!
      try { 
        HashKit.hash("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.security.NoSuchAlgorithmException:  MessageDigest not available
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = HashKit.sha256("");
      assertNotNull(string0);
      assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", string0);
      
      String string1 = HashKit.sha384("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", string1);
      
      String string2 = HashKit.sha1("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("244f421f896bdcdd2784dccf4eaf7c8dfd5189b5", string2);
      
      String string3 = HashKit.sha512("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", string3);
      
      String string4 = HashKit.generateSaltForSha512();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("________________________________________________________________", string4);
      
      String string5 = HashKit.sha512("________________________________________________________________");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("b442d07a20b44314776820946730c2a6394b14a78fb845fcae91eb6c7c8543c5a81679701aa8f9cad42130a44acfd448313e000097883a4694d9830fb5012401", string5);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      String string6 = HashKit.toHex(byteArray0);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-4)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("00fc", string6);
      
      String string7 = HashKit.hash("MD5", "b442d07a20b44314776820946730c2a6394b14a78fb845fcae91eb6c7c8543c5a81679701aa8f9cad42130a44acfd448313e000097883a4694d9830fb5012401");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("bde7e4d67b1e9a4ff95268a2523bb1f3", string7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = HashKit.sha512("+Z~a");
      assertNotNull(string0);
      assertEquals("2b2970969f8005508ceccf0de5bb230bdbf99835d2d7bba42d06058ec4faaaa4ff72f448c7c2829d470577f6ff14408173200ffb156c4685936182d33d78e2b5", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      String string1 = HashKit.toHex(byteArray0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)95, (byte)69, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5f4500", string1);
      
      String string2 = HashKit.generateSaltForSha256();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("________________________________", string2);
      
      String string3 = HashKit.sha384("________________________________");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("b2908144ad793e0397fe95d387ff284b019f7496eab734c02eb1318a9609d18f858aa68c9ee83c9d3a451edd6df6d128", string3);
      
      long long0 = HashKit.fnv1a64("b2908144ad793e0397fe95d387ff284b019f7496eab734c02eb1318a9609d18f858aa68c9ee83c9d3a451edd6df6d128");
      assertEquals((-3703712059614998505L), long0);
      
      String string4 = HashKit.sha1("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", string4);
      
      String string5 = HashKit.sha256("2b2970969f8005508ceccf0de5bb230bdbf99835d2d7bba42d06058ec4faaaa4ff72f448c7c2829d470577f6ff14408173200ffb156c4685936182d33d78e2b5");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("c42ae249846e76153dee3b5c5d17077442533f1eac14d1f56cd8802e01288251", string5);
      
      String string6 = HashKit.generateSalt(320);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________", string6);
      
      String string7 = HashKit.generateSaltForSha512();
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("________________________________________________________________", string7);
      
      boolean boolean0 = HashKit.slowEquals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)69, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      String string8 = HashKit.generateSaltForSha256();
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("________________________________", string8);
      
      String string9 = HashKit.sha256("________________________________");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertEquals("0ebe2fe703bb2c4235a5946026926bd4abe8ae48ad5920981ceb5d6df4bbe37a", string9);
      
      String string10 = HashKit.sha1("0ebe2fe703bb2c4235a5946026926bd4abe8ae48ad5920981ceb5d6df4bbe37a");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertEquals("ed2cdb09a1a5a191ffd87eb688e6f4dfd905cb17", string10);
      
      String string11 = HashKit.sha384("0ebe2fe703bb2c4235a5946026926bd4abe8ae48ad5920981ceb5d6df4bbe37a");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertEquals("135d14fdae113601390f7800029115ee7b57613242bfac15fc1461354931b6abe8f75e9806f7a0be13f363f827d32a61", string11);
      
      String string12 = HashKit.sha512("0ebe2fe703bb2c4235a5946026926bd4abe8ae48ad5920981ceb5d6df4bbe37a");
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertEquals("7330f951a023cb8f4fad696b63adc493240c1f0bcaa24d00a83801f759f2dbd5ec96b6e9c7c28fb2dfbef2de714d69a4ca155465a569e20bb027977b44505868", string12);
      
      String string13 = HashKit.sha384("________________________________");
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string11));
      assertTrue(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertEquals("b2908144ad793e0397fe95d387ff284b019f7496eab734c02eb1318a9609d18f858aa68c9ee83c9d3a451edd6df6d128", string13);
      
      String string14 = HashKit.generateSaltForSha512();
      assertNotNull(string14);
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertTrue(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string8));
      assertEquals("________________________________________________________________", string14);
      
      String string15 = HashKit.generateSaltForSha256();
      assertNotNull(string15);
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string14));
      assertTrue(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string6));
      assertTrue(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string10));
      assertEquals("________________________________", string15);
      
      String string16 = HashKit.generateSaltForSha256();
      assertNotNull(string16);
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string9));
      assertTrue(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string14));
      assertTrue(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string11));
      assertTrue(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string4));
      assertEquals("________________________________", string16);
      
      String string17 = HashKit.sha512("ap>d+0~V\")D-H8Sb9");
      assertNotNull(string17);
      assertFalse(string17.equals((Object)string13));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string4));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string14));
      assertEquals("f24e3977979e814da42eef71638d91750fae1d483ad96d9ee23665768413aab8a83fbe4ac1606dd99be270ee58d96cd26de5bde8e407cc3535bf94891fc52b55", string17);
      
      String string18 = HashKit.generateSalt(2110);
      assertNotNull(string18);
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string12));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string15));
      
      String string19 = HashKit.sha512("58519cd317bfa15cbf87e72ceb19437390532deed6a1343d4fd6c4acad6da71b115f81a0f41609a8203a970a6d52499dae3cce7c82642cd9ddb57c76fc0ae5e4");
      assertNotNull(string19);
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string16));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string17));
      assertEquals("17916a2755b24c449d000cdbbe8c0aeef6a9c66f5636428309db4c7e59341b3d7765dcea6e22fbb04a450da0ba06af6504532219e70b93bd88d0b133fae22f30", string19);
      
      String string20 = HashKit.generateSalt((byte)0);
      assertNotNull(string20);
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string0));
      assertEquals("", string20);
      
      // Undeclared exception!
      try { 
        HashKit.fnv1a64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)4;
      byteArray0[0] = (byte)4;
      String string0 = HashKit.toHex(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("04", string0);
      
      long long0 = HashKit.fnv1a64("B[z{%km&)Ew4");
      assertEquals((-2018104123992948025L), long0);
      
      String string1 = "";
      String string2 = HashKit.sha1("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", string2);
      
      String string3 = HashKit.sha256("B[z{%km&)Ew4");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("e97fb1f6f100dd49416c0c3aa9af22e30f0788544d447146521bf1af9c1d6061", string3);
      
      // Undeclared exception!
      try { 
        HashKit.sha256((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = HashKit.generateSaltForSha256();
      assertNotNull(string0);
      assertEquals("________________________________", string0);
      
      long long0 = HashKit.fnv1a64("pV/BV~dh");
      assertEquals((-1961493252114386878L), long0);
      
      String string1 = HashKit.generateSalt(6);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("______", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-68);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte) (-5);
      byteArray1[2] = (byte)21;
      boolean boolean0 = HashKit.slowEquals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)21, (byte)4, (byte) (-5), (byte) (-42), (byte)64, (byte) (-1), (byte) (-68)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-5), (byte)21}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = HashKit.slowEquals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = HashKit.md5("");
      assertNotNull(string0);
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", string0);
      
      String string1 = HashKit.toHex(byteArray1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = HashKit.toHex(byteArray0);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("83", string2);
      assertNotSame(byteArray0, byteArray1);
      
      String string3 = HashKit.md5("83");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("fe9fc289c3ff0af142b6d3bead98a923", string3);
      
      String string4 = HashKit.generateSaltForSha256();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("________________________________", string4);
      
      String string5 = HashKit.sha512("________________________________");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("3579396c4a03cbb1df07072e29d7cdabd5acb9bad2855c52b38b41101f4f40bef3b82f3e65e43c483b1dface04a29d02785486664ba1c49ac718cec178f7cca3", string5);
      
      String string6 = HashKit.generateSaltForSha256();
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("________________________________", string6);
      
      String string7 = HashKit.generateSaltForSha256();
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("________________________________", string7);
      
      String string8 = HashKit.md5("d41d8cd98f00b204e9800998ecf8427e");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("74be16979710d4c4e7c6647856088456", string8);
      
      String string9 = HashKit.md5("fe9fc289c3ff0af142b6d3bead98a923");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertEquals("e4c16e6b4631ddb59a09eaddfdb9c246", string9);
      
      String string10 = HashKit.generateSaltForSha512();
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertEquals("________________________________________________________________", string10);
      
      boolean boolean1 = HashKit.slowEquals(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = HashKit.generateSaltForSha512();
      assertNotNull(string0);
      assertEquals("________________________________________________________________", string0);
      
      String string1 = HashKit.generateSaltForSha512();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("________________________________________________________________", string1);
      
      // Undeclared exception!
      try { 
        HashKit.sha1((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = HashKit.generateSaltForSha512();
      assertNotNull(string0);
      assertEquals("________________________________________________________________", string0);
      
      String string1 = HashKit.generateSaltForSha256();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("________________________________", string1);
      
      String string2 = HashKit.generateSaltForSha256();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("________________________________", string2);
      
      String string3 = HashKit.generateSaltForSha256();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("________________________________", string3);
      
      String string4 = HashKit.sha1("________________________________");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("f86355d20f4f3263041179eaf6b513cd9df300de", string4);
      
      HashKit hashKit0 = new HashKit();
      assertNotNull(hashKit0);
      assertEquals((-3750763034362895579L), HashKit.FNV_OFFSET_BASIS_64);
      assertEquals(1099511628211L, HashKit.FNV_PRIME_64);
      
      // Undeclared exception!
      try { 
        HashKit.sha512((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HashKit.md5((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = HashKit.md5("");
      assertNotNull(string0);
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      String string1 = HashKit.toHex(byteArray0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d1", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = HashKit.generateSaltForSha512();
      assertNotNull(string0);
      assertEquals("________________________________________________________________", string0);
      
      String string1 = HashKit.generateSaltForSha256();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("________________________________", string1);
      
      String string2 = HashKit.generateSalt(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      long long0 = HashKit.fnv1a64("________________________________________________________________");
      assertEquals(4151847742743522789L, long0);
      
      String string3 = HashKit.generateSaltForSha256();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("________________________________", string3);
      
      String string4 = HashKit.sha256("AAZ9N.}Ov0Z`XS");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("da4149ca2b4f50ca3287e2b7b7f4d962d31bda0300fd1f21ac38f9436c0547f2", string4);
      
      // Undeclared exception!
      try { 
        HashKit.hash("________________________________________________________________", "AAZ9N.}Ov0Z`XS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.security.NoSuchAlgorithmException: ________________________________________________________________ MessageDigest not available
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = HashKit.generateSaltForSha512();
      assertNotNull(string0);
      assertEquals("________________________________________________________________", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-34);
      boolean boolean0 = HashKit.slowEquals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-34)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      String string1 = HashKit.generateSaltForSha256();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("________________________________", string1);
      
      boolean boolean1 = HashKit.slowEquals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-34)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = HashKit.slowEquals((byte[]) null, (byte[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        HashKit.generateSalt((-356));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HashKit.sha384((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = HashKit.sha384("");
      assertNotNull(string0);
      assertEquals("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", string0);
      
      String string1 = HashKit.generateSaltForSha256();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("________________________________", string1);
      
      boolean boolean0 = HashKit.slowEquals((byte[]) null, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = HashKit.sha256("");
      assertNotNull(string0);
      assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", string0);
      
      String string1 = HashKit.sha512("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean0 = HashKit.slowEquals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = HashKit.slowEquals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = HashKit.generateSalt(64);
      assertNotNull(string0);
      assertEquals("________________________________________________________________", string0);
      
      HashKit hashKit0 = new HashKit();
      assertNotNull(hashKit0);
      assertEquals(1099511628211L, HashKit.FNV_PRIME_64);
      assertEquals((-3750763034362895579L), HashKit.FNV_OFFSET_BASIS_64);
      
      String string1 = HashKit.generateSaltForSha256();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("________________________________", string1);
      
      String string2 = HashKit.generateSaltForSha256();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("________________________________", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = HashKit.sha512("");
      assertNotNull(string0);
      assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = HashKit.sha1("yffn$as[T(;pxzUnbk#");
      assertNotNull(string0);
      assertEquals("24840ee286aa859f8726b29cee709145d0eee2cd", string0);
      
      String string1 = HashKit.md5("24840ee286aa859f8726b29cee709145d0eee2cd");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("be1824c1d5b74fb01b1fbcfc80054a46", string1);
      
      String string2 = HashKit.sha384("yffn$as[T(;pxzUnbk#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("420346b9652e75808553a974f9c115963700e164ef4f000fcf37a8ec6e51518206aa91f593986081f336e70461be6ab5", string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashKit hashKit0 = new HashKit();
      assertNotNull(hashKit0);
      assertEquals(1099511628211L, HashKit.FNV_PRIME_64);
      assertEquals((-3750763034362895579L), HashKit.FNV_OFFSET_BASIS_64);
      
      // Undeclared exception!
      try { 
        HashKit.sha256((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = HashKit.md5("");
      assertNotNull(string0);
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", string0);
      
      String string1 = HashKit.generateSaltForSha512();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("________________________________________________________________", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = HashKit.generateSalt(1107);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashKit.fnv1a64("e0>q>$T{");
      HashKit.sha1("e0>q>$T{");
      // Undeclared exception!
      try { 
        HashKit.toHex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = HashKit.fnv1a64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = HashKit.sha1("");
      assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", string0);
      
      // Undeclared exception!
      try { 
        HashKit.hash((String) null, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashKit.sha256("");
      String string0 = "vMRD;e$2/";
      HashKit.md5("vMRD;e$2/");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashKit.toHex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashKit.sha256((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.kit.HashKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = HashKit.md5("NvY~o{9;'@Rr|");
      assertEquals("cfaa386c90ddc784a6609f6c9992eaab", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      HashKit.slowEquals(byteArray0, (byte[]) null);
      HashKit.toHex(byteArray0);
      long long0 = HashKit.fnv1a64("00000000000000");
      assertEquals((-4960615459054231075L), long0);
      
      String string0 = HashKit.md5("00000000000000");
      assertEquals("c47532bbb1e2883c902071591ae1ec9b", string0);
      
      boolean boolean0 = HashKit.slowEquals((byte[]) null, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashKit hashKit0 = new HashKit();
      HashKit.sha384("*#");
      HashKit.sha1("7b5e9508d6a14c18d972e8c0baad97c3496691289c0eefb93b49de25d1e7309ac3546d6d26b08875ce265daad5200ff4");
      String string0 = HashKit.sha512("7b5e9508d6a14c18d972e8c0baad97c3496691289c0eefb93b49de25d1e7309ac3546d6d26b08875ce265daad5200ff4");
      assertEquals("a67dca7ec09fcd0677bc286aaebc3a786bc9ceb815c45da59ced6b29ef9eaadfd59c3dc4a12bb5239207c18d26354fe4de0a1836e0f92432bad5680068fa6e4d", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      boolean boolean0 = HashKit.slowEquals(byteArray1, byteArray0);
      String string0 = HashKit.generateSaltForSha256();
      assertEquals("________________________________", string0);
      
      boolean boolean1 = HashKit.slowEquals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = HashKit.generateSaltForSha512();
      assertEquals("________________________________________________________________", string1);
      
      String string2 = HashKit.sha256("________________________________________________________________");
      assertEquals("89ec7e9081cd930b3d5ebc6befd97e8a3e50ef8e1be2f7b23621c6543013fdd3", string2);
  }
}
