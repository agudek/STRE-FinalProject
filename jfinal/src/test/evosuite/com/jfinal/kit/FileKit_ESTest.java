/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:04:31 GMT 2018
 */

package com.jfinal.kit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.kit.FileKit;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FileKit_ESTest extends FileKit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RJ&2591-");
      mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile("RJ&2591-", "RJ&2591-");
      mockFile1.mkdirs();
      mockFile1.mkdir();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.renameTo(mockFile1);
      FileKit.delete(mockFile0);
      mockFile1.setReadable(false, true);
      FileKit.getFileExtension("fileFullName is empty");
      FileKit.delete(mockFile0);
      FileKit.getFileExtension((File) mockFile1);
      FileKit.getFileExtension(" failed on Exception. Will try next fetcher, if any.");
      FileKit.delete(mockFile1);
      FileKit.getFileExtension((File) mockFile0);
      MockFile mockFile2 = new MockFile("", "");
      // Undeclared exception!
      FileKit.delete(mockFile2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileKit fileKit0 = new FileKit();
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setExecutable(true);
      // Undeclared exception!
      try { 
        FileKit.delete(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("SQC,d?n8NQxkiLcZTt", "com.jfinal.kit.FileKit", (File) null);
      String string0 = FileKit.getFileExtension(file0);
      assertEquals("FileKit", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileKit fileKit0 = new FileKit();
      MockFile mockFile0 = new MockFile("x[9A0MOdV");
      mockFile0.setWritable(true);
      FileKit.delete(mockFile0);
      String string0 = FileKit.getFileExtension((File) mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = null;
      FileKit.delete((File) null);
      String string0 = "com.jfinal.kit.FileKit";
      FileKit.getFileExtension("com.jfinal.kit.FileKit");
      // Undeclared exception!
      try { 
        FileKit.getFileExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.FileKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileKit.getFileExtension("?$i+CTr xp0,3!}&wP^");
      // Undeclared exception!
      try { 
        FileKit.getFileExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.FileKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ":&kp.");
      FileKit.delete(mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileKit fileKit0 = new FileKit();
      String string0 = FileKit.getFileExtension("com.mchange.io.impl.EndsWithFilenameFilter");
      assertEquals("EndsWithFilenameFilter", string0);
      
      String string1 = FileKit.getFileExtension("EndsWithFilenameFilter");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = null;
      FileKit.delete((File) null);
      FileKit.delete((File) null);
      String string0 = "Cache is read only, and file for key '";
      FileKit.getFileExtension("Cache is read only, and file for key '");
      FileKit fileKit0 = new FileKit();
      FileKit.delete((File) null);
      FileKit.delete((File) null);
      // Undeclared exception!
      try { 
        FileKit.getFileExtension("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // fileFullName is empty
         //
         verifyException("com.jfinal.kit.FileKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile(".(}uVLU3.", ".(}uVLU3.");
      FileKit.delete(file0);
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileKit.getFileExtension("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // fileFullName is empty
         //
         verifyException("com.jfinal.kit.FileKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileKit.delete(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = FileKit.getFileExtension("L-H");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileKit.delete((File) null);
      // Undeclared exception!
      try { 
        FileKit.getFileExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.kit.FileKit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileKit.getFileExtension(".-l24`Um_");
      MockFile mockFile0 = new MockFile("-l24`Um_");
      FileKit.delete(mockFile0);
      MockFile mockFile1 = new MockFile("-l24`Um_", ".-l24`Um_");
      MockFile.createTempFile(".-l24`Um_", ".-l24`Um_", (File) mockFile1);
      FileKit.getFileExtension("-l24`Um_");
      FileKit.delete(mockFile0);
      FileKit fileKit0 = new FileKit();
      // Undeclared exception!
      try { 
        FileKit.getFileExtension("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // fileFullName is empty
         //
         verifyException("com.jfinal.kit.FileKit", e);
      }
  }
}
