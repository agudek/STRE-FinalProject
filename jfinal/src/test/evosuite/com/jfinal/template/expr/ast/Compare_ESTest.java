/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 10:53:46 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Arith;
import com.jfinal.template.expr.ast.Array;
import com.jfinal.template.expr.ast.Assign;
import com.jfinal.template.expr.ast.Compare;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Field;
import com.jfinal.template.expr.ast.ForCtrl;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.Logic;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.expr.ast.NullExpr;
import com.jfinal.template.expr.ast.NullSafe;
import com.jfinal.template.expr.ast.RangeArray;
import com.jfinal.template.expr.ast.Unary;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Compare_ESTest extends Compare_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("efR#.sY=9vfais", 1);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Short short0 = new Short((short)1886);
      Float float0 = new Float((double) 1);
      Boolean boolean0 = compare0.le(float0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Sym sym0 = Sym.COLON;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("Y};l", 1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Long long0 = new Long((-637L));
      Long long1 = new Long((-418L));
      Boolean boolean0 = compare0.le(long0, long1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Sym sym0 = Sym.MUL;
      Compare compare0 = new Compare(sym0, exprList0, exprList0, (Location) null);
      Byte byte0 = new Byte((byte) (-64));
      Byte byte1 = new Byte((byte) (-1));
      Boolean boolean0 = compare0.le(byte0, byte1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Float float0 = new Float(2976.531F);
      Double double0 = new Double(2976.531F);
      Boolean boolean0 = compare0.lt(double0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      Const const0 = Const.TRUE;
      Location location0 = new Location("il>Z ]s[AC0", 0);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Byte byte0 = new Byte((byte) (-118));
      Float float0 = new Float((double) (byte) (-118));
      Boolean boolean0 = compare0.lt(byte0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      Location location0 = new Location("", (-674));
      Compare compare0 = new Compare(sym0, expr0, expr0, location0);
      Byte byte0 = new Byte((byte)1);
      Integer integer0 = new Integer((-674));
      Boolean boolean0 = compare0.lt(byte0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0F);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      Boolean boolean0 = compare0.ge(bigDecimal0, bigDecimal1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      Const const0 = Const.NULL;
      Location location0 = new Location("U4<MmK%ppCtnn1bK", (-1444));
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Double double0 = Double.valueOf((double) (-1444));
      Boolean boolean0 = compare0.ge(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Float float0 = new Float((-197.19220739006));
      Boolean boolean0 = compare0.ge(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Sym sym0 = Sym.RBRACK;
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Short short0 = new Short((short) (-454));
      Long long0 = new Long((short) (-454));
      Boolean boolean0 = compare0.ge(short0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Sym sym0 = Sym.MUL;
      Id id0 = new Id("}qipFM");
      Location location0 = new Location("}qipFM", (-1));
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Byte byte0 = new Byte((byte) (-5));
      Byte byte1 = new Byte((byte)52);
      Boolean boolean0 = compare0.ge(byte1, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Sym sym0 = Sym.GE;
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("TNx#881W0", (-1600));
      Compare compare0 = new Compare(sym0, exprList0, exprList0, location0);
      Double double0 = new Double((-1600));
      Boolean boolean0 = compare0.gt(double0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      Const const0 = Const.TRUE;
      Float float0 = new Float(2976.531F);
      Short short0 = new Short((byte) (-49));
      Compare compare0 = new Compare(sym0, const0, const0, const0.location);
      Boolean boolean0 = compare0.gt(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Sym sym0 = Sym.LBRACK;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("^C|%", (-1159));
      Compare compare0 = new Compare(sym0, exprList0, exprList0, location0);
      Integer integer0 = new Integer((-1159));
      Long long0 = new Long((-1159));
      Boolean boolean0 = compare0.gt(integer0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Sym sym0 = Sym.SEMICOLON;
      Const const0 = Const.FALSE;
      Compare compare0 = new Compare(sym0, const0, const0, const0.location);
      Byte byte0 = new Byte((byte) (-124));
      Byte byte1 = new Byte((byte)63);
      Boolean boolean0 = compare0.gt(byte0, byte1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Sym sym0 = Sym.LT;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("c00?", 34);
      Assign assign0 = new Assign("c00?", exprList0, location0);
      Logic logic0 = new Logic(sym0, assign0, assign0, location0);
      Compare compare0 = new Compare(sym0, logic0, logic0, location0);
      Byte byte0 = new Byte((byte) (-114));
      Double double0 = new Double(526.0);
      Boolean boolean0 = compare0.equal(byte0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Float float0 = new Float(0.0F);
      Long long0 = new Long(667);
      Boolean boolean0 = compare0.equal(float0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Sym sym0 = Sym.GE;
      Id id0 = new Id((String) null);
      Location location0 = new Location("", (-255));
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-255));
      Boolean boolean0 = compare0.equal(long0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Sym sym0 = Sym.FALSE;
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Compare compare0 = new Compare(sym0, exprList0, exprList0, location0);
      Short short0 = new Short((short)2185);
      Integer integer0 = new Integer((-2907));
      Boolean boolean0 = compare0.equal(short0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Sym sym0 = Sym.MOD;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Const const0 = new Const(sym0, sym0);
      Location location0 = new Location("EleyNt!3", (-1398));
      Compare compare0 = new Compare(sym0, map0, const0, location0);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: LinkedHashMap \"%\" Sym
         // Template: \"EleyNt!3\". Line: -1398
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Sym sym0 = Sym.LE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("~Z7\"@J+", 0);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: LinkedHashMap \"<=\" LinkedHashMap
         // Template: \"~Z7\"@J+\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Sym sym0 = Sym.LT;
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: LinkedHashMap \"<\" LinkedHashMap
         // Template: \"9Wv\"+\"wH~\". Line: 10
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Sym sym0 = Sym.GT;
      Const const0 = new Const(sym0, sym0);
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location((String) null, 1131);
      Compare compare0 = new Compare(sym0, const0, map0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: Sym \">\" LinkedHashMap
         // String template line: 1131
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Sym sym0 = Sym.EQUAL;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("8htcnF?,MLF]G1~D.", (-256));
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object object0 = compare0.eval(scope0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Sym sym0 = Sym.COLON;
      Const const0 = Const.FALSE;
      Location location0 = new Location("The operation target on the left side of \"", 544);
      Field field0 = new Field(const0, "The operation target on the left side of \"", location0);
      Compare compare0 = new Compare(sym0, field0, field0, location0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal[] bigDecimalArray0 = compare0.toBigDecimals(bigDecimal0, bigDecimal0);
      assertEquals(2, bigDecimalArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Sym sym0 = Sym.TRUE;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("KZqwWC\"3RlzcKn5", 0);
      Compare compare0 = new Compare(sym0, exprList0, exprList0, location0);
      // Undeclared exception!
      try { 
        compare0.toBigDecimals((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Sym sym0 = Sym.DIV;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, (Location) null);
      // Undeclared exception!
      try { 
        compare0.lt(sym0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Sym sym0 = Sym.RPAREN;
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location((String) null, 4260);
      Compare compare0 = new Compare(sym0, exprList0, exprList0, location0);
      // Undeclared exception!
      try { 
        compare0.le(sym0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Sym sym0 = Sym.SEMICOLON;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("", 0);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Byte byte0 = new Byte((byte)0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        compare0.gt(byte0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Sym sym0 = Sym.FALSE;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("kg+$", 2);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      // Undeclared exception!
      try { 
        compare0.gt(sym0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NullExpr nullExpr0 = NullExpr.me;
      Byte byte0 = new Byte((byte)0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Sym sym0 = Sym.INT;
      Location location0 = new Location("L/y{An(<1u,{Zxqt:", 2145411667);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      // Undeclared exception!
      try { 
        compare0.ge(byte0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Sym sym0 = Sym.LPAREN;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("", (-2518));
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      // Undeclared exception!
      try { 
        compare0.ge(sym0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("hZ}_'xi", 0);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      LinkedHashMap<String, Integer> linkedHashMap1 = new LinkedHashMap<String, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(linkedHashMap1);
      Byte byte0 = new Byte((byte)0);
      linkedHashMap0.put(byte0, map0);
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Sym sym0 = Sym.EQUAL;
      Expr[] exprArray0 = new Expr[2];
      Short short0 = new Short((short) (-3116));
      Const const0 = new Const(sym0, short0);
      Location location0 = new Location("length", (short) (-3116));
      Array array0 = new Array(exprArray0, location0);
      Compare compare0 = new Compare(sym0, array0, const0, location0);
      LinkedHashMap<Double, Integer> linkedHashMap0 = new LinkedHashMap<Double, Integer>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Sym sym0 = Sym.COLON;
      Const const0 = Const.FALSE;
      Location location0 = new Location("The operation target on the left side of \"", 544);
      Field field0 = new Field(const0, "The operation target on the left side of \"", location0);
      Compare compare0 = new Compare(sym0, field0, field0, location0);
      LinkedHashMap<Short, Short> linkedHashMap0 = new LinkedHashMap<Short, Short>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.expr.ast.MethodKit
         //
         verifyException("com.jfinal.template.expr.ast.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Sym sym0 = Sym.NOTEQUAL;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Compare compare0 = new Compare(sym0, map0, map0, map0.location);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1641));
      scope0.setGlobal((Object) null, bigDecimal0);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      // Undeclared exception!
      try { 
        compare0.lt(nullExpr0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The operation target on the right side of \"::\" can not be null
         // Template: \"\". Line: 1886
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Float float0 = new Float((double) 1);
      Long long0 = new Long(1);
      // Undeclared exception!
      try { 
        compare0.toBigDecimals(float0, long0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Short short0 = new Short((short)1886);
      Location location0 = new Location("efR#.sY=9vfais", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        compare0.gt(bigInteger0, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported data type: java.math.BigInteger
         // Template: \"efR#.sY=9vfais\". Line: 1886
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Boolean boolean0 = compare0.le("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Boolean boolean0 = compare0.le("null", "\nTemplate: \"null\". Line: 667");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      BigDecimal bigDecimal0 = new BigDecimal(60L);
      Location location0 = new Location("5#:*,8c39$", 13);
      Compare compare0 = new Compare(sym0, exprList0, expr0, location0);
      Boolean boolean0 = compare0.le(bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Float float0 = new Float((double) (short)1886);
      Double double0 = new Double((-686.9197007));
      Boolean boolean0 = compare0.le(float0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Float float0 = new Float(1508.9272741);
      Boolean boolean0 = compare0.le(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Location location0 = new Location("b:%/y{An(<1u,{Zxqt:", (byte)13);
      Integer integer0 = new Integer((byte)0);
      Sym sym0 = Sym.DOUBLE;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Field field0 = new Field(nullExpr0, "b:%/y{An(<1u,{Zxqt:", location0);
      Assign assign0 = new Assign("b:%/y{An(<1u,{Zxqt:", field0, location0);
      Compare compare0 = new Compare(sym0, assign0, nullExpr0, location0);
      Long long0 = new Long((-219L));
      Boolean boolean0 = compare0.le(integer0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Integer integer0 = new Integer(10);
      RangeArray rangeArray0 = new RangeArray(map0, map0, location0);
      Compare compare0 = new Compare(sym0, rangeArray0, map0, location0);
      Short short0 = new Short((short)1);
      Boolean boolean0 = compare0.le(integer0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Short short0 = new Short((byte) (-49));
      BigDecimal bigDecimal0 = new BigDecimal((-329.112F));
      // Undeclared exception!
      try { 
        compare0.le(bigDecimal0, short0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      Const const0 = Const.TRUE;
      Location location0 = new Location("il>Z ]s[AC0", 0);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Double double0 = new Double(0.0F);
      Short short0 = new Short((short)238);
      Boolean boolean0 = compare0.le(double0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("efR#.sY=9vfais", 3601);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Short short0 = new Short((short)1886);
      Float float0 = new Float((double) 3601);
      Boolean boolean0 = compare0.le(float0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Sym sym0 = Sym.EQUAL;
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Short short0 = new Short((short)7345);
      Boolean boolean0 = compare0.le(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Object object0 = new Object();
      Short short0 = new Short((byte) (-49));
      // Undeclared exception!
      try { 
        compare0.le(short0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: Short \"EOF\" Object
         // Template: \"null\". Line: 667
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Long long0 = new Long((byte) (-49));
      Boolean boolean0 = compare0.le(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Sym sym0 = Sym.COMMA;
      Const const0 = Const.FALSE;
      Location location0 = new Location("=", (-2146351605));
      Field field0 = new Field(const0, "e!sAZ5O_Iy\rJi\"Lpm", location0);
      Assign assign0 = new Assign("=", field0, location0);
      Arith arith0 = new Arith(sym0, assign0, assign0, location0);
      RangeArray rangeArray0 = new RangeArray(assign0, arith0, location0);
      Compare compare0 = new Compare(sym0, rangeArray0, assign0, location0);
      Boolean boolean0 = compare0.lt("=", "e!sAZ5O_Iy\rJi\"Lpm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Unary unary0 = new Unary(sym0, map0, (Location) null);
      Logic logic0 = new Logic(sym0, unary0, map0, (Location) null);
      Compare compare0 = new Compare(sym0, logic0, map0, (Location) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Boolean boolean0 = compare0.lt(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Float float0 = new Float(2976.531F);
      Double double0 = new Double(217.0434);
      Boolean boolean0 = compare0.lt(double0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Short short0 = new Short((short)1886);
      Float float0 = new Float((double) 1);
      Location location0 = new Location("efR#.sY=9vfais", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Boolean boolean0 = compare0.lt(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Short short0 = new Short((short)1886);
      Location location0 = new Location("efR#.sY=9vfais", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Long long0 = new Long((short)1886);
      Boolean boolean0 = compare0.lt(long0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("Unsupported operation type: ", 74);
      Sym sym0 = Sym.MOD;
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Short short0 = new Short((byte)39);
      Short short1 = new Short((short)28466);
      Boolean boolean0 = compare0.lt(short0, short1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Float float0 = new Float(1508.9272741);
      // Undeclared exception!
      try { 
        compare0.lt(bigDecimal0, float0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      Const const0 = Const.TRUE;
      Location location0 = new Location("il>Z ]s[AC0", 0);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Byte byte0 = new Byte((byte) (-118));
      Float float0 = new Float(5314.2053);
      Boolean boolean0 = compare0.lt(byte0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Short short0 = new Short((short)1886);
      Location location0 = new Location("", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Long long0 = new Long(1);
      Boolean boolean0 = compare0.lt(long0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Short short0 = new Short((byte) (-49));
      Boolean boolean0 = compare0.lt(short0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("efR#.sY=9vfais", 3601);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Float float0 = new Float((double) 3601);
      // Undeclared exception!
      try { 
        compare0.lt(float0, "\nTemplate: \"efR#.sY=9vfais\". Line: 3601");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: Float \"::\" String
         // Template: \"efR#.sY=9vfais\". Line: 3601
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Float float0 = new Float((-329.112F));
      Double double0 = new Double(217.0434);
      Boolean boolean0 = compare0.lt(double0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Boolean boolean0 = compare0.ge("", "2cgfliqgs5LP+2R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("^. D8.>T: soA", (-1977));
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      // Undeclared exception!
      try { 
        compare0.ge(location0, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: Location \"-\" Location
         // Template: \"^. D8.>T: soA\". Line: -1977
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0F);
      BigDecimal bigDecimal1 = new BigDecimal(10);
      Boolean boolean0 = compare0.ge(bigDecimal0, bigDecimal1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Integer integer0 = new Integer((byte) (-49));
      Double double0 = new Double((-368.44));
      Boolean boolean0 = compare0.ge(integer0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Float float0 = new Float((-197.19220739006));
      Float float1 = new Float(1.0F);
      Boolean boolean0 = compare0.ge(float0, float1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      Sym sym0 = Sym.NULL_SAFE;
      Location location0 = new Location("5#:*,8c39$", (-1));
      Compare compare0 = new Compare(sym0, exprList0, expr0, location0);
      Long long0 = new Long((-1));
      Byte byte0 = new Byte((byte)5);
      Boolean boolean0 = compare0.ge(long0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Short short0 = new Short((short)1886);
      Short short1 = Short.valueOf((short)28);
      Location location0 = new Location("", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Boolean boolean0 = compare0.ge(short1, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0F);
      Boolean boolean0 = compare0.ge(bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Long long0 = new Long((-1154L));
      Double double0 = new Double((-197.19220739006));
      Sym sym0 = Sym.COMMA;
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Boolean boolean0 = compare0.ge(long0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Integer integer0 = new Integer((byte) (-49));
      Float float0 = new Float((-329.112F));
      Boolean boolean0 = compare0.ge(integer0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Short short0 = new Short((short)1886);
      Location location0 = new Location("", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Boolean boolean0 = compare0.ge(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Unary unary0 = new Unary(sym0, map0, (Location) null);
      Logic logic0 = new Logic(sym0, unary0, map0, (Location) null);
      Compare compare0 = new Compare(sym0, logic0, map0, (Location) null);
      Float float0 = new Float((-2153.2F));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compare0.ge(float0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: Float \"--\" Object
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      Location location0 = new Location("5#:*,8c39$", 13);
      Compare compare0 = new Compare(sym0, exprList0, expr0, location0);
      Long long0 = new Long(1099511628211L);
      Byte byte0 = new Byte((byte)8);
      Boolean boolean0 = compare0.ge(long0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Sym sym0 = Sym.DOT;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("9Wv\"+\"wH~", 10);
      RangeArray rangeArray0 = new RangeArray(map0, map0, location0);
      Compare compare0 = new Compare(sym0, rangeArray0, map0, map0.location);
      Boolean boolean0 = compare0.gt("w`T^bXw)hYp*vJ`", "get");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("", (short)1886);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Boolean boolean0 = compare0.gt(sym0, sym0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("Unsupported operation type: ", 74);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Long long0 = new Long(74);
      Double double0 = new Double((byte)39);
      Boolean boolean0 = compare0.gt(long0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("Unsupported operation type: ", 74);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Float float0 = new Float((double) 74);
      Byte byte0 = new Byte((byte)39);
      Boolean boolean0 = compare0.gt(float0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("Unsupported operation type: ", 74);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Byte byte0 = new Byte((byte)39);
      Long long0 = new Long((-882L));
      Boolean boolean0 = compare0.gt(long0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Sym sym0 = Sym.INT;
      Short short0 = new Short((short) (-30496));
      Map map0 = new Map((LinkedHashMap<Object, Expr>) null);
      Compare compare0 = new Compare(sym0, map0, map0, (Location) null);
      Byte byte0 = new Byte((byte) (-10));
      Boolean boolean0 = compare0.gt(byte0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Sym sym0 = Sym.SEMICOLON;
      NullExpr nullExpr0 = NullExpr.me;
      Byte byte0 = new Byte((byte)0);
      Location location0 = new Location("b:%/y{An(<1u,{Zxqt:", (byte)0);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Double double0 = new Double((-197.19220739006));
      Boolean boolean0 = compare0.gt(double0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      Location location0 = new Location("74", (-2048));
      Compare compare0 = new Compare(sym0, expr0, exprList0, location0);
      Float float0 = new Float((double) (-2048));
      Boolean boolean0 = compare0.gt(float0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("Unsupported operation type: ", 74);
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Byte byte0 = new Byte((byte)39);
      Long long0 = new Long(74);
      Boolean boolean0 = compare0.gt(long0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Sym sym0 = Sym.LT;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("c00?", 34);
      Assign assign0 = new Assign("c00?", exprList0, location0);
      Logic logic0 = new Logic(sym0, assign0, assign0, location0);
      Compare compare0 = new Compare(sym0, logic0, logic0, location0);
      Byte byte0 = new Byte((byte) (-114));
      Boolean boolean0 = compare0.gt(byte0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Sym sym0 = Sym.INT;
      Id id0 = new Id("MIs$%!RPOkf.#=.");
      ForCtrl forCtrl0 = new ForCtrl(id0, id0, (Location) null);
      Compare compare0 = new Compare(sym0, forCtrl0, forCtrl0, (Location) null);
      Byte byte0 = new Byte((byte) (-4));
      Map map0 = new Map((LinkedHashMap<Object, Expr>) null);
      // Undeclared exception!
      try { 
        compare0.gt(byte0, map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: Byte \"INT\" Map
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Boolean boolean0 = compare0.gt(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      BigDecimal bigDecimal0 = new BigDecimal(60L);
      Location location0 = new Location("5#:*,8c39$", 13);
      Compare compare0 = new Compare(sym0, exprList0, expr0, location0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      Boolean boolean0 = compare0.equal(bigDecimal1, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("W+ !|Em;\"89EC t", 514);
      Compare compare0 = new Compare(sym0, nullExpr0, nullExpr0, location0);
      Integer integer0 = new Integer(514);
      Double double0 = new Double(514);
      Boolean boolean0 = compare0.equal(integer0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      Float float0 = new Float((double) 1);
      Long long0 = new Long(1);
      Boolean boolean0 = compare0.equal(float0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Long long0 = new Long((byte) (-49));
      Integer integer0 = new Integer((-2142721585));
      Boolean boolean0 = compare0.equal(integer0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Byte byte0 = new Byte((byte) (-49));
      Integer integer0 = new Integer((byte) (-49));
      Boolean boolean0 = compare0.equal(byte0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("", 12);
      Compare compare0 = new Compare(sym0, exprList0, exprList0, location0);
      Double double0 = new Double(1607.821680704);
      Integer integer0 = new Integer(587);
      Boolean boolean0 = compare0.equal(double0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Float float0 = new Float(2976.531F);
      Long long0 = new Long(667);
      Boolean boolean0 = compare0.equal(float0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Integer integer0 = new Integer((byte) (-49));
      Long long0 = new Long((byte) (-49));
      Boolean boolean0 = compare0.equal(integer0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Sym sym0 = Sym.NOTEQUAL;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("8htcnF?,MLF]G1~D.", (-256));
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1641));
      Double double0 = new Double((short)2);
      // Undeclared exception!
      try { 
        compare0.equal(bigDecimal0, double0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Sym sym0 = Sym.COLON;
      Const const0 = Const.FALSE;
      Location location0 = new Location("The operation target on the left side of \"", 544);
      Field field0 = new Field(const0, "The operation target on the left side of \"", location0);
      Compare compare0 = new Compare(sym0, field0, field0, location0);
      Float float0 = new Float((double) 544);
      Boolean boolean0 = compare0.equal(float0, location0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Sym sym0 = Sym.NOTEQUAL;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("8htcnF?,MLF]G1~D.", (-256));
      Compare compare0 = new Compare(sym0, map0, map0, location0);
      Integer integer0 = new Integer((-1));
      Short short0 = new Short((short)2);
      Boolean boolean0 = compare0.equal(integer0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Sym sym0 = Sym.GT;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("", 1);
      Compare compare0 = new Compare(sym0, nullExpr0, exprList0, location0);
      Byte byte0 = new Byte((byte) (-91));
      Boolean boolean0 = compare0.equal(byte0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Sym sym0 = Sym.EOF;
      Const const0 = Const.TRUE;
      Location location0 = new Location("null", 667);
      Compare compare0 = new Compare(sym0, const0, const0, location0);
      Object object0 = new Object();
      Boolean boolean0 = compare0.equal((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      Location location0 = new Location("74", (-2048));
      Compare compare0 = new Compare(sym0, expr0, exprList0, location0);
      LinkedHashMap<Object, Long> linkedHashMap0 = new LinkedHashMap<Object, Long>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation: null \"DOUBLE\" null
         // Template: \"74\". Line: -2048
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Sym sym0 = Sym.NOTEQUAL;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("8htcnF?,MLF]G1~D.", (-256));
      Compare compare0 = new Compare(sym0, map0, map0, map0.location);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Compare compare1 = new Compare(sym0, map0, compare0, location0);
      Object object0 = compare1.eval(scope0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Sym sym0 = Sym.LE;
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      Compare compare0 = new Compare(sym0, expr0, exprList0, (Location) null);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, linkedHashMap0);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The operation target on the left side of \"<=\" can not be null
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Sym sym0 = Sym.LT;
      Sym sym1 = Sym.NOT;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("c00?", 34);
      Assign assign0 = new Assign("c00?", exprList0, location0);
      Logic logic0 = new Logic(sym1, assign0, assign0, location0);
      Compare compare0 = new Compare(sym0, logic0, logic0, location0);
      LinkedHashMap<Long, String> linkedHashMap0 = new LinkedHashMap<Long, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Object object0 = compare0.eval(scope0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Const const0 = Const.TRUE;
      Location location0 = new Location("", 36);
      NullSafe nullSafe0 = new NullSafe(const0, const0, location0);
      HashMap<BigDecimal, Float> hashMap0 = new HashMap<BigDecimal, Float>();
      Sym sym0 = Sym.GE;
      Compare compare0 = new Compare(sym0, nullSafe0, nullSafe0, const0.location);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      Object object0 = compare0.eval(scope0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      LinkedHashMap<Long, String> linkedHashMap0 = new LinkedHashMap<Long, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Sym sym0 = Sym.GT;
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("", 1);
      Compare compare0 = new Compare(sym0, nullExpr0, exprList0, location0);
      // Undeclared exception!
      try { 
        compare0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The operation target on the left side of \">\" can not be null
         // Template: \"\". Line: 1
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Sym sym0 = Sym.NOTEQUAL;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Compare compare0 = new Compare(sym0, map0, map0, map0.location);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object object0 = compare0.eval(scope0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Sym sym0 = Sym.EQUAL;
      Id id0 = new Id("");
      Location location0 = new Location("2cgfliqgs5LP+2R", 1);
      Compare compare0 = new Compare(sym0, id0, id0, location0);
      LinkedHashMap<Object, Short> linkedHashMap0 = new LinkedHashMap<Object, Short>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Object object0 = compare0.eval(scope0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      Expr[] exprArray0 = new Expr[5];
      Location location0 = new Location("d&MW", 7345);
      Array array0 = new Array(exprArray0, location0);
      Compare compare0 = null;
      try {
        compare0 = new Compare(sym0, array0, (Expr) null, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The target of \"--\" operator can not be blank
         // Template: \"d&MW\". Line: 7345
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Location location0 = new Location("", (-2965));
      Compare compare0 = null;
      try {
        compare0 = new Compare((Sym) null, (Expr) null, (Expr) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Compare", e);
      }
  }
}
