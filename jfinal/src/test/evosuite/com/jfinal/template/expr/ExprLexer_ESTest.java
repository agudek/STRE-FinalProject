/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 10:22:21 GMT 2018
 */

package com.jfinal.template.expr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.ExprLexer;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.Tok;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.ParaToken;
import java.nio.CharBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ExprLexer_ESTest extends ExprLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-d uZ;>j9");
      assertNotNull(stringBuilder0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 100);
      assertNotNull(paraToken0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      assertEquals("-d uZ;>j9", paraToken0.toString());
      assertEquals("-d uZ;>j9", paraToken0.value());
      
      Location location0 = new Location("", 100);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(100, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      assertEquals("-d uZ;>j9", paraToken0.toString());
      assertEquals("-d uZ;>j9", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(100, location0.getRow());
      
      exprLexer0.retract(0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      assertEquals("-d uZ;>j9", paraToken0.toString());
      assertEquals("-d uZ;>j9", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(100, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(";* ");
      assertNotNull(stringBuilder0);
      assertEquals(";* ", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 65);
      assertNotNull(paraToken0);
      assertEquals(";* ", stringBuilder0.toString());
      assertEquals(";* ", paraToken0.value());
      assertEquals(";* ", paraToken0.toString());
      
      Location location0 = new Location(";* ", (-2454));
      assertNotNull(location0);
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(";* ", stringBuilder0.toString());
      assertEquals(";* ", paraToken0.value());
      assertEquals(";* ", paraToken0.toString());
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      Sym sym0 = Sym.NOT;
      exprLexer0.forwardRow = (-2454);
      assertEquals(";* ", stringBuilder0.toString());
      assertEquals(";* ", paraToken0.value());
      assertEquals(";* ", paraToken0.toString());
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      Tok tok0 = new Tok(sym0, (-1117));
      assertNotNull(tok0);
      
      boolean boolean0 = exprLexer0.ok(tok0);
      assertTrue(boolean0);
      assertEquals(";* ", stringBuilder0.toString());
      assertEquals(";* ", paraToken0.value());
      assertEquals(";* ", paraToken0.toString());
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Location location0 = new Location("CALL_IF_DEFINED", 'p');
      assertNotNull(location0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) location0);
      assertNotNull(stringBuilder1);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, (-1294));
      assertNotNull(paraToken0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      
      exprLexer0.beginRow = (-309);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 76);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location(".c-&~", 39);
      assertNotNull(location0);
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      exprLexer0.forwardRow = 47;
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("i(zB b'0 \"~5");
      assertNotNull(stringBuilder1);
      assertEquals("i(zB b'0 \"~5", stringBuilder0.toString());
      assertEquals("i(zB b'0 \"~5", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((Object) "i(zB b'0 \"~5");
      assertNotNull(stringBuilder2);
      assertEquals("i(zB b'0 \"~5i(zB b'0 \"~5", stringBuilder0.toString());
      assertEquals("i(zB b'0 \"~5i(zB b'0 \"~5", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("i(zB b'0 \"~5i(zB b'0 \"~5", stringBuilder0.toString());
      assertEquals("i(zB b'0 \"~5i(zB b'0 \"~5", paraToken0.toString());
      assertEquals("i(zB b'0 \"~5i(zB b'0 \"~5", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression error, the string not ending
         // Template: \"\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2698);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 2698);
      assertNotNull(stringBuilder1);
      assertEquals("2698.0", stringBuilder0.toString());
      assertEquals("2698.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 2576);
      assertNotNull(paraToken0);
      assertEquals("2698.0", stringBuilder0.toString());
      assertEquals("2698.0", stringBuilder1.toString());
      assertEquals("2698.0", paraToken0.toString());
      assertEquals("2698.0", paraToken0.value());
      
      Location location0 = new Location("rDx!@6}", 97);
      assertNotNull(location0);
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("2698.0", stringBuilder0.toString());
      assertEquals("2698.0", stringBuilder1.toString());
      assertEquals("2698.0", paraToken0.toString());
      assertEquals("2698.0", paraToken0.value());
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      
      exprLexer0.state = 2698;
      assertEquals("2698.0", stringBuilder0.toString());
      assertEquals("2698.0", stringBuilder1.toString());
      assertEquals("2698.0", paraToken0.toString());
      assertEquals("2698.0", paraToken0.value());
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '2'
         // Template: \"rDx!@6}\". Line: 97
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 76);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location(".c-&~", 39);
      assertNotNull(location0);
      assertEquals(39, location0.getRow());
      assertEquals(".c-&~", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals(39, location0.getRow());
      assertEquals(".c-&~", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals(39, location0.getRow());
      assertEquals(".c-&~", location0.getTemplateFile());
      
      boolean boolean1 = exprLexer0.fail();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("null", paraToken0.toString());
      assertEquals(39, location0.getRow());
      assertEquals(".c-&~", location0.getTemplateFile());
      
      boolean boolean2 = exprLexer0.fail();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("null", paraToken0.toString());
      assertEquals(39, location0.getRow());
      assertEquals(".c-&~", location0.getTemplateFile());
      
      boolean boolean3 = exprLexer0.scanString();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals("null", paraToken0.toString());
      assertEquals(39, location0.getRow());
      assertEquals(".c-&~", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (double) 0);
      assertNotNull(stringBuilder1);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Sym sym0 = Sym.ADD;
      Tok tok0 = new Tok(sym0, 0);
      assertNotNull(tok0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((Object) tok0);
      assertNotNull(stringBuilder2);
      assertEquals("0.0+", stringBuilder0.toString());
      assertEquals("0.0+", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder2, 0);
      assertNotNull(paraToken0);
      assertEquals("0.0+", stringBuilder0.toString());
      assertEquals("0.0+", stringBuilder2.toString());
      assertEquals("0.0+", paraToken0.value());
      assertEquals("0.0+", paraToken0.toString());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("0.0+", stringBuilder0.toString());
      assertEquals("0.0+", stringBuilder2.toString());
      assertEquals("0.0+", paraToken0.value());
      assertEquals("0.0+", paraToken0.toString());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertFalse(list0.contains(tok0));
      assertEquals("0.0+", stringBuilder0.toString());
      assertEquals("0.0+", stringBuilder2.toString());
      assertEquals("0.0+", paraToken0.value());
      assertEquals("0.0+", paraToken0.toString());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 76);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location(".c-&~", 39);
      assertNotNull(location0);
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      boolean boolean1 = exprLexer0.fail();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
      
      boolean boolean2 = exprLexer0.scanOperator();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("null", paraToken0.toString());
      assertEquals(".c-&~", location0.getTemplateFile());
      assertEquals(39, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertNotNull(stringBuilder1);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1);
      assertNotNull(paraToken0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertEquals("true", paraToken0.toString());
      assertEquals("true", paraToken0.value());
      
      Location location0 = new Location("F^@d8", 1);
      assertNotNull(location0);
      assertEquals(1, location0.getRow());
      assertEquals("F^@d8", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertEquals("true", paraToken0.toString());
      assertEquals("true", paraToken0.value());
      assertEquals(1, location0.getRow());
      assertEquals("F^@d8", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.scanId();
      assertTrue(boolean0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertEquals("true", paraToken0.toString());
      assertEquals("true", paraToken0.value());
      assertEquals(1, location0.getRow());
      assertEquals("F^@d8", location0.getTemplateFile());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 279);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location("com.jfinal.template.stat.ParseException", (-628));
      assertNotNull(location0);
      assertEquals("com.jfinal.template.stat.ParseException", location0.getTemplateFile());
      assertEquals((-628), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals("com.jfinal.template.stat.ParseException", location0.getTemplateFile());
      assertEquals((-628), location0.getRow());
      
      exprLexer0.state = (-628);
      assertEquals("null", paraToken0.toString());
      assertEquals("com.jfinal.template.stat.ParseException", location0.getTemplateFile());
      assertEquals((-628), location0.getRow());
      
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals("com.jfinal.template.stat.ParseException", location0.getTemplateFile());
      assertEquals((-628), location0.getRow());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2133);
      assertNotNull(charBuffer0);
      assertEquals(2133, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals(2133, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals(2133, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      Location location0 = new Location("'", 2);
      assertNotNull(location0);
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(2133, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      
      exprLexer0.skipBlanks();
      assertEquals(2133, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2133);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2133, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2133, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2133, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      
      Location location0 = new Location("'", 2);
      assertNotNull(location0);
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2133, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      
      StringBuilder stringBuilder1 = exprLexer0.subBuf(2133, 901);
      assertNull(stringBuilder1);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2133, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2133);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      Location location0 = new Location("'", 2);
      assertNotNull(location0);
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      
      StringBuilder stringBuilder1 = exprLexer0.subBuf(2, 2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, location0.getRow());
      assertEquals("'", location0.getTemplateFile());
      assertEquals("\u0000", stringBuilder1.toString());
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, (-1205));
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1546));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-1546), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1546), location0.getRow());
      
      char char0 = exprLexer0.skipOctalDigit();
      assertEquals('\uFFFF', char0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1546), location0.getRow());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ELE0");
      assertNotNull(stringBuilder0);
      assertEquals("ELE0", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.toString());
      assertEquals("ELE0", paraToken0.value());
      
      Location location0 = new Location((String) null, 105);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
      
      char char0 = exprLexer0.skipOctalDigit();
      assertEquals('E', char0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 61);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location("+6", 61);
      assertNotNull(location0);
      assertEquals("+6", location0.getTemplateFile());
      assertEquals(61, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals("+6", location0.getTemplateFile());
      assertEquals(61, location0.getRow());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals("+6", location0.getTemplateFile());
      assertEquals(61, location0.getRow());
      
      char char0 = exprLexer0.skipHexadecimalDigit();
      assertEquals('w', char0);
      assertEquals("null", paraToken0.toString());
      assertEquals("+6", location0.getTemplateFile());
      assertEquals(61, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2960);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(2960);
      assertNotNull(stringBuilder1);
      assertEquals("2960", stringBuilder0.toString());
      assertEquals("2960", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2960);
      assertNotNull(paraToken0);
      assertEquals("2960", stringBuilder0.toString());
      assertEquals("2960", paraToken0.toString());
      assertEquals("2960", paraToken0.value());
      
      Location location0 = new Location("Uqc/LV*oyx^", 2870);
      assertNotNull(location0);
      assertEquals("Uqc/LV*oyx^", location0.getTemplateFile());
      assertEquals(2870, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("2960", stringBuilder0.toString());
      assertEquals("2960", paraToken0.toString());
      assertEquals("2960", paraToken0.value());
      assertEquals("Uqc/LV*oyx^", location0.getTemplateFile());
      assertEquals(2870, location0.getRow());
      
      char char0 = exprLexer0.skipDigit(2960);
      assertEquals('9', char0);
      assertEquals("2960", stringBuilder0.toString());
      assertEquals("2960", paraToken0.toString());
      assertEquals("2960", paraToken0.value());
      assertEquals("Uqc/LV*oyx^", location0.getTemplateFile());
      assertEquals(2870, location0.getRow());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ELE0");
      assertNotNull(stringBuilder0);
      assertEquals("ELE0", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      
      Location location0 = new Location((String) null, 105);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
      
      char char0 = exprLexer0.skipDigit(112);
      assertEquals('E', char0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, (-1205));
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1546));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-1546), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1546), location0.getRow());
      
      char char0 = exprLexer0.skipDecimalDigit();
      assertEquals('\uFFFF', char0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1546), location0.getRow());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ELE0");
      assertNotNull(stringBuilder0);
      assertEquals("ELE0", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      
      Location location0 = new Location((String) null, 105);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
      
      char char0 = exprLexer0.skipDecimalDigit();
      assertEquals('E', char0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(105, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, (-1481));
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1481));
      assertNotNull(location0);
      assertEquals((-1481), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1481), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      exprLexer0.tokens = null;
      assertEquals("null", paraToken0.toString());
      assertEquals((-1481), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNull(list0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1481), location0.getRow());
      assertNull(location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, (-1205));
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1546));
      assertNotNull(location0);
      assertEquals((-1546), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1546), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char char0 = exprLexer0.peek();
      assertEquals('\uFFFF', char0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1546), location0.getRow());
      assertNull(location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2133);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (long) 0);
      assertNotNull(stringBuilder1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location("'", 2);
      assertNotNull(location0);
      assertEquals("'", location0.getTemplateFile());
      assertEquals(2, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("'", location0.getTemplateFile());
      assertEquals(2, location0.getRow());
      
      char char0 = exprLexer0.peek();
      assertEquals('0', char0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2133, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2133, charBuffer0.length());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("'", location0.getTemplateFile());
      assertEquals(2, location0.getRow());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      exprLexer0.buf = charArray0;
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      char char0 = exprLexer0.peek();
      assertEquals('l', char0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 352);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location("nnoLJ", 352);
      assertNotNull(location0);
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
      
      char[] charArray0 = new char[2];
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
      
      char char0 = exprLexer0.next();
      assertEquals('\u0000', char0);
      assertEquals("null", paraToken0.toString());
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1099);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 1099);
      assertNotNull(stringBuilder1);
      assertEquals("1099.0", stringBuilder0.toString());
      assertEquals("1099.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1099);
      assertNotNull(paraToken0);
      assertEquals("1099.0", stringBuilder0.toString());
      assertEquals("1099.0", stringBuilder1.toString());
      assertEquals("1099.0", paraToken0.value());
      assertEquals("1099.0", paraToken0.toString());
      
      Location location0 = new Location("7LzsQ<Ete[cUPnL1w", 1099);
      assertNotNull(location0);
      assertEquals(1099, location0.getRow());
      assertEquals("7LzsQ<Ete[cUPnL1w", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("1099.0", stringBuilder0.toString());
      assertEquals("1099.0", stringBuilder1.toString());
      assertEquals("1099.0", paraToken0.value());
      assertEquals("1099.0", paraToken0.toString());
      assertEquals(1099, location0.getRow());
      assertEquals("7LzsQ<Ete[cUPnL1w", location0.getTemplateFile());
      
      char char0 = exprLexer0.next();
      assertEquals('0', char0);
      assertEquals("1099.0", stringBuilder0.toString());
      assertEquals("1099.0", stringBuilder1.toString());
      assertEquals("1099.0", paraToken0.value());
      assertEquals("1099.0", paraToken0.toString());
      assertEquals(1099, location0.getRow());
      assertEquals("7LzsQ<Ete[cUPnL1w", location0.getTemplateFile());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-d uZ;>j9");
      assertNotNull(stringBuilder0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 100);
      assertNotNull(paraToken0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      assertEquals("-d uZ;>j9", paraToken0.value());
      assertEquals("-d uZ;>j9", paraToken0.toString());
      
      Location location0 = new Location("", 100);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(100, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("-d uZ;>j9", stringBuilder0.toString());
      assertEquals("-d uZ;>j9", paraToken0.value());
      assertEquals("-d uZ;>j9", paraToken0.toString());
      assertEquals("", location0.getTemplateFile());
      assertEquals(100, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.subBuf((-2584), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2584
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, (-4651));
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-4651));
      assertNotNull(location0);
      assertEquals((-4651), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-4651), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      exprLexer0.forward = 2288;
      assertEquals("null", paraToken0.toString());
      assertEquals((-4651), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.skipOctalDigit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("|(9KpU=PG3;x^e<d2<");
      assertNotNull(stringBuilder0);
      assertEquals("|(9KpU=PG3;x^e<d2<", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 65);
      assertNotNull(paraToken0);
      assertEquals("|(9KpU=PG3;x^e<d2<", stringBuilder0.toString());
      assertEquals("|(9KpU=PG3;x^e<d2<", paraToken0.value());
      assertEquals("|(9KpU=PG3;x^e<d2<", paraToken0.toString());
      
      Location location0 = new Location("|(9KpU=PG3;x^e<d2<", (-2454));
      assertNotNull(location0);
      assertEquals("|(9KpU=PG3;x^e<d2<", location0.getTemplateFile());
      assertEquals((-2454), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("|(9KpU=PG3;x^e<d2<", stringBuilder0.toString());
      assertEquals("|(9KpU=PG3;x^e<d2<", paraToken0.value());
      assertEquals("|(9KpU=PG3;x^e<d2<", paraToken0.toString());
      assertEquals("|(9KpU=PG3;x^e<d2<", location0.getTemplateFile());
      assertEquals((-2454), location0.getRow());
      
      exprLexer0.forward = 97;
      assertEquals("|(9KpU=PG3;x^e<d2<", stringBuilder0.toString());
      assertEquals("|(9KpU=PG3;x^e<d2<", paraToken0.value());
      assertEquals("|(9KpU=PG3;x^e<d2<", paraToken0.toString());
      assertEquals("|(9KpU=PG3;x^e<d2<", location0.getTemplateFile());
      assertEquals((-2454), location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.skipHexadecimalDigit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 42);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1183));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-1183), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1183), location0.getRow());
      
      exprLexer0.forward = (-1);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1183), location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.skipDigit(42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",/iZ{");
      assertNotNull(stringBuilder0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 112);
      assertNotNull(paraToken0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      assertEquals(",/iZ{", paraToken0.value());
      assertEquals(",/iZ{", paraToken0.toString());
      
      Location location0 = new Location("b", 112);
      assertNotNull(location0);
      assertEquals("b", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      assertEquals(",/iZ{", paraToken0.value());
      assertEquals(",/iZ{", paraToken0.toString());
      assertEquals("b", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      
      exprLexer0.lexemeBegin = 112;
      assertEquals(",/iZ{", stringBuilder0.toString());
      assertEquals(",/iZ{", paraToken0.value());
      assertEquals(",/iZ{", paraToken0.toString());
      assertEquals("b", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      assertEquals(",/iZ{", paraToken0.value());
      assertEquals(",/iZ{", paraToken0.toString());
      assertEquals("b", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.skipDecimalDigit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 68);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      exprLexer0.forward = 68;
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scanId();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<=Z");
      assertNotNull(stringBuilder0);
      assertEquals("<=Z", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-586L));
      assertNotNull(stringBuilder1);
      assertEquals("<=Z-586", stringBuilder0.toString());
      assertEquals("<=Z-586", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1877);
      assertNotNull(paraToken0);
      assertEquals("<=Z-586", stringBuilder0.toString());
      assertEquals("<=Z-586", stringBuilder1.toString());
      assertEquals("<=Z-586", paraToken0.value());
      assertEquals("<=Z-586", paraToken0.toString());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, (Location) null);
      assertNotNull(exprLexer0);
      assertEquals("<=Z-586", stringBuilder0.toString());
      assertEquals("<=Z-586", stringBuilder1.toString());
      assertEquals("<=Z-586", paraToken0.value());
      assertEquals("<=Z-586", paraToken0.toString());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.NumTok", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 352);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location("nnoLJ", 352);
      assertNotNull(location0);
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = '+';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals("nnoLJ", location0.getTemplateFile());
      assertEquals(352, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 65535);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location(")r,kt<", 8);
      assertNotNull(location0);
      assertEquals(")r,kt<", location0.getTemplateFile());
      assertEquals(8, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals(")r,kt<", location0.getTemplateFile());
      assertEquals(8, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Location location0 = new Location("tc}!@Gh^", 1);
      assertNotNull(location0);
      assertEquals("tc}!@Gh^", location0.getTemplateFile());
      assertEquals(1, location0.getRow());
      
      ExprLexer exprLexer0 = null;
      try {
        exprLexer0 = new ExprLexer((ParaToken) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 68);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      char[] charArray0 = new char[7];
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '\u0000'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Location location0 = new Location("CALL_IF_DEFINED", 'p');
      assertNotNull(location0);
      assertEquals(112, location0.getRow());
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-1294));
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(112, location0.getRow());
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      // Undeclared exception!
      try { 
        exprLexer0.retract(322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Dq?mYlWVBv)[wM6g\"]\"");
      assertNotNull(stringBuilder0);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-1892));
      assertNotNull(paraToken0);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.value());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.toString());
      
      Location location0 = new Location("lG", 766);
      assertNotNull(location0);
      assertEquals("lG", location0.getTemplateFile());
      assertEquals(766, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.value());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.toString());
      assertEquals("lG", location0.getTemplateFile());
      assertEquals(766, location0.getRow());
      
      exprLexer0.retract((-1892));
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.value());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.toString());
      assertEquals("lG", location0.getTemplateFile());
      assertEquals(766, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2133);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (long) 0);
      assertNotNull(stringBuilder1);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location("'", 2);
      assertNotNull(location0);
      assertEquals("'", location0.getTemplateFile());
      assertEquals(2, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("'", location0.getTemplateFile());
      assertEquals(2, location0.getRow());
      
      char char0 = exprLexer0.skipHexadecimalDigit();
      assertEquals('\u0000', char0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2133, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2133, charBuffer0.capacity());
      assertEquals(2133, charBuffer0.limit());
      assertEquals(2133, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("'", location0.getTemplateFile());
      assertEquals(2, location0.getRow());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("'xcy");
      assertNotNull(stringBuilder0);
      assertEquals("'xcy", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1662);
      assertNotNull(paraToken0);
      assertEquals("'xcy", stringBuilder0.toString());
      assertEquals("'xcy", paraToken0.toString());
      assertEquals("'xcy", paraToken0.value());
      
      Location location0 = new Location("Pe", 45);
      assertNotNull(location0);
      assertEquals("Pe", location0.getTemplateFile());
      assertEquals(45, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("'xcy", stringBuilder0.toString());
      assertEquals("'xcy", paraToken0.toString());
      assertEquals("'xcy", paraToken0.value());
      assertEquals("Pe", location0.getTemplateFile());
      assertEquals(45, location0.getRow());
      
      boolean boolean0 = exprLexer0.errorFollow();
      assertTrue(boolean0);
      assertEquals("'xcy", stringBuilder0.toString());
      assertEquals("'xcy", paraToken0.toString());
      assertEquals("'xcy", paraToken0.value());
      assertEquals("Pe", location0.getTemplateFile());
      assertEquals(45, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\"");
      assertNotNull(stringBuilder0);
      assertEquals("\"", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 48);
      assertNotNull(paraToken0);
      assertEquals("\"", stringBuilder0.toString());
      assertEquals("\"", paraToken0.toString());
      assertEquals("\"", paraToken0.value());
      
      Location location0 = new Location("\"", 55);
      assertNotNull(location0);
      assertEquals(55, location0.getRow());
      assertEquals("\"", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("\"", stringBuilder0.toString());
      assertEquals("\"", paraToken0.toString());
      assertEquals("\"", paraToken0.value());
      assertEquals(55, location0.getRow());
      assertEquals("\"", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.errorFollow();
      assertTrue(boolean0);
      assertEquals("\"", stringBuilder0.toString());
      assertEquals("\"", paraToken0.toString());
      assertEquals("\"", paraToken0.value());
      assertEquals(55, location0.getRow());
      assertEquals("\"", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-2715.374F));
      assertNotNull(stringBuilder1);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1161);
      assertNotNull(paraToken0);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertEquals("-2715.374", paraToken0.toString());
      assertEquals("-2715.374", paraToken0.value());
      
      Location location0 = new Location((String) null, 1161);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(1161, location0.getRow());
      
      StringBuilder stringBuilder2 = stringBuilder0.append(false);
      assertNotNull(stringBuilder2);
      assertEquals("-2715.374false", stringBuilder0.toString());
      assertEquals("-2715.374false", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("-2715.374false", stringBuilder0.toString());
      assertEquals("-2715.374false", stringBuilder1.toString());
      assertEquals("-2715.374false", paraToken0.value());
      assertEquals("-2715.374false", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(1161, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error expression: 2715.374a
         // String template line: 1161
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-2715.374F));
      assertNotNull(stringBuilder1);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1165);
      assertNotNull(paraToken0);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertEquals("-2715.374", paraToken0.toString());
      assertEquals("-2715.374", paraToken0.value());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      StringBuilder stringBuilder2 = stringBuilder1.append('l');
      assertNotNull(stringBuilder2);
      assertEquals("-2715.374l", stringBuilder0.toString());
      assertEquals("-2715.374l", stringBuilder1.toString());
      assertEquals("-2715.374l", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("-2715.374l", stringBuilder0.toString());
      assertEquals("-2715.374l", stringBuilder1.toString());
      assertEquals("-2715.374l", paraToken0.value());
      assertEquals("-2715.374l", paraToken0.toString());
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error float format
         // String template line: 1165
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'X';
      charArray0[2] = 'L';
      Location location0 = new Location("CALL_IF_DEFINED", '^');
      assertNotNull(location0);
      assertEquals(94, location0.getRow());
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
      assertNotNull(stringBuilder1);
      assertEquals(6, charArray0.length);
      assertEquals("0XL\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("0XL\u0000\u0000\u0000", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertArrayEquals(new char[] {'0', 'X', 'L', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-1294));
      assertNotNull(paraToken0);
      assertEquals("0XL\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("0XL\u0000\u0000\u0000", paraToken0.toString());
      assertEquals("0XL\u0000\u0000\u0000", paraToken0.value());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(94, location0.getRow());
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals("0XL\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("0XL\u0000\u0000\u0000", paraToken0.toString());
      assertEquals("0XL\u0000\u0000\u0000", paraToken0.value());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error hex format
         // Template: \"CALL_IF_DEFINED\". Line: 94
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-2715.374F));
      assertNotNull(stringBuilder1);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1165);
      assertNotNull(paraToken0);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertEquals("-2715.374", paraToken0.value());
      assertEquals("-2715.374", paraToken0.toString());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      StringBuilder stringBuilder2 = stringBuilder1.append('e');
      assertNotNull(stringBuilder2);
      assertEquals("-2715.374e", stringBuilder0.toString());
      assertEquals("-2715.374e", stringBuilder1.toString());
      assertEquals("-2715.374e", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("-2715.374e", stringBuilder0.toString());
      assertEquals("-2715.374e", stringBuilder1.toString());
      assertEquals("-2715.374e", paraToken0.toString());
      assertEquals("-2715.374e", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error scientific notation format
         // String template line: 1165
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (double) 0);
      assertNotNull(stringBuilder1);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Sym sym0 = Sym.EOF;
      Tok tok0 = new Tok(sym0, 0);
      assertNotNull(tok0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((Object) tok0);
      assertNotNull(stringBuilder2);
      assertEquals("0.0EOF", stringBuilder0.toString());
      assertEquals("0.0EOF", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder2, 0);
      assertNotNull(paraToken0);
      assertEquals("0.0EOF", stringBuilder0.toString());
      assertEquals("0.0EOF", stringBuilder2.toString());
      assertEquals("0.0EOF", paraToken0.value());
      assertEquals("0.0EOF", paraToken0.toString());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals(0, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("0.0EOF", stringBuilder0.toString());
      assertEquals("0.0EOF", stringBuilder2.toString());
      assertEquals("0.0EOF", paraToken0.value());
      assertEquals("0.0EOF", paraToken0.toString());
      assertEquals(0, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error scientific notation format
         // Template: \"\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (double) 0);
      assertNotNull(stringBuilder1);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      assertNotNull(paraToken0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", paraToken0.value());
      assertEquals("0.0", paraToken0.toString());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", paraToken0.value());
      assertEquals("0.0", paraToken0.toString());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      char char0 = exprLexer0.skipDigit(0);
      assertEquals('.', char0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", paraToken0.value());
      assertEquals("0.0", paraToken0.toString());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      assertSame(stringBuilder0, stringBuilder1);
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", paraToken0.value());
      assertEquals("0.0", paraToken0.toString());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Expression error, the string not ending");
      assertNotNull(stringBuilder0);
      assertEquals("Expression error, the string not ending", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-2782));
      assertNotNull(paraToken0);
      assertEquals("Expression error, the string not ending", stringBuilder0.toString());
      assertEquals("Expression error, the string not ending", paraToken0.value());
      assertEquals("Expression error, the string not ending", paraToken0.toString());
      
      Location location0 = new Location("Expression error, the string not ending", (-2048));
      assertNotNull(location0);
      assertEquals((-2048), location0.getRow());
      assertEquals("Expression error, the string not ending", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("Expression error, the string not ending", stringBuilder0.toString());
      assertEquals("Expression error, the string not ending", paraToken0.value());
      assertEquals("Expression error, the string not ending", paraToken0.toString());
      assertEquals((-2048), location0.getRow());
      assertEquals("Expression error, the string not ending", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.scanNumber();
      assertFalse(boolean0);
      assertEquals("Expression error, the string not ending", stringBuilder0.toString());
      assertEquals("Expression error, the string not ending", paraToken0.value());
      assertEquals("Expression error, the string not ending", paraToken0.toString());
      assertEquals((-2048), location0.getRow());
      assertEquals("Expression error, the string not ending", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      StringBuilder stringBuilder1 = stringBuilder0.replace(0, 0, "nLYK.\"\"");
      assertNotNull(stringBuilder1);
      assertEquals("nLYK.\"\"", stringBuilder0.toString());
      assertEquals("nLYK.\"\"", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("nLYK.\"\"", stringBuilder0.toString());
      assertEquals("nLYK.\"\"", paraToken0.toString());
      assertEquals("nLYK.\"\"", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("nLYK.\"\"", stringBuilder0.toString());
      assertEquals("nLYK.\"\"", paraToken0.toString());
      assertEquals("nLYK.\"\"", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.scanString();
      assertFalse(boolean0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Dq?mYlWVBv)[wM6g\"]\"");
      assertNotNull(stringBuilder0);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-1892));
      assertNotNull(paraToken0);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"", paraToken0.value());
      
      StringBuilder stringBuilder1 = stringBuilder0.append('?');
      assertNotNull(stringBuilder1);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"?", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"?", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      StringBuilder stringBuilder2 = stringBuilder0.append(charArray0);
      assertNotNull(stringBuilder2);
      assertEquals(5, charArray0.length);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"??\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"??\u0000\u0000\u0000\u0000", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Location location0 = new Location("lG", 766);
      assertNotNull(location0);
      assertEquals(766, location0.getRow());
      assertEquals("lG", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"??\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"??\u0000\u0000\u0000\u0000", paraToken0.value());
      assertEquals("Dq?mYlWVBv)[wM6g\"]\"??\u0000\u0000\u0000\u0000", paraToken0.toString());
      assertEquals(766, location0.getRow());
      assertEquals("lG", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '\u0000'
         // Template: \"lG\". Line: 766
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      
      Location location0 = new Location("|", 0);
      assertNotNull(location0);
      assertEquals(0, location0.getRow());
      assertEquals("|", location0.getTemplateFile());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("|");
      assertNotNull(stringBuilder1);
      assertEquals("|", stringBuilder0.toString());
      assertEquals("|", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("|", stringBuilder0.toString());
      assertEquals("|", paraToken0.toString());
      assertEquals("|", paraToken0.value());
      assertEquals(0, location0.getRow());
      assertEquals("|", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: '|'
         // Template: \"|\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Sym sym0 = Sym.AND;
      Tok tok0 = new Tok(sym0, 0);
      assertNotNull(tok0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) tok0);
      assertNotNull(stringBuilder1);
      assertEquals("&&", stringBuilder0.toString());
      assertEquals("&&", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 0);
      assertNotNull(paraToken0);
      assertEquals("&&", stringBuilder0.toString());
      assertEquals("&&", stringBuilder1.toString());
      assertEquals("&&", paraToken0.toString());
      assertEquals("&&", paraToken0.value());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("&&", stringBuilder0.toString());
      assertEquals("&&", stringBuilder1.toString());
      assertEquals("&&", paraToken0.toString());
      assertEquals("&&", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertFalse(list0.contains(tok0));
      assertEquals("&&", stringBuilder0.toString());
      assertEquals("&&", stringBuilder1.toString());
      assertEquals("&&", paraToken0.toString());
      assertEquals("&&", paraToken0.value());
      assertEquals("", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(">=");
      assertNotNull(stringBuilder0);
      assertEquals(">=", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 167);
      assertNotNull(paraToken0);
      assertEquals(">=", stringBuilder0.toString());
      assertEquals(">=", paraToken0.value());
      assertEquals(">=", paraToken0.toString());
      
      Location location0 = new Location(">=", 167);
      assertNotNull(location0);
      assertEquals(">=", location0.getTemplateFile());
      assertEquals(167, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(">=", stringBuilder0.toString());
      assertEquals(">=", paraToken0.value());
      assertEquals(">=", paraToken0.toString());
      assertEquals(">=", location0.getTemplateFile());
      assertEquals(167, location0.getRow());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals(">=", stringBuilder0.toString());
      assertEquals(">=", paraToken0.value());
      assertEquals(">=", paraToken0.toString());
      assertEquals(">=", location0.getTemplateFile());
      assertEquals(167, location0.getRow());
      
      boolean boolean1 = exprLexer0.scanOperator();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(">=", stringBuilder0.toString());
      assertEquals(">=", paraToken0.value());
      assertEquals(">=", paraToken0.toString());
      assertEquals(">=", location0.getTemplateFile());
      assertEquals(167, location0.getRow());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("==");
      assertNotNull(stringBuilder0);
      assertEquals("==", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1877);
      assertNotNull(paraToken0);
      assertEquals("==", stringBuilder0.toString());
      assertEquals("==", paraToken0.toString());
      assertEquals("==", paraToken0.value());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, (Location) null);
      assertNotNull(exprLexer0);
      assertEquals("==", stringBuilder0.toString());
      assertEquals("==", paraToken0.toString());
      assertEquals("==", paraToken0.value());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("==", stringBuilder0.toString());
      assertEquals("==", paraToken0.toString());
      assertEquals("==", paraToken0.value());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '-';
      charArray0[3] = '-';
      exprLexer0.buf = charArray0;
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '\u0000'
         // String template line: 1165
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 68);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      charArray0[0] = 'x';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'x'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 63);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      charArray0[0] = 'u';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'u'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 63);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      charArray0[0] = 't';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 't'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 68);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      charArray0[0] = 'n';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'n'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 68);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      charArray0[1] = 'm';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      char char0 = exprLexer0.next();
      assertEquals('m', char0);
      assertEquals("null", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-1788), location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'm'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 65);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location(";* ", (-2454));
      assertNotNull(location0);
      assertEquals(";* ", location0.getTemplateFile());
      assertEquals((-2454), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(";* ", location0.getTemplateFile());
      assertEquals((-2454), location0.getRow());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals(";* ", location0.getTemplateFile());
      assertEquals((-2454), location0.getRow());
      assertSame(stringBuilder0, stringBuilder1);
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'j'
         // Template: \";* \". Line: -2454
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Location location0 = new Location("break", 0);
      assertNotNull(location0);
      assertEquals("break", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("K^&'=)r6o%Ig*i");
      assertNotNull(stringBuilder1);
      assertEquals("K^&'=)r6o%Ig*i", stringBuilder0.toString());
      assertEquals("K^&'=)r6o%Ig*i", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      assertNotNull(stringBuilder2);
      assertEquals("i*gI%o6r)='&^K", stringBuilder0.toString());
      assertEquals("i*gI%o6r)='&^K", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("i*gI%o6r)='&^K", stringBuilder0.toString());
      assertEquals("i*gI%o6r)='&^K", paraToken0.value());
      assertEquals("i*gI%o6r)='&^K", paraToken0.toString());
      assertEquals("break", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("i*gI%o6r)='&^K", stringBuilder0.toString());
      assertEquals("i*gI%o6r)='&^K", paraToken0.value());
      assertEquals("i*gI%o6r)='&^K", paraToken0.toString());
      assertEquals("break", location0.getTemplateFile());
      assertEquals(0, location0.getRow());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'i'
         // Template: \"break\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 63);
      assertNotNull(paraToken0);
      assertEquals("null", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-1788));
      assertNotNull(location0);
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      exprLexer0.buf = charArray0;
      assertEquals("null", paraToken0.toString());
      assertEquals((-1788), location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'd'
         // String template line: -1788
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("u`I");
      assertNotNull(stringBuilder0);
      assertEquals("u`I", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-10));
      assertNotNull(paraToken0);
      assertEquals("u`I", stringBuilder0.toString());
      assertEquals("u`I", paraToken0.toString());
      assertEquals("u`I", paraToken0.value());
      
      Location location0 = new Location((String) null, (-10));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-10), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("u`I", stringBuilder0.toString());
      assertEquals("u`I", paraToken0.toString());
      assertEquals("u`I", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals((-10), location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '`'
         // String template line: -10
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("nmoLJ");
      assertNotNull(stringBuilder0);
      assertEquals("nmoLJ", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(";R=RWUX ]c? EA{HU");
      assertNotNull(stringBuilder1);
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 22);
      assertNotNull(paraToken0);
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder1.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", paraToken0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", paraToken0.value());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, (Location) null);
      assertNotNull(exprLexer0);
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder1.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", paraToken0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", paraToken0.value());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", stringBuilder1.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", paraToken0.toString());
      assertEquals("nmoLJ;R=RWUX ]c? EA{HU", paraToken0.value());
      assertFalse(list0.isEmpty());
      assertEquals(11, list0.size());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Sym sym0 = Sym.OR;
      Tok tok0 = new Tok(sym0, 0);
      assertNotNull(tok0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) tok0);
      assertNotNull(stringBuilder1);
      assertEquals("||", stringBuilder0.toString());
      assertEquals("||", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 0);
      assertNotNull(paraToken0);
      assertEquals("||", stringBuilder0.toString());
      assertEquals("||", stringBuilder1.toString());
      assertEquals("||", paraToken0.toString());
      assertEquals("||", paraToken0.value());
      
      Location location0 = new Location("", 0);
      assertNotNull(location0);
      assertEquals(0, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("||", stringBuilder0.toString());
      assertEquals("||", stringBuilder1.toString());
      assertEquals("||", paraToken0.toString());
      assertEquals("||", paraToken0.value());
      assertEquals(0, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertFalse(list0.contains(tok0));
      assertEquals("||", stringBuilder0.toString());
      assertEquals("||", stringBuilder1.toString());
      assertEquals("||", paraToken0.toString());
      assertEquals("||", paraToken0.value());
      assertEquals(0, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Location location0 = new Location("CALL_IF_DEFINED", 'p');
      assertNotNull(location0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) location0);
      assertNotNull(stringBuilder1);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, (-1294));
      assertNotNull(paraToken0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
      assertEquals("CALL_IF_DEFINED", location0.getTemplateFile());
      assertEquals(112, location0.getRow());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", stringBuilder1.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.toString());
      assertEquals("\nTemplate: \"CALL_IF_DEFINED\". Line: 112", paraToken0.value());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'T'
         // Template: \"CALL_IF_DEFINED\". Line: 112
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(5, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("S\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals(5, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("S\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("S\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, (-1144));
      assertNotNull(paraToken0);
      assertEquals(5, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("S\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("S\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.value());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.toString());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Location location0 = new Location("", 43);
      assertNotNull(location0);
      assertEquals(43, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(5, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("S\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("S\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.value());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.toString());
      assertEquals(43, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = exprLexer0.fail();
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("S\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("S\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.value());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.toString());
      assertEquals(43, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = exprLexer0.scanOperator();
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("S\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("S\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.value());
      assertEquals("S\u0000\u0000\u0000\u0000", paraToken0.toString());
      assertEquals(43, location0.getRow());
      assertEquals("", location0.getTemplateFile());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PARA");
      assertNotNull(stringBuilder0);
      assertEquals("PARA", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 375);
      assertNotNull(paraToken0);
      assertEquals("PARA", stringBuilder0.toString());
      assertEquals("PARA", paraToken0.value());
      assertEquals("PARA", paraToken0.toString());
      
      Location location0 = new Location("PARA", 375);
      assertNotNull(location0);
      assertEquals(375, location0.getRow());
      assertEquals("PARA", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("PARA", stringBuilder0.toString());
      assertEquals("PARA", paraToken0.value());
      assertEquals("PARA", paraToken0.toString());
      assertEquals(375, location0.getRow());
      assertEquals("PARA", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("PARA", stringBuilder0.toString());
      assertEquals("PARA", paraToken0.value());
      assertEquals("PARA", paraToken0.toString());
      assertEquals(375, location0.getRow());
      assertEquals("PARA", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'P'
         // Template: \"PARA\". Line: 375
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("u`I");
      assertNotNull(stringBuilder0);
      assertEquals("u`I", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertNotNull(stringBuilder1);
      assertEquals("I`u", stringBuilder0.toString());
      assertEquals("I`u", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, (-10));
      assertNotNull(paraToken0);
      assertEquals("I`u", stringBuilder0.toString());
      assertEquals("I`u", stringBuilder1.toString());
      assertEquals("I`u", paraToken0.value());
      assertEquals("I`u", paraToken0.toString());
      
      Location location0 = new Location((String) null, (-10));
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals((-10), location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("I`u", stringBuilder0.toString());
      assertEquals("I`u", stringBuilder1.toString());
      assertEquals("I`u", paraToken0.value());
      assertEquals("I`u", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-10), location0.getRow());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("I`u", stringBuilder0.toString());
      assertEquals("I`u", stringBuilder1.toString());
      assertEquals("I`u", paraToken0.value());
      assertEquals("I`u", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals((-10), location0.getRow());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: 'I'
         // String template line: -10
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ELE0");
      assertNotNull(stringBuilder0);
      assertEquals("ELE0", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 2133);
      assertNotNull(paraToken0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      
      Location location0 = new Location((String) null, 105);
      assertNotNull(location0);
      assertEquals(105, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertEquals(105, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.fail();
      assertFalse(boolean0);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertEquals(105, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      boolean boolean1 = exprLexer0.scanOperator();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("ELE0", stringBuilder0.toString());
      assertEquals("ELE0", paraToken0.value());
      assertEquals("ELE0", paraToken0.toString());
      assertEquals(105, location0.getRow());
      assertNull(location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 65);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location(";* ", (-2454));
      assertNotNull(location0);
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '@'
         // Template: \";* \". Line: -2454
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("|(9KpU=PG3;x^e<d2<");
      assertNotNull(stringBuilder0);
      assertEquals("|(9KpU=PG3;x^e<d2<", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertNotNull(stringBuilder1);
      assertEquals("<2d<e^x;3GP=UpK9(|", stringBuilder0.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 65);
      assertNotNull(paraToken0);
      assertEquals("<2d<e^x;3GP=UpK9(|", stringBuilder0.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", stringBuilder1.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", paraToken0.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", paraToken0.value());
      
      Location location0 = new Location("|(9KpU=PG3;x^e<d2<", 65);
      assertNotNull(location0);
      assertEquals("|(9KpU=PG3;x^e<d2<", location0.getTemplateFile());
      assertEquals(65, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("<2d<e^x;3GP=UpK9(|", stringBuilder0.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", stringBuilder1.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", paraToken0.toString());
      assertEquals("<2d<e^x;3GP=UpK9(|", paraToken0.value());
      assertEquals("|(9KpU=PG3;x^e<d2<", location0.getTemplateFile());
      assertEquals(65, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '^'
         // Template: \"|(9KpU=PG3;x^e<d2<\". Line: 65
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Expression error, the string not ending");
      assertNotNull(stringBuilder0);
      assertEquals("Expression error, the string not ending", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "hM4}Fs}9X$!");
      assertNotNull(stringBuilder1);
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", stringBuilder0.toString());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, (-2782));
      assertNotNull(paraToken0);
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", stringBuilder0.toString());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", stringBuilder1.toString());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", paraToken0.value());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", paraToken0.toString());
      
      Location location0 = new Location("Expression error, the string not ending", (-2048));
      assertNotNull(location0);
      assertEquals((-2048), location0.getRow());
      assertEquals("Expression error, the string not ending", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", stringBuilder0.toString());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", stringBuilder1.toString());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", paraToken0.value());
      assertEquals("Expression error, the string not endinghM4}Fs}9X$!", paraToken0.toString());
      assertEquals((-2048), location0.getRow());
      assertEquals("Expression error, the string not ending", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error expression: 9X
         // Template: \"Expression error, the string not ending\". Line: -2048
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2698);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 2698);
      assertNotNull(stringBuilder1);
      assertEquals("2698.0", stringBuilder0.toString());
      assertEquals("2698.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertNotNull(stringBuilder2);
      assertEquals("0.8962", stringBuilder0.toString());
      assertEquals("0.8962", stringBuilder1.toString());
      assertEquals("0.8962", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 2576);
      assertNotNull(paraToken0);
      assertEquals("0.8962", stringBuilder0.toString());
      assertEquals("0.8962", stringBuilder1.toString());
      assertEquals("0.8962", paraToken0.value());
      assertEquals("0.8962", paraToken0.toString());
      
      Location location0 = new Location("rDx!@6}", 97);
      assertNotNull(location0);
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("0.8962", stringBuilder0.toString());
      assertEquals("0.8962", stringBuilder1.toString());
      assertEquals("0.8962", paraToken0.value());
      assertEquals("0.8962", paraToken0.toString());
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      
      char char0 = exprLexer0.skipDigit(2698);
      assertEquals('.', char0);
      assertEquals("0.8962", stringBuilder0.toString());
      assertEquals("0.8962", stringBuilder1.toString());
      assertEquals("0.8962", paraToken0.value());
      assertEquals("0.8962", paraToken0.toString());
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("0.8962", stringBuilder0.toString());
      assertEquals("0.8962", stringBuilder1.toString());
      assertEquals("0.8962", paraToken0.value());
      assertEquals("0.8962", paraToken0.toString());
      assertEquals(97, location0.getRow());
      assertEquals("rDx!@6}", location0.getTemplateFile());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(33);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Sym sym0 = Sym.ASSIGN;
      Tok tok0 = new Tok(sym0, "6AY.#@X^Ex}w", 14);
      assertNotNull(tok0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) tok0);
      assertNotNull(stringBuilder1);
      assertEquals("6AY.#@X^Ex}w", stringBuilder0.toString());
      assertEquals("6AY.#@X^Ex}w", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, (-918));
      assertNotNull(paraToken0);
      assertEquals("6AY.#@X^Ex}w", stringBuilder0.toString());
      assertEquals("6AY.#@X^Ex}w", stringBuilder1.toString());
      assertEquals("6AY.#@X^Ex}w", paraToken0.value());
      assertEquals("6AY.#@X^Ex}w", paraToken0.toString());
      
      Location location0 = new Location("null", 33);
      assertNotNull(location0);
      assertEquals("null", location0.getTemplateFile());
      assertEquals(33, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("6AY.#@X^Ex}w", stringBuilder0.toString());
      assertEquals("6AY.#@X^Ex}w", stringBuilder1.toString());
      assertEquals("6AY.#@X^Ex}w", paraToken0.value());
      assertEquals("6AY.#@X^Ex}w", paraToken0.toString());
      assertEquals("null", location0.getTemplateFile());
      assertEquals(33, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error expression: 6A
         // Template: \"null\". Line: 33
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-2715.374F));
      assertNotNull(stringBuilder1);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ParaToken paraToken0 = new ParaToken(stringBuilder1, 1165);
      assertNotNull(paraToken0);
      assertEquals("-2715.374", stringBuilder0.toString());
      assertEquals("-2715.374", stringBuilder1.toString());
      assertEquals("-2715.374", paraToken0.value());
      assertEquals("-2715.374", paraToken0.toString());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      assertNotNull(stringBuilder2);
      assertEquals("473.5172-", stringBuilder0.toString());
      assertEquals("473.5172-", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("473.5172-", stringBuilder0.toString());
      assertEquals("473.5172-", stringBuilder1.toString());
      assertEquals("473.5172-", paraToken0.toString());
      assertEquals("473.5172-", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("473.5172-", stringBuilder0.toString());
      assertEquals("473.5172-", stringBuilder1.toString());
      assertEquals("473.5172-", paraToken0.toString());
      assertEquals("473.5172-", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",/iZ{");
      assertNotNull(stringBuilder0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 113);
      assertNotNull(paraToken0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      assertEquals(",/iZ{", paraToken0.toString());
      assertEquals(",/iZ{", paraToken0.value());
      
      Location location0 = new Location(",/iZ{", 113);
      assertNotNull(location0);
      assertEquals(113, location0.getRow());
      assertEquals(",/iZ{", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals(",/iZ{", stringBuilder0.toString());
      assertEquals(",/iZ{", paraToken0.toString());
      assertEquals(",/iZ{", paraToken0.value());
      assertEquals(113, location0.getRow());
      assertEquals(",/iZ{", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: ''
         // Template: \",/iZ{\". Line: 113
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      
      Location location0 = new Location("break", 0);
      assertNotNull(location0);
      assertEquals(0, location0.getRow());
      assertEquals("break", location0.getTemplateFile());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("K^&'=)r6o%Ig*i");
      assertNotNull(stringBuilder1);
      assertEquals("K^&'=)r6o%Ig*i", stringBuilder0.toString());
      assertEquals("K^&'=)r6o%Ig*i", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((Object) stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("K^&'=)r6o%Ig*iK^&'=)r6o%Ig*i", stringBuilder0.toString());
      assertEquals("K^&'=)r6o%Ig*iK^&'=)r6o%Ig*i", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder0.reverse();
      assertNotNull(stringBuilder3);
      assertEquals("i*gI%o6r)='&^Ki*gI%o6r)='&^K", stringBuilder0.toString());
      assertEquals("i*gI%o6r)='&^Ki*gI%o6r)='&^K", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("i*gI%o6r)='&^Ki*gI%o6r)='&^K", stringBuilder0.toString());
      assertEquals("i*gI%o6r)='&^Ki*gI%o6r)='&^K", paraToken0.toString());
      assertEquals("i*gI%o6r)='&^Ki*gI%o6r)='&^K", paraToken0.value());
      assertEquals(0, location0.getRow());
      assertEquals("break", location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: '&'
         // Template: \"break\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("(Vg!l5fb}E1AF*3D#{");
      assertNotNull(stringBuilder1);
      assertEquals("(Vg!l5fb}E1AF*3D#{", stringBuilder0.toString());
      assertEquals("(Vg!l5fb}E1AF*3D#{", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("(Vg!l5fb}E1AF*3D#{", stringBuilder0.toString());
      assertEquals("(Vg!l5fb}E1AF*3D#{", paraToken0.toString());
      assertEquals("(Vg!l5fb}E1AF*3D#{", paraToken0.value());
      assertEquals(1165, location0.getRow());
      assertNull(location0.getTemplateFile());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '#'
         // String template line: 1165
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("(Vg!l5fb}E1AF*3D${");
      assertNotNull(stringBuilder1);
      assertEquals("(Vg!l5fb}E1AF*3D${", stringBuilder0.toString());
      assertEquals("(Vg!l5fb}E1AF*3D${", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("(Vg!l5fb}E1AF*3D${", stringBuilder0.toString());
      assertEquals("(Vg!l5fb}E1AF*3D${", paraToken0.value());
      assertEquals("(Vg!l5fb}E1AF*3D${", paraToken0.toString());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '$'
         // String template line: 1165
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 65);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Location location0 = new Location(";* ", (-2454));
      assertNotNull(location0);
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.scanOperator();
      assertFalse(boolean0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      assertEquals((-2454), location0.getRow());
      assertEquals(";* ", location0.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 3233);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.value());
      assertEquals("", paraToken0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((String) null);
      assertNotNull(stringBuilder1);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Location location0 = new Location("Vszqq", 101);
      assertNotNull(location0);
      assertEquals(101, location0.getRow());
      assertEquals("Vszqq", location0.getTemplateFile());
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", paraToken0.toString());
      assertEquals("null", paraToken0.value());
      assertEquals(101, location0.getRow());
      assertEquals("Vszqq", location0.getTemplateFile());
      
      boolean boolean0 = exprLexer0.scanId();
      assertTrue(boolean0);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", paraToken0.toString());
      assertEquals("null", paraToken0.value());
      assertEquals(101, location0.getRow());
      assertEquals("Vszqq", location0.getTemplateFile());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      assertNotNull(paraToken0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", paraToken0.toString());
      assertEquals("", paraToken0.value());
      
      Location location0 = new Location((String) null, 1165);
      assertNotNull(location0);
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertNotNull(stringBuilder1);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      assertNotNull(exprLexer0);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", paraToken0.toString());
      assertEquals("false", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      
      List<Tok> list0 = exprLexer0.scan();
      assertNotNull(list0);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", paraToken0.toString());
      assertEquals("false", paraToken0.value());
      assertNull(location0.getTemplateFile());
      assertEquals(1165, location0.getRow());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(";* ");
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 65);
      Location location0 = new Location(";* ", (-2454));
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      exprLexer0.scan();
      boolean boolean0 = exprLexer0.scanId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 0);
      Location location0 = new Location("", 0);
      stringBuilder0.append("i(zB ba0 >\"~5");
      stringBuilder0.append("i(zB ba0 >\"~5");
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      // Undeclared exception!
      try { 
        exprLexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression not support the char: '~'
         // Template: \"\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Location location0 = new Location("CALL_IF_DEFINED", 'p');
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) location0);
      ParaToken paraToken0 = new ParaToken(stringBuilder1, (-1294));
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      exprLexer0.scan();
      // Undeclared exception!
      try { 
        exprLexer0.retract(322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.jfinal.template.expr.ExprLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ParaToken paraToken0 = new ParaToken(stringBuilder0, 1165);
      Location location0 = new Location((String) null, 1165);
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      List<Tok> list0 = exprLexer0.scan();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 42);
      Location location0 = new Location((String) null, (-1183));
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      Sym sym0 = Sym.LBRACK;
      Tok tok0 = new Tok(sym0, (-2208));
      exprLexer0.addToken(tok0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 42);
      Location location0 = new Location((String) null, (-1183));
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      boolean boolean0 = exprLexer0.prepareNextScan();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ParaToken paraToken0 = new ParaToken((StringBuilder) null, 42);
      Location location0 = new Location((String) null, (-1183));
      ExprLexer exprLexer0 = new ExprLexer(paraToken0, location0);
      boolean boolean0 = exprLexer0.errorFollow();
      assertFalse(boolean0);
  }
}
