/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:21:38 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.IncDec;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class IncDec_ESTest extends IncDec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Sym sym0 = Sym.FLOAT;
      Id id0 = new Id("");
      Location location0 = new Location("", 229);
      IncDec incDec0 = new IncDec(sym0, false, id0, location0);
      // Undeclared exception!
      try { 
        incDec0.eval((Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.IncDec", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      Id id0 = new Id("bGP&UI");
      Location location0 = new Location("bGP&UI", 652);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Long long0 = new Long(652);
      linkedHashMap0.put("bGP&UI", long0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      IncDec incDec0 = new IncDec(sym0, true, id0, location0);
      Object object0 = incDec0.eval(scope0);
      assertEquals(652L, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Sym sym0 = Sym.DEC;
      Id id0 = new Id("bGP&UI");
      Location location0 = new Location("bGP&UI", 652);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Long long0 = new Long(652);
      linkedHashMap0.put("bGP&UI", long0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      IncDec incDec0 = new IncDec(sym0, false, id0, location0);
      Object object0 = incDec0.eval(scope0);
      assertEquals(651L, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Sym sym0 = Sym.INC;
      Id id0 = new Id("bGP&UI");
      Location location0 = new Location("bGP&UI", 652);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Long long0 = new Long(652);
      linkedHashMap0.put("bGP&UI", long0);
      Scope scope0 = new Scope(linkedHashMap0, (java.util.Map<String, Object>) null);
      IncDec incDec0 = new IncDec(sym0, false, id0, location0);
      Object object0 = incDec0.eval(scope0);
      assertEquals(653L, object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Sym sym0 = Sym.COMMA;
      Id id0 = new Id("B-mT");
      Location location0 = new Location("B-mT", (-16));
      IncDec incDec0 = new IncDec(sym0, false, id0, location0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("B-mT", "B-mT");
      Scope scope0 = new Scope(hashMap0, (java.util.Map<String, Object>) null);
      // Undeclared exception!
      try { 
        incDec0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // , operator only support int long float double and BigDecimal type
         // Template: \"B-mT\". Line: -16
         //
         verifyException("com.jfinal.template.expr.ast.IncDec", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Sym sym0 = Sym.COLON;
      Id id0 = new Id("");
      Location location0 = new Location("", 0);
      IncDec incDec0 = new IncDec(sym0, true, id0, location0);
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Scope scope0 = new Scope(hashMap0, (java.util.Map<String, Object>) null);
      // Undeclared exception!
      try { 
        incDec0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The target of : operator can not be null
         // Template: \"\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ast.IncDec", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Id id0 = new Id("bGP&UI");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Long long0 = new Long(647);
      linkedHashMap0.put("bGP&UI", long0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      Sym sym0 = Sym.DOT;
      Location location0 = new Location("bGP&UI", 647);
      IncDec incDec0 = new IncDec(sym0, false, id0, location0);
      // Undeclared exception!
      try { 
        incDec0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: .
         // Template: \"bGP&UI\". Line: 647
         //
         verifyException("com.jfinal.template.expr.ast.IncDec", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("WBoSm(KHo7ufoc", (-269));
      IncDec incDec0 = null;
      try {
        incDec0 = new IncDec(sym0, false, map0, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // + operator only supports identifiers
         // Template: \"WBoSm(KHo7ufoc\". Line: -269
         //
         verifyException("com.jfinal.template.expr.ast.IncDec", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Location location0 = new Location(" operator requires target to be operational", 2237);
      IncDec incDec0 = null;
      try {
        incDec0 = new IncDec((Sym) null, false, (Expr) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.IncDec", e);
      }
  }
}
