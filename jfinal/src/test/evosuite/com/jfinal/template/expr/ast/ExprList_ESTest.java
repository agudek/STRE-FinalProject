/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:28:34 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Compare;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Field;
import com.jfinal.template.expr.ast.Logic;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.expr.ast.NullExpr;
import com.jfinal.template.expr.ast.RangeArray;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ExprList_ESTest extends ExprList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.INT;
      Const const0 = Const.NULL;
      Location location0 = new Location("f", 6);
      linkedList0.add((Expr) const0);
      Logic logic0 = new Logic(sym0, const0, location0);
      linkedList0.add((Expr) logic0);
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getLastExpr();
      assertSame(expr0, logic0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      linkedList0.add((Expr) null);
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        exprList0.getExpr(41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = 41, length = 1
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        exprList0.getExpr(41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = 41, length = 0
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      linkedList0.add(expr0);
      ExprList exprList1 = new ExprList(linkedList0);
      int int0 = exprList1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      linkedList0.add(expr0);
      ExprList exprList1 = new ExprList(linkedList0);
      Expr[] exprArray0 = exprList1.getExprArray();
      assertEquals(1, exprArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      linkedList0.add((Expr) null);
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getExpr(0);
      assertNull(expr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      linkedList0.add((Expr) null);
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      assertNull(expr0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.FALSE;
      boolean boolean0 = linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<Compare, Field> hashMap0 = new HashMap<Compare, Field>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      Object object0 = exprList0.eval(scope0);
      assertFalse(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.INT;
      Const const0 = Const.TRUE;
      Location location0 = new Location("f", 0);
      Logic logic0 = new Logic(sym0, const0, location0);
      linkedList0.add((Expr) logic0);
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<Compare, Compare> hashMap0 = new HashMap<Compare, Compare>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        exprList0.evalExprList(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: INT
         // Template: \"f\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ast.Logic", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      linkedList0.add((Expr) null);
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        exprList0.evalExprList((Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      linkedHashMap0.put(map0, map0);
      linkedList0.add((Expr) map0);
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap0);
      // Undeclared exception!
      exprList0.eval(scope0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      linkedList0.add((Expr) null);
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<Compare, Field> hashMap0 = new HashMap<Compare, Field>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        exprList0.eval(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Const const0 = Const.NULL;
      HashMap<Compare, Field> hashMap0 = new HashMap<Compare, Field>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        const0.eval(scope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExprList exprList0 = null;
      try {
        exprList0 = new ExprList((List<Expr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      LinkedHashMap<NullExpr, RangeArray> linkedHashMap0 = new LinkedHashMap<NullExpr, RangeArray>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object[] objectArray0 = exprList0.evalExprList(scope0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      linkedList0.add(expr0);
      ExprList exprList1 = new ExprList(linkedList0);
      LinkedHashMap<NullExpr, RangeArray> linkedHashMap0 = new LinkedHashMap<NullExpr, RangeArray>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object[] objectArray0 = exprList1.evalExprList(scope0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.INT;
      Const const0 = Const.NULL;
      Location location0 = new Location("f", 6);
      linkedList0.add((Expr) const0);
      Logic logic0 = new Logic(sym0, const0, location0);
      linkedList0.add((Expr) logic0);
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<Compare, Field> hashMap0 = new HashMap<Compare, Field>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        exprList0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: INT
         // Template: \"f\". Line: 6
         //
         verifyException("com.jfinal.template.expr.ast.Logic", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      linkedList0.add(expr0);
      ExprList exprList1 = new ExprList(linkedList0);
      LinkedHashMap<NullExpr, RangeArray> linkedHashMap0 = new LinkedHashMap<NullExpr, RangeArray>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object object0 = exprList1.eval(scope0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      LinkedHashMap<NullExpr, RangeArray> linkedHashMap0 = new LinkedHashMap<NullExpr, RangeArray>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object object0 = exprList0.NULL_EXPR_LIST.eval(scope0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getLastExpr();
      assertNull(expr0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      linkedList0.add(expr0);
      ExprList exprList1 = new ExprList(linkedList0);
      Expr expr1 = exprList1.getFirstExpr();
      assertSame(expr1, expr0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr expr0 = exprList0.getActualExpr();
      linkedList0.add(expr0);
      ExprList exprList1 = new ExprList(linkedList0);
      Expr expr1 = exprList1.getExpr(0);
      assertSame(expr1, expr0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      // Undeclared exception!
      try { 
        exprList0.getExpr(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = 0, length = 0
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      // Undeclared exception!
      try { 
        exprList0.getExpr((-2313));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = -2313, length = 0
         //
         verifyException("com.jfinal.template.expr.ast.ExprList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.INT;
      Const const0 = Const.NULL;
      Location location0 = new Location("f", 6);
      linkedList0.add((Expr) const0);
      Logic logic0 = new Logic(sym0, const0, location0);
      linkedList0.add((Expr) logic0);
      ExprList exprList0 = new ExprList(linkedList0);
      exprList0.getActualExpr();
      assertEquals(2, exprList0.length());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getFirstExpr();
      assertNull(expr0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Expr[] exprArray0 = exprList0.getExprArray();
      assertEquals(0, exprArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      int int0 = exprList0.length();
      assertEquals(0, int0);
  }
}
