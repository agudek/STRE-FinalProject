/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:13:46 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.ForCtrl;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.Logic;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.expr.ast.NullSafe;
import com.jfinal.template.expr.ast.Ternary;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class NullSafe_ESTest extends NullSafe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Id id0 = new Id("com.jfinal.template.expr.ast.NullSafe");
      ForCtrl forCtrl0 = new ForCtrl(id0, id0, (Location) null);
      Ternary ternary0 = new Ternary(forCtrl0, forCtrl0, forCtrl0, (Location) null);
      NullSafe nullSafe0 = new NullSafe(ternary0, ternary0, (Location) null);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        nullSafe0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The eval(Scope scope) method can not be invoked
         //
         verifyException("com.jfinal.template.expr.ast.ForCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("", 1);
      NullSafe nullSafe0 = new NullSafe(map0, map0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Sym sym0 = Sym.AND;
      Logic logic0 = new Logic(sym0, map0, map0, nullSafe0.location);
      Ternary ternary0 = new Ternary(nullSafe0, logic0, logic0, nullSafe0.location);
      scope0.set(ternary0, map0);
      // Undeclared exception!
      try { 
        nullSafe0.eval(scope0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      Expr expr0 = exprList0.getActualExpr();
      Location location0 = new Location((String) null, 51);
      NullSafe nullSafe0 = new NullSafe(expr0, expr0, location0);
      // Undeclared exception!
      try { 
        nullSafe0.eval((Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.NullSafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      Map map0 = new Map((LinkedHashMap<Object, Expr>) null);
      Location location0 = new Location("k8b!Q>/1FPFq,//e5Rv", 0);
      NullSafe nullSafe0 = new NullSafe(map0, map0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        nullSafe0.eval(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashMap<Integer, Expr> linkedHashMap0 = new LinkedHashMap<Integer, Expr>();
      LinkedHashMap<Object, Expr> linkedHashMap1 = new LinkedHashMap<Object, Expr>(linkedHashMap0);
      Map map0 = new Map(linkedHashMap1);
      LinkedHashMap<String, Object> linkedHashMap2 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap1, linkedHashMap2);
      Location location0 = new Location("aM5;J:)T):=Y~iTqK[", (-444));
      NullSafe nullSafe0 = new NullSafe(map0, map0, location0);
      scope0.setGlobal((Object) null, scope0);
      // Undeclared exception!
      try { 
        nullSafe0.eval(scope0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("", 550);
      NullSafe nullSafe0 = new NullSafe(exprList0, exprList0, location0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Object object0 = nullSafe0.eval(scope0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedHashMap<Integer, Expr> linkedHashMap0 = new LinkedHashMap<Integer, Expr>();
      LinkedHashMap<Object, Expr> linkedHashMap1 = new LinkedHashMap<Object, Expr>(linkedHashMap0);
      Map map0 = new Map(linkedHashMap1);
      LinkedHashMap<String, Object> linkedHashMap2 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap1, linkedHashMap2);
      Location location0 = new Location("aM5;J:)T):=Y~iTqK[", (-444));
      NullSafe nullSafe0 = new NullSafe(map0, map0, location0);
      LinkedHashMap linkedHashMap3 = (LinkedHashMap)nullSafe0.eval(scope0);
      assertTrue(linkedHashMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location(";,#f'f", (-1466));
      NullSafe nullSafe0 = null;
      try {
        nullSafe0 = new NullSafe((Expr) null, exprList0, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The expression on the left side of null coalescing and safe access operator \"??\" can not be blank
         // Template: \";,#f'f\". Line: -1466
         //
         verifyException("com.jfinal.template.expr.ast.NullSafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Const const0 = Const.NULL;
      Location location0 = new Location("", 0);
      NullSafe nullSafe0 = new NullSafe(const0, (Expr) null, location0);
      LinkedHashMap<Integer, String> linkedHashMap0 = new LinkedHashMap<Integer, String>();
      Scope scope0 = new Scope(linkedHashMap0, (java.util.Map<String, Object>) null);
      Object object0 = nullSafe0.eval(scope0);
      assertNull(object0);
  }
}
