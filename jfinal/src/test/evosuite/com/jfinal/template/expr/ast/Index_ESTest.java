/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:31:26 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Array;
import com.jfinal.template.expr.ast.Assign;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Field;
import com.jfinal.template.expr.ast.Index;
import com.jfinal.template.expr.ast.Logic;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.expr.ast.NullExpr;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Index_ESTest extends Index_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sym sym0 = Sym.AND;
      Const const0 = new Const(sym0, sym0);
      Location location0 = new Location("", 1);
      Assign assign0 = new Assign("", const0, location0);
      Logic logic0 = new Logic(sym0, assign0, const0, location0);
      Index index0 = new Index(logic0, assign0, location0);
      HashMap<Expr, Integer> hashMap0 = new HashMap<Expr, Integer>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only the list array and map is supported by index access
         // Template: \"\". Line: 1
         //
         verifyException("com.jfinal.template.expr.ast.Index", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      linkedHashMap0.put("STR", map0);
      Location location0 = new Location("STR", 0);
      Assign assign0 = new Assign("", map0, location0);
      Index index0 = new Index(assign0, map0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map map0 = new Map((LinkedHashMap<Object, Expr>) null);
      Location location0 = new Location("array/list/map and their index can not be null", 1913);
      Index index0 = new Index(map0, map0, location0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, linkedHashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Const const0 = Const.FALSE;
      Location location0 = new Location("", (-1));
      Field field0 = new Field(const0, "`gC^liQ7S1D", location0);
      Index index0 = new Index(const0, field0, location0);
      // Undeclared exception!
      try { 
        index0.eval((Scope) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.expr.ast.MethodKit
         //
         verifyException("com.jfinal.template.expr.ast.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("@5_'\"gJAnq&d,@.0", (-1));
      Assign assign0 = new Assign("", map0, location0);
      Index index0 = new Index(assign0, assign0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expr[] exprArray0 = new Expr[0];
      Location location0 = new Location("Zlj[qS\"xSa7U& E=", (-177));
      Array array0 = new Array(exprArray0, location0);
      Index index0 = new Index(array0, array0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index of list must be integer
         // Template: \"Zlj[qS\"xSa7U& E=\". Line: -177
         //
         verifyException("com.jfinal.template.expr.ast.Index", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location(",", (-953));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Index index0 = new Index(map0, exprList0, location0);
      Object object0 = index0.eval(scope0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Const const0 = Const.TRUE;
      NullExpr nullExpr0 = NullExpr.me;
      Location location0 = new Location("|D.:uin:N4UAJ#5=L", 542);
      Index index0 = new Index(const0, nullExpr0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, hashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index of list and array can not be null
         // Template: \"|D.:uin:N4UAJ#5=L\". Line: 542
         //
         verifyException("com.jfinal.template.expr.ast.Index", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Index index0 = new Index(nullExpr0, nullExpr0, (Location) null);
      Scope scope0 = new Scope(hashMap0, hashMap0);
      // Undeclared exception!
      try { 
        index0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index access operation target can not be null
         //
         verifyException("com.jfinal.template.expr.ast.Index", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Const const0 = Const.FALSE;
      Location location0 = new Location("Fr&sr&v1", (-13));
      Index index0 = null;
      try {
        index0 = new Index(const0, (Expr) null, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // array/list/map and their index can not be null
         // Template: \"Fr&sr&v1\". Line: -13
         //
         verifyException("com.jfinal.template.expr.ast.Index", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Location location0 = new Location("", 18);
      Index index0 = null;
      try {
        index0 = new Index((Expr) null, (Expr) null, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // array/list/map and their index can not be null
         // Template: \"\". Line: 18
         //
         verifyException("com.jfinal.template.expr.ast.Index", e);
      }
  }
}
