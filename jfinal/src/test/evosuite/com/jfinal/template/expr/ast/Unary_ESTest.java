/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:17:01 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Field;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.expr.ast.NullExpr;
import com.jfinal.template.expr.ast.Unary;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Unary_ESTest extends Unary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sym sym0 = Sym.ASSIGN;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      Location location0 = new Location("", 2216);
      Unary unary0 = new Unary(sym0, const0, location0);
      String string0 = unary0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("", 1);
      Unary unary0 = new Unary(sym0, map0, location0);
      linkedHashMap0.put(location0, map0);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      // Undeclared exception!
      unary0.eval(scope0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      Const const0 = Const.NULL;
      Location location0 = new Location("<,V@_~", 14);
      Unary unary0 = new Unary(sym0, const0, location0);
      // Undeclared exception!
      try { 
        unary0.eval((Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sym sym0 = Sym.INT;
      Const const0 = Const.FALSE;
      Location location0 = new Location("e~kQ|.N4cq", (-1735));
      Field field0 = new Field(const0, "e~kQ|.N4cq", location0);
      Unary unary0 = new Unary(sym0, field0, location0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        unary0.eval(scope0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.expr.ast.MethodKit
         //
         verifyException("com.jfinal.template.expr.ast.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        const0.eval(scope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sym sym0 = Sym.LBRACK;
      Location location0 = new Location("The parameter of \"", 0);
      Unary unary0 = null;
      try {
        unary0 = new Unary(sym0, (Expr) null, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of \"[\" operator can not be blank
         // Template: \"The parameter of \"\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sym sym0 = Sym.NOT;
      Const const0 = Const.TRUE;
      Location location0 = new Location(" operator only supports identifiers", (-1386));
      Unary unary0 = new Unary(sym0, const0, location0);
      Const const1 = (Const)unary0.toConstIfPossible();
      assertTrue(const1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sym sym0 = Sym.NOT;
      Object object0 = new Object();
      Const const0 = new Const(sym0, object0);
      Location location0 = new Location(" operator only supports identifiers", (-228));
      Unary unary0 = new Unary(sym0, const0, location0);
      Expr expr0 = unary0.toConstIfPossible();
      assertSame(expr0, unary0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      Const const0 = Const.NULL;
      Unary unary0 = new Unary(sym0, const0, const0.location);
      Expr expr0 = unary0.toConstIfPossible();
      assertSame(unary0, expr0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sym sym0 = Sym.NOT;
      Const const0 = Const.FALSE;
      Unary unary0 = new Unary(sym0, const0, const0.location);
      Const const1 = (Const)unary0.toConstIfPossible();
      assertTrue(const1.getBoolean());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sym sym0 = Sym.ASSIGN;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      Location location0 = new Location("", 2216);
      Unary unary0 = new Unary(sym0, const0, location0);
      Expr expr0 = unary0.toConstIfPossible();
      assertSame(unary0, expr0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      Location location0 = new Location("com.jfinal.template.expr.ast.Expr", (-19));
      Unary unary0 = new Unary(sym0, const0, location0);
      Const const1 = (Const)unary0.toConstIfPossible();
      assertFalse(const1.isFalse());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      Location location0 = new Location("g", 2);
      Unary unary0 = new Unary(sym0, const0, location0);
      Expr expr0 = unary0.toConstIfPossible();
      assertSame(expr0, unary0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("BpW$;`?'**MO", (-349));
      Sym sym0 = Sym.NOT;
      Unary unary0 = new Unary(sym0, nullExpr0, location0);
      Expr expr0 = unary0.toConstIfPossible();
      assertSame(unary0, expr0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Location location0 = new Location("g", 2);
      Unary unary0 = new Unary(sym0, const0, location0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      Object object0 = unary0.eval(scope0);
      assertEquals((-1.0F), object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Location location0 = new Location("com.jfinal.template.expr.ast.Expr", (-19));
      Unary unary0 = new Unary(sym0, const0, location0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      Object object0 = unary0.eval(scope0);
      assertEquals(1.0F, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sym sym0 = Sym.NOT;
      Const const0 = Const.FALSE;
      Unary unary0 = new Unary(sym0, const0, const0.location);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        unary0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ! operator only support int long float double BigDecimal type
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("BpW$;`?'**MO", (-349));
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Sym sym0 = Sym.NOT;
      Unary unary0 = new Unary(sym0, nullExpr0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        unary0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of \"!\" operator can not be blank
         // Template: \"BpW$;`?'**MO\". Line: -349
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sym sym0 = Sym.ASSIGN;
      Float float0 = new Float(1.0F);
      Const const0 = new Const(sym0, float0);
      Location location0 = new Location("", 2216);
      Unary unary0 = new Unary(sym0, const0, location0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        unary0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: =
         // Template: \"\". Line: 2216
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Location location0 = new Location(" \">=\" ", 1503);
      Unary unary0 = null;
      try {
        unary0 = new Unary((Sym) null, (Expr) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullExpr nullExpr0 = (NullExpr)ExprList.NULL_EXPR;
      Location location0 = new Location("BpW$;`?'**MO", (-349));
      Unary unary0 = new Unary((Sym) null, nullExpr0, location0);
      // Undeclared exception!
      try { 
        unary0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Unary", e);
      }
  }
}
