/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:47:42 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Arith;
import com.jfinal.template.expr.ast.Array;
import com.jfinal.template.expr.ast.Assign;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.Index;
import com.jfinal.template.expr.ast.Logic;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.expr.ast.Method;
import com.jfinal.template.expr.ast.Unary;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Map_ESTest extends Map_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Scope scope0 = new Scope(linkedHashMap0, (java.util.Map<String, Object>) null);
      Scope scope1 = new Scope(scope0);
      Sym sym0 = Sym.DOT;
      Sym sym1 = Sym.LE;
      Location location0 = new Location("", 1);
      Unary unary0 = new Unary(sym1, map0, location0);
      linkedHashMap0.put(unary0, unary0);
      Location location1 = new Location((String) null, 0);
      Arith arith0 = new Arith(sym0, map0, map0, location1);
      arith0.location = location1;
      scope1.removeGlobal(arith0);
      scope1.setData((java.util.Map) null);
      // Undeclared exception!
      try { 
        map0.eval(scope1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Map map0 = new Map((LinkedHashMap<Object, Expr>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, hashMap0);
      // Undeclared exception!
      try { 
        map0.eval(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Scope scope1 = new Scope(scope0);
      Sym sym0 = Sym.LBRACK;
      Id id0 = new Id("com.jfinal.template.expr.ast.Map");
      hashMap0.put("com.jfinal.template.expr.ast.Map", id0);
      Location location0 = new Location((String) null, 0);
      scope1.remove(sym0);
      location0.toString();
      hashMap0.put("D::", scope1);
      Arith arith0 = new Arith(sym0, map0, map0, location0);
      Object object0 = new Object();
      scope0.set("\nString template line: 0", object0);
      scope1.set(arith0, sym0);
      scope1.removeGlobal((Object) null);
      // Undeclared exception!
      try { 
        map0.eval(scope1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.jfinal.template.expr.ast.Expr
         //
         verifyException("com.jfinal.template.expr.ast.Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Object object0 = map0.eval((Scope) null);
      Location location0 = new Location("i0qS0", 0);
      map0.location = location0;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      hashMap0.put("^do", object0);
      map0.eval(scope0);
      scope0.setData(hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.putIfAbsent("^do", integer0);
      Const const0 = Const.NULL;
      linkedHashMap0.put(const0, const0);
      map0.eval((Scope) null);
      map0.eval(scope0);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)map0.eval((Scope) null);
      assertFalse(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      HashMap<Assign, Method> hashMap0 = new HashMap<Assign, Method>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      hashMap1.put("", "");
      Object object0 = map0.eval(scope0);
      Scope scope1 = new Scope(scope0);
      scope0.setGlobal(object0, map0);
      map0.eval(scope1);
      Object object1 = map0.eval(scope1);
      assertTrue(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.remove(object0);
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Scope scope1 = new Scope(scope0);
      LinkedHashMap<Array, Object> linkedHashMap1 = new LinkedHashMap<Array, Object>();
      scope0.setRootData(linkedHashMap1);
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      scope1.setGlobal(linkedHashMap1, hashMap0);
      scope0.set(exprList0, exprList0);
      scope1.removeGlobal(exprList0);
      map0.eval(scope0);
      Object object1 = map0.eval(scope1);
      scope1.removeLocal(object1);
      map0.eval(scope1);
      map0.eval(scope1);
      map0.eval(scope1);
      Integer integer0 = new Integer(1052);
      scope0.removeLocal(integer0);
      Object object2 = map0.eval(scope1);
      map0.eval(scope1);
      scope0.removeLocal(map0);
      map0.eval(scope0);
      map0.eval(scope0);
      map0.eval(scope1);
      Object object3 = map0.eval((Scope) null);
      assertTrue(object3.equals((Object)object2));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Map map0 = new Map((LinkedHashMap<Object, Expr>) null);
      LinkedHashMap<Map, String> linkedHashMap0 = new LinkedHashMap<Map, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Object object0 = new Object();
      linkedHashMap1.get(object0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Scope scope1 = new Scope(scope0);
      scope1.removeGlobal((Object) null);
      scope0.set((Object) null, scope1);
      // Undeclared exception!
      try { 
        map0.eval(scope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      String string0 = "";
      Map map0 = new Map(linkedHashMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Scope scope1 = new Scope(scope0);
      Map map1 = new Map(linkedHashMap0);
      Location location0 = new Location("YemyLSTyLwlP", 0);
      Index index0 = new Index(map0, map0, location0);
      scope1.setLocal(map1, index0);
      map0.eval(scope1);
      Scope scope2 = null;
      try {
        scope2 = new Scope((Scope) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parent can not be null.
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Location location0 = map0.location;
      map0.location = null;
      Method method0 = null;
      try {
        method0 = new Method(map0, "", (Location) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.expr.ast.MethodKit
         //
         verifyException("com.jfinal.template.expr.ast.Method", e);
      }
  }
}
