/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:21:57 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Arith;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Field;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.Map;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Arith_ESTest extends Arith_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Double double0 = new Double(0.0);
      linkedHashMap1.put("7agw(`pjeE]HZC", double0);
      Sym sym0 = Sym.MOD;
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      Object object0 = arith0.eval(scope0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Double double0 = new Double(9.023412721627324);
      linkedHashMap1.put("7agw(`pjeE]HZC", double0);
      Sym sym0 = Sym.MUL;
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      Object object0 = arith0.eval(scope0);
      assertEquals(81.42197714482583, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      linkedHashMap0.put(sym0, map0);
      Location location0 = new Location("p!8S1tcN8DCw+@#", 1938);
      Arith arith0 = new Arith(sym0, map0, map0, location0);
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap1, linkedHashMap1);
      // Undeclared exception!
      try { 
        arith0.eval(scope0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sym sym0 = Sym.TRUE;
      LinkedHashMap<Object, Expr> linkedHashMap0 = new LinkedHashMap<Object, Expr>();
      Map map0 = new Map(linkedHashMap0);
      Location location0 = new Location("", 0);
      Field field0 = new Field(map0, "The expression on the right side of an assignment expression can not be null", location0);
      Arith arith0 = new Arith(sym0, field0, field0, location0);
      // Undeclared exception!
      try { 
        arith0.eval((Scope) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.expr.ast.MethodKit
         //
         verifyException("com.jfinal.template.expr.ast.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sym sym0 = Sym.INC;
      Byte byte0 = new Byte((byte)127);
      Const const0 = new Const(sym0, byte0);
      Location location0 = new Location("JX", (byte)127);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Sym sym1 = Sym.MOD;
      Arith arith0 = new Arith(sym1, const0, const0, location0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Scope scope0 = new Scope(hashMap1, hashMap0);
      Object object0 = arith0.eval(scope0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sym sym0 = Sym.INC;
      Byte byte0 = new Byte((byte)127);
      Const const0 = new Const(sym0, byte0);
      Location location0 = new Location("D6", (byte)127);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Sym sym1 = Sym.DIV;
      Arith arith0 = new Arith(sym1, const0, const0, location0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Scope scope0 = new Scope(hashMap1, hashMap0);
      Object object0 = arith0.eval(scope0);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Sym sym0 = Sym.MUL;
      Float float0 = new Float(0.0);
      linkedHashMap1.put("7agw(`pjeE]HZC", float0);
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      Object object0 = arith0.eval(scope0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sym sym0 = Sym.INC;
      Byte byte0 = new Byte((byte)127);
      Const const0 = new Const(sym0, byte0);
      Location location0 = new Location("D46", (byte)127);
      Sym sym1 = Sym.MUL;
      Arith arith0 = new Arith(sym1, const0, const0, location0);
      Object object0 = arith0.eval((Scope) null);
      assertEquals(16129, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Double double0 = new Double(1.0);
      linkedHashMap1.put("7agw(`pjeE]HZC", double0);
      Sym sym0 = Sym.SUB;
      Location location0 = new Location("7agw(`pjeE]HZC", 36);
      Arith arith0 = new Arith(sym0, id0, id0, location0);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Object object0 = arith0.eval(scope0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sym sym0 = Sym.RANGE;
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Float float0 = new Float(0.0);
      linkedHashMap1.put("7agw(`pjeE]HZC", float0);
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      // Undeclared exception!
      try { 
        arith0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operator: ..
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Const const0 = new Const(sym0, bigDecimal0);
      Location location0 = new Location((String) null, (-2471));
      Arith arith0 = new Arith(sym0, const0, const0, location0);
      LinkedHashMap<Float, String> linkedHashMap0 = new LinkedHashMap<Float, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      // Undeclared exception!
      try { 
        arith0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null
         // String template line: -2471
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sym sym0 = Sym.LT;
      Const const0 = Const.TRUE;
      Location location0 = new Location("3", 1723);
      Arith arith0 = new Arith(sym0, const0, const0, location0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        arith0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation type: java.lang.Boolean < java.lang.Boolean
         // Template: \"3\". Line: 1723
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sym sym0 = Sym.TRUE;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap0);
      Location location0 = new Location("=&(}", (-350));
      Const const0 = new Const(sym0, "=&(}");
      Arith arith0 = new Arith(sym0, exprList0, const0, location0);
      Object object0 = arith0.eval(scope0);
      assertEquals("null=&(}", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sym sym0 = Sym.TRUE;
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap0);
      Location location0 = new Location("=&(}", (-350));
      Const const0 = new Const(sym0, "=&(}");
      Arith arith0 = new Arith(sym0, const0, exprList0, location0);
      Object object0 = arith0.eval(scope0);
      assertEquals("=&(}null", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Double double0 = new Double(1.0);
      linkedHashMap1.put("7agw(`pjeE]HZC", double0);
      Sym sym0 = Sym.MOD;
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      Object object0 = arith0.eval(scope0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Double double0 = new Double(1.264373361355077);
      linkedHashMap1.put("7agw(`pjeE]HZC", double0);
      Sym sym0 = Sym.DIV;
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      Object object0 = arith0.eval(scope0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      Byte byte0 = new Byte((byte)127);
      Const const0 = new Const(sym0, byte0);
      Location location0 = new Location("D6", (byte)127);
      Arith arith0 = new Arith(sym0, const0, const0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, hashMap0);
      Object object0 = arith0.eval(scope0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sym sym0 = Sym.ADD;
      Byte byte0 = new Byte((byte)127);
      Const const0 = new Const(sym0, byte0);
      Location location0 = new Location("D6", (byte)127);
      Arith arith0 = new Arith(sym0, const0, const0, location0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, hashMap0);
      Object object0 = arith0.eval(scope0);
      assertEquals(254, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      Byte byte0 = new Byte((byte)105);
      Const const0 = new Const(sym0, byte0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope((java.util.Map) null, hashMap0);
      Const const1 = Const.NULL;
      Arith arith0 = new Arith(sym0, const0, const1, (Location) null);
      // Undeclared exception!
      try { 
        arith0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation type: java.lang.Byte - null
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("", 23);
      Sym sym0 = Sym.AND;
      Arith arith0 = null;
      try {
        arith0 = new Arith(sym0, exprList0, (Expr) null, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The target of \"&&\" operator can not be blank
         // Template: \"\". Line: 23
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Location location0 = new Location("Unsupported operation type: ", 0);
      Arith arith0 = null;
      try {
        arith0 = new Arith((Sym) null, (Expr) null, (Expr) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Id id0 = new Id("7agw(`pjeE]HZC");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Sym sym0 = Sym.MUL;
      Arith arith0 = new Arith(sym0, id0, id0, (Location) null);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        arith0.eval(scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported operation type: null * null
         //
         verifyException("com.jfinal.template.expr.ast.Arith", e);
      }
  }
}
