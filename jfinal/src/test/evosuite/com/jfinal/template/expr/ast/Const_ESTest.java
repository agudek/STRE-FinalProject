/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:39:53 GMT 2018
 */

package com.jfinal.template.expr.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Const_ESTest extends Const_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Sym sym0 = Sym.LBRACK;
      Const const0 = new Const(sym0, integer0);
      boolean boolean0 = const0.isNumber();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Const const0 = Const.TRUE;
      Object object0 = const0.getValue();
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Const const0 = Const.NULL;
      String string0 = const0.getStr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sym sym0 = Sym.LONG;
      Const const0 = new Const(sym0, ">");
      String string0 = const0.getStr();
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sym sym0 = Sym.RPAREN;
      Double double0 = new Double(2211.17184);
      Const const0 = new Const(sym0, double0);
      Number number0 = const0.getNumber();
      assertEquals(2211.17184, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sym sym0 = Sym.ID;
      Long long0 = new Long(0L);
      Const const0 = new Const(sym0, long0);
      Number number0 = const0.getNumber();
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sym sym0 = Sym.FLOAT;
      Short short0 = new Short((short) (-3248));
      Const const0 = new Const(sym0, short0);
      Number number0 = const0.getNumber();
      assertEquals((short) (-3248), number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Const const0 = Const.NULL;
      Long long0 = const0.getLong();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sym sym0 = Sym.RBRACE;
      Long long0 = new Long(0L);
      Const const0 = new Const(sym0, long0);
      Long long1 = const0.getLong();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sym sym0 = Sym.SEMICOLON;
      Long long0 = new Long(4203L);
      Const const0 = new Const(sym0, long0);
      Long long1 = const0.getLong();
      assertEquals(4203L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sym sym0 = Sym.STR;
      Long long0 = new Long((-1L));
      Const const0 = new Const(sym0, long0);
      Long long1 = const0.getLong();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sym sym0 = Sym.ASSIGN;
      Integer integer0 = new Integer(0);
      Const const0 = new Const(sym0, integer0);
      Integer integer1 = const0.getInt();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sym sym0 = Sym.NOTEQUAL;
      Integer integer0 = new Integer((-2722));
      Const const0 = new Const(sym0, integer0);
      Integer integer1 = const0.getInt();
      assertEquals((-2722), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sym sym0 = Sym.INC;
      Integer integer0 = new Integer(939);
      Const const0 = new Const(sym0, integer0);
      Integer integer1 = const0.getInt();
      assertEquals(939, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sym sym0 = Sym.GE;
      Float float0 = new Float(0.0);
      Const const0 = new Const(sym0, float0);
      Float float1 = const0.getFloat();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sym sym0 = Sym.RANGE;
      Float float0 = new Float(1.0);
      Const const0 = new Const(sym0, float0);
      Float float1 = const0.getFloat();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sym sym0 = Sym.DIV;
      Float float0 = new Float((-1072.8031));
      Const const0 = new Const(sym0, float0);
      Float float1 = const0.getFloat();
      assertEquals((-1072.8031F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sym sym0 = Sym.SUB;
      Double double0 = new Double(1047.369);
      Const const0 = new Const(sym0, double0);
      Double double1 = const0.getDouble();
      assertEquals(1047.369, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sym sym0 = Sym.LE;
      Double double0 = new Double(0.0);
      Const const0 = new Const(sym0, double0);
      Double double1 = const0.getDouble();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sym sym0 = Sym.RBRACE;
      Double double0 = new Double((-225.02085));
      Const const0 = new Const(sym0, double0);
      Double double1 = const0.getDouble();
      assertEquals((-225.02085), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sym sym0 = Sym.LBRACE;
      Double double0 = new Double((-4622.8738));
      Const const0 = new Const(sym0, double0);
      Double double1 = const0.getDouble();
      assertEquals((-4622.8738), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Const const0 = Const.NULL;
      Boolean boolean0 = const0.getBoolean();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Const const0 = Const.TRUE;
      Boolean boolean0 = const0.getBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Const const0 = Const.TRUE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Scope scope0 = new Scope(hashMap0, (java.util.Map<String, Object>) null);
      Object object0 = const0.eval(scope0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sym sym0 = Sym.MUL;
      Short short0 = new Short((short)3157);
      Const const0 = new Const(sym0, short0);
      // Undeclared exception!
      try { 
        const0.getStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("com.jfinal.template.expr.ast.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sym sym0 = Sym.NULL_SAFE;
      Const const0 = new Const(sym0, sym0);
      // Undeclared exception!
      try { 
        const0.getInt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.jfinal.template.expr.Sym cannot be cast to java.lang.Integer
         //
         verifyException("com.jfinal.template.expr.ast.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Const const0 = Const.TRUE;
      // Undeclared exception!
      try { 
        const0.getFloat();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Float
         //
         verifyException("com.jfinal.template.expr.ast.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Const const0 = Const.TRUE;
      // Undeclared exception!
      try { 
        const0.getDouble();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Double
         //
         verifyException("com.jfinal.template.expr.ast.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Sym sym0 = Sym.SEMICOLON;
      Long long0 = new Long(1L);
      Const const0 = new Const(sym0, long0);
      // Undeclared exception!
      try { 
        const0.getBoolean();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.Boolean
         //
         verifyException("com.jfinal.template.expr.ast.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Sym sym0 = Sym.NULL_SAFE;
      Const const0 = new Const(sym0, sym0);
      String string0 = const0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Const const0 = Const.NULL;
      String string0 = const0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Sym sym0 = Sym.DOUBLE;
      Const const0 = new Const(sym0, sym0);
      boolean boolean0 = const0.isDouble();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      Const const0 = new Const(sym0, sym0);
      boolean boolean0 = const0.isDouble();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Sym sym0 = Sym.FLOAT;
      Short short0 = new Short((short) (-3248));
      Const const0 = new Const(sym0, short0);
      boolean boolean0 = const0.isFloat();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Const const0 = Const.NULL;
      boolean boolean0 = const0.isFloat();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Sym sym0 = Sym.LONG;
      Const const0 = new Const(sym0, "");
      boolean boolean0 = const0.isLong();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      Const const0 = new Const(sym0, sym0);
      boolean boolean0 = const0.isLong();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Sym sym0 = Sym.INT;
      Const const0 = new Const(sym0, "");
      boolean boolean0 = const0.isInt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Const const0 = Const.NULL;
      boolean boolean0 = const0.isInt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Const const0 = Const.NULL;
      boolean boolean0 = const0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      Const const0 = new Const(sym0, sym0);
      boolean boolean0 = const0.isNull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Const const0 = Const.NULL;
      boolean boolean0 = const0.isBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Const const0 = Const.FALSE;
      boolean boolean0 = const0.isBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Const const0 = Const.TRUE;
      boolean boolean0 = const0.isBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Const const0 = Const.FALSE;
      boolean boolean0 = const0.isFalse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Const const0 = Const.NULL;
      boolean boolean0 = const0.isFalse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Const const0 = Const.TRUE;
      boolean boolean0 = const0.isTrue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Const const0 = Const.FALSE;
      boolean boolean0 = const0.isTrue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Sym sym0 = Sym.STR;
      Const const0 = new Const(sym0, sym0);
      boolean boolean0 = const0.isStr();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Const const0 = Const.NULL;
      boolean boolean0 = const0.isStr();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Const const0 = Const.NULL;
      Integer integer0 = const0.getInt();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Const const0 = Const.NULL;
      Object object0 = const0.eval((Scope) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Const const0 = Const.NULL;
      Number number0 = const0.getNumber();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Sym sym0 = Sym.STATIC;
      Const const0 = new Const(sym0, sym0);
      boolean boolean0 = const0.isNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Const const0 = Const.TRUE;
      // Undeclared exception!
      try { 
        const0.getLong();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Long
         //
         verifyException("com.jfinal.template.expr.ast.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Const const0 = Const.NULL;
      Object object0 = const0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Const const0 = Const.NULL;
      Float float0 = const0.getFloat();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Sym sym0 = Sym.INT;
      Const const0 = new Const(sym0, "");
      String string0 = const0.getStr();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Const const0 = Const.NULL;
      Double double0 = const0.getDouble();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Const const0 = Const.FALSE;
      Boolean boolean0 = const0.getBoolean();
      assertFalse(boolean0);
  }
}
