/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:43:58 GMT 2018
 */

package com.jfinal.template.source;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.source.FileSource;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FileSource_ESTest extends FileSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSource fileSource0 = new FileSource("", " 8h!E<rqg{");
      assertEquals("/ 8h!E<rqg{", fileSource0.getFinalFileName());
      assertEquals(" 8h!E<rqg{", fileSource0.getFileName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, (String) null, (String) null);
      String string0 = fileSource0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, "", (String) null);
      String string0 = fileSource0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, (String) null);
      String string0 = fileSource0.getFinalFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, "");
      String string0 = fileSource0.getFinalFileName();
      assertNotNull(string0);
      assertEquals("", fileSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, (String) null);
      String string0 = fileSource0.getFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, "", "");
      String string0 = fileSource0.getFileName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "u^(iv+$3S4\\umGTS{Y[";
      FileSource fileSource0 = new FileSource(string0, "File name: ");
      fileSource0.getEncoding();
      assertEquals("File name: ", fileSource0.getFileName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSource fileSource0 = new FileSource("W", "W", "");
      fileSource0.getEncoding();
      assertEquals("W", fileSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileSource.loadFile((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.FileSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, (String) null, "");
      // Undeclared exception!
      try { 
        fileSource0.getContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSource fileSource0 = null;
      try {
        fileSource0 = new FileSource("", "", "cyO*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSource fileSource0 = null;
      try {
        fileSource0 = new FileSource("L", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.FileSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSource fileSource0 = null;
      try {
        fileSource0 = new FileSource("", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSource fileSource0 = null;
      try {
        fileSource0 = new FileSource(">^}oE1t", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.FileSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Last modified: 0.tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "cBLPT");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "OP!pYAt={d^C<5h");
      File file0 = MockFile.createTempFile("Last modified: ", (String) null);
      StringBuilder stringBuilder0 = FileSource.loadFile(file0, "UTF-8");
      assertEquals("cBLPT\nOP!pYAt={d^C<5h", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("Last modified: ", (String) null);
      StringBuilder stringBuilder0 = FileSource.loadFile(file0, "UTF-8");
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSource fileSource0 = new FileSource("File name: ", "~=hV`ez", "~=hV`ez");
      assertEquals("~=hV`ez", fileSource0.getKey());
      assertEquals("File name: /~=hV`ez", fileSource0.getFinalFileName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("Last modified: ", (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        FileSource.loadFile(file0, "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.jfinal.template.source.FileSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8");
      // Undeclared exception!
      try { 
        FileSource.loadFile(mockFile0, "Rendering class: [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.jfinal.template.source.FileSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(")/6h>fs[TXP:s");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "P&");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "eQV");
      FileSource fileSource0 = new FileSource(")", "6h>fs[TXP:s");
      StringBuilder stringBuilder0 = fileSource0.getContent();
      assertEquals("P&\neQV", stringBuilder0.toString());
      assertEquals("6h>fs[TXP:s", fileSource0.getFileName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSource fileSource0 = new FileSource("/}/nXb$y+x2[h?KN", "/}/nXb$y+x2[h?KN", "/}/nXb$y+x2[h?KN");
      assertEquals("/}/nXb$y+x2[h?KN/}/nXb$y+x2[h?KN", fileSource0.getFinalFileName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSource fileSource0 = new FileSource((String) null, (String) null, "Ky)l|L.{YYIcQ{>X@<g");
      // Undeclared exception!
      try { 
        fileSource0.isModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSource fileSource0 = new FileSource("] for automatic log4j configuration.", "] for automatic log4j configuration.");
      // Undeclared exception!
      try { 
        fileSource0.getContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File not found : ] for automatic log4j configuration./] for automatic log4j configuration.
         //
         verifyException("com.jfinal.template.source.FileSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(")/6h>fs[TXP:s");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "P&");
      FileSource fileSource0 = new FileSource(")", "6h>fs[TXP:s");
      boolean boolean0 = fileSource0.isModified();
      assertTrue(boolean0);
      assertEquals("6h>fs[TXP:s", fileSource0.getFileName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(")/6h>fs[TXP:s");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "P&");
      FileSource fileSource0 = new FileSource(")", "6h>fs[TXP:s");
      assertEquals(")/6h>fs[TXP:s", fileSource0.getFinalFileName());
      assertEquals("UTF-8", fileSource0.getEncoding());
      
      StringBuilder stringBuilder0 = fileSource0.getContent();
      assertEquals("P&", stringBuilder0.toString());
      
      boolean boolean0 = fileSource0.isModified();
      assertFalse(boolean0);
      assertEquals("6h>fs[TXP:s", fileSource0.getFileName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSource fileSource0 = new FileSource("", "UTF-8");
      String string0 = fileSource0.getFinalFileName();
      assertEquals("/UTF-8", string0);
      assertEquals("UTF-8", fileSource0.getKey());
      assertEquals("UTF-8", fileSource0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSource fileSource0 = new FileSource("", "6h>fs[TXP:s", (String) null);
      String string0 = fileSource0.getEncoding();
      assertEquals("/6h>fs[TXP:s", fileSource0.getFinalFileName());
      assertEquals("6h>fs[TXP:s", fileSource0.getFileName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSource fileSource0 = new FileSource("", "6h>fs[TXP:s", (String) null);
      String string0 = fileSource0.getFileName();
      assertEquals("6h>fs[TXP:s", string0);
      assertEquals("/6h>fs[TXP:s", fileSource0.getFinalFileName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSource fileSource0 = new FileSource("", "6h>fs[TXP:s", (String) null);
      String string0 = fileSource0.toString();
      assertEquals("File name: 6h>fs[TXP:s\nFinal file name: /6h>fs[TXP:s\nLast modified: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSource fileSource0 = new FileSource("", "6h>fs[TXP:s", (String) null);
      String string0 = fileSource0.getKey();
      assertEquals("/6h>fs[TXP:s", fileSource0.getFinalFileName());
      assertEquals("6h>fs[TXP:s", string0);
      assertNotNull(string0);
  }
}
