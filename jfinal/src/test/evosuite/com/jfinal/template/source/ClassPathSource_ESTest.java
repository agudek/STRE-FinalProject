/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:58:53 GMT 2018
 */

package com.jfinal.template.source;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.source.ClassPathSource;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ClassPathSource_ESTest extends ClassPathSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      assertEquals("/", classPathSource0.getKey());
      
      classPathSource0.fileName = "";
      String string0 = classPathSource0.toString();
      assertEquals("In Jar File: false\nFile name: \nFinal file name: \nLast modified: 1524046081000\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      URL uRL0 = MockURL.getHttpExample();
      classPathSource0.url = uRL0;
      boolean boolean0 = classPathSource0.isModified();
      assertEquals("/", classPathSource0.getKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.processIsInJarAndlastModified();
      assertEquals("/", classPathSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("/");
      URL uRL0 = MockURL.getHttpExample();
      classPathSource0.url = uRL0;
      classPathSource0.getLastModified();
      assertEquals("/", classPathSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource(".", ".");
      classPathSource0.getLastModified();
      assertEquals(".", classPathSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.fileName = null;
      String string0 = classPathSource0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      assertEquals("/", classPathSource0.getKey());
      
      classPathSource0.fileName = "";
      String string0 = classPathSource0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      assertEquals("/", classPathSource0.getEncoding());
      
      classPathSource0.encoding = "";
      classPathSource0.getEncoding();
      assertEquals("", classPathSource0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.getClassLoader();
      assertEquals("/", classPathSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      String string0 = classPathSource0.buildFinalFileName("/", "nvf>M@");
      assertEquals("/", classPathSource0.getKey());
      assertEquals("/nvf>M@", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.buildFinalFileName("", "/");
      assertEquals("/", classPathSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.url = null;
      // Undeclared exception!
      try { 
        classPathSource0.isModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("/");
      URL uRL0 = classPathSource0.url;
      URL uRL1 = MockURL.URL(uRL0, "");
      classPathSource0.url = uRL1;
      // Undeclared exception!
      try { 
        classPathSource0.getLastModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.classLoader = null;
      // Undeclared exception!
      try { 
        classPathSource0.getContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      // Undeclared exception!
      try { 
        classPathSource0.buildFinalFileName("/", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      // Undeclared exception!
      try { 
        classPathSource0.buildFinalFileName("In Jar File: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("", "", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : \"\"\"
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPathSource.loadFile((InputStream) null, "/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("] using context classloader ", "8sp$U&U:g%il>ZV-Wb", ">x._P|Msl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : \"] using context classloader /8sp$U&U:g%il>ZV-Wb\"
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ClassPathSource.loadFile(pipedInputStream0, "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = ClassPathSource.loadFile(byteArrayInputStream0, "UTF8");
      assertEquals("\u0000\u0000\n\u0000\u0000\u0000\u0000", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      StringBuilder stringBuilder0 = ClassPathSource.loadFile(byteArrayInputStream0, "UTF-8");
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.finalFileName = "/";
      // Undeclared exception!
      try { 
        classPathSource0.getContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File not found : \"/\"
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      // Undeclared exception!
      try { 
        classPathSource0.getContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: /
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.isInJar = true;
      // Undeclared exception!
      try { 
        classPathSource0.getContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: /
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.lastModified = 48L;
      boolean boolean0 = classPathSource0.isModified();
      assertEquals("/", classPathSource0.getKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      classPathSource0.isInJar = true;
      boolean boolean0 = classPathSource0.isModified();
      assertFalse(boolean0);
      assertEquals("/", classPathSource0.getKey());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassPathSource classPathSource0 = null;
      try {
        classPathSource0 = new ClassPathSource("Lu$|", "h'-GGPT\"o7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File not found : \"Lu$|/h'-GGPT\"o7\"
         //
         verifyException("com.jfinal.template.source.ClassPathSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      boolean boolean0 = classPathSource0.isModified();
      assertEquals("/", classPathSource0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource(".", ".");
      classPathSource0.url = null;
      // Undeclared exception!
      try { 
        classPathSource0.processIsInJarAndlastModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("/");
      assertEquals("UTF-8", classPathSource0.getEncoding());
      
      StringBuilder stringBuilder0 = classPathSource0.getContent();
      assertEquals("/", classPathSource0.getKey());
      assertEquals("com", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      String string0 = classPathSource0.getKey();
      assertEquals("/", classPathSource0.getEncoding());
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassPathSource classPathSource0 = new ClassPathSource("", "/", "/");
      String string0 = classPathSource0.getEncoding();
      assertNotNull(string0);
      assertEquals("/", string0);
      assertEquals("/", classPathSource0.getKey());
  }
}
