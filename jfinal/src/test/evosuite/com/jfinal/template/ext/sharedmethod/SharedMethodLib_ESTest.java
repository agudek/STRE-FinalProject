/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:30:04 GMT 2018
 */

package com.jfinal.template.ext.sharedmethod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.ext.sharedmethod.SharedMethodLib;
import java.io.ByteArrayOutputStream;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SharedMethodLib_ESTest extends SharedMethodLib_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      // Undeclared exception!
      try { 
        sharedMethodLib0.isEmpty(sharedMethodLib0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // isEmpty(...) \u65B9\u6CD5\u53EA\u80FD\u63A5\u53D7 Collection\u3001Map\u3001\u6570\u7EC4\u3001Iterator\u3001Iterable \u7C7B\u578B\u53C2\u6570
         //
         verifyException("com.jfinal.template.ext.sharedmethod.SharedMethodLib", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("", clientInfoStatus0);
      Boolean boolean0 = sharedMethodLib0.isEmpty(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Boolean boolean0 = sharedMethodLib0.isEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Set<Map.Entry<String, ClientInfoStatus>> set0 = (Set<Map.Entry<String, ClientInfoStatus>>)hashMap0.entrySet();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("", clientInfoStatus0);
      Boolean boolean0 = sharedMethodLib0.isEmpty(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Set<Map.Entry<String, ClientInfoStatus>> set0 = (Set<Map.Entry<String, ClientInfoStatus>>)hashMap0.entrySet();
      Boolean boolean0 = sharedMethodLib0.isEmpty(set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        sharedMethodLib0.notEmpty(byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // isEmpty(...) \u65B9\u6CD5\u53EA\u80FD\u63A5\u53D7 Collection\u3001Map\u3001\u6570\u7EC4\u3001Iterator\u3001Iterable \u7C7B\u578B\u53C2\u6570
         //
         verifyException("com.jfinal.template.ext.sharedmethod.SharedMethodLib", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("Nh<MHk  ", clientInfoStatus0);
      Boolean boolean0 = sharedMethodLib0.notEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Boolean boolean0 = sharedMethodLib0.isEmpty(sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Set<Map.Entry<String, ClientInfoStatus>> set0 = (Set<Map.Entry<String, ClientInfoStatus>>)hashMap0.entrySet();
      Boolean boolean0 = sharedMethodLib0.notEmpty(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SharedMethodLib sharedMethodLib0 = new SharedMethodLib();
      Boolean boolean0 = sharedMethodLib0.isEmpty((Object) null);
      assertTrue(boolean0);
  }
}
