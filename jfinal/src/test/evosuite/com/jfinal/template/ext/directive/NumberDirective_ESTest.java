/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:12:01 GMT 2018
 */

package com.jfinal.template.ext.directive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.EngineConfig;
import com.jfinal.template.Env;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.ext.directive.NumberDirective;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Utf8Encoder;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class NumberDirective_ESTest extends NumberDirective_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.GE;
      Const const0 = new Const(sym0, numberDirective0);
      linkedList0.add((Expr) const0);
      Const const1 = Const.NULL;
      linkedList0.add((Expr) const1);
      ExprList exprList0 = new ExprList(linkedList0);
      numberDirective0.setExprList(exprList0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      CharWriter charWriter0 = new CharWriter(3264);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        numberDirective0.exec((Env) null, scope0, charWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The sencond parameter pattern of #number directive must be String
         //
         verifyException("com.jfinal.template.ext.directive.NumberDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      // Undeclared exception!
      try { 
        numberDirective0.setExprList((ExprList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.ext.directive.NumberDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      Env env0 = new Env((EngineConfig) null);
      LinkedHashMap<String, Integer> linkedHashMap0 = new LinkedHashMap<String, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      CharWriter charWriter0 = new CharWriter(765);
      // Undeclared exception!
      try { 
        numberDirective0.exec(env0, scope0, charWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.ext.directive.NumberDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.NULL;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      numberDirective0.setExprList(exprList0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      CharWriter charWriter0 = new CharWriter(3264);
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap0);
      numberDirective0.exec((Env) null, scope0, charWriter0);
      assertFalse(numberDirective0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.TRUE;
      linkedList0.addFirst(const0);
      linkedList0.add((Expr) const0);
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      // Undeclared exception!
      try { 
        numberDirective0.setExprList(exprList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrong number parameter of #number directive, two parameters allowed at most
         //
         verifyException("com.jfinal.template.ext.directive.NumberDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      // Undeclared exception!
      try { 
        numberDirective0.setExprList(exprList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #number directive can not be blank
         //
         verifyException("com.jfinal.template.ext.directive.NumberDirective", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NumberDirective numberDirective0 = new NumberDirective();
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.TRUE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      numberDirective0.setExprList(exprList0);
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 1);
      Env env0 = new Env((EngineConfig) null);
      // Undeclared exception!
      try { 
        numberDirective0.exec(env0, (Scope) null, byteWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
}
