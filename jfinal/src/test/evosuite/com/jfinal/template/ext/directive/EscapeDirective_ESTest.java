/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:56:33 GMT 2018
 */

package com.jfinal.template.ext.directive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.Env;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.ForCtrl;
import com.jfinal.template.expr.ast.StaticMethod;
import com.jfinal.template.ext.directive.EscapeDirective;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class EscapeDirective_ESTest extends EscapeDirective_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EscapeDirective escapeDirective0 = new EscapeDirective();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("W`2O{l'VX@ ", 39);
      ForCtrl forCtrl0 = new ForCtrl(exprList0, exprList0, exprList0, location0);
      linkedList0.add((Expr) forCtrl0);
      ExprList exprList1 = new ExprList(linkedList0);
      escapeDirective0.setExprList(exprList1);
      CharWriter charWriter0 = new CharWriter(63);
      // Undeclared exception!
      try { 
        escapeDirective0.exec((Env) null, scope0, charWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The eval(Scope scope) method can not be invoked
         // Template: \"W`2O{l'VX@ \". Line: 39
         //
         verifyException("com.jfinal.template.expr.ast.ForCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EscapeDirective escapeDirective0 = new EscapeDirective();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.TRUE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      escapeDirective0.setExprList(exprList0);
      CharWriter charWriter0 = new CharWriter(0);
      MockFile mockFile0 = new MockFile("Bqq@vX-t|2MjtNeh)a*", "Bqq@vX-t|2MjtNeh)a*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CharWriter charWriter1 = charWriter0.init(mockPrintWriter0);
      // Undeclared exception!
      escapeDirective0.exec((Env) null, scope0, charWriter1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EscapeDirective escapeDirective0 = new EscapeDirective();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Location location0 = new Location("W+H_\"vep@Gjb2 ", (-1370));
      StaticMethod staticMethod0 = new StaticMethod("org.apache.oro.io.RegexFilenameFilter", "=?|(", location0);
      linkedList0.add((Expr) staticMethod0);
      ExprList exprList0 = new ExprList(linkedList0);
      escapeDirective0.setExprList(exprList0);
      CharWriter charWriter0 = new CharWriter(882);
      // Undeclared exception!
      try { 
        escapeDirective0.exec((Env) null, scope0, charWriter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.jfinal.template.expr.ast.MethodKit
         //
         verifyException("com.jfinal.template.expr.ast.StaticMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EscapeDirective escapeDirective0 = new EscapeDirective();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.TRUE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      escapeDirective0.setExprList(exprList0);
      CharWriter charWriter0 = new CharWriter(0);
      // Undeclared exception!
      try { 
        escapeDirective0.exec((Env) null, scope0, charWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EscapeDirective escapeDirective0 = new EscapeDirective();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      escapeDirective0.setExprList(exprList0);
      CharWriter charWriter0 = new CharWriter(73);
      escapeDirective0.exec((Env) null, scope0, charWriter0);
      assertFalse(escapeDirective0.hasEnd());
  }
}
