/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 18:11:03 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.Directive;
import com.jfinal.template.EngineConfig;
import com.jfinal.template.Env;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.io.Writer;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.Break;
import com.jfinal.template.stat.ast.Continue;
import com.jfinal.template.stat.ast.Else;
import com.jfinal.template.stat.ast.NullStat;
import com.jfinal.template.stat.ast.Return;
import com.jfinal.template.stat.ast.Stat;
import com.jfinal.template.stat.ast.StatList;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Stat_ESTest extends Stat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Directive> linkedList0 = new LinkedList<Directive>();
      LinkedList<Stat> linkedList1 = new LinkedList<Stat>(linkedList0);
      StatList statList0 = new StatList(linkedList1);
      Env env0 = new Env((EngineConfig) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope((Map) null, hashMap0);
      statList0.NULL_STAT.exec(env0, scope0, (Writer) null);
      assertFalse(statList0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Break break0 = Break.me;
      CharWriter charWriter0 = new CharWriter(1);
      StringWriter stringWriter0 = new StringWriter(177);
      CharWriter charWriter1 = charWriter0.init(stringWriter0);
      break0.write(charWriter1, "");
      assertFalse(break0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Break break0 = Break.me;
      Location location0 = new Location("HJ0u:l", 0);
      break0.setLocation(location0);
      Location location1 = break0.getLocation();
      assertEquals("HJ0u:l", location1.getTemplateFile());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Else else0 = new Else(statList0);
      Location location0 = new Location("com.jfinal.template.stat.ast.Stat", 94);
      else0.location = location0;
      Location location1 = else0.getLocation();
      assertEquals(94, location1.getRow());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Break break0 = Break.me;
      Location location0 = new Location("Bmq^)N!xTs3|7", (-2587));
      break0.setLocation(location0);
      Location location1 = break0.getLocation();
      assertSame(location1, location0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Else else0 = new Else(statList0);
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".=U5v");
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        else0.write(byteWriter1, "baseTemplatePath can not be blank");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in writing to file
         //
         verifyException("com.jfinal.template.stat.ast.Stat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Return return0 = Return.me;
      CharWriter charWriter0 = new CharWriter(0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.jfinal.template.stat.ast.Stat");
      CharWriter charWriter1 = charWriter0.init(mockFileWriter0);
      // Undeclared exception!
      return0.write(charWriter1, ";5,O");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullStat nullStat0 = NullStat.me;
      Continue continue0 = Continue.me;
      nullStat0.setStat(continue0);
      assertFalse(nullStat0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Else else0 = new Else(statList0);
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      // Undeclared exception!
      try { 
        else0.write(byteWriter0, "baseTemplatePath can not be blank");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Return return0 = Return.me;
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      return0.setExprList(exprList0);
      assertEquals(0, exprList0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Else else0 = new Else(statList0);
      Location location0 = else0.getLocation();
      assertNull(location0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Continue continue0 = Continue.me;
      boolean boolean0 = continue0.hasEnd();
      assertFalse(boolean0);
  }
}
