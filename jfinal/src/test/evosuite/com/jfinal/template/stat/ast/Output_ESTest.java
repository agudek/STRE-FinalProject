/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:49:12 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.EngineConfig;
import com.jfinal.template.Env;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.ForCtrl;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.NullSafe;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.io.Writer;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.Output;
import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Output_ESTest extends Output_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Id id0 = new Id("");
      Location location0 = new Location("", 1);
      ForCtrl forCtrl0 = new ForCtrl(id0, id0, location0);
      NullSafe nullSafe0 = new NullSafe(forCtrl0, forCtrl0, location0);
      linkedList0.add((Expr) nullSafe0);
      ExprList exprList0 = new ExprList(linkedList0);
      Env env0 = new Env((EngineConfig) null);
      LinkedHashMap<Double, Long> linkedHashMap0 = new LinkedHashMap<Double, Long>(1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      Output output0 = new Output(exprList0, location0);
      // Undeclared exception!
      try { 
        output0.exec(env0, scope0, (Writer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The eval(Scope scope) method can not be invoked
         // Template: \"\". Line: 1
         //
         verifyException("com.jfinal.template.expr.ast.ForCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.QUESTION;
      Integer integer0 = new Integer(1);
      Const const0 = new Const(sym0, integer0);
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("[npMj[l-~7", 0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      Output output0 = new Output(exprList0, location0);
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 3189);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      ByteWriter byteWriter1 = byteWriter0.init(mockPrintStream0);
      output0.exec(env0, scope0, byteWriter1);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Location location0 = new Location("'ohJrbs", 28);
      Output output0 = null;
      try {
        output0 = new Output((ExprList) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      linkedList0.add((Expr) exprList0);
      ExprList exprList1 = new ExprList(linkedList0);
      Location location0 = new Location("", (-955));
      Output output0 = new Output(exprList1, location0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      output0.exec(env0, scope0, (Writer) null);
      assertFalse(output0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.OR;
      Integer integer0 = new Integer(1);
      Const const0 = new Const(sym0, integer0);
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, linkedHashMap0);
      Location location0 = new Location("*vBd(_t<R>8n{-", 1);
      Output output0 = new Output(exprList0, location0);
      // Undeclared exception!
      try { 
        output0.exec(env0, scope0, (Writer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Output output0 = null;
      try {
        output0 = new Output(exprList0, (Location) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The expression of output directive like #(expression) can not be blank
         //
         verifyException("com.jfinal.template.stat.ast.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Const const0 = Const.TRUE;
      linkedList0.add((Expr) const0);
      ExprList exprList0 = new ExprList(linkedList0);
      Location location0 = new Location("EHw00z$1$@h]Z$1.a", (-955));
      Output output0 = new Output(exprList0, location0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        output0.exec(env0, scope0, (Writer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.Output", e);
      }
  }
}
