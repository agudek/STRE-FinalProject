/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 10:46:38 GMT 2018
 */

package com.jfinal.template.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.stat.Lexer;
import com.jfinal.template.stat.Symbol;
import com.jfinal.template.stat.TextToken;
import com.jfinal.template.stat.Token;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Lexer_ESTest extends Lexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[7];
      lexer0.buf = charArray0;
      assertEquals("V$", stringBuilder0.toString());
      
      TextToken textToken0 = new TextToken(stringBuilder0, 2400);
      assertEquals("V$", stringBuilder0.toString());
      assertEquals("V$", textToken0.value());
      assertEquals(2400, textToken0.getRow());
      assertEquals("V$", textToken0.toString());
      assertNotNull(textToken0);
      
      boolean boolean0 = lexer0.addNoParaToken(textToken0);
      assertTrue(boolean0);
      assertEquals("V$", stringBuilder0.toString());
      assertEquals("V$", textToken0.value());
      assertEquals(2400, textToken0.getRow());
      assertEquals("V$", textToken0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.prepareNextScan((-1005));
      assertTrue(boolean0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#define ", stringBuilder0.toString());
      assertEquals("#define ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertEquals(" enifed#", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      Lexer lexer0 = new Lexer(stringBuilder1, "#define ");
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertNotNull(lexer0);
      
      String string0 = lexer0.scanId();
      assertEquals(" enifed", string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertNotNull(string0);
      
      List<Token> list0 = lexer0.scan();
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#define ", stringBuilder0.toString());
      assertEquals("#define ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("#define #define ", stringBuilder0.toString());
      assertEquals("#define #define ", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals(" enifed# enifed#", stringBuilder0.toString());
      assertEquals(" enifed# enifed#", stringBuilder2.toString());
      assertEquals(" enifed# enifed#", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      Lexer lexer0 = new Lexer(stringBuilder2, "#define ");
      assertEquals(" enifed# enifed#", stringBuilder0.toString());
      assertEquals(" enifed# enifed#", stringBuilder2.toString());
      assertNotNull(lexer0);
      
      List<Token> list0 = lexer0.scan();
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(" enifed# enifed#", stringBuilder0.toString());
      assertEquals(" enifed# enifed#", stringBuilder2.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[7];
      lexer0.buf = charArray0;
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean0 = lexer0.fail();
      assertFalse(boolean0);
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean1 = lexer0.scanSingleLineComment();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("V$", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" parameter error, the string parameter not ending");
      assertEquals(" parameter error, the string parameter not ending", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.delete(1, 3678);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(" ", stringBuilder0.toString());
      assertEquals(" ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.append(11);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(" 11", stringBuilder0.toString());
      assertEquals(" 11", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      Lexer lexer0 = new Lexer(stringBuilder2, "");
      assertEquals(" 11", stringBuilder0.toString());
      assertEquals(" 11", stringBuilder2.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.foundFollowingIf();
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(" 11", stringBuilder0.toString());
      assertEquals(" 11", stringBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[7];
      lexer0.buf = charArray0;
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean0 = lexer0.scanDire();
      assertFalse(boolean0);
      assertEquals("V$", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("com.jfinal.template.stat.Lexer");
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals(30, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "com.jfinal.template.stat.Lexer");
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.skipBlanks();
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      StringBuilder stringBuilder1 = lexer0.subBuf(0, (-1005));
      assertEquals("", stringBuilder0.toString());
      assertNull(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      StringBuilder stringBuilder1 = lexer0.subBuf(0, 0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("\uFFFF", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("\u0000", stringBuilder0.toString());
      assertEquals("\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "PvNV8X={g|<h#>>T3");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("\u0000", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.tokens = null;
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("\u0000", stringBuilder0.toString());
      
      char char0 = lexer0.next();
      assertEquals('\uFFFF', char0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("\u0000", stringBuilder0.toString());
      
      List<Token> list0 = lexer0.scan();
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("\u0000", stringBuilder0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "s&WWxlJ&<~%R1vc@u2");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char char0 = lexer0.peek();
      assertEquals('\uFFFF', char0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0.0F);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "The multiline comment start block \"#--\" can not match the end block: \"--#\"");
      assertEquals("0.0", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char char0 = lexer0.peek();
      assertEquals('0', char0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("0.0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("com.jfinal.template.stat.Lexer");
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "com.jfinal.template.stat.Lexer");
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char char0 = lexer0.peek();
      assertEquals('c', char0);
      assertEquals(30, stringBuffer0.length());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuffer0.toString());
      assertEquals("com.jfinal.template.stat.Lexer", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 1146.7446F);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("1146.7446", stringBuilder0.toString());
      assertEquals("1146.7446", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "The multiline comment start block \"#--\" can not match the end block: \"--#\"");
      assertEquals("1146.7446", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char char0 = lexer0.next();
      assertEquals('1', char0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("1146.7446", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("^x%mZ2/+x");
      assertEquals("^x%mZ2/+x", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "M{]");
      assertEquals("^x%mZ2/+x", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char char0 = lexer0.next();
      assertEquals('x', char0);
      assertEquals("^x%mZ2/+x", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Z+`Aq*b3");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "fX");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.deletePreviousTextTokenBlankTails();
      assertTrue(boolean0);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.addTextToken(stringBuilder0);
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean0 = lexer0.deletePreviousTextTokenBlankTails();
      assertFalse(boolean0);
      assertEquals("V$", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "7LVcU?^XG6[]SS]");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.subBuf((-2755), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2755
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, " parameter error, the string parameter not ending");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.forward = 70;
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.scanText();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '\"';
      lexer0.buf = charArray0;
      assertEquals("V$", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.scanPara("XE8:zD7*_s^8\"1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Z+`Aq*b3");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "fX");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanSingleLineComment();
      assertFalse(boolean0);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      lexer0.lexemeBegin = (-710);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean1 = lexer0.scanDire();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.scanMultiLineComment();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -710
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, (String) null);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.scanId();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#define ", stringBuilder0.toString());
      assertEquals("#define ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, (String) null);
      assertEquals("#define ", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.scanDire();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #define directive requires identifier as a function name
         // String template line: 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("^x%mZ2/+x");
      assertEquals("^x%mZ2/+x", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "M{]");
      assertEquals("^x%mZ2/+x", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.forward = 11;
      assertEquals("^x%mZ2/+x", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.scanDire();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "(Ur?=1");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[0];
      lexer0.buf = charArray0;
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.scan();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, (String) null);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.prepareNextScan(2288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "PvNV8X={g|<h#>>T3");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.buf = null;
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.lookForwardLineFeedAndEof();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "SET");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.lexemeBegin = 2;
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = lexer0.fail();
      assertFalse(boolean0);
      assertEquals("", stringBuilder0.toString());
      
      Symbol symbol0 = Symbol.INCLUDE;
      Token token0 = new Token(symbol0, "SET", 102);
      assertEquals(102, token0.getRow());
      assertEquals("SET", token0.toString());
      assertEquals("SET", token0.value());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        lexer0.addNoParaToken(token0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      Symbol symbol0 = Symbol.INCLUDE;
      Token token0 = new Token(symbol0, (-1005));
      assertEquals("include", token0.value());
      assertEquals((-1005), token0.getRow());
      assertEquals("include", token0.toString());
      assertNotNull(token0);
      
      lexer0.tokens = null;
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.addIdParaToken(token0, token0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      Symbol symbol0 = Symbol.INCLUDE;
      lexer0.forward = (-2030);
      assertEquals("", stringBuilder0.toString());
      
      Token token0 = new Token(symbol0, (-1005));
      assertEquals("include", token0.value());
      assertEquals("include", token0.toString());
      assertEquals((-1005), token0.getRow());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        lexer0.addIdParaToken(token0, token0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2030
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lexer lexer0 = null;
      try {
        lexer0 = new Lexer((StringBuilder) null, "]1:Y!)P]L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Z+`Aq*b3");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "fX");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanSingleLineComment();
      assertFalse(boolean0);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean1 = lexer0.scanDire();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean2 = lexer0.scanMultiLineComment();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean3 = lexer0.scanDire();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) " parameter exists illegal char: '");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(" parameter exists illegal char: '", stringBuilder0.toString());
      assertEquals(" parameter exists illegal char: '", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, " parameter exists illegal char: '");
      assertEquals(" parameter exists illegal char: '", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      TextToken textToken0 = new TextToken(stringBuilder0, 92);
      assertEquals(" parameter exists illegal char: '", stringBuilder0.toString());
      assertEquals(92, textToken0.getRow());
      assertEquals(" parameter exists illegal char: '", textToken0.toString());
      assertEquals(" parameter exists illegal char: '", textToken0.value());
      assertNotNull(textToken0);
      
      boolean boolean0 = lexer0.addNoParaToken(textToken0);
      assertTrue(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(" parameter exists illegal char: '", stringBuilder0.toString());
      assertEquals(92, textToken0.getRow());
      assertEquals(" parameter exists illegal char: '", textToken0.toString());
      assertEquals(" parameter exists illegal char: '", textToken0.value());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      Symbol symbol0 = Symbol.FOR;
      Token token0 = new Token(symbol0, (-1005));
      assertEquals((-1005), token0.getRow());
      assertEquals("for", token0.value());
      assertEquals("for", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = lexer0.addNoParaToken(token0);
      assertTrue(boolean0);
      assertEquals("", stringBuilder0.toString());
      assertEquals((-1005), token0.getRow());
      assertEquals("for", token0.value());
      assertEquals("for", token0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "6C] ./cNzAD6&-YSss");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("6C] ./cNzAD6&-YSss", stringBuilder0.toString());
      assertEquals("6C] ./cNzAD6&-YSss", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      lexer0.addTextToken(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("6C] ./cNzAD6&-YSss", stringBuilder0.toString());
      assertEquals("6C] ./cNzAD6&-YSss", stringBuilder1.toString());
      
      Symbol symbol0 = Symbol.FOR;
      Token token0 = new Token(symbol0, (-1005));
      assertEquals("for", token0.toString());
      assertEquals("for", token0.value());
      assertEquals((-1005), token0.getRow());
      assertNotNull(token0);
      
      boolean boolean0 = lexer0.addIdParaToken(token0, token0);
      assertTrue(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("6C] ./cNzAD6&-YSss", stringBuilder0.toString());
      assertEquals("for", token0.toString());
      assertEquals("for", token0.value());
      assertEquals((-1005), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      Symbol symbol0 = Symbol.FOR;
      Token token0 = new Token(symbol0, (-1005));
      assertEquals("for", token0.value());
      assertEquals("for", token0.toString());
      assertEquals((-1005), token0.getRow());
      assertNotNull(token0);
      
      boolean boolean0 = lexer0.addIdParaToken(token0, token0);
      assertTrue(boolean0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("for", token0.value());
      assertEquals("for", token0.toString());
      assertEquals((-1005), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder1, "defcine ");
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertNotNull(lexer0);
      
      TextToken textToken0 = lexer0.previousTextToken;
      assertNull(textToken0);
      
      boolean boolean0 = lexer0.addIdParaToken((Token) null, textToken0);
      assertTrue(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#define ", stringBuilder0.toString());
      assertEquals("#define ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertEquals(" enifed#", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      Lexer lexer0 = new Lexer(stringBuilder1, "#define ");
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.lookForwardLineFeedAndEof();
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.lookForwardLineFeedAndEof();
      assertTrue(boolean0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, " parameter error, the string parameter not ending");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      lexer0.addTextToken(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanText();
      assertTrue(boolean0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanNoParse();
      assertFalse(boolean0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Z+`Aq*b3");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "fX");
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanSingleLineComment();
      assertFalse(boolean0);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean1 = lexer0.scanDire();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean2 = lexer0.scanMultiLineComment();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean3 = lexer0.scanNoParse();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
      
      boolean boolean4 = lexer0.scanMultiLineComment();
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals("Z+`Aq*b3", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#define ", stringBuilder0.toString());
      assertEquals("#define ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(" enifed#", stringBuilder0.toString());
      assertEquals(" enifed#", stringBuilder1.toString());
      assertEquals(" enifed#", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder1.append((Object) "#define ");
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals(" enifed##define ", stringBuilder0.toString());
      assertEquals(" enifed##define ", stringBuilder1.toString());
      assertEquals(" enifed##define ", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      Lexer lexer0 = new Lexer(stringBuilder1, "#define ");
      assertEquals(" enifed##define ", stringBuilder0.toString());
      assertEquals(" enifed##define ", stringBuilder1.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #define directive requires identifier as a function name
         // Template: \"#define \". Line: 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanDire();
      assertFalse(boolean0);
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean1 = lexer0.scanSingleLineComment();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("V$", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.scanDire();
      assertFalse(boolean0);
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean1 = lexer0.fail();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("V$", stringBuilder0.toString());
      
      boolean boolean2 = lexer0.scanSingleLineComment();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("V$", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '\"';
      charArray0[3] = '\"';
      lexer0.buf = charArray0;
      assertEquals("V$", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        lexer0.scanPara("XE8:zD7*_s^8\"1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #XE8:zD7*_s^8\"1 parameter exists illegal char: '\u0000'
         // Template: \"$nOr/3ZVi\". Line: 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "The multiline comment start block \"#--\" can not match the end block: \"--#\"");
      assertEquals("false", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.scanPara("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // # parameter can not match the end char ')'
         // Template: \"The multiline comment start block \"#--\" can not match the end block: \"--#\"\". Line: 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("V$");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = ')';
      lexer0.buf = charArray0;
      assertEquals("V$", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = lexer0.scanPara("$nOr/3ZVi");
      assertEquals("V$", stringBuilder0.toString());
      assertNull(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" parameter error, the string parameter not ending");
      assertEquals(" parameter error, the string parameter not ending", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Lexer lexer0 = new Lexer(stringBuilder0, "");
      assertEquals(" parameter error, the string parameter not ending", stringBuilder0.toString());
      assertNotNull(lexer0);
      
      boolean boolean0 = lexer0.foundFollowingIf();
      assertFalse(boolean0);
      assertEquals(" parameter error, the string parameter not ending", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("#define ");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#define ", stringBuilder0.toString());
      assertEquals("#define ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) " parameter exists illegal char: '");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("#define  parameter exists illegal char: '", stringBuilder0.toString());
      assertEquals("#define  parameter exists illegal char: '", stringBuilder1.toString());
      assertEquals("#define  parameter exists illegal char: '", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      Lexer lexer0 = new Lexer(stringBuilder1, " parameter exists illegal char: '");
      assertEquals("#define  parameter exists illegal char: '", stringBuilder0.toString());
      assertEquals("#define  parameter exists illegal char: '", stringBuilder1.toString());
      assertNotNull(lexer0);
      
      // Undeclared exception!
      try { 
        lexer0.scan();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #define parameter : template function definition requires parentheses \"()\"
         // Template: \" parameter exists illegal char: '\". Line: 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, object0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      Lexer lexer0 = new Lexer(stringBuilder0, (String) null);
      assertNotNull(lexer0);
      
      List<Token> list0 = lexer0.scan();
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      TextToken textToken0 = lexer0.previousTextToken;
      assertEquals(1, textToken0.getRow());
      assertNotNull(textToken0);
      
      boolean boolean0 = lexer0.addNoParaToken(textToken0);
      assertTrue(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(1, textToken0.getRow());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Lexer lexer0 = new Lexer(stringBuilder0, (String) null);
      List<Token> list0 = lexer0.scan();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Lexer lexer0 = new Lexer(stringBuilder0, "6C] ./cNzAD6&-YSss");
      Symbol symbol0 = Symbol.FOR;
      Token token0 = new Token(symbol0, (-1005));
      boolean boolean0 = lexer0.addOutputToken(token0, token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("*=(\"");
      Lexer lexer0 = new Lexer(stringBuilder0, "*=(\"");
      // Undeclared exception!
      try { 
        lexer0.scanPara("*=(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #*=(\" parameter error, the string parameter not ending
         // Template: \"*=(\"\". Line: 1
         //
         verifyException("com.jfinal.template.stat.Lexer", e);
      }
  }
}
