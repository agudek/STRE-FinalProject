/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:16:26 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.Env;
import com.jfinal.template.expr.Sym;
import com.jfinal.template.expr.ast.Assign;
import com.jfinal.template.expr.ast.Const;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.Field;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.io.Writer;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.SetGlobal;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SetGlobal_ESTest extends SetGlobal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.GT;
      Const const0 = new Const(sym0, "Kb(Uumf=[T<<,u7kc0");
      Location location0 = new Location("Kb(Uumf=[T<<,u7kc0", 1);
      Field field0 = new Field(const0, "Kb(Uumf=[T<<,u7kc0", location0);
      Assign assign0 = new Assign("Kb(Uumf=[T<<,u7kc0", field0, field0, location0);
      linkedList0.add((Expr) assign0);
      ExprList exprList0 = new ExprList(linkedList0);
      SetGlobal setGlobal0 = new SetGlobal(exprList0, (Location) null);
      LinkedHashMap<Integer, Annotation> linkedHashMap0 = new LinkedHashMap<Integer, Annotation>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      // Undeclared exception!
      try { 
        setGlobal0.exec((Env) null, scope0, byteWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The assigned targets \"Kb(Uumf=[T<<,u7kc0\" can not be null
         // Template: \"Kb(Uumf=[T<<,u7kc0\". Line: 1
         //
         verifyException("com.jfinal.template.expr.ast.Assign", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Location location0 = new Location((String) null, 0);
      SetGlobal setGlobal0 = null;
      try {
        setGlobal0 = new SetGlobal((ExprList) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.SetGlobal", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ExprList exprList0 = new ExprList(linkedList0);
      linkedList0.add((Expr) exprList0);
      ExprList exprList1 = new ExprList(linkedList0);
      Location location0 = new Location("X@ [ski):x", 1);
      SetGlobal setGlobal0 = null;
      try {
        setGlobal0 = new SetGlobal(exprList1, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #setGlobal directive only supports assignment expressions
         // Template: \"X@ [ski):x\". Line: 1
         //
         verifyException("com.jfinal.template.stat.ast.SetGlobal", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("3.2V~%\"i[J~R9*: ^t", (-58));
      SetGlobal setGlobal0 = null;
      try {
        setGlobal0 = new SetGlobal(exprList0, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #setGlobal directive can not be blank
         // Template: \"3.2V~%\"i[J~R9*: ^t\". Line: -58
         //
         verifyException("com.jfinal.template.stat.ast.SetGlobal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      Sym sym0 = Sym.GT;
      Const const0 = new Const(sym0, "Kb(Uumf=[T<<,u7kc0");
      Location location0 = new Location("Kb(Uumf=[T<<,u7kc0", 1);
      Field field0 = new Field(const0, "Kb(Uumf=[T<<,u7kc0", location0);
      Assign assign0 = new Assign("Kb(Uumf=[T<<,u7kc0", field0, field0, location0);
      linkedList0.add((Expr) assign0);
      ExprList exprList0 = new ExprList(linkedList0);
      SetGlobal setGlobal0 = new SetGlobal(exprList0, location0);
      // Undeclared exception!
      try { 
        setGlobal0.exec((Env) null, (Scope) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.SetGlobal", e);
      }
  }
}
