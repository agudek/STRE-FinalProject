/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:37:56 GMT 2018
 */

package com.jfinal.template.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.stat.Symbol;
import com.jfinal.template.stat.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Symbol symbol0 = Symbol.IF;
      Token token0 = new Token(symbol0, 0);
      token0.value();
      assertEquals(0, token0.getRow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Symbol symbol0 = Symbol.INCLUDE;
      Token token0 = new Token(symbol0, "", (-1637));
      token0.toString();
      assertEquals((-1637), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Symbol symbol0 = Symbol.CONTINUE;
      Token token0 = new Token(symbol0, (-3692));
      token0.noPara();
      assertEquals((-3692), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Symbol symbol0 = Symbol.PARA;
      Token token0 = new Token(symbol0, "CALL_IF_DEFINED", (-14));
      token0.hasPara();
      assertEquals((-14), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Symbol symbol0 = Symbol.BREAK;
      Token token0 = new Token(symbol0, 0);
      int int0 = token0.getRow();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Symbol symbol0 = Symbol.SET;
      Token token0 = new Token(symbol0, 1);
      int int0 = token0.getRow();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token token0 = null;
      try {
        token0 = new Token((Symbol) null, 2124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Symbol symbol0 = Symbol.INCLUDE;
      Token token0 = new Token(symbol0, "", (-1637));
      token0.value();
      assertEquals((-1637), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Symbol symbol0 = Symbol.BREAK;
      Token token0 = null;
      try {
        token0 = new Token(symbol0, (String) null, (-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // symbol and value can not be null
         //
         verifyException("com.jfinal.template.stat.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token token0 = null;
      try {
        token0 = new Token((Symbol) null, "#OLG", 2283);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // symbol and value can not be null
         //
         verifyException("com.jfinal.template.stat.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Symbol symbol0 = Symbol.CALL;
      Token token0 = new Token(symbol0, (-34));
      int int0 = token0.getRow();
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Symbol symbol0 = Symbol.CALL;
      Token token0 = new Token(symbol0, (-34));
      token0.toString();
      assertEquals((-34), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Symbol symbol0 = Symbol.CALL;
      Token token0 = new Token(symbol0, (-34));
      token0.noPara();
      assertEquals((-34), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Symbol symbol0 = Symbol.CALL;
      Token token0 = new Token(symbol0, (-34));
      token0.hasPara();
      assertEquals((-34), token0.getRow());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Symbol symbol0 = Symbol.CALL;
      Token token0 = new Token(symbol0, (-34));
      token0.print();
      assertEquals((-34), token0.getRow());
  }
}
