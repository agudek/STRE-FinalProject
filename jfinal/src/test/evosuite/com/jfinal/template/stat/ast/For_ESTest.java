/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:15:26 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.EngineConfig;
import com.jfinal.template.Env;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.expr.ast.ForCtrl;
import com.jfinal.template.expr.ast.Id;
import com.jfinal.template.expr.ast.RangeArray;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.io.JdkEncoder;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.Break;
import com.jfinal.template.stat.ast.For;
import com.jfinal.template.stat.ast.Stat;
import com.jfinal.template.stat.ast.StatList;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class For_ESTest extends For_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("|St+U*ne#tobJ S", 0);
      ForCtrl forCtrl0 = new ForCtrl(exprList0, exprList0, exprList0, location0);
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      For for0 = new For(forCtrl0, statList0, statList0);
      ForCtrl forCtrl1 = new ForCtrl(exprList0, forCtrl0, exprList0, (Location) null);
      For for1 = new For(forCtrl1, statList0, for0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<RangeArray, Integer> hashMap0 = new HashMap<RangeArray, Integer>(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      CharWriter charWriter0 = new CharWriter(0);
      // Undeclared exception!
      try { 
        for1.exec(env0, scope0, charWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The eval(Scope scope) method can not be invoked
         // Template: \"|St+U*ne#tobJ S\". Line: 0
         //
         verifyException("com.jfinal.template.expr.ast.ForCtrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Break break0 = Break.me;
      For for0 = new For((ForCtrl) null, statList0, break0);
      Env env0 = new Env((EngineConfig) null);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 0);
      // Undeclared exception!
      try { 
        for0.exec(env0, scope0, byteWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.For", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Id id0 = new Id("");
      Location location0 = new Location("", 0);
      ForCtrl forCtrl0 = new ForCtrl(id0, id0, location0);
      For for0 = null;
      try {
        for0 = new For(forCtrl0, (StatList) null, (Stat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.For", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Id id0 = new Id("t+U*netobJ S");
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("t+U*netobJ S", 0);
      ForCtrl forCtrl0 = new ForCtrl(exprList0, exprList0, exprList0, location0);
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      For for0 = new For(forCtrl0, statList0, statList0);
      ForCtrl forCtrl1 = new ForCtrl(exprList0, id0, exprList0, (Location) null);
      For for1 = new For(forCtrl1, statList0, for0);
      Env env0 = new Env((EngineConfig) null);
      LinkedHashMap<RangeArray, Integer> linkedHashMap0 = new LinkedHashMap<RangeArray, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      scope0.set("t+U*netobJ S", exprList0);
      CharWriter charWriter0 = new CharWriter(0);
      // Undeclared exception!
      for1.exec(env0, scope0, charWriter0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Id id0 = new Id("|St+U*ne#tobJ S");
      Location location0 = new Location("|St+U*ne#tobJ S", 0);
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      ForCtrl forCtrl0 = new ForCtrl(id0, id0, location0);
      For for0 = new For(forCtrl0, statList0, (Stat) null);
      Env env0 = new Env((EngineConfig) null);
      HashMap<RangeArray, Integer> hashMap0 = new HashMap<RangeArray, Integer>(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      CharWriter charWriter0 = new CharWriter(0);
      for0.exec(env0, scope0, charWriter0);
      assertFalse(for0.hasEnd());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Id id0 = new Id("|St+U*ne#tobJ S");
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("", 0);
      ForCtrl forCtrl0 = new ForCtrl(exprList0, exprList0, exprList0, location0);
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      For for0 = new For(forCtrl0, statList0, statList0);
      ForCtrl forCtrl1 = new ForCtrl(id0, id0, (Location) null);
      For for1 = new For(forCtrl1, statList0, for0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<RangeArray, Integer> hashMap0 = new HashMap<RangeArray, Integer>(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      scope0.set("|St+U*ne#tobJ S", exprList0);
      CharWriter charWriter0 = new CharWriter(0);
      for1.exec(env0, scope0, charWriter0);
      assertNotSame(for1, for0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Id id0 = new Id("|St+U*ne#tobJ S");
      ExprList exprList0 = ExprList.NULL_EXPR_LIST;
      Location location0 = new Location("|St+U*ne#tobJ S", 0);
      ForCtrl forCtrl0 = new ForCtrl(exprList0, exprList0, exprList0, location0);
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      For for0 = new For(forCtrl0, statList0, statList0);
      ForCtrl forCtrl1 = new ForCtrl(id0, id0, location0);
      For for1 = new For(forCtrl1, statList0, for0);
      Env env0 = new Env((EngineConfig) null);
      HashMap<RangeArray, Integer> hashMap0 = new HashMap<RangeArray, Integer>(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      CharWriter charWriter0 = new CharWriter(0);
      for1.exec(env0, scope0, charWriter0);
      assertNotSame(for1, for0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Id id0 = new Id("for");
      Location location0 = new Location("for", (-1905));
      ForCtrl forCtrl0 = new ForCtrl(id0, id0, location0);
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      For for0 = new For(forCtrl0, statList0, statList0);
      Env env0 = new Env((EngineConfig) null);
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 13);
      // Undeclared exception!
      try { 
        for0.exec(env0, (Scope) null, byteWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parent can not be null.
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }
}
