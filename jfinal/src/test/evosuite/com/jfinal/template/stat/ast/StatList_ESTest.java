/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:25:19 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.Env;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Utf8Encoder;
import com.jfinal.template.io.Writer;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.Break;
import com.jfinal.template.stat.ast.Call;
import com.jfinal.template.stat.ast.Else;
import com.jfinal.template.stat.ast.Stat;
import com.jfinal.template.stat.ast.StatList;
import com.jfinal.template.stat.ast.Text;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class StatList_ESTest extends StatList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      Break break0 = Break.me;
      linkedList0.add((Stat) break0);
      StatList statList0 = new StatList(linkedList0);
      // Undeclared exception!
      try { 
        statList0.getStat(26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = 26, length = 1
         //
         verifyException("com.jfinal.template.stat.ast.StatList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      // Undeclared exception!
      try { 
        statList0.getStat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = 0, length = 0
         //
         verifyException("com.jfinal.template.stat.ast.StatList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Else else0 = new Else(statList0);
      linkedList0.add((Stat) else0);
      StatList statList1 = new StatList(linkedList0);
      int int0 = statList1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      linkedList0.add((Stat) null);
      linkedList0.add((Stat) null);
      StatList statList0 = new StatList(linkedList0);
      Stat stat0 = statList0.getStat(1);
      assertNull(stat0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      // Undeclared exception!
      try { 
        statList0.exec((Env) null, (Scope) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.StatList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatList statList0 = null;
      try {
        statList0 = new StatList((List<Stat>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.StatList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      linkedList0.add((Stat) statList0);
      StatList statList1 = new StatList(linkedList0);
      Stat stat0 = statList1.getStat(0);
      assertNotSame(statList1, stat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      // Undeclared exception!
      try { 
        statList0.getStat((-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index out of bounds: index = -84, length = 0
         //
         verifyException("com.jfinal.template.stat.ast.StatList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      Break break0 = Break.me;
      linkedList0.add((Stat) break0);
      StatList statList0 = new StatList(linkedList0);
      LinkedHashMap<Object, Call> linkedHashMap0 = new LinkedHashMap<Object, Call>();
      LinkedHashMap<String, Object> linkedHashMap1 = new LinkedHashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, linkedHashMap1);
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 26);
      statList0.exec((Env) null, scope0, byteWriter0);
      statList0.exec((Env) null, scope0, byteWriter0);
      assertEquals(1, statList0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      linkedList0.add((Stat) statList0);
      StatList statList1 = new StatList(linkedList0);
      Else else0 = new Else(statList1);
      assertEquals(1, statList1.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      linkedList0.add((Stat) null);
      linkedList0.add((Stat) null);
      StatList statList0 = new StatList(linkedList0);
      statList0.getActualStat();
      assertEquals(2, statList0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      Stat stat0 = statList0.getActualStat();
      LinkedHashMap<Text, Call> linkedHashMap0 = new LinkedHashMap<Text, Call>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Scope scope0 = new Scope(linkedHashMap0, hashMap0);
      CharWriter charWriter0 = new CharWriter(3691);
      // Undeclared exception!
      try { 
        stat0.exec((Env) null, scope0, charWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      linkedList0.add((Stat) null);
      StatList statList0 = new StatList(linkedList0);
      Stat stat0 = statList0.getActualStat();
      assertNull(stat0);
      assertEquals(1, statList0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Stat> linkedList0 = new LinkedList<Stat>();
      StatList statList0 = new StatList(linkedList0);
      int int0 = statList0.length();
      assertEquals(0, int0);
  }
}
