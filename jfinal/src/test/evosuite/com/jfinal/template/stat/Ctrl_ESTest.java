/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:06:54 GMT 2018
 */

package com.jfinal.template.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import com.jfinal.template.stat.Ctrl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Ctrl_ESTest extends Ctrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setReturn();
      boolean boolean0 = ctrl0.isContinue();
      assertTrue(ctrl0.isReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      assertFalse(ctrl0.isNullSafe());
      
      ctrl0.setNullSafe(true);
      boolean boolean0 = ctrl0.isNullSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.notNullSafe();
      assertTrue(boolean0);
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isLocalAssignment());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setGlobalAssignment();
      boolean boolean0 = ctrl0.isGlobalAssignment();
      assertFalse(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isGlobalAssignment();
      assertFalse(boolean0);
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.isWisdomAssignment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isLocalAssignment();
      assertFalse(boolean0);
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isBreak());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isWisdomAssignment();
      assertTrue(boolean0);
      assertFalse(ctrl0.isBreak());
      assertTrue(ctrl0.notNullSafe());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setReturn();
      boolean boolean0 = ctrl0.isReturn();
      assertTrue(ctrl0.isJump());
      assertFalse(ctrl0.isBreak());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isReturn();
      assertFalse(boolean0);
      assertFalse(ctrl0.isJump());
      assertFalse(ctrl0.isNullSafe());
      assertFalse(ctrl0.isLocalAssignment());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isContinue();
      assertFalse(boolean0);
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.isWisdomAssignment());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      assertFalse(ctrl0.isJump());
      
      ctrl0.setBreak();
      boolean boolean0 = ctrl0.isBreak();
      assertFalse(ctrl0.notJump());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isBreak();
      assertFalse(ctrl0.isLocalAssignment());
      assertTrue(ctrl0.notNullSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.notJump();
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isLocalAssignment());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isJump();
      assertFalse(boolean0);
      assertFalse(ctrl0.isNullSafe());
      assertFalse(ctrl0.isLocalAssignment());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setJumpNone();
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isBreak());
      assertTrue(ctrl0.notNullSafe());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setGlobalAssignment();
      boolean boolean0 = ctrl0.isWisdomAssignment();
      assertTrue(ctrl0.isGlobalAssignment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      assertFalse(ctrl0.isNullSafe());
      
      ctrl0.setNullSafe(true);
      boolean boolean0 = ctrl0.notNullSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      assertTrue(ctrl0.isWisdomAssignment());
      
      ctrl0.setLocalAssignment();
      boolean boolean0 = ctrl0.isLocalAssignment();
      assertFalse(ctrl0.isWisdomAssignment());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setReturn();
      boolean boolean0 = ctrl0.notJump();
      assertTrue(ctrl0.isReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setContinue();
      boolean boolean0 = ctrl0.isContinue();
      assertFalse(ctrl0.notJump());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      boolean boolean0 = ctrl0.isNullSafe();
      assertFalse(boolean0);
      assertTrue(ctrl0.notJump());
      assertTrue(ctrl0.isWisdomAssignment());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      ctrl0.setWisdomAssignment();
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.notNullSafe());
      assertTrue(ctrl0.isWisdomAssignment());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ctrl ctrl0 = new Ctrl();
      assertFalse(ctrl0.isBreak());
      
      ctrl0.setBreak();
      boolean boolean0 = ctrl0.isJump();
      assertFalse(ctrl0.notJump());
      assertTrue(boolean0);
  }
}
