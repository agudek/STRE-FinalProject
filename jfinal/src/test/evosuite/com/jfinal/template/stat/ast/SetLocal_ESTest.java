/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:04:31 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.Env;
import com.jfinal.template.expr.ast.Expr;
import com.jfinal.template.expr.ast.ExprList;
import com.jfinal.template.io.Writer;
import com.jfinal.template.stat.Ctrl;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.Scope;
import com.jfinal.template.stat.ast.SetLocal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SetLocal_ESTest extends SetLocal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExprList exprList0 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      Expr expr0 = mock(Expr.class, new ViolatedAssumptionAnswer());
      ExprList exprList1 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      doReturn(expr0).when(exprList1).getActualExpr();
      doReturn(exprList0.NULL_EXPR_ARRAY).when(exprList1).getExprArray();
      doReturn(1611).when(exprList1).length();
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      SetLocal setLocal0 = new SetLocal(exprList1, location0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        setLocal0.exec((Env) null, (Scope) null, writer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.SetLocal", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExprList exprList0 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      ExprList exprList1 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      doReturn((Expr) null).when(exprList1).getActualExpr();
      doReturn(exprList0.NULL_EXPR_ARRAY).when(exprList1).getExprArray();
      doReturn(1611).when(exprList1).length();
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      SetLocal setLocal0 = new SetLocal(exprList1, location0);
      Env env0 = mock(Env.class, new ViolatedAssumptionAnswer());
      Ctrl ctrl0 = mock(Ctrl.class, new ViolatedAssumptionAnswer());
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(ctrl0).when(scope0).getCtrl();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        setLocal0.exec(env0, scope0, writer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.SetLocal", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExprList exprList0 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      doReturn((Expr[]) null).when(exprList0).getExprArray();
      doReturn((-1)).when(exprList0).length();
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      SetLocal setLocal0 = null;
      try {
        setLocal0 = new SetLocal(exprList0, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.ast.SetLocal", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Expr[] exprArray0 = new Expr[8];
      ExprList exprList0 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      doReturn(exprArray0).when(exprList0).getExprArray();
      doReturn(2613).when(exprList0).length();
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(location0).toString();
      SetLocal setLocal0 = null;
      try {
        setLocal0 = new SetLocal(exprList0, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #setLocal directive only supports assignment expressionsnull
         //
         verifyException("com.jfinal.template.stat.ast.SetLocal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExprList exprList0 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(exprList0).length();
      SetLocal setLocal0 = null;
      try {
        setLocal0 = new SetLocal(exprList0, (Location) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The parameter of #setLocal directive can not be blank
         //
         verifyException("com.jfinal.template.stat.ast.SetLocal", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExprList exprList0 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      Expr expr0 = mock(Expr.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(expr0).eval(any(com.jfinal.template.stat.Scope.class));
      ExprList exprList1 = mock(ExprList.class, new ViolatedAssumptionAnswer());
      doReturn(expr0).when(exprList1).getActualExpr();
      doReturn(exprList0.NULL_EXPR_ARRAY).when(exprList1).getExprArray();
      doReturn(1611).when(exprList1).length();
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      SetLocal setLocal0 = new SetLocal(exprList1, location0);
      Env env0 = mock(Env.class, new ViolatedAssumptionAnswer());
      Ctrl ctrl0 = mock(Ctrl.class, new ViolatedAssumptionAnswer());
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(ctrl0).when(scope0).getCtrl();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      setLocal0.exec(env0, scope0, writer0);
      assertFalse(setLocal0.hasEnd());
  }
}
