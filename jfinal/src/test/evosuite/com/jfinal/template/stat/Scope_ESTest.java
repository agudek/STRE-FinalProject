/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:45:43 GMT 2018
 */

package com.jfinal.template.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.stat.Ctrl;
import com.jfinal.template.stat.Scope;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Object object0 = hashMap1.put((String) null, scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(object0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.set(hashMap0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Integer integer0 = new Integer(1164);
      assertEquals(1164, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1164);
      assertEquals(1164, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = hashMap0.replace((String) null, integer0, integer1);
      assertFalse(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        scope1.exists(hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2067);
      assertEquals(2067, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.remove((Object) integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Set<String> set0 = hashMap1.keySet();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope0.setRootData(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      scope1.removeGlobal(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      String string0 = "93paj$n9{-XHU";
      Object object0 = hashMap1.put("93paj$n9{-XHU", scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object0);
      
      Map map0 = scope1.getData();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map0);
      
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap1).when(biFunction0).apply(anyString() , any());
      hashMap1.replaceAll(biFunction0);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      scope1.removeGlobal(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.setData((Map) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object1 = null;
      scope1.removeGlobal((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Integer integer2 = new Integer((-572));
      assertEquals((-572), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-572));
      assertEquals((-572), (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      scope0.set(integer2, integer3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(scope0.equals((Object)scope1));
      
      // Undeclared exception!
      try { 
        scope0.removeLocal(hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "2?pXdd'`e}i6W";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashMap0.remove((Object) "2?pXdd'`e}i6W", object0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object1 = hashMap0.put("2?pXdd'`e}i6W", object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object1);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(scope0);
      
      Object object2 = null;
      scope0.setLocal((Object) null, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      // Undeclared exception!
      try { 
        scope0.removeGlobal(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Object object0 = scope0.get(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(object0);
      
      scope0.setGlobal(hashMap0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Object object1 = scope0.getGlobal(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(object1);
      
      scope0.setData(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Integer integer0 = new Integer(724);
      assertEquals(724, (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = hashMap1.put("com.jfinal.template.stat.Scope", integer0);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object2);
      
      Integer integer1 = new Integer(724);
      assertEquals(724, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object3 = scope0.getLocal(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertNull(object3);
      
      scope0.setLocal(hashMap1, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Map map0 = scope0.getData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Map map1 = scope0.getMapOfValue(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(map1);
      
      Integer integer2 = new Integer((-1300));
      assertEquals((-1300), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        scope0.setLocal(hashMap0, integer2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = scope0.get(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object0);
      
      scope0.remove((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Scope scope2 = new Scope(scope1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertNotNull(scope2);
      
      Object object1 = scope2.getGlobal(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertNull(object1);
      
      Scope scope3 = new Scope(hashMap1, hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertNotNull(scope3);
      
      Object object2 = scope3.getGlobal((Object) null);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertNull(object2);
      
      Object object3 = scope3.getLocal("");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertNull(object3);
      
      scope2.setGlobal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope3);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope3));
      assertFalse(scope2.equals((Object)scope1));
      
      Object object4 = scope0.getGlobal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertNull(object4);
      
      Integer integer0 = new Integer(2505);
      assertEquals(2505, (int)integer0);
      assertNotNull(integer0);
      
      Object object5 = scope2.get(integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope3);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope3));
      assertFalse(scope2.equals((Object)scope1));
      assertNull(object5);
      
      scope1.setGlobal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      
      Set<Object> set0 = hashMap0.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Map map0 = scope0.getData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertNotNull(map0);
      
      Map map1 = scope1.getData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertNull(map1);
      
      scope3.remove(map0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      
      Integer integer1 = new Integer(2505);
      assertEquals(2505, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      scope3.remove(integer1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      
      scope1.setLocal(integer1, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(2505);
      assertEquals(2505, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      scope1.setLocal((Object) null, integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      scope0.remove(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      
      Object object6 = scope3.getLocal(integer2);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertNull(object6);
      
      scope0.removeLocal((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope3);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Object object0 = hashMap1.put("$z>:6g_Es\".", (Object) null);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = hashMap1.getOrDefault(integer0, (Object) null);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      scope0.setGlobal("$z>:6g_Es\".", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      
      scope0.setGlobal(hashMap0, hashMap1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Object object2 = scope0.getLocal("$z>:6g_Es\".");
      assertEquals(0, object2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(object2.equals((Object)integer0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      scope0.setLocal((Object) null, object3);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      scope0.removeGlobal(object2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(object2.equals((Object)integer0));
      
      Map map0 = scope0.getRootData();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)object2));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object4 = scope0.getGlobal(integer2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(integer2.equals((Object)object2));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNull(object4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      String string0 = ">=@cLVo8g6jo6/4 t";
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer0 = new Integer((-2494));
      assertEquals((-2494), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(">=@cLVo8g6jo6/4 t", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = hashMap0.compute(">=@cLVo8g6jo6/4 t", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer2);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.setGlobal(hashMap0, "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object0 = scope0.getGlobal("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object0);
      
      scope1.setGlobal("", (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      // Undeclared exception!
      try { 
        scope0.get(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(452);
      assertEquals(452, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, "auR[aEHt={*U");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      Integer integer1 = new Integer((-958));
      assertEquals((-958), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String string1 = hashMap0.put(integer1, "com.jfinal.template.stat.Ctrl");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertNull(string1);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = hashMap1.putIfAbsent((String) null, object0);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object1);
      
      scope0.set(integer1, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      scope0.setGlobal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      scope0.setRootData(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      scope0.removeLocal(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      Set<Integer> set0 = hashMap0.keySet();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(integer1));
      assertTrue(set0.contains(452));
      
      Object object2 = scope0.getLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object2);
      
      scope0.set((Object) null, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Object object3 = scope0.getGlobal("com.jfinal.template.stat.Ctrl");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object3);
      
      HashMap hashMap2 = (HashMap)scope0.get((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, hashMap2.size());
      assertFalse(hashMap2.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(hashMap2);
      
      scope0.setRootData(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        scope0.getGlobal(hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      Object object0 = null;
      scope0.setGlobal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string0 = "4%4>.g^sYG";
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(object1);
      
      Object object2 = hashMap0.computeIfPresent("4%4>.g^sYG", biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(object2);
      
      Object object3 = scope0.get(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(object3);
      
      scope0.set(hashMap0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      // Undeclared exception!
      try { 
        scope0.remove(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Object object0 = hashMap1.put("Z#26d6 e;3w-", (Object) null);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object0);
      
      Object object1 = scope0.getLocal("*`lhd>ErPDmH'6e");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object1);
      
      String string0 = hashMap0.put((Object) null, "parent can not be null.");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      Object object2 = hashMap1.put("*`lhd>ErPDmH'6e", (Object) null);
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object2);
      
      Scope scope1 = new Scope(hashMap0, hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Map map0 = scope1.getRootData();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotSame(scope1, scope0);
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map0);
      
      Object object3 = scope0.get((Object) null);
      assertEquals("parent can not be null.", object3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNotNull(object3);
      
      Object object4 = scope1.get("parent can not be null.");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(scope1, scope0);
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object4);
      
      Map map1 = scope1.getMapOfValue(map0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotSame(scope1, scope0);
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Object object0 = scope0.get("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(object0);
      
      Object object1 = hashMap0.put("-.XBoX_>2u.=X_fE.", (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object1);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Scope scope2 = new Scope(scope1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertNotNull(scope2);
      
      scope2.setLocal((Object) null, hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      
      Map map0 = scope2.getRootData();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertNotNull(map0);
      
      Object object2 = scope0.get(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertNull(object2);
      
      scope2.removeLocal((Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      scope2.remove(object3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      Object object5 = scope0.get((Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertNull(object5);
      
      scope0.setLocal(object4, (Object) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(object4, object3);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(object4.equals((Object)object3));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Set<Integer> set0 = hashMap0.keySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Scope scope2 = new Scope(hashMap1, hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNotNull(scope2);
      
      Object object0 = scope2.getLocal(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNull(object0);
      
      scope0.removeLocal(scope1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.remove(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.setGlobal((Object) null, hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      Scope scope3 = new Scope(scope1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope2));
      assertNotNull(scope3);
      
      Object object1 = scope1.get(set0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object1);
      
      HashMap hashMap2 = (HashMap)scope3.getGlobal((Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, hashMap2.size());
      assertFalse(hashMap2.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope0);
      assertNotSame(scope3, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope2));
      assertNotNull(hashMap2);
      
      scope3.set(scope1, hashMap2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(2, hashMap2.size());
      assertFalse(hashMap2.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope0);
      assertNotSame(scope3, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope2));
      
      scope1.setData(hashMap1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object2 = scope1.get(hashMap1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object2);
      
      scope3.remove(scope0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope3);
      assertNotSame(scope1, scope0);
      assertNotSame(scope3, scope1);
      assertNotSame(scope3, scope0);
      assertNotSame(scope3, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope3));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope2));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1, 1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, (Map<String, Object>) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(scope0);
      
      scope0.setGlobal("", (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Scope scope1 = new Scope(scope0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = scope1.getLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      scope0.setLocal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Map map0 = scope1.getMapOfValue(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map0);
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Object object1 = scope1.get(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object1);
      
      scope0.setLocal("", (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Object object2 = scope0.getLocal(scope1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object2);
      
      scope0.setData((Map) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Object object3 = scope0.get((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object3);
      
      scope1.set((Object) null, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      scope1.set(integer0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Map map1 = scope0.getData();
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNotNull(map1);
      
      HashMap hashMap2 = (HashMap)scope0.getGlobal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap2.isEmpty());
      assertEquals(2, hashMap2.size());
      assertNotSame(hashMap2, hashMap1);
      assertNotSame(scope0, scope1);
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(scope0.equals((Object)scope1));
      assertNotNull(hashMap2);
      
      scope1.setGlobal("", hashMap2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap2.isEmpty());
      assertEquals(2, hashMap2.size());
      assertNotSame(hashMap2, hashMap1);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.remove(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      scope1.setLocal(hashMap0, "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object4 = new Object();
      assertNotNull(object4);
      
      Object object5 = scope0.getGlobal(object4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object5);
      
      Map map2 = scope1.getMapOfValue((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(map2.isEmpty());
      assertEquals(3, map2.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertSame(map2, map1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map2);
      
      Map map3 = scope1.getRootData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(3, map3.size());
      assertFalse(map3.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertSame(map3, map2);
      assertSame(map3, map1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map3);
      
      boolean boolean0 = scope1.exists("");
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.setLocal(object4, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Map map4 = scope1.getMapOfValue(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(integer1.equals((Object)integer0));
      assertNull(map4);
      
      Map map5 = scope1.getRootData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(3, map5.size());
      assertFalse(map5.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertSame(map5, map2);
      assertSame(map5, map3);
      assertSame(map5, map1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map5);
      
      scope0.removeLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      assertTrue(hashMap3.isEmpty());
      assertEquals(0, hashMap3.size());
      assertNotNull(hashMap3);
      
      scope0.setRootData(hashMap3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(hashMap3.isEmpty());
      assertEquals(0, hashMap3.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Object object6 = scope0.getGlobal(map5);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, map5.size());
      assertFalse(map5.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertSame(map5, map2);
      assertSame(map5, map3);
      assertSame(map5, map1);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object6);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Map<String, Object> map0 = null;
      Scope scope0 = new Scope((Map) null, (Map<String, Object>) null);
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.removeLocal((Object) null);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object0 = scope1.get(scope0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      Object object1 = scope0.get(scope1);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object1);
      
      scope1.remove((Object) null);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.setLocal((Object) null, (Object) null);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = scope1.getGlobal(object2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object3);
      
      scope0.setGlobal((Object) null, (Object) null);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      scope0.remove((Object) null);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      scope1.setData((Map) null);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.setGlobal(scope1, "");
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Scope scope2 = new Scope(scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertNotNull(scope2);
      
      scope1.removeGlobal((Object) null);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      scope2.remove("");
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      
      Object object4 = scope2.getLocal(scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertNull(object4);
      
      Integer integer0 = new Integer((-1984));
      assertEquals((-1984), (int)integer0);
      assertNotNull(integer0);
      
      scope0.setGlobal(integer0, "r2KMUCX_\u0004ah");
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      
      scope0.removeLocal((Object) null);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      
      Scope scope3 = new Scope(scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      assertNotNull(scope3);
      
      scope3.setRootData((Map) null);
      assertNotSame(scope0, scope3);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertNotSame(scope3, scope1);
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      
      scope3.remove(scope2);
      assertNotSame(scope0, scope3);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope3, scope2);
      assertNotSame(scope3, scope0);
      assertNotSame(scope3, scope1);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope3);
      assertNotSame(scope2, scope1);
      assertFalse(scope0.equals((Object)scope3));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope3.equals((Object)scope2));
      assertFalse(scope3.equals((Object)scope0));
      assertFalse(scope3.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope3));
      assertFalse(scope2.equals((Object)scope1));
      
      // Undeclared exception!
      try { 
        scope1.removeGlobal((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Set<String> set0 = hashMap1.keySet();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      scope0.setGlobal(hashMap0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Object object0 = scope0.getGlobal(";%~<8$<J");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(object0);
      
      Object object1 = hashMap1.put(";%~<8$<J", (Object) null);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object1);
      
      Ctrl ctrl0 = scope0.getCtrl();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isGlobalAssignment());
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isNullSafe());
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isBreak());
      assertNotNull(ctrl0);
      
      Map map0 = scope0.getMapOfValue(ctrl0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isGlobalAssignment());
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isNullSafe());
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isBreak());
      assertNull(map0);
      
      boolean boolean0 = scope0.exists(hashMap0);
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      scope0.removeLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Object object2 = hashMap1.put("07Z2SA", "");
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object2);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Object object3 = scope0.getLocal(integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object3);
      
      Object object4 = scope0.getGlobal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object4);
      
      Ctrl ctrl1 = scope0.getCtrl();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(ctrl1.isGlobalAssignment());
      assertFalse(ctrl1.isContinue());
      assertTrue(ctrl1.notNullSafe());
      assertFalse(ctrl1.isBreak());
      assertTrue(ctrl1.notJump());
      assertFalse(ctrl1.isNullSafe());
      assertFalse(ctrl1.isReturn());
      assertFalse(ctrl1.isLocalAssignment());
      assertTrue(ctrl1.isWisdomAssignment());
      assertFalse(ctrl1.isJump());
      assertSame(ctrl1, ctrl0);
      assertNotNull(ctrl1);
      
      scope0.setGlobal(set0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains(""));
      assertTrue(set0.contains("07Z2SA"));
      
      scope0.removeGlobal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        scope0.getLocal(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      Scope scope0 = new Scope(hashMap0, (Map<String, Object>) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(scope0);
      
      scope0.setGlobal((Object) null, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Scope scope1 = new Scope(scope0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.setLocal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object0 = scope1.getLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      boolean boolean0 = scope0.exists((Object) null);
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Scope scope2 = new Scope(scope1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNotNull(scope2);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = scope0.getGlobal(integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object0);
      
      Object object1 = scope2.get((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNull(object1);
      
      scope1.removeGlobal((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.setData(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.remove((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      
      scope2.setRootData(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      
      scope2.setData(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object2 = scope0.getGlobal(integer1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(integer1.equals((Object)integer0));
      assertNull(object2);
      
      Object object3 = scope2.getLocal((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNull(object3);
      
      Ctrl ctrl0 = scope2.getCtrl();
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isNullSafe());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isGlobalAssignment());
      assertFalse(ctrl0.isJump());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notNullSafe());
      assertTrue(ctrl0.isWisdomAssignment());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNotNull(ctrl0);
      
      scope1.setRootData((Map) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      
      Ctrl ctrl1 = scope1.getCtrl();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(ctrl1.isJump());
      assertFalse(ctrl1.isContinue());
      assertFalse(ctrl1.isGlobalAssignment());
      assertTrue(ctrl1.notNullSafe());
      assertFalse(ctrl1.isBreak());
      assertFalse(ctrl1.isNullSafe());
      assertFalse(ctrl1.isReturn());
      assertFalse(ctrl1.isLocalAssignment());
      assertTrue(ctrl1.notJump());
      assertTrue(ctrl1.isWisdomAssignment());
      assertSame(ctrl1, ctrl0);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(ctrl1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Scope scope2 = new Scope(scope1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNotNull(scope2);
      
      Map map0 = scope2.getMapOfValue(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNull(map0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = hashMap1.put((String) null, object0);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(object1);
      
      Integer integer0 = new Integer((-2822));
      assertEquals((-2822), (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = scope0.get(integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertNull(object2);
      
      scope0.set(hashMap1, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      
      Integer integer1 = new Integer((-2822));
      assertEquals((-2822), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      scope1.removeLocal(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(integer1.equals((Object)integer0));
      
      scope0.remove(integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertTrue(integer0.equals((Object)integer1));
      
      scope0.removeGlobal(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      
      scope2.remove(object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      
      scope2.removeGlobal((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      
      scope2.setData((Map) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      
      Object object3 = scope1.getLocal("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      scope0.remove(integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      scope0.setData(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = hashMap0.put(integer1, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertNull(object0);
      
      Object object1 = scope0.get(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(object1);
      
      Object object2 = scope0.get((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(object2);
      
      scope0.setLocal(hashMap0, (Object) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        scope0.setGlobal(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Map<String, String> map0 = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      String string0 = "";
      Object object0 = hashMap0.put("", scope1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        scope1.getGlobal((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, (Map<String, Object>) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = scope1.getLocal(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      scope0.setData(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Integer integer0 = new Integer((-624));
      assertEquals((-624), (int)integer0);
      assertNotNull(integer0);
      
      scope1.setGlobal(scope0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.set(integer0, scope1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Scope scope2 = new Scope(scope0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNotNull(scope2);
      
      Object object1 = scope2.getLocal(scope1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertNull(object1);
      
      Integer integer1 = hashMap0.put((Object) null, (Integer) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      scope1.set(scope0, (Object) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      
      scope1.setRootData(hashMap0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      
      scope0.setRootData((Map) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      
      Map map0 = scope1.getRootData();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertNull(map0);
      
      Map map1 = scope0.getRootData();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertNull(map1);
      
      Object object2 = scope1.get(scope0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertNull(object2);
      
      scope1.setLocal((Object) null, scope0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Object object3 = hashMap1.put("", hashMap0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(object3);
      
      scope1.setRootData(hashMap1);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      
      scope1.removeLocal(integer0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope((Map) null, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "com.jfinal.template.stat.Scope";
      scope1.set((Object) null, object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      HashMap<String, Integer> hashMap2 = null;
      try {
        hashMap2 = new HashMap<String, Integer>(3, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer1 = new Integer(2620);
      assertEquals(2620, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      scope0.setGlobal(object1, integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object2 = hashMap1.put((String) null, scope0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object2);
      
      Object object3 = scope0.get(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertNull(object3);
      
      Object object4 = hashMap1.put("0F\"?", (Object) null);
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(object4);
      
      String string1 = hashMap0.put((Object) null, "zQD/Ce;ipApch~2 B");
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string1);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      Object object6 = scope0.getLocal(object5);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(object5, object0);
      assertNotSame(object5, object1);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertNull(object6);
      
      Map map0 = scope0.getRootData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      scope0.removeGlobal(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Integer integer2 = new Integer(2620);
      assertEquals(2620, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object7 = scope0.getLocal(integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNull(object7);
      
      Map map1 = scope0.getMapOfValue((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(map1.isEmpty());
      assertEquals(3, map1.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertSame(map1, map0);
      assertNotNull(map1);
      
      Map map2 = scope0.getRootData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(map2.isEmpty());
      assertEquals(3, map2.size());
      assertSame(map2, map0);
      assertSame(map2, map1);
      assertNotNull(map2);
      
      Map map3 = scope0.getData();
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(map3.isEmpty());
      assertEquals(3, map3.size());
      assertSame(map3, map1);
      assertSame(map3, map2);
      assertSame(map3, map0);
      assertNotNull(map3);
      
      Map map4 = scope0.getMapOfValue((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(map4.isEmpty());
      assertEquals(3, map4.size());
      assertSame(map4, map2);
      assertSame(map4, map1);
      assertSame(map4, map3);
      assertSame(map4, map0);
      assertNotNull(map4);
      
      Object object8 = scope0.getLocal(integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNull(object8);
      
      scope0.setLocal((Object) null, map0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertSame(map0, map1);
      assertSame(map0, map4);
      assertSame(map0, map3);
      assertSame(map0, map2);
      
      scope0.setData(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Integer integer3 = new Integer(2620);
      assertEquals(2620, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      scope0.removeGlobal(integer3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        scope0.set(hashMap0, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Integer integer0 = new Integer(104);
      assertEquals(104, (int)integer0);
      assertNotNull(integer0);
      
      scope0.set(integer0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = scope0.get(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      assertNull(object0);
      
      Object object1 = hashMap1.put(";3|wB", (Object) null);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(object1);
      
      boolean boolean0 = hashMap1.replace("", (Object) hashMap0, (Object) scope0);
      assertFalse(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      Scope scope1 = new Scope(scope0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope0.setData(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      scope1.setGlobal("APY3h", hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(2, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object2 = scope1.getLocal(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(2, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object2);
      
      Object object3 = scope1.getLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(2, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object3);
      
      Map map0 = scope0.getMapOfValue("APY3h");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(2, hashMap1.size());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNotNull(map0);
      
      scope1.removeGlobal("APY3h");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object4 = scope1.getGlobal(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object4);
      
      Object object5 = scope0.get((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object5);
      
      Object object6 = scope0.getLocal("APY3h");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object6);
      
      Object object7 = scope1.getGlobal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object7);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Set<Map.Entry<Object, Integer>> set0 = (Set<Map.Entry<Object, Integer>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Integer integer0 = new Integer((-3004));
      assertEquals((-3004), (int)integer0);
      assertNotNull(integer0);
      
      scope1.setRootData(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.set(integer0, scope1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.remove(integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object0 = scope1.get(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      scope1.remove((Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.remove("2H?#");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Map map0 = scope1.getRootData();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = scope1.get(object1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Map map0 = scope0.getData();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      scope0.setLocal(hashMap0, "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map map0 = scope0.getData();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      Map map1 = scope0.getData();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertSame(map1, map0);
      assertNotNull(map1);
      
      Ctrl ctrl0 = scope0.getCtrl();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isJump());
      assertFalse(ctrl0.isGlobalAssignment());
      assertTrue(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isNullSafe());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notNullSafe());
      assertNotNull(ctrl0);
      
      Object object0 = scope0.getLocal("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object0);
      
      scope0.setGlobal(hashMap0, ctrl0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isJump());
      assertFalse(ctrl0.isGlobalAssignment());
      assertTrue(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isNullSafe());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notNullSafe());
      
      scope0.setData(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      scope1.set(hashMap1, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Map map0 = scope1.getData();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map0);
      
      Map map1 = scope1.getRootData();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = scope0.get(integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(object0);
      
      scope0.setLocal((Object) null, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Object object1 = scope0.getGlobal((Object) null);
      assertEquals(1, object1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(object1);
      
      scope0.setGlobal((Object) null, object1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      scope0.removeLocal(hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Object object2 = scope0.getGlobal((Object) null);
      assertEquals(1, object2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(object2);
      
      scope0.setGlobal((Object) null, object2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = scope1.getLocal(object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object1);
      
      scope1.removeLocal(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      scope0.setGlobal((Object) null, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = hashMap0.put(integer0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      Scope scope0 = new Scope(hashMap0, (Map<String, Object>) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object1 = scope0.getLocal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object1);
      
      scope1.removeGlobal((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope1.setRootData(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object2 = scope0.get((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object2);
      
      Map map0 = scope1.getMapOfValue((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = scope0.get(scope1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      scope1.removeGlobal((Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Integer integer0 = new Integer((-989));
      assertEquals((-989), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = scope1.getLocal(integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      Object object1 = scope0.get(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object1);
      
      Object object2 = scope0.get((Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object2);
      
      scope1.setGlobal(hashMap1, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Ctrl ctrl0 = scope1.getCtrl();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isGlobalAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isContinue());
      assertFalse(ctrl0.isNullSafe());
      assertTrue(ctrl0.notNullSafe());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.isWisdomAssignment());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(ctrl0);
      
      scope0.setRootData(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      
      Map map0 = scope1.getRootData();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(map0);
      
      boolean boolean0 = scope1.exists(map0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Integer integer0 = new Integer(992);
      assertEquals(992, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = scope0.getGlobal(integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNull(object0);
      
      Map map1 = scope0.getMapOfValue(ctrl0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isGlobalAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isContinue());
      assertFalse(ctrl0.isNullSafe());
      assertTrue(ctrl0.notNullSafe());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isJump());
      assertTrue(ctrl0.isWisdomAssignment());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Integer integer0 = new Integer(1518);
      assertEquals(1518, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = scope1.exists(integer0);
      assertFalse(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.remove(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      scope0.setGlobal(hashMap0, "parent can not be null.");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.setData(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object0 = scope1.get(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      scope1.set(scope0, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Ctrl ctrl0 = scope1.getCtrl();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isGlobalAssignment());
      assertTrue(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isJump());
      assertFalse(ctrl0.isReturn());
      assertFalse(ctrl0.isBreak());
      assertFalse(ctrl0.isLocalAssignment());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isNullSafe());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(ctrl0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<String, String> map0 = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = null;
      Object object0 = hashMap0.put((String) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(scope0);
      
      // Undeclared exception!
      try { 
        scope0.setGlobal("2", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Scope scope0 = null;
      Scope scope1 = null;
      try {
        scope1 = new Scope((Scope) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parent can not be null.
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      scope0.setRootData(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      scope0.removeGlobal(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map map0 = scope0.getRootData();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Map map1 = scope0.getRootData();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertSame(map1, map0);
      assertNotNull(map1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      scope0.removeLocal(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      scope0.setLocal((Object) null, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      scope0.setData(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Object object0 = scope0.getGlobal(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(object0);
      
      Object object1 = scope0.get((Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.removeLocal("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Scope scope0 = new Scope((Map) null, (Map<String, Object>) null);
      assertNotNull(scope0);
      
      Object object0 = scope0.getLocal(";f/&t\"UvAte<");
      assertNull(object0);
      
      Integer integer0 = new Integer((-6269));
      assertEquals((-6269), (int)integer0);
      assertNotNull(integer0);
      
      scope0.set(integer0, "");
      Integer integer1 = new Integer((-6269));
      assertEquals((-6269), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      scope0.remove(integer1);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      boolean boolean0 = scope0.exists(hashMap0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Map map0 = scope0.getMapOfValue(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      scope0.setData(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      scope0.setGlobal(hashMap0, "com.jfinal.template.stat.Scope");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.getOrDefault((Object) null, (Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(object0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(scope0);
      
      scope0.setData((Map) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = scope0.getLocal(object1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Integer integer0 = new Integer(1418);
      assertEquals(1418, (int)integer0);
      assertNotNull(integer0);
      
      scope1.setLocal(integer0, scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = scope0.getGlobal(object0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object1);
      
      scope0.setLocal((Object) null, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = scope1.getGlobal(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(scope1, scope0);
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      scope0.remove((Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Object object0 = scope0.get(scope1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      Object object1 = scope1.getGlobal((Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Scope scope0 = new Scope(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(scope0);
      
      Ctrl ctrl0 = scope0.getCtrl();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(ctrl0.isContinue());
      assertTrue(ctrl0.notNullSafe());
      assertFalse(ctrl0.isNullSafe());
      assertTrue(ctrl0.isWisdomAssignment());
      assertFalse(ctrl0.isLocalAssignment());
      assertFalse(ctrl0.isJump());
      assertFalse(ctrl0.isGlobalAssignment());
      assertFalse(ctrl0.isReturn());
      assertTrue(ctrl0.notJump());
      assertFalse(ctrl0.isBreak());
      assertNotNull(ctrl0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope((Map) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      Map map0 = scope1.getData();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Scope scope0 = null;
      try {
        scope0 = new Scope((Scope) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parent can not be null.
         //
         verifyException("com.jfinal.template.stat.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Scope scope0 = new Scope(hashMap0, (Map<String, Object>) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(scope0);
      
      Scope scope1 = new Scope(scope0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(scope1.equals((Object)scope0));
      assertNotNull(scope1);
      
      scope1.setGlobal((Object) null, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      
      Object object0 = scope1.get((Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertNull(object0);
      
      Map map0 = scope0.getData();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotSame(scope0, scope1);
      assertFalse(scope0.equals((Object)scope1));
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      scope0.set((Object) null, (Object) null);
      scope0.getGlobal(hashMap1);
      Scope scope1 = new Scope(scope0);
      scope0.set((Object) null, scope1);
      Object object0 = new Object();
      hashMap0.put(object0, "");
      hashMap1.put("", "");
      hashMap0.putAll(hashMap1);
      hashMap1.put("com.jfinal.template.staq.Scope", "com.jfinal.template.staq.Scope");
      scope1.setRootData(hashMap1);
      Integer integer0 = new Integer(0);
      scope1.remove(integer0);
      scope1.exists((Object) null);
      scope1.setData(hashMap0);
      scope0.setRootData(hashMap0);
      Scope scope2 = (Scope)scope1.getLocal((Object) null);
      Map map0 = scope2.getMapOfValue(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Scope scope0 = new Scope(hashMap0, hashMap1);
      Integer integer0 = new Integer(1940);
      Scope scope1 = new Scope(scope0);
      hashMap1.clear();
      Integer integer1 = new Integer(1940);
      Integer integer2 = new Integer(1940);
      Object object0 = new Object();
      hashMap1.put("C[ Xf3", integer1);
      hashMap0.put(integer2, integer1);
      scope1.getRootData();
      scope1.remove(integer2);
      scope0.get(integer1);
      scope0.get((Object) null);
      Object object1 = new Object();
      scope1.get(object1);
      scope1.removeLocal((Object) null);
      scope1.removeGlobal(object1);
      scope1.remove(integer0);
      scope1.getLocal("C[ Xf3");
      scope1.getGlobal((Object) null);
      scope0.removeGlobal((Object) null);
      scope1.getCtrl();
      scope0.setData(hashMap1);
      Object object2 = scope1.get("C[ Xf3");
      assertTrue(hashMap0.isEmpty());
      assertEquals(1940, object2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1, 1);
      Scope scope0 = new Scope(hashMap0, (Map<String, Object>) null);
      Scope scope1 = new Scope(scope0);
      scope1.getLocal((Object) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      scope0.getGlobal(scope0);
      scope0.setLocal("", (Object) null);
      scope0.getLocal(scope1);
      scope0.setData((Map) null);
      scope0.get((Object) null);
      scope1.set((Object) null, hashMap0);
      Integer integer0 = new Integer(1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      scope1.setGlobal("", hashMap2);
      scope1.getMapOfValue((Object) null);
      scope1.exists("");
      assertFalse(hashMap0.isEmpty());
      
      scope1.setLocal((Object) null, (Object) null);
      Map map0 = scope1.getRootData();
      scope0.removeLocal((Object) null);
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      scope0.setRootData(hashMap3);
      scope0.getGlobal(map0);
      assertEquals(1, map0.size());
  }
}
