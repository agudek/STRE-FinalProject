/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:25:44 GMT 2018
 */

package com.jfinal.template.stat.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.stat.Location;
import com.jfinal.template.stat.ast.ForIteratorStatus;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.util.HashMap;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ForIteratorStatus_ESTest extends ForIteratorStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("K4(D", "K4(D", (-3747));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "org.apache.oro.io.GlobFilenameFilter", 2, sQLNonTransientException0);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(sQLSyntaxErrorException0, "org.apache.oro.io.GlobFilenameFilter", (Location) null);
      int int0 = forIteratorStatus0.getSize();
      assertEquals(1, int0);
      assertEquals(0, forIteratorStatus0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Location location0 = new Location("Q+AK}a_rGJ\u0001A", 0);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus((Object) null, (Object) null, location0);
      forIteratorStatus0.getOuter();
      assertEquals(1, forIteratorStatus0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      forIteratorStatus0.nextState();
      int int0 = forIteratorStatus0.getIndex();
      assertFalse(forIteratorStatus0.getOdd());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      forIteratorStatus0.nextState();
      boolean boolean0 = forIteratorStatus0.getEven();
      assertEquals(2, forIteratorStatus0.getCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Location location0 = new Location("", (-1));
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(stringTokenizer0, stringTokenizer0, location0);
      boolean boolean0 = forIteratorStatus0.getEven();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[", (int[]) null, sQLClientInfoException0);
      Location location0 = new Location("[", 0);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(batchUpdateException0, sQLClientInfoException0, location0);
      boolean boolean0 = forIteratorStatus0.getOdd();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Location location0 = new Location(">lr#=d", (-1509));
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(sQLFeatureNotSupportedException0, (Object) null, location0);
      boolean boolean0 = forIteratorStatus0.getLast();
      assertTrue(boolean0);
      assertEquals(0, forIteratorStatus0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      boolean boolean0 = forIteratorStatus0.getLast();
      assertFalse(boolean0);
      assertEquals(1, forIteratorStatus0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      boolean boolean0 = forIteratorStatus0.getFirst();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Location location0 = new Location(">lr#=d", (-1509));
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(sQLFeatureNotSupportedException0, (Object) null, location0);
      forIteratorStatus0.nextState();
      boolean boolean0 = forIteratorStatus0.getFirst();
      assertEquals(2, forIteratorStatus0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Location location0 = new Location(">lr#=d", (-1509));
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(sQLFeatureNotSupportedException0, (Object) null, location0);
      int int0 = forIteratorStatus0.getSize();
      assertEquals(0, int0);
      assertFalse(forIteratorStatus0.getEven());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[", (int[]) null, sQLClientInfoException0);
      Location location0 = new Location("[", 0);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(batchUpdateException0, sQLClientInfoException0, location0);
      // Undeclared exception!
      try { 
        forIteratorStatus0.getSize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such method getSize() of the iterator
         // Template: \"[\". Line: 0
         //
         verifyException("com.jfinal.template.stat.ast.ForIteratorStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus((Object) null, hashMap0, (Location) null);
      assertFalse(forIteratorStatus0.getEven());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Location location0 = new Location(">lr#=d", (-1509));
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus(sQLFeatureNotSupportedException0, (Object) null, location0);
      forIteratorStatus0.getIterator();
      assertEquals(1, forIteratorStatus0.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      forIteratorStatus0.nextState();
      boolean boolean0 = forIteratorStatus0.getOdd();
      assertTrue(forIteratorStatus0.getEven());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      forIteratorStatus0.getOuter();
      assertEquals(0, forIteratorStatus0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      int int0 = forIteratorStatus0.getCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Location location0 = new Location((String) null, 2350);
      ForIteratorStatus forIteratorStatus0 = new ForIteratorStatus("", "", location0);
      int int0 = forIteratorStatus0.getIndex();
      assertEquals(0, int0);
  }
}
