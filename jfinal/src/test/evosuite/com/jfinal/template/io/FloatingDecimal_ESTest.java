/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 10:31:40 GMT 2018
 */

package com.jfinal.template.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.io.FloatingDecimal;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FloatingDecimal_ESTest extends FloatingDecimal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(3626.4058F);
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.nDigits = 0;
      String string0 = floatingDecimal0.toJavaFormatString();
      assertEquals("0000.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0);
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.isExceptional = false;
      char[] charArray0 = new char[4];
      floatingDecimal0.isExceptional = true;
      int int0 = floatingDecimal0.getChars(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-523.763));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.nDigits = 19;
      // Undeclared exception!
      try { 
        floatingDecimal0.getChars(floatingDecimal0.digits);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.isNegative = false;
      floatingDecimal0.isExceptional = true;
      floatingDecimal0.nDigits = 0;
      String string0 = floatingDecimal0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.isNegative = false;
      floatingDecimal0.isExceptional = true;
      floatingDecimal0.nDigits = 0;
      String string0 = floatingDecimal0.toJavaFormatString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.isNegative = false;
      char[] charArray0 = new char[1];
      floatingDecimal0.isExceptional = true;
      floatingDecimal0.nDigits = 0;
      int int0 = floatingDecimal0.getChars(charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-4161.2476F));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.nDigits = 2147268921;
      // Undeclared exception!
      floatingDecimal0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FloatingDecimal floatingDecimal0 = new FloatingDecimal(1434.587F);
          assertNotNull(floatingDecimal0);
          
          floatingDecimal0.digits = null;
          // Undeclared exception!
          try { 
            floatingDecimal0.toString();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(1417.939F);
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.nDigits = (-1594);
      // Undeclared exception!
      try { 
        floatingDecimal0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-10.678661F));
      assertNotNull(floatingDecimal0);
      
      char[] charArray0 = new char[6];
      floatingDecimal0.digits = charArray0;
      // Undeclared exception!
      try { 
        floatingDecimal0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(1434.587F);
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.digits = null;
      // Undeclared exception!
      try { 
        floatingDecimal0.toJavaFormatString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-297.01265));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.nDigits = 3903;
      // Undeclared exception!
      try { 
        floatingDecimal0.toJavaFormatString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 3903
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0F);
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.nDigits = 5;
      floatingDecimal0.nDigits = (-3521);
      // Undeclared exception!
      try { 
        floatingDecimal0.toJavaFormatString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0);
      assertNotNull(floatingDecimal0);
      
      // Undeclared exception!
      try { 
        floatingDecimal0.getChars((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0F);
      assertNotNull(floatingDecimal0);
      
      char[] charArray0 = new char[9];
      floatingDecimal0.decExponent = Integer.MIN_VALUE;
      int int0 = floatingDecimal0.getChars(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'0', '.', '0', 'E', '-', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0F);
      assertNotNull(floatingDecimal0);
      
      char[] charArray0 = new char[5];
      floatingDecimal0.decExponent = (-3712);
      // Undeclared exception!
      try { 
        floatingDecimal0.getChars(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0);
      assertNotNull(floatingDecimal0);
      
      char[] charArray0 = new char[4];
      int int0 = floatingDecimal0.getChars(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'0', '.', '0', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-9.743689F));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.decExponent = (-995);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        floatingDecimal0.getChars(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0));
      assertNotNull(floatingDecimal0);
      
      char[] charArray0 = new char[4];
      int int0 = floatingDecimal0.getChars(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'-', '1', '.', '0'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0F));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.decExponent = (-1);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        floatingDecimal0.getChars(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-297.01265));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.decExponent = 8;
      String string0 = floatingDecimal0.toJavaFormatString();
      assertEquals("-2.9701265E7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(2787.983F);
      assertNotNull(floatingDecimal0);
      
      char[] charArray0 = new char[8];
      floatingDecimal0.nDigits = 1949;
      // Undeclared exception!
      try { 
        floatingDecimal0.getChars(charArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 1949
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0));
      assertNotNull(floatingDecimal0);
      
      floatingDecimal0.isExceptional = true;
      String string0 = floatingDecimal0.toString();
      assertEquals("-1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-1.0));
      String string0 = floatingDecimal0.toString();
      assertEquals("-0.1e1", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(2.3422682F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(993.72383684123);
      String string0 = floatingDecimal0.toJavaFormatString();
      assertEquals("993.72383684123", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-990.524F));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((float) 134217745);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal((-9.743689F));
      floatingDecimal0.decExponent = (-995);
      String string0 = floatingDecimal0.toJavaFormatString();
      assertEquals("-9.743689E-996", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(0.0F);
      floatingDecimal0.decExponent = 40;
      char[] charArray0 = new char[7];
      int int0 = floatingDecimal0.getChars(charArray0);
      assertArrayEquals(new char[] {'0', '.', '0', 'E', '3', '9', '\u0000'}, charArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FloatingDecimal floatingDecimal0 = new FloatingDecimal(2330.0F);
      char[] charArray0 = new char[6];
      int int0 = floatingDecimal0.getChars(charArray0);
      assertArrayEquals(new char[] {'2', '3', '3', '0', '.', '0'}, charArray0);
      assertEquals(6, int0);
  }
}
