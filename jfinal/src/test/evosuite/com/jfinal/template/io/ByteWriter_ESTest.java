/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:51:57 GMT 2018
 */

package com.jfinal.template.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.io.IWritable;
import com.jfinal.template.io.JdkEncoder;
import com.jfinal.template.io.Utf8Encoder;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ByteWriter_ESTest extends ByteWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 11);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(11);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockPrintStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteWriter1);
      
      // Undeclared exception!
      try { 
        byteWriter1.write("r5tMOrb,XpAU#i&", 0, 2186);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(byteArrayOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteWriter1);
      
      byteWriter1.write("o6.XhK$=d@&/4kK", 0, 0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 11);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockPrintStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteWriter1);
      
      byteWriter0.write(false);
      assertSame(byteWriter0, byteWriter1);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(byteArrayOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteWriter1);
      
      StringBuilder stringBuilder0 = new StringBuilder("9}oFz1!No=Uv");
      assertEquals("9}oFz1!No=Uv", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      byteWriter0.write(stringBuilder0, 0, 0);
      assertSame(byteWriter0, byteWriter1);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("9}oFz1!No=Uv", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 69);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(69);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(byteArrayOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteWriter1);
      
      byteWriter1.write(0L);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("0", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 105);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      byteWriter1.write(105);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 105);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      byteWriter0.write((float) 105);
      assertSame(byteWriter0, byteWriter1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 105);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      byteWriter1.write((double) 105);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 105);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      byteWriter1.flush();
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 52);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      try { 
        byteWriter1.write(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 1);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) byteWriter0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        byteWriter0.write(stringBuilder0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 1848);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      try { 
        byteWriter1.write(", length = ", 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 11);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      byte[] byteArray0 = new byte[5];
      byteWriter0.bytes = byteArray0;
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      
      // Undeclared exception!
      try { 
        byteWriter0.write("r5tMOrb,XpAU#i&");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.jfinal.template.io.Utf8Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      // Undeclared exception!
      try { 
        byteWriter0.write((long) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.LongWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 2983);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      try { 
        byteWriter1.write(638L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      // Undeclared exception!
      try { 
        byteWriter0.write(2942);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 2983);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      try { 
        byteWriter0.write(79);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Charset charset0 = encoderFactory0.charset;
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      // Undeclared exception!
      try { 
        byteWriter0.write((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 2983);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      try { 
        byteWriter1.write(0.0F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Encoder encoder0 = encoderFactory0.getEncoder();
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      assertEquals(3.0F, encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      // Undeclared exception!
      try { 
        byteWriter0.write((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 2983);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      try { 
        byteWriter1.write(2961.8087749102797);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 88);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockPrintStream0);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      
      // Undeclared exception!
      try { 
        byteWriter1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteWriter byteWriter0 = null;
      try {
        byteWriter0 = new ByteWriter((Encoder) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      assertNotNull(encoderFactory0);
      
      Charset charset0 = encoderFactory0.charset;
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, jdkEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(jdkEncoder0);
      
      ByteWriter byteWriter0 = null;
      try {
        byteWriter0 = new ByteWriter(jdkEncoder0, (-469));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      StringBuffer stringBuffer0 = new StringBuffer("random");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      // Undeclared exception!
      try { 
        byteWriter0.write(stringBuilder0, 1481, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1481
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Charset charset0 = encoderFactory0.charset;
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, (byte)0);
      StringBuilder stringBuilder0 = new StringBuilder("A@2^h Y&'");
      // Undeclared exception!
      try { 
        byteWriter0.write(stringBuilder0, 43, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 43
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 0);
      // Undeclared exception!
      try { 
        byteWriter0.write("o6.XhK$=d@&/4kK", 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 2983);
      // Undeclared exception!
      try { 
        byteWriter0.write(79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      // Undeclared exception!
      try { 
        byteWriter0.write(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 1);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) byteWriter0);
      // Undeclared exception!
      try { 
        byteWriter0.write(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      byteWriter1.close();
      assertSame(byteWriter1, byteWriter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 0);
      byteWriter0.close();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 11);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ByteWriter byteWriter1 = byteWriter0.init(mockPrintStream0);
      byteWriter1.write("r5tMOrb,XpAU#i&");
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals("r5tMOrb,XpAU#i&", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 1430);
      // Undeclared exception!
      try { 
        byteWriter0.write((long) 1430);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.LongWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Charset charset0 = encoderFactory0.charset;
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 117);
      // Undeclared exception!
      try { 
        byteWriter0.write((float) 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 0);
      // Undeclared exception!
      try { 
        byteWriter0.write((IWritable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 98);
      // Undeclared exception!
      try { 
        byteWriter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 365);
      // Undeclared exception!
      try { 
        byteWriter0.write((double) 365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 11);
      // Undeclared exception!
      try { 
        byteWriter0.write("r5tMOrb,XpAU#i&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 1);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      // Undeclared exception!
      try { 
        byteWriter0.write(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.ByteWriter", e);
      }
  }
}
