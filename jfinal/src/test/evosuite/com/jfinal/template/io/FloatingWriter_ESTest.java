/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:34:24 GMT 2018
 */

package com.jfinal.template.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.FloatingWriter;
import com.jfinal.template.io.Utf8Encoder;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class FloatingWriter_ESTest extends FloatingWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(49);
      assertNotNull(charWriter0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      CharWriter charWriter1 = charWriter0.init(mockPrintWriter0);
      assertNotNull(charWriter1);
      assertSame(charWriter0, charWriter1);
      assertSame(charWriter1, charWriter0);
      
      FloatingWriter.write(charWriter0, (float) 49);
      assertSame(charWriter0, charWriter1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(49);
      assertNotNull(charWriter0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      CharWriter charWriter1 = charWriter0.init(mockPrintWriter0);
      assertNotNull(charWriter1);
      assertSame(charWriter0, charWriter1);
      assertSame(charWriter1, charWriter0);
      
      FloatingWriter.write(charWriter1, (double) 49);
      assertSame(charWriter0, charWriter1);
      assertSame(charWriter1, charWriter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 1030);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.jfinal.template.io.FloatingWriter", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      
      FloatingWriter.write(byteWriter1, (float) 1030);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 1030);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.jfinal.template.io.FloatingWriter", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter1);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
      
      FloatingWriter.write(byteWriter1, (double) 0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertSame(byteWriter0, byteWriter1);
      assertSame(byteWriter1, byteWriter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(0);
      assertNotNull(charWriter0);
      
      // Undeclared exception!
      try { 
        FloatingWriter.write(charWriter0, 1405.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(28);
      assertNotNull(charWriter0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      charWriter0.out = (java.io.Writer) pipedWriter0;
      try { 
        FloatingWriter.write(charWriter0, (float) 28);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloatingWriter.write((CharWriter) null, 673.053);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(28);
      assertNotNull(charWriter0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CharWriter charWriter1 = charWriter0.init(pipedWriter0);
      assertNotNull(charWriter1);
      assertSame(charWriter0, charWriter1);
      assertSame(charWriter1, charWriter0);
      
      try { 
        FloatingWriter.write(charWriter0, (double) 28);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 0);
      assertEquals(3.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(byteWriter0);
      
      // Undeclared exception!
      try { 
        FloatingWriter.write(byteWriter0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 1030);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.jfinal.template.io.FloatingWriter", false);
      ByteWriter byteWriter1 = byteWriter0.init(mockFileOutputStream0);
      try { 
        FloatingWriter.write(byteWriter1, (float) 1030);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 0);
      // Undeclared exception!
      try { 
        FloatingWriter.write(byteWriter0, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      ByteWriter byteWriter1 = byteWriter0.init(filterOutputStream0);
      try { 
        FloatingWriter.write(byteWriter1, (-1.0));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 1030);
      // Undeclared exception!
      try { 
        FloatingWriter.write(byteWriter0, (float) 1030);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 49);
      // Undeclared exception!
      try { 
        FloatingWriter.write(byteWriter0, (double) 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(49);
      // Undeclared exception!
      try { 
        FloatingWriter.write(charWriter0, (float) 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.FloatingWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(0);
      // Undeclared exception!
      try { 
        FloatingWriter.write(charWriter0, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatingWriter floatingWriter0 = new FloatingWriter();
  }
}
