/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:32:47 GMT 2018
 */

package com.jfinal.template.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.io.Utf8Encoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Utf8Encoder_ESTest extends Utf8Encoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0083';
      byte[] byteArray0 = new byte[2];
      int int0 = utf8Encoder0.encode(charArray0, (byte)1, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-125)}, byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      char[] charArray0 = new char[3];
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        utf8Encoder0.encode(charArray0, 0, 284, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.jfinal.template.io.Utf8Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[6];
      int int0 = utf8Encoder0.encode(charArray0, 1, 1, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        utf8Encoder0.encode((char[]) null, 240, 969, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.Utf8Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      char[] charArray0 = new char[7];
      charArray0[3] = '\u030D';
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        utf8Encoder0.me.encode(charArray0, '\u0000', '\u030D', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.jfinal.template.io.Utf8Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      char[] charArray0 = new char[7];
      byte[] byteArray0 = new byte[9];
      int int0 = utf8Encoder0.me.encode(charArray0, (-23), (-23), byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      char[] charArray0 = new char[19];
      charArray0[1] = '\u0080';
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        utf8Encoder0.me.encode(charArray0, 0, '\u0080', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.jfinal.template.io.Utf8Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      float float0 = utf8Encoder0.maxBytesPerChar();
      assertEquals(3.0F, float0, 0.01F);
  }
}
