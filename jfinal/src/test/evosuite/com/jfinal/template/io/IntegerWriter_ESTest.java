/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:45:21 GMT 2018
 */

package com.jfinal.template.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.template.io.ByteWriter;
import com.jfinal.template.io.CharWriter;
import com.jfinal.template.io.Encoder;
import com.jfinal.template.io.EncoderFactory;
import com.jfinal.template.io.IntegerWriter;
import com.jfinal.template.io.JdkEncoder;
import com.jfinal.template.io.Utf8Encoder;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class IntegerWriter_ESTest extends IntegerWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        IntegerWriter.getChars(52429, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 11);
      // Undeclared exception!
      try { 
        IntegerWriter.write(byteWriter0, 65536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(63);
      // Undeclared exception!
      try { 
        IntegerWriter.write(charWriter0, 99999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = Utf8Encoder.me;
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 737);
      // Undeclared exception!
      try { 
        IntegerWriter.write(byteWriter0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[5];
      IntegerWriter.getChars(1, 1, charArray0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(593);
      MockFile mockFile0 = new MockFile("##Bn6+]8c;");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CharWriter charWriter1 = charWriter0.init(mockFileWriter0);
      IntegerWriter.write(charWriter1, 95);
      assertSame(charWriter1, charWriter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(737);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      charWriter0.out = (java.io.Writer) outputStreamWriter0;
      IntegerWriter.write(charWriter0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncoderFactory encoderFactory0 = new EncoderFactory();
      Encoder encoder0 = encoderFactory0.getEncoder();
      ByteWriter byteWriter0 = new ByteWriter(encoder0, 2129);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(36);
      ByteWriter byteWriter1 = byteWriter0.init(byteArrayOutputStream0);
      IntegerWriter.write(byteWriter1, 36);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("86", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("r");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byteWriter0.out = (OutputStream) bufferedOutputStream0;
      IntegerWriter.write(byteWriter0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = IntegerWriter.stringSize((-268));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(1849);
      PipedWriter pipedWriter0 = new PipedWriter();
      CharWriter charWriter1 = charWriter0.init(pipedWriter0);
      try { 
        IntegerWriter.write(charWriter1, (-343));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ByteWriter byteWriter0 = new ByteWriter(utf8Encoder0, 39);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteWriter byteWriter1 = byteWriter0.init(pipedOutputStream0);
      try { 
        IntegerWriter.write(byteWriter1, 39);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerWriter.getChars(0, 0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharWriter charWriter0 = new CharWriter(0);
      // Undeclared exception!
      try { 
        IntegerWriter.write(charWriter0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JdkEncoder jdkEncoder0 = new JdkEncoder(charset0);
      ByteWriter byteWriter0 = new ByteWriter(jdkEncoder0, 1);
      // Undeclared exception!
      try { 
        IntegerWriter.write(byteWriter0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.jfinal.template.io.IntegerWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerWriter integerWriter0 = new IntegerWriter();
  }
}
