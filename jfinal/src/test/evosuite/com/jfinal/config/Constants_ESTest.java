/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:06:18 GMT 2018
 */

package com.jfinal.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.captcha.CaptchaCache;
import com.jfinal.captcha.ICaptchaCache;
import com.jfinal.config.Constants;
import com.jfinal.core.ControllerFactory;
import com.jfinal.json.IJsonFactory;
import com.jfinal.json.JFinalJsonFactory;
import com.jfinal.log.ILogFactory;
import com.jfinal.log.JdkLogFactory;
import com.jfinal.render.IRenderFactory;
import com.jfinal.render.RenderFactory;
import com.jfinal.render.ViewType;
import com.jfinal.token.ITokenCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Constants_ESTest extends Constants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setConfigPluginOrder(5);
      assertEquals(5, constants0.getConfigPluginOrder());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setI18nDefaultBaseName("7~z");
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constants constants0 = new Constants();
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      
      constants0.setFreeMarkerTemplateUpdateDelay(0);
      int int0 = constants0.getFreeMarkerTemplateUpdateDelay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setErrorView((-1), "-");
      String string0 = constants0.getErrorView((-1));
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertNotNull(string0);
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setViewExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setI18nDefaultLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultLocale can not be blank.
         //
         verifyException("com.jfinal.i18n.I18n", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setCaptchaCache((ICaptchaCache) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // captchaCache can not be null
         //
         verifyException("com.jfinal.captcha.CaptchaManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constants constants0 = new Constants();
      String string0 = constants0.getEncoding();
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertFalse(constants0.getDevMode());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constants constants0 = new Constants();
      int int0 = constants0.getFreeMarkerTemplateUpdateDelay();
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(3600, int0);
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constants constants0 = new Constants();
      String string0 = constants0.getUrlParaSeparator();
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertFalse(constants0.getDevMode());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("-", string0);
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals("upload", constants0.getBaseUploadPath());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constants constants0 = new Constants();
      String string0 = constants0.getBaseDownloadPath();
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", string0);
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertFalse(constants0.getDevMode());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("UTF-8", constants0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constants constants0 = new Constants();
      int int0 = constants0.getConfigPluginOrder();
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertFalse(constants0.getDevMode());
      assertEquals(2, int0);
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constants constants0 = new Constants();
      String string0 = constants0.getBaseUploadPath();
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("upload", string0);
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertFalse(constants0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constants constants0 = new Constants();
      int int0 = constants0.getMaxPostSize();
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(10485760, int0);
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constants constants0 = new Constants();
      boolean boolean0 = constants0.getDevMode();
      assertFalse(boolean0);
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constants constants0 = new Constants();
      String string0 = constants0.getViewExtension();
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertFalse(constants0.getDevMode());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(".html", string0);
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.getTokenCache();
      assertFalse(constants0.getDevMode());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("upload", constants0.getBaseUploadPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.getViewType();
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertFalse(constants0.getDevMode());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setFreeMarkerTemplateUpdateDelay((-226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // template_update_delay must more than -1.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setFreeMarkerTemplateUpdateDelay(2587);
      assertEquals(2587, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setBaseUploadPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseUploadPath can not be blank.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constants constants0 = new Constants();
      assertEquals("upload", constants0.getBaseUploadPath());
      
      constants0.setBaseUploadPath("{0 .fEw6nRJGcYZ,N");
      assertFalse(constants0.getDevMode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setBaseDownloadPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseDownloadPath can not be blank.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constants constants0 = new Constants();
      assertEquals("download", constants0.getBaseDownloadPath());
      
      constants0.setBaseDownloadPath("-");
      assertEquals(2, constants0.getConfigPluginOrder());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setViewExtension(".");
      assertEquals(".", constants0.getViewExtension());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setViewExtension(";-jeG");
      assertEquals(".;-jeG", constants0.getViewExtension());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setUrlParaSeparator("?J7f!ji/U_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // urlParaSepartor can not be blank and can not contains \"/\"
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constants constants0 = new Constants();
      assertEquals("-", constants0.getUrlParaSeparator());
      
      constants0.setUrlParaSeparator("UTF-8");
      assertEquals("UTF-8", constants0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setUrlParaSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // urlParaSepartor can not be blank and can not contains \"/\"
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setViewType((ViewType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // viewType can not be null
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constants constants0 = new Constants();
      ViewType viewType0 = ViewType.FREE_MARKER;
      constants0.setViewType(viewType0);
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertFalse(constants0.getDevMode());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setControllerFactory((ControllerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // controllerFactory can not be null.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constants constants0 = new Constants();
      ControllerFactory controllerFactory0 = constants0.getControllerFactory();
      constants0.setControllerFactory(controllerFactory0);
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertFalse(constants0.getDevMode());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setEncoding((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // encoding can not be blank.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constants constants0 = new Constants();
      assertEquals("UTF-8", constants0.getEncoding());
      
      constants0.setEncoding("-");
      assertEquals(10485760, constants0.getMaxPostSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setLogFactory((ILogFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logFactory can not be null.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constants constants0 = new Constants();
      JdkLogFactory jdkLogFactory0 = new JdkLogFactory();
      constants0.setLogFactory(jdkLogFactory0);
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertFalse(constants0.getDevMode());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setJsonDatePattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datePattern can not be blank.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setJsonDatePattern("c)");
      assertFalse(constants0.getDevMode());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setJsonFactory((IJsonFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jsonFactory can not be null.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constants constants0 = new Constants();
      JFinalJsonFactory jFinalJsonFactory0 = new JFinalJsonFactory();
      constants0.setJsonFactory(jFinalJsonFactory0);
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertFalse(constants0.getDevMode());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("UTF-8", constants0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setRenderFactory((IRenderFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // renderFactory can not be null.
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constants constants0 = new Constants();
      RenderFactory renderFactory0 = new RenderFactory();
      constants0.setRenderFactory(renderFactory0);
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertFalse(constants0.getDevMode());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setConfigPluginOrder(3543);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configPluginOrder \u53EA\u80FD\u53D6\u503C\u4E3A\uFF1A1\u30012\u30013\u30014\u30015
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constants constants0 = new Constants();
      assertEquals(2, constants0.getConfigPluginOrder());
      
      constants0.setConfigPluginOrder(1);
      assertEquals(1, constants0.getConfigPluginOrder());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setConfigPluginOrder((-1285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configPluginOrder \u53EA\u80FD\u53D6\u503C\u4E3A\uFF1A1\u30012\u30013\u30014\u30015
         //
         verifyException("com.jfinal.config.Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setMaxPostSize((-226));
      int int0 = constants0.getMaxPostSize();
      assertEquals((-226), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constants constants0 = new Constants();
      assertFalse(constants0.getDevMode());
      
      constants0.setDevMode(true);
      boolean boolean0 = constants0.getDevMode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setError404View("/");
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertFalse(constants0.getDevMode());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setError403View("x1mpq9xd41Oc\"XW{>3");
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertFalse(constants0.getDevMode());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setI18nDefaultLocale("c)");
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertFalse(constants0.getDevMode());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setError401View("#El``DT@yWq)");
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setReportAfterInvocation(false);
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertFalse(constants0.getDevMode());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setTokenCache((ITokenCache) null);
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(".html", constants0.getViewExtension());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Constants constants0 = new Constants();
      CaptchaCache captchaCache0 = new CaptchaCache();
      constants0.setCaptchaCache(captchaCache0);
      assertFalse(constants0.getDevMode());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.setError500View("#El``DT@yWq)");
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertFalse(constants0.getDevMode());
      assertEquals("download", constants0.getBaseDownloadPath());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Constants constants0 = new Constants();
      // Undeclared exception!
      try { 
        constants0.setI18nDefaultBaseName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultBaseName can not be blank.
         //
         verifyException("com.jfinal.i18n.I18n", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Constants constants0 = new Constants();
      constants0.getErrorView(157);
      assertEquals("-", constants0.getUrlParaSeparator());
      assertEquals(3600, constants0.getFreeMarkerTemplateUpdateDelay());
      assertEquals("download", constants0.getBaseDownloadPath());
      assertFalse(constants0.getDevMode());
      assertEquals(".html", constants0.getViewExtension());
      assertEquals("upload", constants0.getBaseUploadPath());
      assertEquals(2, constants0.getConfigPluginOrder());
      assertEquals("UTF-8", constants0.getEncoding());
      assertEquals(10485760, constants0.getMaxPostSize());
  }
}
