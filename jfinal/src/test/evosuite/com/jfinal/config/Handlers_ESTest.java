/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:51:59 GMT 2018
 */

package com.jfinal.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.config.Handlers;
import com.jfinal.core.ActionHandler;
import com.jfinal.handler.Handler;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Handlers_ESTest extends Handlers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Handlers handlers0 = new Handlers();
      ActionHandler actionHandler0 = new ActionHandler();
      Handlers handlers1 = handlers0.setActionHandler(actionHandler0);
      ActionHandler actionHandler1 = handlers1.getActionHandler();
      assertSame(actionHandler0, actionHandler1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Handlers handlers0 = new Handlers();
      // Undeclared exception!
      try { 
        handlers0.add((Handler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // handler can not be null
         //
         verifyException("com.jfinal.config.Handlers", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Handlers handlers0 = new Handlers();
      ActionHandler actionHandler0 = new ActionHandler();
      Handlers handlers1 = handlers0.add(actionHandler0);
      List<Handler> list0 = handlers1.getHandlerList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Handlers handlers0 = new Handlers();
      List<Handler> list0 = handlers0.getHandlerList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Handlers handlers0 = new Handlers();
      ActionHandler actionHandler0 = handlers0.getActionHandler();
      assertNull(actionHandler0);
  }
}
