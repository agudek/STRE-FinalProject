/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 18:22:49 GMT 2018
 */

package com.jfinal.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.log.Log4jLog;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Log4jLog_ESTest extends Log4jLog_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LoggerRepository loggerRepository0 = mock(LoggerRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Logger) null).when(loggerRepository0).getLogger(anyString());
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      doReturn(loggerRepository0).when(repositorySelector0).getLoggerRepository();
      org.apache.log4j.LogManager.setRepositorySelector(repositorySelector0, "");
      Log4jLog log4jLog0 = Log4jLog.getLog("");
      // Undeclared exception!
      try { 
        log4jLog0.isErrorEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.log.Log4jLog", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      doReturn((LoggerRepository) null).when(repositorySelector0).getLoggerRepository();
      org.apache.log4j.LogManager.setRepositorySelector(repositorySelector0, "");
      // Undeclared exception!
      try { 
        Log4jLog.getLog("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.LogManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      doReturn((LoggerRepository) null).when(repositorySelector0).getLoggerRepository();
      org.apache.log4j.LogManager.setRepositorySelector(repositorySelector0, (Object) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Log4jLog.getLog(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.LogManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Log4jLog log4jLog0 = null;
      try {
        log4jLog0 = new Log4jLog((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log4jLog log4jLog0 = null;
      try {
        log4jLog0 = new Log4jLog((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      boolean boolean0 = log4jLog0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Log4jLog log4jLog0 = Log4jLog.getLog("l@\"mspJP");
      boolean boolean0 = log4jLog0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      log4jLog0.error("_K{K", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Log4jLog> class0 = Log4jLog.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      boolean boolean0 = log4jLog0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      log4jLog0.fatal("org.apache.log4j.or.ObjectRenderer");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Log4jLog log4jLog0 = Log4jLog.getLog("log4j.defaultInitOverride");
      boolean boolean0 = log4jLog0.isFatalEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      boolean boolean0 = log4jLog0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      log4jLog0.error("^fY0yYq[t^'");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("com.jfinal.log.JdkLogFactory");
      log4jLog0.info("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      log4jLog0.fatal("org.apache.log4j.or.ObjectRenderer", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("com.jfinal.log.JdkLogFactory");
      log4jLog0.warn("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("\"i3`");
      MockThrowable mockThrowable0 = new MockThrowable();
      log4jLog0.info("\"i3`", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Log4jLog log4jLog0 = Log4jLog.getLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable("Fz{bSt`=W!*Z=");
      log4jLog0.debug("q<2vgJ4DL", (Throwable) mockThrowable0);
      assertEquals("Fz{bSt`=W!*Z=", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("com.jfinal.log.JdkLogFactory");
      log4jLog0.debug("]V`6A)BzYURPYk~");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Log4jLog log4jLog0 = new Log4jLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      log4jLog0.warn("log4j.category.", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }
}
