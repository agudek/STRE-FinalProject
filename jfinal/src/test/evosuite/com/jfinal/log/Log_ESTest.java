/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:27:58 GMT 2018
 */

package com.jfinal.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.log.ILogFactory;
import com.jfinal.log.JdkLog;
import com.jfinal.log.JdkLogFactory;
import com.jfinal.log.Log;
import com.jfinal.log.Log4jLog;
import com.jfinal.log.Log4jLogFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Log_ESTest extends Log_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Log log0 = Log.getLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable("jKK6,{1B#6+'W/");
      log0.warn("vw;4 +k)RkK'!$iEO", (Throwable) mockThrowable0);
      assertEquals("jKK6,{1B#6+'W/", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JdkLogFactory jdkLogFactory0 = new JdkLogFactory();
      Class<String> class0 = String.class;
      Log log0 = jdkLogFactory0.getLog(class0);
      log0.warn("/<~M]R7yL)+yDb");
      assertFalse(log0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("'");
      MockThrowable mockThrowable0 = new MockThrowable("$5%W~jZ[");
      log4jLog0.info("$5%W~jZ[", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: $5%W~jZ[", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Log4jLogFactory log4jLogFactory0 = new Log4jLogFactory();
      Log log0 = log4jLogFactory0.getLog("");
      log0.info("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log4jLogFactory log4jLogFactory0 = new Log4jLogFactory();
      Class<Integer> class0 = Integer.class;
      Log log0 = log4jLogFactory0.getLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      log0.fatal("", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("@lY`z--i!k^_Vn>NcZU");
      log4jLog0.fatal("l\"$V@Ho/.");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JdkLogFactory jdkLogFactory0 = new JdkLogFactory();
      Class<String> class0 = String.class;
      Log log0 = jdkLogFactory0.getLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      log0.error("Mp)PS=R4:", (Throwable) mockThrowable0);
      assertTrue(log0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Log log0 = Log.getLog(class0);
      log0.error("WD<nTY");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JdkLogFactory jdkLogFactory0 = new JdkLogFactory();
      Log log0 = jdkLogFactory0.getLog("org.apache.oro.io.AwkFilenameFilter");
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.log4j.Logger");
      log0.debug("org.apache.oro.io.AwkFilenameFilter", (Throwable) mockThrowable0);
      assertTrue(log0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JdkLogFactory jdkLogFactory0 = new JdkLogFactory();
      Class<String> class0 = String.class;
      Log log0 = jdkLogFactory0.getLog(class0);
      log0.debug("l\"$V@Ho/.");
      assertFalse(log0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("");
      boolean boolean0 = jdkLog0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Log4jLogFactory log4jLogFactory0 = new Log4jLogFactory();
      Class<Integer> class0 = Integer.class;
      Log log0 = log4jLogFactory0.getLog(class0);
      boolean boolean0 = log0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("*No?9");
      boolean boolean0 = jdkLog0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Log4jLog log4jLog0 = Log4jLog.getLog("4Ff5U,.Q");
      boolean boolean0 = log4jLog0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      boolean boolean0 = jdkLog0.isFatalEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Log log0 = Log.getLog(class0);
      boolean boolean0 = log0.isFatalEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JdkLog jdkLog0 = JdkLog.getLog(class0);
      boolean boolean0 = jdkLog0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Log4jLog log4jLog0 = new Log4jLog("defaultLogFactory can not be null.");
      boolean boolean0 = log4jLog0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Log4jLog log4jLog0 = Log4jLog.getLog(class0);
      boolean boolean0 = log4jLog0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Log.getLog((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Log.getLog((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Log.setDefaultLogFactory((ILogFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultLogFactory can not be null.
         //
         verifyException("com.jfinal.log.Log", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Log4jLogFactory log4jLogFactory0 = new Log4jLogFactory();
      Log.setDefaultLogFactory(log4jLogFactory0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Log.init();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Log log0 = Log.getLog(" ");
      assertNotNull(log0);
  }
}
