/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 18:18:27 GMT 2018
 */

package com.jfinal.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jfinal.log.JdkLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class JdkLog_ESTest extends JdkLog_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JdkLog jdkLog0 = new JdkLog("");
      assertTrue(jdkLog0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdkLog.getLog((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdkLog.getLog((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.log.JdkLog", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JdkLog jdkLog0 = null;
      try {
        jdkLog0 = new JdkLog((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JdkLog jdkLog0 = null;
      try {
        jdkLog0 = new JdkLog((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jfinal.log.JdkLog", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("Cn4>b~^*9]*U");
      MockThrowable mockThrowable0 = new MockThrowable();
      jdkLog0.fatal("Cn4>b~^*9]*U", (Throwable) mockThrowable0);
      assertTrue(jdkLog0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("Cn4>b~^*9]*U");
      jdkLog0.error("Cn4>b~^*9]*U");
      assertTrue(jdkLog0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      jdkLog0.info((String) null, (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("Cn4>b~^*9]*U");
      jdkLog0.info("Cn4>b~^*9]*U");
      assertFalse(jdkLog0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = JdkLog.getLog(class0);
      assertTrue(jdkLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      boolean boolean0 = jdkLog0.isFatalEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      boolean boolean0 = jdkLog0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      jdkLog0.warn("`?hoa#4", (Throwable) mockThrowable0);
      assertTrue(jdkLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("Cn4>b~^*9]*U");
      jdkLog0.warn("Cn4>b~^*9]*U");
      assertTrue(jdkLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("Cn4>b~^*9]*U");
      boolean boolean0 = jdkLog0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      boolean boolean0 = jdkLog0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      jdkLog0.error("`?hoa#4", (Throwable) mockThrowable0);
      assertTrue(jdkLog0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      jdkLog0.debug((String) null);
      assertTrue(jdkLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      jdkLog0.debug("`?hoa#4", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      JdkLog jdkLog0 = new JdkLog(class0);
      boolean boolean0 = jdkLog0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JdkLog jdkLog0 = JdkLog.getLog("Cn4>b~^*9]*U");
      jdkLog0.fatal("Cn4>b~^*9]*U");
      assertFalse(jdkLog0.isDebugEnabled());
  }
}
