/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 08:52:01 GMT 2018
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "cite";
      stringArray0[1] = "cite";
      stringArray0[2] = "cite";
      stringArray0[3] = "cite";
      stringArray0[4] = "cite";
      stringArray0[5] = "cite";
      stringArray0[6] = "cite";
      stringArray0[7] = "InTableBody";
      stringArray0[8] = "b";
      whitelist0.removeProtocols("cite", "cite", stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("NMYvwW)S4R,s");
      Whitelist.AttributeKey.valueOf("NMYvwW)S4R,s");
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NMYvwW)S4R,s";
      stringArray0[1] = "NMYvwW)S4R,s";
      stringArray0[2] = "NMYvwW)S4R,s";
      stringArray0[3] = "NMYvwW)S4R,s";
      stringArray0[4] = "NMYvwW)S4R,s";
      stringArray0[5] = "NMYvwW)S4R,s";
      stringArray0[6] = "NMYvwW)S4R,s";
      stringArray0[7] = "NMYvwW)S4R,s";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      Whitelist whitelist3 = whitelist2.addAttributes("NMYvwW)S4R,s", stringArray0);
      Whitelist whitelist4 = whitelist3.preserveRelativeLinks(true);
      whitelist4.addAttributes("NMYvwW)S4R,s", stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "article";
      stringArray0[1] = "article";
      stringArray0[2] = "thead";
      Whitelist whitelist1 = whitelist0.removeAttributes("article", stringArray0);
      whitelist1.getEnforcedAttributes("article");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.getEnforcedAttributes("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("82}kxtn`s,]T7r@");
      Whitelist.Protocol.valueOf("82}kxtn`s,]T7r@");
      Whitelist.Protocol.valueOf("82}kxtn`s,]T7r@");
      whitelist_Protocol0.toString();
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("82}kxtn`s,]T7r@", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pre";
      stringArray0[1] = "pre";
      stringArray0[2] = "pre";
      stringArray0[3] = "pre";
      stringArray0[4] = "pre";
      stringArray0[5] = "pre";
      Whitelist whitelist1 = whitelist0.removeAttributes("pre", stringArray0);
      whitelist1.addProtocols("dl", "I:8z:", stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String string0 = "h3";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h3";
      Whitelist whitelist1 = whitelist0.removeAttributes("h3", stringArray0);
      whitelist1.preserveRelativeLinks(true);
      String string1 = "";
      // Undeclared exception!
      try { 
        whitelist0.removeEnforcedAttribute("h3", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qS'A})t!e?.enBc6J";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        whitelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("align");
      Object object0 = new Object();
      whitelist_AttributeValue0.equals(object0);
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("align", "align", "align");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "align";
      stringArray0[1] = ">Gf[/@;\"EO4G]@";
      stringArray0[2] = "align";
      stringArray0[3] = "align";
      stringArray0[4] = "align";
      stringArray0[5] = "align";
      whitelist1.removeTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("cite", "align", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Tag tag0 = Tag.valueOf("0JbT:c26l|");
      Element element0 = new Element(tag0, "https");
      Attribute attribute0 = new Attribute("XsMiFS\"LD!K?o", "K-");
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute((String) null, element0, attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = Whitelist.simpleText();
      String[] stringArray0 = new String[0];
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      whitelist2.preserveRelativeLinks(true);
      whitelist0.isSafeTag("div");
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("?");
      Whitelist.TagName.valueOf("tfoot");
      Whitelist.TagName.valueOf(">|'J|m#$");
      whitelist_TagName0.equals("?");
      Whitelist whitelist3 = whitelist0.removeTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist3.removeAttributes((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist.Protocol.valueOf("*");
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist.basicWithImages();
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("*", "d-(HVYW");
      // Undeclared exception!
      try { 
        whitelist2.addEnforcedAttribute("", "", "d-(HVYW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = "9@#0PD\\\"{$>\"0?SnL";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "col";
      stringArray0[1] = "9@#0PD\"{$>\"0?SnL";
      stringArray0[2] = "9@#0PD\"{$>\"0?SnL";
      Whitelist whitelist1 = whitelist0.addAttributes("9@#0PD\"{$>\"0?SnL", stringArray0);
      String string1 = "m~wHcQ58T}s`%";
      // Undeclared exception!
      try { 
        whitelist1.addTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String string0 = null;
      // Undeclared exception!
      try { 
        whitelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("M");
      whitelist_AttributeValue0.toString();
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("M", "M");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist1.addAttributes("M", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      whitelist0.isSafeTag("H_FI/Tv4|K^V+T=ky\"@");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("nofollow");
      Whitelist.AttributeKey.valueOf("mark");
      Whitelist.AttributeKey whitelist_AttributeKey1 = new Whitelist.AttributeKey("nofollow");
      whitelist_AttributeKey0.toString();
      whitelist_AttributeKey0.equals("mark");
      Whitelist whitelist0 = Whitelist.none();
      Whitelist.AttributeKey.valueOf("nth-last-child");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("nofollow", "nofollow", "%f");
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("'sI0JJ;P#,(u`uKh/$");
      whitelist0.removeEnforcedAttribute("nofollow", ":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dt";
      stringArray0[1] = "optgroup";
      stringArray0[2] = "nofollow";
      stringArray0[3] = "'sI0JJ;P#,(u`uKh/$";
      stringArray0[4] = "'sI0JJ;P#,(u`uKh/$";
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      whitelist2.getEnforcedAttributes("nofollow");
      whitelist_AttributeValue0.equals(whitelist1);
      whitelist0.removeEnforcedAttribute("nofollow", "q");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "46O+W]";
      stringArray0[1] = "46O+W]";
      stringArray0[2] = "46O+W]";
      stringArray0[3] = "46O+W]";
      Whitelist whitelist1 = whitelist0.addAttributes("46O+W]", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "46O+W]";
      stringArray1[1] = "46O+W]";
      stringArray1[2] = "46O+W]";
      Whitelist whitelist2 = whitelist1.removeAttributes("46O+W]", stringArray1);
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("46O+W]", "46O+W]", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "jqWf.8ByyrZh6$=";
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("jqWf.8ByyrZh6$=");
      Whitelist whitelist0 = Whitelist.none();
      Document document0 = new Document("jqWf.8ByyrZh6$=");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      document_OutputSettings1.outline(false);
      document2.html();
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute("jqWf.8ByyrZh6$=", document2, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = null;
      Element element0 = null;
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "&Sv'/+M7SNxpH}>W";
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addProtocols("&Sv'/+M7SNxpH}>W", "&Sv'/+M7SNxpH}>W", stringArray0);
      String string1 = "tdei{oTN ~m^*";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "&Sv'/+M7SNxpH}>W";
      stringArray1[1] = "&Sv'/+M7SNxpH}>W";
      stringArray1[2] = "tdei{oTN ~m^*";
      Whitelist.basic();
      stringArray1[3] = "^*h]TGJY:qY@|dI";
      stringArray1[4] = "&Sv'/+M7SNxpH}>W";
      stringArray1[5] = "tdei{oTN ~m^*";
      stringArray1[6] = "&Sv'/+M7SNxpH}>W";
      stringArray1[7] = "&Sv'/+M7SNxpH}>W";
      // Undeclared exception!
      try { 
        whitelist1.addProtocols("&Sv'/+M7SNxpH}>W", "tfoot", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dl";
      Whitelist.simpleText();
      stringArray0[1] = "dl";
      stringArray0[2] = "dl";
      Whitelist.basic();
      stringArray0[3] = "dl";
      stringArray0[4] = "dl";
      stringArray0[5] = "dl";
      stringArray0[6] = "dl";
      stringArray0[7] = "dl";
      Whitelist whitelist2 = whitelist1.addAttributes("dl", stringArray0);
      whitelist2.removeAttributes("dl", stringArray0);
      whitelist0.removeAttributes("blockquote", stringArray0);
      Whitelist whitelist3 = whitelist2.removeEnforcedAttribute("dl", "3$_R}}5g+\"mtH>~9jH");
      whitelist3.addAttributes("dl", stringArray0);
      Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false);
      // Undeclared exception!
      try { 
        whitelist4.addAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")Uw_mVlO`w8S7.Ig8";
      whitelist1.addAttributes(")Uw_mVlO`w8S7.Ig8", stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("col", "col", "tbody");
      Tag tag0 = Tag.valueOf("tbody");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Document document0 = new Document("col");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.head();
      FormElement formElement1 = formElement0.addElement((Element) null);
      Attribute attribute0 = new Attribute("col", "tbody", attributes0);
      whitelist1.isSafeAttribute("col", formElement1, attribute0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tk5l~GzY";
      stringArray0[1] = "tk5l~GzY";
      stringArray0[2] = "tk5l~GzY";
      stringArray0[3] = "tk5l~GzY";
      stringArray0[4] = "tk5l~GzY";
      stringArray0[5] = "tk5l~GzY";
      stringArray0[6] = "div";
      stringArray0[7] = "tk5l~GzY";
      whitelist0.addProtocols("tk5l~GzY", "tk5l~GzY", stringArray0);
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("sub");
      Whitelist.AttributeValue.valueOf("sub");
      whitelist_AttributeValue0.equals(whitelist0);
      Whitelist.basic();
      Whitelist whitelist1 = whitelist0.removeAttributes("tk5l~GzY", stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      Whitelist.basicWithImages();
      whitelist2.addProtocols("tk5l~GzY", "tk5l~GzY", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("div", "tk5l~GzY", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("nofollow");
      Whitelist.AttributeKey.valueOf("mark");
      Whitelist.AttributeKey.valueOf("nofollow");
      whitelist_AttributeKey0.toString();
      whitelist_AttributeKey0.equals("mark");
      Whitelist whitelist0 = Whitelist.none();
      Whitelist.AttributeKey.valueOf("nth-last-child");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("nofollow", "nofollow", "%f");
      Whitelist.AttributeValue.valueOf("'sI0JJ;P#,(u`uKh/$");
      whitelist0.removeEnforcedAttribute("nofollow", ":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dt";
      stringArray0[1] = "optgroup";
      stringArray0[2] = "nofollow";
      stringArray0[3] = "'sI0JJ;P#,(u`uKh/$";
      stringArray0[4] = "'sI0JJ;P#,(u`uKh/$";
      whitelist1.addTags(stringArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      whitelist0.addTags(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sub";
      stringArray0[1] = "sub";
      stringArray0[2] = "sub";
      stringArray0[3] = "sub";
      stringArray0[4] = "sub";
      stringArray0[5] = "sub";
      stringArray0[6] = "sub";
      stringArray0[7] = "sub";
      stringArray0[8] = "sub";
      Whitelist whitelist1 = whitelist0.addAttributes("sub", stringArray0);
      Whitelist whitelist2 = whitelist1.addProtocols("sub", "sub", stringArray0);
      Whitelist whitelist3 = whitelist2.addTags(stringArray0);
      Whitelist whitelist4 = whitelist3.removeAttributes("sub", stringArray0);
      Whitelist whitelist5 = whitelist4.removeTags(stringArray0);
      whitelist5.addEnforcedAttribute("sub", "sub", "W&\"k]Z*");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "org.jsoup.nodes.BooleanAttribute";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.nodes.BooleanAttribute", "org.jsoup.nodes.BooleanAttribute", "h2");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes("h2", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = "s)-TJyWD*pI";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s)-TJyWD*pI";
      Whitelist whitelist1 = whitelist0.addProtocols("s)-TJyWD*pI", "s)-TJyWD*pI", stringArray0);
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("s)-TJyWD*pI", "o)hKRiF8UIhH7", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("(c+ePmT30I{(]5", "&Sv'/+M7SNxpH}>W");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "osbqwW(3KMZ#";
      stringArray0[1] = "&Sv'/+M7SNxpH}>W";
      stringArray0[2] = "(c+ePmT30I{(]5";
      stringArray0[3] = "(c+ePmT30I{(]5";
      stringArray0[4] = "(c+ePmT30I{(]5";
      stringArray0[5] = "(c+ePmT30I{(]5";
      Whitelist whitelist2 = whitelist1.addProtocols("C,rhb|!8,#!rf*LE{D8", "osbqwW(3KMZ#", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "&Sv'/+M7SNxpH}>W";
      stringArray1[1] = "(c+ePmT30I{(]5";
      stringArray1[2] = "osbqwW(3KMZ#";
      Whitelist whitelist3 = whitelist2.addTags(stringArray1);
      Whitelist whitelist4 = whitelist3.addAttributes("prompt", stringArray1);
      String[] stringArray2 = new String[2];
      stringArray2[0] = "prompt";
      stringArray2[1] = "nofollow";
      whitelist4.removeAttributes("(c+ePmT30I{(]5", stringArray2);
      // Undeclared exception!
      try { 
        whitelist4.removeProtocols("br", "C,rhb|!8,#!rf*LE{D8", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "code";
      String string1 = "t3\"a$L|NdA@bp?hu";
      Document document0 = new Document("t3\"a$L|NdA@bp?hu");
      String string2 = null;
      document0.previousElementSibling();
      document0.previousSibling();
      Attribute attribute0 = new Attribute("t3\"a$L|NdA@bp?hu", (String) null, (Attributes) null);
      whitelist0.isSafeAttribute("code", document0, attribute0);
      Whitelist.basic();
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("code");
      Object object0 = new Object();
      whitelist_TagName0.equals(object0);
      // Undeclared exception!
      try { 
        whitelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[1] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[2] = "gAE|P";
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[4] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[5] = "org.jsoup.select.Evaluator$IndexLessThan";
      Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("org.jsoup.select.Evaluator$IndexLessThan");
      whitelist1.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexLessThan", "gAE|P", "HTcNq]zn8]BqWW");
      Tag tag0 = Tag.valueOf("gAE|P");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "yo;(&(FLGATr\f.8", attributes0);
      Attribute attribute0 = new Attribute("width", "gAE|P", attributes0);
      attribute0.html();
      whitelist1.isSafeAttribute("yo;(&(FLGATr\f.8", pseudoTextElement0, attribute0);
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexLessThan", "width", "yac1}=DC)k s'ms$t");
      whitelist2.addEnforcedAttribute("gAE|P", "xwH0A<E3& ot&U>TN", "org.jsoup.select.Evaluator$IndexLessThan");
      whitelist2.getEnforcedAttributes("gAE|P");
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("org.jsoup.select.Evaluator$IndexLessThan");
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("yac1}=DC)k s'ms$t");
      whitelist_TagName0.equals(whitelist_AttributeKey0);
      Whitelist.basic();
      whitelist2.isSafeTag("org.jsoup.select.Evaluator$IndexLessThan");
      Whitelist.relaxed();
      Whitelist whitelist3 = Whitelist.simpleText();
      whitelist1.removeAttributes("yo;(&(FLGATr\f.8", stringArray0);
      whitelist3.getEnforcedAttributes("dd");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      stringArray0[3] = ":all";
      stringArray0[4] = ":all";
      stringArray0[5] = ":all";
      stringArray0[6] = ":all";
      stringArray0[7] = ":all";
      whitelist0.removeAttributes(":all", stringArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dl";
      Whitelist whitelist2 = Whitelist.simpleText();
      stringArray0[1] = "dl";
      stringArray0[2] = "dl";
      Whitelist.basic();
      stringArray0[3] = "dl";
      stringArray0[4] = "dl";
      stringArray0[5] = "dl";
      stringArray0[6] = "dl";
      stringArray0[7] = "dl";
      Whitelist whitelist3 = whitelist1.addAttributes("dl", stringArray0);
      whitelist3.removeEnforcedAttribute("dl", "3$_R}}5g+\"mtH>~9jH");
      whitelist3.preserveRelativeLinks(false);
      Whitelist whitelist4 = whitelist2.addProtocols("dl", "6R0", stringArray0);
      whitelist2.removeTags(stringArray0);
      whitelist4.removeAttributes("dl", stringArray0);
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("dl");
      whitelist_TagName0.equals((Object) null);
      whitelist_TagName0.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist.basic();
      whitelist0.addEnforcedAttribute("B\"|JSX5\">,&lP7k$Zof", "B\"|JSX5\">,&lP7k$Zof", "B\"|JSX5\">,&lP7k$Zof");
      Whitelist.simpleText();
      whitelist0.addEnforcedAttribute("B\"|JSX5\">,&lP7k$Zof", "B\"|JSX5\">,&lP7k$Zof", "MqH#qW");
      Document document0 = new Document("B\"|JSX5\">,&lP7k$Zof");
      document0.attr("caption", false);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Document document3 = document2.ownerDocument();
      Element element0 = document3.body();
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("strike", "progress", attributes0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      Attribute attribute1 = attribute0.clone();
      whitelist0.isSafeAttribute("B\"|JSX5\">,&lP7k$Zof", element0, attribute1);
      Whitelist.basicWithImages();
      Whitelist.relaxed();
      Whitelist.relaxed();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "&Sv'/+M7SNxpH}>W";
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addProtocols("&Sv'/+M7SNxpH}>W", "&Sv'/+M7SNxpH}>W", stringArray0);
      String string1 = "tdei{oTN ~m^*";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "&Sv'/+M7SNxpH}>W";
      stringArray1[1] = "&Sv'/+M7SNxpH}>W";
      stringArray1[2] = "tdei{oTN ~m^*";
      Whitelist whitelist2 = Whitelist.basic();
      Whitelist.basicWithImages();
      Whitelist.simpleText();
      whitelist2.isSafeTag("&Sv'/+M7SNxpH}>W");
      stringArray1[3] = "^*h]TGJY:qY@|dI";
      stringArray1[4] = "&Sv'/+M7SNxpH}>W";
      stringArray1[5] = "tdei{oTN ~m^*";
      stringArray1[6] = "&Sv'/+M7SNxpH}>W";
      stringArray1[7] = "&Sv'/+M7SNxpH}>W";
      // Undeclared exception!
      try { 
        whitelist1.addProtocols("&Sv'/+M7SNxpH}>W", "tfoot", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("nofollow");
      Whitelist.AttributeKey.valueOf("ON");
      Whitelist.AttributeKey whitelist_AttributeKey1 = new Whitelist.AttributeKey("nofollow");
      whitelist_AttributeKey0.toString();
      whitelist_AttributeKey0.equals("ON");
      Whitelist whitelist0 = Whitelist.none();
      Whitelist.AttributeKey.valueOf("nth-last-child");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("nofollow", "nofollow", "%f");
      whitelist0.getEnforcedAttributes("tbody");
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("nth-last-child");
      whitelist0.removeEnforcedAttribute("nofollow", ":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dt";
      stringArray0[1] = "optgroup";
      stringArray0[2] = "nofollow";
      stringArray0[3] = "'sI0JJ;P#,(u`uKh/$";
      stringArray0[4] = "'sI0JJ;P#,(u`uKh/$";
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      whitelist2.getEnforcedAttributes("nofollow");
      whitelist_AttributeValue0.equals(whitelist1);
      Whitelist whitelist3 = whitelist0.removeEnforcedAttribute("nth-last-child", "q");
      String[] stringArray1 = new String[8];
      stringArray1[0] = "ON";
      stringArray1[1] = "nofollow";
      stringArray1[2] = "nofollow";
      stringArray1[3] = "nth-last-child";
      stringArray1[4] = "nofollow";
      stringArray1[5] = "ON";
      stringArray1[6] = "nofollow";
      stringArray1[7] = "nofollow";
      whitelist3.removeTags(stringArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dl";
      Whitelist.simpleText();
      stringArray0[1] = "dl";
      stringArray0[2] = "dl";
      Whitelist.basic();
      stringArray0[3] = "dl";
      stringArray0[4] = "dl";
      stringArray0[5] = "dl";
      stringArray0[6] = "dl";
      stringArray0[7] = "dl";
      Whitelist whitelist2 = whitelist1.addAttributes("dl", stringArray0);
      Whitelist whitelist3 = whitelist2.removeAttributes("dl", stringArray0);
      Whitelist.relaxed();
      whitelist3.addEnforcedAttribute("dl", "dl", "dl");
      whitelist0.removeAttributes("blockquote", stringArray0);
      Whitelist whitelist4 = whitelist2.removeEnforcedAttribute("dl", "3$_R}}5g+\"mtH>~9jH");
      whitelist4.addAttributes("dl", stringArray0);
      Whitelist whitelist5 = whitelist2.preserveRelativeLinks(false);
      // Undeclared exception!
      try { 
        whitelist5.addAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
