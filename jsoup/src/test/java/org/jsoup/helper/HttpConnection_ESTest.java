/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 09:02:24 GMT 2018
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      hashMap0.put("&quot;", list2);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      httpConnection_Request1.validateTLSCertificates(false);
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.Connection$Method", "org.jsoup.Connection$Method");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal0.value());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-3981));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)66}, byteArray0);
      assertEquals((-3981), byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)66}, byteArray0);
      assertEquals((-3981), byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pushbackInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)66}, byteArray0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal0.value());
      assertEquals((-3981), byteArrayInputStream0.available());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal1.value());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals(3, byteArray0.length);
      
      String string0 = httpConnection_KeyVal1.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)66}, byteArray0);
      assertEquals("org.jsoup.Connection$Method=org.jsoup.Connection$Method", string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal0.value());
      assertEquals((-3981), byteArrayInputStream0.available());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal1.value());
      assertEquals("org.jsoup.Connection$Method", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals(3, byteArray0.length);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      httpConnection_Request0.validateTLSCertificates(true);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      boolean boolean0 = httpConnection_Request0.validateTLSCertificates();
      assertTrue(boolean0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("; filename=\"");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeCookie("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset(":rzu`0Ej{}");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(":rzu`0Ej{}", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(":rzu`0Ej{}", httpConnection_Response1.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = Parser.parseXmlFragment("N", "^");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset("N");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // N
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      Parser.htmlParser();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      httpConnection_Request2.header("0aip\"Nd%n", "AC/MG[D?Q u*:9[z");
      httpConnection_Request2.maxBodySize(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "&rHZS=ZvrTVB%");
      HttpConnection.encodeUrl(uRL1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(6);
      // Undeclared exception!
      try { 
        httpConnection_Request1.proxy((String) null, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("Header name must not be null", 1570);
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser0);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(1570);
      httpConnection_Request4.timeout();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1048576);
      // Undeclared exception!
      try { 
        httpConnection_Request1.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("URL must not be null", "URL must not be null");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("URL must not be null");
      httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      httpConnection_Request0.addHeader("URL must not be null", "");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      httpConnection_Request1.data();
      httpConnection_KeyVal0.value("URL must not be null");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, (String) null, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "sGi_^=e`");
      PipedInputStream pipedInputStream0 = new PipedInputStream(889);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("multipart/form-data");
      httpConnection_KeyVal2.hasInputStream();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.requestBody("]  ");
      httpConnection_Request0.requestBody("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      httpConnection_Request1.ignoreHttpErrors();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(false);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.followRedirects(true);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(2125);
      httpConnection_Request2.parser();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("", 1488);
      httpConnection_Request1.followRedirects();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "!+s;T3ts6|s";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("!+s;T3ts6|s", "!+s;T3ts6|s", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(32);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(",U-oGp|~o83", ",U-oGp|~o83", 36, ",U-oGp|~o83", uRLStreamHandler0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpConnection.encodeUrl(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "0aip\"nd%n";
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpConnection.connect(uRL0);
      HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.PUT;
      httpConnection_Response0.method(connection_Method0);
      httpConnection_Response0.charset();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request0.method = connection_Method0;
      Connection.Method connection_Method1 = Connection.Method.POST;
      httpConnection_Request0.method = connection_Method1;
      httpConnection_Request0.requestBody();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      httpConnection_KeyVal0.value("org.jsoup.select.Evaluator$IsFirstOfType");
      httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.contentType();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.statusCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("TQC5\"");
      httpConnection_Response1.contentType();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.timeout(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "https", (InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.requestBody("");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1417);
      httpConnection_Request1.validateTLSCertificates();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "https";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("https", "Too many redirects occurred trying to load URL %s", (InputStream) null);
      httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal.create(",FYv}b|yEfxc-J", "");
      HttpConnection.KeyVal.create("https", "Too many redirects occurred trying to load URL %s", (InputStream) null);
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.headers = null;
      httpConnection_Response0.removeCookie("(6NOi)");
      String string0 = "WBcFjR(&ua;%!w";
      httpConnection_Response0.charset("WBcFjR(&ua;%!w");
      // Undeclared exception!
      try { 
        HttpConnection.connect("WBcFjR(&ua;%!w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: WBcFjR(&ua;%!w
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ".";
      MockFile mockFile0 = new MockFile("aud@X;l8}D$,", ".");
      File file0 = MockFile.createTempFile("aud@X;l8}D$,", "org.jsoup.nodes.Comment", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("aud@X;l8}D$,", "(r#y--\"v#SUcH-h", (InputStream) mockFileInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) mockFileInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("(r#y--\"v#SUcH-h");
      httpConnection_KeyVal2.key();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      httpConnection_Request0.requestBody("(r#y--\"v#SUcH-h");
      httpConnection_KeyVal2.toString();
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset("aud@X;l8}D$,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // aud@X;l8}D$,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "k3");
      httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.key("k3");
      httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.contentType("k3");
      httpConnection_KeyVal0.key("Content-Encoding=k3");
      httpConnection_KeyVal0.contentType();
      httpConnection_KeyVal0.value();
      httpConnection_KeyVal0.key();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 3382;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("Tag name must not be empty.", 3382);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      // Undeclared exception!
      try { 
        httpConnection_Request2.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.cookie("6O/f+vRl&y-Wo", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      httpConnection_Request0.header("'G<l{h:[0yYaU]rr", "'G<l{h:[0yYaU]rr");
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("Header name must not be null", 1570);
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser0);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(1570);
      httpConnection_Request4.cookie("ch{UXJq`X\"s>~u", "Header name must not be null");
      httpConnection_Request4.timeout();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("", 345);
      httpConnection_Request1.maxBodySize();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Parser parser1 = parser0.settings(parseSettings0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser1);
      httpConnection_Request1.ignoreContentType();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request0.proxy(proxy0);
      httpConnection_Request0.ignoreContentType(false);
      httpConnection_Request0.ignoreHttpErrors();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("checked", 42);
      httpConnection_Request1.postDataCharset();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.helper.HttpConnection$1", "og\u0006LH_0'QdR5ayc8");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("og\u0006LH_0'QdR5ayc8");
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(":matchText");
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.key("og\u0006LH_0'QdR5ayc8");
      httpConnection_KeyVal3.value("org.jsoup.helper.HttpConnection$1");
      httpConnection_KeyVal2.hasInputStream();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpConnection.encodeUrl((URL) null);
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Request0.method(connection_Method0);
      httpConnection_Request0.requestBody("SSL");
      httpConnection_Request0.ignoreHttpErrors(false);
      httpConnection_Request0.parser();
      HttpConnection.KeyVal.create("details", "svrmnQ~#\"EzD");
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "9ppYg1+$T6`bG^N";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("y$[H_jn_S{tK", "9ppYg1+$T6`bG^N");
      httpConnection_Request0.headers = null;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("z#");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request0.url = uRL0;
      httpConnection_Request0.followRedirects();
      httpConnection_KeyVal0.value("9ppYg1+$T6`bG^N");
      httpConnection_KeyVal1.contentType("vf<ChQtu@1nQ");
      httpConnection_KeyVal0.contentType();
      try { 
        HttpConnection.Response.execute(httpConnection_Request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      MockFile mockFile0 = new MockFile("org.jsoup.Connection$Method");
      mockFile0.deleteOnExit();
      URL uRL0 = mockFile0.toURL();
      httpConnection_Request0.url(uRL0);
      httpConnection_Request0.ignoreHttpErrors(true);
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("S9byNxy,pVf@YN:");
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      httpConnection_Response1.processResponseHeaders(map0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.statusCode();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("compact", 0);
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      httpConnection_Request3.proxy(proxy0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("L?*", "L?*", (InputStream) dataInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("L?*");
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("L?*");
      httpConnection_KeyVal2.inputStream();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("~C'w=\u0001GRJZc9RUy", "org.jsoup.helper.HttpConnection$1", (InputStream) bufferedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      httpConnection_KeyVal0.value("org.jsoup.helper.HttpConnection$1");
      httpConnection_KeyVal1.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.addHeader("~C'w=\u0001GRJZc9RUy=org.jsoup.helper.HttpConnection$1", "~C'w=\u0001GRJZc9RUy=org.jsoup.helper.HttpConnection$1");
      httpConnection_Request0.addHeader("org.jsoup.helper.HttpConnection$1", "~C'w=\u0001GRJZc9RUy");
      httpConnection_Request0.header("Key val must not be null", "~C'w=\u0001GRJZc9RUy=org.jsoup.helper.HttpConnection$1");
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize((-1241));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
