/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 08:56:25 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;
import sun.nio.cs.MS1252;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      Node node0 = xmlDeclaration0.attr("|xe4GO[y%eQo?$P5f/!", "|xe4GO[y%eQo?$P5f/!");
      node0.outerHtml();
      Document document0 = Document.createShell("title");
      document0.hasText();
      document0.outerHtml();
      document0.getElementsByAttributeStarting("|xe4GO[y%eQo?$P5f/!");
      document0.cssSelector();
      // Undeclared exception!
      try { 
        element0.replaceWith(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      Document document0 = new Document("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(document0);
      Node node0 = xmlDeclaration0.attr("#dec", "|xe4GO[y%eQo?$P5f/!");
      node0.outerHtml();
      Document document1 = Document.createShell("title");
      document1.hasText();
      document1.outerHtml();
      document1.getElementsByAttributeStarting("#dec");
      document1.cssSelector();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[1].attr("abs: gf(C&Jf", "HU(*7g");
      nodeArray0[2] = (Node) document0;
      document1.getElementsByTag("<!|xe4GO[y%eQo?$P5f/! #dec=\"|xe4GO[y%eQo?$P5f/!\"!>");
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = node0;
      // Undeclared exception!
      try { 
        document1.addChildren(960, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("%");
      Element element0 = document0.prependElement("%");
      element0.wrap("%");
      Tag tag0 = Tag.valueOf("%");
      CDataNode cDataNode0 = new CDataNode("y8");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.helper.HttpConnection$Response", attributes0);
      formElement0.addElement(document0);
      formElement0.formData();
      DataNode dataNode0 = new DataNode("y8");
      DataNode dataNode1 = dataNode0.setWholeData("%");
      dataNode1.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("meta");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document0.classNames();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document0.html();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document0.is((Evaluator) evaluator_IsOnlyOfType0);
      document1.parents();
      Element element0 = document0.html("meta");
      element0.toString();
      document0.charset();
      document0.body();
      element0.childNodesCopy();
      DocumentType documentType0 = new DocumentType("meta", "#declaration", "P99g]dS]0=!2b@");
      documentType0.setPubSysKey("5ZcYI{'_651Y\"*g");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.nodeName();
      DataNode.createFromEncoded("f", "meta");
      // Undeclared exception!
      try { 
        documentType0.replaceChild((Node) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      Node node0 = xmlDeclaration0.attr("#dec", "|xe4GO[y%eQo?$P5f/!");
      node0.outerHtml();
      Document document0 = Document.createShell("title");
      document0.hasText();
      document0.outerHtml();
      document0.getElementsByAttributeStarting("#dec");
      document0.cssSelector();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#dec");
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = node0;
      // Undeclared exception!
      try { 
        document0.addChildren(960, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Comment comment0 = new Comment(";>D~N.");
      comment0.coreValue("<CGcr,k~J");
      comment0.siblingIndex = 2197;
      String string0 = "RG";
      comment0.removeAttr("RG");
      comment0.equals(";>D~N.");
      String string1 = "TRACE";
      CDataNode cDataNode0 = new CDataNode("TRACE");
      // Undeclared exception!
      try { 
        cDataNode0.splitText(2447);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      Node node0 = xmlDeclaration0.attr("#dec", "|xe4GO[y%eQo?$P5f/!");
      node0.outerHtml();
      Document document0 = Document.createShell("title");
      document0.hasText();
      document0.outerHtml();
      document0.getElementsByAttributeStarting("#dec");
      document0.cssSelector();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = node0;
      // Undeclared exception!
      try { 
        document0.addChildren(960, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("}R");
      // Undeclared exception!
      try { 
        cDataNode0.addChildren(98688, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Document.createShell("abs:#doctype");
      Document document1 = (Document)document0.attr("abs:#doctype", "abs:#doctype");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      document1.attr("abs:#doctype");
      document1.attributes();
      Element element0 = document1.appendElement("abs:#doctype");
      element0.nextSibling();
      document1.childNodesAsArray();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "JDG";
      Document document0 = Document.createShell("JDG");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Element element0 = document2.body();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element1 = (Element)element0.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        element1.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("vE^g");
      Document document1 = document0.clone();
      document1.title("MSNn");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      Document document2 = Document.createShell("uNd)O-Y%H \"IuN");
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      document1.addChildren(nodeArray0);
      Element element0 = document1.shallowClone();
      element0.textNodes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("nowrap", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("vE^g");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "e|# YiK", attributes0);
      cDataNode0.setParentNode(element0);
      Element element1 = document0.empty();
      FormElement formElement1 = formElement0.addElement(element1);
      formElement1.addElement(element1);
      document0.body();
      element0.baseUri();
      document0.val("o.W;y@^Ab<-_");
      document0.updateMetaCharsetElement(true);
      TextNode.normaliseWhitespace("");
      DocumentType documentType0 = new DocumentType("rB^", "", "pzlX}", "pzlX}", "nowrap");
      documentType0.setPubSysKey("nowrap");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.clone();
      document1.clone();
      Element element0 = document1.appendTo(document0);
      String string1 = "";
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("");
      evaluator_ContainsText0.toString();
      document0.is((Evaluator) evaluator_ContainsText0);
      String string0 = "fallback";
      Document document1 = (Document)document0.prependText("fallback");
      document1.shallowClone();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document1.traverse(nodeVisitor0);
      document2.setSiblingIndex((-432));
      document1.setSiblingIndex((-432));
      Document document3 = document0.normalise();
      document1.ownerDocument();
      String string1 = "plaintext";
      document0.getElementsByTag("plaintext");
      document1.isBlock();
      document3.childNodesCopy();
      document3.classNames();
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.siblingIndex = 0;
      Element element0 = document2.empty();
      element0.tag();
      document1.updateMetaCharsetElement();
      document2.prependChild(document0);
      document1.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = " 4U{vX#xT0+sT 7";
      Comment comment0 = new Comment(" 4U{vX#xT0+sT 7");
      comment0.attributes();
      // Undeclared exception!
      try { 
        comment0.childNodesCopy();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "ol";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("ol", false);
      Node node0 = xmlDeclaration0.shallowClone();
      node0.hasAttr("ol");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "ol");
      xmlDeclaration0.outerHtmlHead(stringBuffer0, 1059, (Document.OutputSettings) null);
      String string1 = "E{]n^{;Q~`8O[]*";
      // Undeclared exception!
      try { 
        xmlDeclaration0.after("E{]n^{;Q~`8O[]*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = (Document)document1.appendTo(document0);
      // Undeclared exception!
      try { 
        document2.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Entities$EscapeMode");
      element0.getAllElements();
      element0.childNodes();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      element0.html(bufferedWriter0);
      element0.hasSameValue(charArrayWriter0);
      // Undeclared exception!
      try { 
        element0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("#:,}HFcZuYFgD");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(638);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document document2 = document1.clone();
      Element element0 = document2.addClass("5ox+T.mAQgq1b}");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element0.filter(nodeFilter0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      NodeFilter nodeFilter0 = null;
      document0.clearAttributes();
      // Undeclared exception!
      try { 
        document0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "VNFw]%TXl%hsC,_Hk:");
      // Undeclared exception!
      try { 
        textNode0.childNode(26);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("ZIq&If.");
      Element element0 = document0.body();
      element0.getElementsByAttributeStarting("m~>d4`B(");
      document0.text();
      // Undeclared exception!
      try { 
        element0.setBaseUri((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "#text";
      Document document0 = Document.createShell("#text");
      Element element0 = document0.createElement("org.jsoup.nodes.Node");
      element0.textNodes();
      document0.setParentNode(element0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      String string1 = ",";
      document3.setBaseUri(",");
      // Undeclared exception!
      try { 
        document3.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell(":root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      List<Node> list0 = document1.childNodes;
      document1.childNodes = list0;
      document0.getElementsMatchingOwnText(":root");
      Document document2 = document1.clone();
      Document document3 = document2.normalise();
      Charset charset0 = document2.charset();
      document3.childNode(0);
      charset0.aliases();
      document3.charset(charset0);
      document2.getElementsByAttributeValue(":root", ":root");
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("5ZcYI{'_651Y\"*g", parseSettings0);
      Element element0 = new Element(tag0, "\"impa`7Vuo^FhLP%Q>.");
      Document document0 = new Document("\"impa`7Vuo^FhLP%Q>.");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      List<Node> list0 = document1.ensureChildNodes();
      element0.childNodes = list0;
      element0.dataset();
      element0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      String string1 = null;
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Node$OuterHtmlVisitor", "<S+lvWB2}3En;", "<S+lvWB2}3En;", (String) null);
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document document2 = document1.normalise();
      int int0 = 128;
      document2.className();
      // Undeclared exception!
      try { 
        document0.childNode(128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("]3dJ1(!0{n");
      Document document1 = (Document)document0.tagName("Z.BHq]'zDT$L?");
      MS1252 mS1252_0 = (MS1252)Charset.defaultCharset();
      document0.charset((Charset) mS1252_0);
      Pattern pattern0 = Pattern.compile("k-bdmA9-jiA");
      document0.getElementsMatchingText(pattern0);
      Elements elements0 = document1.getElementsMatchingText("Z.BHq]'zDT$L?");
      Document document2 = (Document)document0.appendText("jwh;)uprNa1!0{ ");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "]3dJ1(!0{n";
      objectArray0[1] = (Object) "jwh;)uprNa1!0{ ";
      objectArray0[2] = (Object) elements0;
      objectArray0[3] = (Object) "k-bdmA9-jiA";
      objectArray0[4] = (Object) "";
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.printf((Locale) null, "", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document2.indent(mockPrintStream2, 1, document_OutputSettings0);
      document2.cssSelector();
      document2.getElementsByIndexGreaterThan(1);
      // Undeclared exception!
      try { 
        document1.replaceChild(document2, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":^0kMS1]hH");
      Document document0 = Document.createShell("bMAr\"XGD8!c5jy");
      Tag.valueOf("org.jsoup.nodes.Node");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Attributes attributes0 = document1.attributes();
      FormElement formElement0 = new FormElement(tag0, ":^0kMS1]hH", attributes0);
      Document document2 = (Document)document1.prependText("o=c#8;A ");
      FormElement formElement1 = formElement0.addElement(document2);
      Document document3 = (Document)document0.empty();
      document2.childNodesAsArray();
      formElement1.formData();
      document_OutputSettings0.clone();
      document_OutputSettings0.encoder();
      formElement1.className();
      formElement0.equals(document1);
      document3.parent();
      document0.getElementById("Qh/)9FH/mt");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "crqV*";
      String string1 = "dmS53vm}";
      TextNode textNode0 = TextNode.createFromEncoded("crqV*", "dmS53vm}");
      Node node0 = textNode0.clearAttributes();
      node0.siblingNodes();
      // Undeclared exception!
      try { 
        textNode0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$1";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$1", false);
      // Undeclared exception!
      try { 
        xmlDeclaration0.reparentChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("#declaration");
      document0.outputSettings();
      DataNode dataNode0 = new DataNode("head");
      Node node0 = dataNode0.clearAttributes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataNode dataNode1 = dataNode0.setWholeData("#declaration");
      dataNode1.nodeName();
      document0.getElementsByAttributeValueStarting("abs::not(selector) subselect must not be empty", "abs:kq|jgz?bc$0/3e");
      document0.getElementsByIndexEquals(1533);
      document0.tagName();
      node0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("W*3_yX!(<", parseSettings0);
      Element element0 = new Element(tag0, "allowfullscreen");
      document0.appendTo(element0);
      document0.dataNodes();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      document0.remove();
      String string0 = "_!R$3.RRl]?_<aC++}";
      // Undeclared exception!
      try { 
        Charset.forName("_!R$3.RRl]?_<aC++}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _!R$3.RRl]?_<aC++}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "@q\"nmDUF|+f~ok=Qj?";
      Comment comment0 = new Comment("@q\"nmDUF|+f~ok=Qj?");
      comment0.shallowClone();
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.siblingIndex();
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document3 = document2.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document4.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "org.jsoup.nodes.CDataNode";
      Document document0 = Document.createShell("org.jsoup.nodes.CDataNode");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.toggleClass("org.jsoup.nodes.CDataNode");
      // Undeclared exception!
      try { 
        document0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("#a0yL{(|qR");
      document0.outerHtml();
      Document document1 = (Document)document0.empty();
      // Undeclared exception!
      try { 
        document1.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Comment comment0 = new Comment("I?/z$xTA", "I?/z$xTA");
      // Undeclared exception!
      try { 
        comment0.wrap(":ImmediateParent%s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("/+^[");
      Document document1 = document0.normalise();
      document1.dataset();
      document1.ensureChildNodes();
      CDataNode cDataNode0 = new CDataNode("/+^[");
      // Undeclared exception!
      try { 
        cDataNode0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell(";EK!");
      Document document1 = document0.normalise();
      Pattern pattern0 = Pattern.compile(";EK!", 0);
      Pattern.matches("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      document1.getElementsMatchingOwnText(pattern0);
      Element element0 = document1.removeClass(";EK!");
      element0.childNodeSize();
      document1.hasAttributes();
      DocumentType documentType0 = new DocumentType(";EK!", "org.jsoup.nodes.Node", (String) null, ">D6f|<APK<dx-(", "org.jsoup.nodes.Node");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">D6f|<APK<dx-(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      documentType0.outerHtmlTail(stringWriter1, 0, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.clone();
      document1.normalise();
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Comment[] commentArray0 = new Comment[5];
      Comment comment0 = new Comment("", "X-nu8TPr");
      commentArray0[0] = comment0;
      Comment comment1 = new Comment("X-nu8TPr");
      commentArray0[1] = comment1;
      Comment comment2 = new Comment("");
      commentArray0[2] = comment2;
      Comment comment3 = new Comment("");
      commentArray0[3] = comment3;
      Comment comment4 = new Comment("<MKWNPoqb5m");
      commentArray0[4] = comment4;
      linkedList0.toArray(commentArray0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.parent();
      document1.previousElementSibling();
      document1.baseUri();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("2o5");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Element element0 = document2.attr("", "");
      element0.removeAttr("2o5");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("[");
      Tag tag0 = document0.tag();
      String string0 = "!GiR]/g8hSBM:hF7";
      Attributes attributes0 = document0.attributes();
      Element element0 = new Element(tag0, "!GiR]/g8hSBM:hF7", attributes0);
      List<TextNode> list0 = element0.textNodes();
      document0.wholeText();
      document0.ownerDocument();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      String string1 = null;
      Pattern pattern0 = Pattern.compile("!GiR]/g8hSBM:hF7");
      formElement0.getElementsByAttributeValueMatching((String) null, pattern0);
      // Undeclared exception!
      try { 
        formElement0.insertChildren((-3315), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("tt");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = (Document)document1.appendTo(document0);
      // Undeclared exception!
      document2.before("tt");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("&#x");
      Element element0 = document0.body();
      Element element1 = document0.prependChild(element0);
      element0.setBaseUri("");
      element1.addClass("k L");
      element0.getElementsByAttribute("#doctype");
      element0.before("");
      element1.attr("", "k L");
      document0.getElementsByIndexEquals(198);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", true);
      xmlDeclaration0.nodeName();
      xmlDeclaration0.clone();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      TextNode textNode0 = TextNode.createFromEncoded(",cv@j6T|O~X8$b", ",cv@j6T|O~X8$b");
      // Undeclared exception!
      try { 
        textNode0.before(",cv@j6T|O~X8$b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("&`Y*o&Nww_`");
      Document document1 = document0.normalise();
      document1.parents();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings0);
      document2.nextSibling();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document2.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.clone();
      Element element0 = document1.val("");
      document1.text();
      document1.toString();
      Pattern pattern0 = Pattern.compile("", 2105);
      element0.getElementsByAttributeValueMatching("", pattern0);
      element0.elementSiblingIndex();
      document0.setBaseUri("");
      Element element1 = document0.shallowClone();
      element0.appendTo(element1);
      element1.classNames();
      document1.attributes();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      xmlDeclaration0.nodelistChanged();
      xmlDeclaration0.name();
      // Undeclared exception!
      try { 
        element1.is("/8tO(oaVb$19W");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '/8tO(oaVb$19W': unexpected token at '/8tO(oaVb$19W'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("&`Y*o&Nww_`");
      Document document1 = document0.normalise();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      document1.parents();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("&`Y*o&Nww_`", false);
      document0.html((OutputStreamWriter) mockFileWriter0);
      document2.getElementsByAttributeValue("typemustmatch", "typemustmatch");
      document0.cssSelector();
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataNode dataNode0 = new DataNode("&qfMMtMikGEq");
      int int0 = (-3627);
      dataNode0.childNodeSize();
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-3627));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document1 = document0.clone();
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.prepend("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document2.childNodesAsArray();
      Document document3 = (Document)element0.html("org.jsoup.nodes.Node$OuterHtmlVisitor");
      element0.getElementsContainingText("org.jsoup.nodes.Node$OuterHtmlVisitor");
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.nodeName();
      Document document4 = (Document)document0.html("");
      element0.getElementsByAttributeValueStarting("4T&6VD)Gc{e]?nhY2", "4T&6VD)Gc{e]?nhY2");
      document0.getElementsMatchingOwnText("map");
      document4.ownText();
      document4.childNodes();
      document3.appendTo(document4);
      document2.getOutputSettings();
      document2.data();
      document3.childNodesAsArray();
      element0.parentNode();
      TextNode.createFromEncoded("");
      document4.getElementsByClass("v4[e\"");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document1 = document0.clone();
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.prepend("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document2.childNodesAsArray();
      Document document3 = (Document)element0.html("org.jsoup.nodes.Node$OuterHtmlVisitor");
      element0.getElementsContainingText("org.jsoup.nodes.Node$OuterHtmlVisitor");
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.nodeName();
      Document document4 = (Document)document0.html("");
      element0.getElementsByAttributeValueStarting("4T&6VD)Gc{e]?nhY2", "4T&6VD)Gc{e]?nhY2");
      document0.getElementsMatchingOwnText("map");
      document4.ownText();
      document4.childNodes();
      document2.getOutputSettings();
      document2.data();
      document3.childNodesAsArray();
      element0.parentNode();
      TextNode.createFromEncoded("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("<J{T}Q._y");
      Document document1 = document0.normalise();
      document1.getAllElements();
      // Undeclared exception!
      try { 
        document1.childNode((-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "meta";
      Document document0 = Document.createShell("meta");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document0.classNames();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document_OutputSettings1.prepareEncoder();
      document0.html();
      Document document2 = document1.clone();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document2.is((Evaluator) evaluator_IsOnlyOfType0);
      document2.parents();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document1.addChildren((-615), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -615, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("~lAmbHS/m<6f^Y");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Document document3 = (Document)document2.append("~lAmbHS/m<6f^Y");
      document3.previousSibling();
      document3.id();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document3;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      nodeArray0[5] = null;
      // Undeclared exception!
      try { 
        document3.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("8EkS\"G~k|)e[");
      document0.prependText("8EkS\"G~k|)e[");
      document0.outerHtml();
      document0.getElementsByAttributeValueStarting("8EkS\"G~k|)e[", "wom*,NoT>l)Evr");
      Element element0 = document0.head();
      document0.dataNodes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.hasParent();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("meta");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document0.classNames();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document_OutputSettings1.prepareEncoder();
      document0.html();
      Document document2 = document1.clone();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document2.is((Evaluator) evaluator_IsOnlyOfType0);
      document2.parents();
      Element element0 = document2.html("meta");
      element0.toString();
      document0.charset();
      document0.body();
      element0.childNodesCopy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.nodeName();
      DataNode.createFromEncoded("f", "meta");
      document2.hasParent();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("meta");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document0.classNames();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document_OutputSettings1.prepareEncoder();
      document0.html();
      Document document2 = document1.clone();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document2.is((Evaluator) evaluator_IsOnlyOfType0);
      document2.parents();
      Element element0 = document2.html("meta");
      element0.toString();
      document0.charset();
      Element element1 = document0.body();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.traverse(nodeVisitor0);
      element0.childNodesCopy();
      DocumentType documentType0 = new DocumentType("meta", "#declaration", "P99g]dS]0=!2b@");
      documentType0.setPubSysKey("5ZcYI{'_651Y\"*g");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.nodeName();
      DataNode.createFromEncoded("f", "meta");
      element1.baseUri();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      textNode0.coreValue();
      TextNode.stripLeadingWhitespace("");
      textNode0.text();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      textNode0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("F$b_ O[R|4(Sojfhy");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.clone();
      String string0 = "g/;ee'#ZQq=[{qbR";
      Document document2 = Document.createShell("F$b_ O[R|4(Sojfhy");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        document0.replaceChild(document2, document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Node node0 = document0.clearAttributes();
      // Undeclared exception!
      try { 
        node0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("tt");
      Document document1 = Document.createShell("tt");
      Document document2 = (Document)document1.appendTo(document0);
      Document document3 = (Document)document2.before("tt");
      Pattern pattern0 = Pattern.compile("B&4?=8D_QOM}", 10);
      document1.hasSameValue(document3);
      document1.getElementsMatchingOwnText(pattern0);
      document1.dataNodes();
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 960, (Document.OutputSettings) null);
      Node node0 = xmlDeclaration0.attr("#dec", "zgDKmomdfuxu1/d");
      node0.outerHtml();
      node0.siblingNodes();
      Document document0 = Document.createShell("title");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.hasText();
      document2.outerHtml();
      document2.getElementsByAttributeStarting("#dec");
      document1.cssSelector();
      document2.prependChild(document1);
      document0.root();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 960, (Document.OutputSettings) null);
      Node node0 = xmlDeclaration0.attr("#dec", "zgDKmomdfuxu1/d");
      node0.outerHtml();
      node0.siblingNodes();
      Document document0 = Document.createShell("title");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.hasText();
      document2.outerHtml();
      document2.getElementsByAttributeStarting("#dec");
      document1.cssSelector();
      document2.prependChild(document1);
      document1.parent();
      document2.dataset();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("meta");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document_OutputSettings1.prepareEncoder();
      document0.html();
      Document document2 = document1.clone();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document2.parents();
      Document document3 = (Document)document2.html("meta");
      document3.toString();
      document0.charset();
      Element element0 = document0.body();
      document3.childNodesCopy();
      DocumentType documentType0 = new DocumentType("meta", "#declaration", "P99g]dS]0=!2b@");
      documentType0.doClone(element0);
      document3.head();
      documentType0.setPubSysKey("5ZcYI{'_651Y\"*g");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document3.nodeName();
      document1.nodeName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) cDataNode0;
      nodeArray0[6] = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        cDataNode0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 960, (Document.OutputSettings) null);
      Node node0 = xmlDeclaration0.attr("#dec", "zgDKmomdfuxu1/d");
      node0.outerHtml();
      node0.siblingNodes();
      Document document0 = Document.createShell("title");
      Document document1 = document0.clone();
      Document document2 = document0.quirksMode((Document.QuirksMode) null);
      document2.hasText();
      document2.getElementsByIndexLessThan(1579);
      document2.outerHtml();
      document2.getElementsByAttributeStarting("#dec");
      document1.cssSelector();
      document2.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(76);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      document0.indent(stringBuffer0, 1579, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 960, (Document.OutputSettings) null);
      Node node0 = xmlDeclaration0.attr("#dec", "zgDKmomdfuxu1/d");
      node0.outerHtml();
      node0.siblingNodes();
      Document document0 = Document.createShell("title");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.hasText();
      document2.outerHtml();
      document2.getElementsByAttributeStarting("#dec");
      document1.getElementsByAttribute("zgDKmomdfuxu1/d");
      document1.cssSelector();
      document2.prependChild(document1);
      document2.previousSibling();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("xWy'eJ");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      document2.prependChild(document0);
      document1.wrap("xWy'eJ");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 960, (Document.OutputSettings) null);
      Node node0 = xmlDeclaration0.attr("#dec", "zgDKmomdfuxu1/d");
      node0.outerHtml();
      node0.siblingNodes();
      Document document0 = Document.createShell("title");
      Document document1 = document0.clone();
      document1.cssSelector();
      node0.parent();
      // Undeclared exception!
      try { 
        element0.outerHtml();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("wEe,%D.");
      Pattern pattern0 = Pattern.compile("wEe,%D.", 0);
      document0.getElementsByAttributeValueMatching("small", pattern0);
      Element element0 = document0.prependElement("Za8");
      document0.siblingNodes();
      document0.doSetBaseUri("#text");
      Element element1 = document0.body();
      element1.shallowClone();
      element1.parentNode();
      element0.tagName();
      document0.prependText("Za8");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      Document document0 = Document.createShell("title");
      document0.cssSelector();
      element0.hasAttr("#root");
      document0.val();
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("qYHGk7ty3+.U");
      textNode0.text();
      textNode0.clearAttributes();
      textNode0.attr(" gf(C&Jf");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qYHGk7ty3+.U");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("qYHGk7ty3+.U", "", false);
      xmlDeclaration0.toString();
      Document document0 = Document.createShell("abs:#document");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#text");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      document2.toggleClass("qYHGk7ty3+.U");
      document1.getElementsByAttributeValueEnding(" gf(C&Jf", "abs:systemId");
      Element element0 = document1.text("abs:action");
      document2.title("`.y5^2TZkPSb>GN");
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.charset(charset0);
      element0.getElementsByIndexEquals(93);
      CDataNode cDataNode0 = new CDataNode("abs:>");
      // Undeclared exception!
      try { 
        cDataNode0.childNodes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "tt";
      Document document0 = new Document("tt");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.appendTo(document0);
      // Undeclared exception!
      document1.getOutputSettings();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "|xe4GO[y%eQo?$P5f/!";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 960;
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      // Undeclared exception!
      try { 
        xmlDeclaration0.reparentChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "|xe4GO[y%eQo?$P5f/!";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 960;
      Document document0 = new Document("|xe4GO[y%eQo?$P5f/!");
      Element element0 = document0.prependText("$=\"WAU ");
      // Undeclared exception!
      try { 
        xmlDeclaration0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("^A01RIe{");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Document document3 = document2.normalise();
      // Undeclared exception!
      try { 
        document3.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell(":not(selector) subselect must not be empty");
      Document document1 = (Document)document0.addClass(":not(selector) subselect must not be empty");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      document1.attr(":not(selector) subselect must not be empty");
      document1.attributes();
      // Undeclared exception!
      try { 
        document1.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "qYHGk7ty3+.U";
      TextNode textNode0 = TextNode.createFromEncoded("qYHGk7ty3+.U");
      textNode0.text();
      String string1 = " gf(C&Jf";
      // Undeclared exception!
      try { 
        textNode0.childNodesAsArray();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("#text");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.clone();
      Document document3 = document2.normalise();
      Element element0 = document3.appendElement("K>#7p.=jKQ");
      Element element1 = document3.prepend("#text");
      document3.parentNode = (Node) element1;
      document_OutputSettings0.clone();
      document2.nextSibling();
      element0.doClone(element1);
      String string0 = "q";
      element0.getElementsContainingOwnText("q");
      // Undeclared exception!
      document3.parentNode.toString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Document.createShell(":not(selector) subselect must not be empty");
      Element element0 = document0.prependElement(":not(selector) subselect must not be empty");
      element0.after(":not(selector) subselect must not be empty");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      element0.attr(":not(selector) subselect must not be empty");
      element0.attributes();
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "0!kP3~.y";
      Document document0 = Document.createShell("0!kP3~.y");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.tag();
      document1.childNodesAsArray();
      String string1 = "eI";
      Attributes attributes0 = new Attributes();
      String string2 = null;
      document0.appendTo(document2);
      // Undeclared exception!
      try { 
        Charset.forName("0!kP3~.y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0!kP3~.y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "tt";
      Document document0 = new Document("tt");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = (Document)document1.appendTo(document0);
      document2.before((Node) document0);
      document0.textNodes();
      // Undeclared exception!
      document2.append("tt");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("qYHGk7ty3+.U");
      textNode0.text();
      textNode0.clearAttributes();
      textNode0.attr(" gf(C&Jf");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qYHGk7ty3+.U");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("qYHGk7ty3+.U", "", false);
      xmlDeclaration0.toString();
      Document document0 = Document.createShell("abs:#document");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      document2.toggleClass("qYHGk7ty3+.U");
      document1.getElementsByAttributeValueEnding(" gf(C&Jf", "abs:systemId");
      Element element0 = document1.text("abs:action");
      document2.title("`.y5^2TZkPSb>GN");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      element0.getElementsByIndexEquals(93);
      CDataNode cDataNode0 = new CDataNode("abs:>");
      cDataNode0.text();
      document1.getElementsByAttribute(" gf(C&Jf");
      document1.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Node$OuterHtmlVisitor");
      cDataNode0.text();
      cDataNode0.isBlank();
      cDataNode0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$1");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.attr("org.jsoup.nodes.Node$1");
      element0.getElementsByAttribute("PV\"xNDxxb'53u%");
      // Undeclared exception!
      try { 
        document0.replaceChild(document1, document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "abs:|xe4go[y%eqo?$p5f/!";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:|xe4go[y%eqo?$p5f/!", false);
      Document document0 = new Document("c");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.parent();
      // Undeclared exception!
      try { 
        xmlDeclaration0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Comment comment0 = new Comment("I?/z$xTA", "I?/z$xTA");
      comment0.clearAttributes();
      // Undeclared exception!
      try { 
        comment0.wrap(":ImmediateParent%s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("bQTQYt8Huv9v&JAtD", "", "bQTQYt8Huv9v&JAtD");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      // Undeclared exception!
      try { 
        documentType0.before((Node) xmlDeclaration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Pattern pattern0 = Pattern.compile("", 957);
      element0.childNodesCopy();
      element0.getElementsByAttributeValueMatching("", pattern0);
      String string1 = "BA\\LX2]3'w88a%jx";
      String string2 = "org.jsoup.nodes.Node";
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 957, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("menu");
      element0.elementSiblingIndex();
      element0.children();
      Comment comment0 = new Comment("menu");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.jsoup.nodes.Node$OuterHtmlVisitor");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "menu", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      comment0.outerHtmlHead(printStream0, (-839), document_OutputSettings3);
      comment0.toString();
      element0.outerHtml((Appendable) mockPrintStream0);
      DocumentType documentType0 = new DocumentType("#text", "org.jsoup.nodes.Node$OuterHtmlVisitor", "m3nOd<SAlq");
      documentType0.outerHtmlTail(mockPrintStream0, 0, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("~lAmbHS/m<6f^Y");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Element element0 = document2.append("~lAmbHS/m<6f^Y");
      element0.id();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      String string0 = null;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$1", "org.jsoup.nodes.Node$1", true);
      xmlDeclaration0.getWholeDeclaration();
      String string1 = "";
      TextNode textNode0 = new TextNode("");
      String string2 = "";
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      // Undeclared exception!
      try { 
        document0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(">");
      Element.preserveWhitespace(textNode0);
      String string0 = "#text";
      Tag tag0 = Tag.valueOf("#text");
      Document document0 = new Document("#text");
      Attributes attributes0 = document0.attributes();
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      formElement0.reparentChild(textNode0);
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.tag();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("~41nj(h,G<+^t(", "#text", false);
      xmlDeclaration0.hasSameValue(tag0);
      xmlDeclaration0.getWholeDeclaration();
      textNode0.getWholeText();
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("wEe,%D.");
      Pattern pattern0 = Pattern.compile("wEe,%D.", 0);
      document0.getElementsByAttributeValueMatching("Xmall", pattern0);
      Element element0 = document0.prependElement("Za8");
      document0.siblingNodes();
      document0.doSetBaseUri("#text");
      Element element1 = document0.body();
      element1.shallowClone();
      element1.parentNode();
      element0.tagName();
      document0.prependText("Za8");
      Tag tag0 = Tag.valueOf("Za8");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "wEe,%D.", attributes0);
      FormElement formElement1 = formElement0.addElement(element1);
      formElement1.addElement(document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("o4g.jsoup.node|.Node");
      cDataNode0.previousSibling();
      cDataNode0.hasSameValue("o4g.jsoup.node|.Node");
      cDataNode0.splitText(0);
      Document document0 = new Document("o4g.jsoup.node|.Node");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-5515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell(">+bC,9d(dKosI+J");
      Document document1 = (Document)document0.val(">+bC,9d(dKosI+J");
      Document document2 = (Document)document0.removeClass("Wq4TtbK;");
      document0.addClass("Wq4TtbK;");
      document0.title("Z ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document1.absUrl(">+bC,9d(dKosI+J");
      document1.nodelistChanged();
      document0.elementSiblingIndex();
      DataNode dataNode0 = new DataNode("1P60@IJFo;U'a]'_@/ ", "13U0,6~n=");
      dataNode0.getWholeData();
      Pattern pattern0 = Pattern.compile("K-");
      document2.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "o4g.jsoup.node|.Node";
      CDataNode cDataNode0 = new CDataNode("o4g.jsoup.node|.Node");
      cDataNode0.text();
      cDataNode0.previousSibling();
      cDataNode0.hasSameValue("o4g.jsoup.node|.Node");
      Document document0 = new Document("o4g.jsoup.node|.Node");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-5515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      String string0 = null;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      TextNode textNode0 = new TextNode("");
      String string2 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      Document document4 = document3.normalise();
      document0.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        document4.wrap("4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Document document0 = new Document("tt");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.absUrl("Qj|-*kd?^");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = (Document)document1.appendTo(document0);
      // Undeclared exception!
      document2.before("tt");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Document document0 = new Document("tt");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.absUrl("Qj|-*kd?^");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = (Document)document1.appendTo(document0);
      document2.reparentChild(document1);
      // Undeclared exception!
      document2.before("tt");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.className();
      document0.title("WJ|+1non\")IS:");
      Element element0 = document0.head();
      document0.toggleClass("comment");
      document0.previousElementSibling();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(false);
      document0.outputSettings(document_OutputSettings4);
      element0.removeAttr("track");
      document0.title();
      element0.getElementsMatchingOwnText("k3");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("WJ|+1non\")IS:", true);
      // Undeclared exception!
      try { 
        MockURI.create("fD eWvrE&tz}A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: fD eWvrE&tz}A
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("meta");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document0.classNames();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document_OutputSettings1.prepareEncoder();
      document0.html();
      Document document2 = document1.clone();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document2.is((Evaluator) evaluator_IsOnlyOfType0);
      document2.parents();
      Element element0 = document2.html("meta");
      element0.toString();
      document0.charset();
      Element element1 = document0.body();
      element0.childNodesCopy();
      DocumentType documentType0 = new DocumentType("meta", "#declaration", "P99g]dS]0=!2b@");
      documentType0.setPubSysKey("5ZcYI{'_651Y\"*g");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.nodeName();
      DataNode.createFromEncoded("f", "meta");
      // Undeclared exception!
      try { 
        documentType0.replaceChild(element1, document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("|xe4GO[y%eQo?$P5f/!", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 960;
      Element element0 = new Element("|xe4GO[y%eQo?$P5f/!");
      xmlDeclaration0.reparentChild(element0);
      Node node0 = xmlDeclaration0.attr("#dec", "|xe4GO[y%eQo?$P5f/!");
      node0.outerHtml();
      Document document0 = Document.createShell("title");
      document0.hasText();
      document0.outerHtml();
      document0.getElementsByAttributeStarting("#dec");
      document0.cssSelector();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      // Undeclared exception!
      try { 
        nodeArray0[1].replaceWith(nodeArray0[1]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ":not(selector) subselect must not be empty";
      Document document0 = Document.createShell(":not(selector) subselect must not be empty");
      // Undeclared exception!
      try { 
        document0.after(":not(selector) subselect must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("qYHGk7ty3+.U");
      textNode0.text();
      textNode0.clearAttributes();
      textNode0.attr(" gf(C&Jf");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qYHGk7ty3+.U");
      textNode0.attributes();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("qYHGk7ty3+.U", "", false);
      String string0 = DocumentType.SYSTEM_KEY;
      Document document0 = Document.createShell("abs:#document");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#text");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      document2.toggleClass("qYHGk7ty3+.U");
      document1.getElementsByAttributeValueEnding(" gf(C&Jf", "abs:systemId");
      document1.text("abs:action");
      document2.title("`.y5^2TZkPSb>GN");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.siblingElements();
      CDataNode cDataNode0 = new CDataNode("abs:>");
      cDataNode0.text();
      document0.getElementsByAttributeValue("qYHGk7ty3+.U", ")Lp_S834>+YMLLlH3");
      xmlDeclaration0.shallowClone();
      TextNode.normaliseWhitespace("*_'2WA.egdX|o7%");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("v9bYwgtjCT(D?4");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.getElementsByAttributeValueEnding("abs:^f(c&jf", "v9bYwgtjCT(D?4");
      document2.clone();
      DataNode dataNode0 = DataNode.createFromEncoded("QD8o>-e.TZo]G^i", (String) null);
      // Undeclared exception!
      try { 
        dataNode0.removeChild(document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
