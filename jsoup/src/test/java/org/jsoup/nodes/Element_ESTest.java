/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 08:50:40 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.text("WD/hm]VV5#_b,#@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element2 = element1.classNames((Set<String>) linkedHashSet0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element2;
      element1.parents();
      element2.nextElementSibling();
      element2.before("3uw-WD{, dPRZ");
      document1.attributes();
      element1.children();
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element1;
      element2.cssSelector();
      // Undeclared exception!
      try { 
        document0.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = " />";
      Document document0 = new Document(" />");
      document0.getElementsByClass(" />");
      document0.previousElementSibling();
      String string1 = ".";
      Pattern.compile(".");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = "|.n%`6sIdGp_RaWh*`)";
      Pattern.matches(".", " />");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Tag.valueOf("sHVnp=oWf0p");
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "]F ~b3o-", attributes0);
      pseudoTextElement0.getElementsByAttributeValueStarting("textarea", "textarea");
      pseudoTextElement0.val();
      pseudoTextElement0.prependText("sHVnp=oWf0p");
      pseudoTextElement0.getElementsByAttributeValueMatching("", (Pattern) null);
      pseudoTextElement0.getElementsByClass("<|=7");
      pseudoTextElement0.getElementsByAttributeValueMatching("IX4_a||RQ(BnV|,x", (Pattern) null);
      pseudoTextElement0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell("id");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText(pattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3319154);
      document0.siblingNodes();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.siblingNodes();
      Document document3 = document2.clone();
      Element element0 = document3.body();
      Element element1 = document2.text("id");
      element0.after((Node) document2);
      Pattern pattern1 = Pattern.compile("id", 3332049);
      Pattern.matches("org.jsoup.nodes.Element$2", "id");
      element1.wrap("org.jsoup.nodes.Element$2");
      element1.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
      document2.getElementsMatchingText(pattern1);
      element1.remove();
      document3.getElementById(":nth-child(%d)");
      document3.getElementsByAttributeValueContaining("id", "Q8h/(\"O4CQZ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.hasClass("basefont");
      element0.elementSiblingIndex();
      element0.hasText();
      Element element2 = element0.clone();
      element1.parentNode = (Node) element2;
      Document document0 = new Document("-}LsFxE##p;&");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      element1.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.after("basefont");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("WQ", "textarea");
      Attributes attributes2 = attributes1.put(attribute0);
      Element element0 = new Element(tag0, "WQ", attributes2);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      String string0 = "org.jsoup.select.CombiningEvaluator$Or";
      Element element1 = element0.addClass("org.jsoup.select.CombiningEvaluator$Or");
      element1.append("3uw-WD{, dPRZ");
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element2 = (Element)element0.filter(nodeFilter0);
      Attribute.createFromEncoded("AfterHead", "AfterHead");
      Pattern pattern0 = Pattern.compile("textarea", 892);
      element0.getElementsMatchingText(pattern0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      element0.ownerDocument();
      nodeArray0[1] = (Node) null;
      nodeArray0[2] = (Node) element2;
      nodeArray0[3] = (Node) element2;
      nodeArray0[4] = (Node) element0;
      element2.prependChild(cDataNode0);
      element2.is("textarea");
      // Undeclared exception!
      try { 
        element0.insertChildren((-587), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell("id");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText(pattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3319154);
      document0.siblingNodes();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.siblingNodes();
      Document document3 = document2.clone();
      Element element0 = document3.body();
      Element element1 = document2.text("id");
      element0.after((Node) document2);
      element1.previousElementSibling();
      Pattern pattern1 = Pattern.compile("id", 3332049);
      element0.getElementsByAttributeValueMatching("id", pattern1);
      document2.getElementsMatchingText(pattern1);
      element1.remove();
      document3.getElementById(":nth-child(%d)");
      document3.getElementsByAttributeValueContaining("id", ":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.nodelistChanged();
      Document document1 = document0.normalise();
      document1.getElementsByAttributeStarting("x#u0PP");
      document1.getElementsByAttributeValueMatching("textarea", pattern0);
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      document0.prependText("Uc");
      document0.appendText("org.jsoup.select.Evaluator$AttributeWithValueNot");
      document1.getElementsContainingText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document1.classNames((Set<String>) linkedHashSet0);
      element0.textNodes();
      element0.toString();
      document0.getElementsByAttributeValueMatching("x#u0PP", pattern0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell("id");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText(pattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3319154);
      document0.siblingNodes();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.siblingNodes();
      Document document3 = document2.clone();
      Element element0 = document3.body();
      Element element1 = document2.text("id");
      element0.after((Node) document2);
      Pattern pattern1 = Pattern.compile("id", 3332049);
      element0.getElementsByAttributeValueMatching("id", pattern1);
      document2.getElementsMatchingText(pattern1);
      element1.remove();
      document3.getElementById(":nth-child(%d)");
      document3.getElementsByAttributeValueContaining("id", "Q8h/(\"O4CQZ");
      element0.before("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("#root");
      Element element0 = document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Element element1 = document4.head();
      element1.before((Node) element0);
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "\\s+";
      Document document0 = new Document("s+");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6af&2m]M=fg,@1Ep");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("s+", false);
      document0.parentNode = (Node) xmlDeclaration0;
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      String string1 = "{>";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("{>", "s+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      int int0 = 53;
      Node[] nodeArray0 = new Node[8];
      String string0 = "]bV_Y/^U9";
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document2.head();
      StringBuffer stringBuffer0 = new StringBuffer(46);
      document0.outerHtml((Appendable) stringBuffer0);
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = element0.wrap("r?@$6ZiU$E-<pq)|c");
      element2.firstElementSibling();
      element0.lastElementSibling();
      Attributes attributes0 = element0.attributes();
      document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      attributes0.clone();
      document2.siblingElements();
      document0.empty();
      document0.classNames();
      Element element3 = element1.toggleClass("]bV_Y/^U9");
      // Undeclared exception!
      try { 
        element3.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000250': unexpected token at '@0000000250'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "s&y7nk|o6~A.3#rXW9";
      Document document0 = Document.createShell("s&y7nk|o6~A.3#rXW9");
      Document.OutputSettings document_OutputSettings0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "head";
      Document document0 = Document.createShell("head");
      document0.html();
      document0.getElementsByAttributeStarting("EtCR!O*G");
      document0.hasText();
      Document document1 = new Document("EtCR!O*G");
      int int0 = 26;
      Element element0 = document1.removeClass("EtCR!O*G");
      document0.getElementsByAttribute("head");
      Document document2 = (Document)document1.tagName("EtCR!O*G");
      document1.getAllElements();
      Element element1 = document1.createElement("EtCR!O*G");
      document2.appendTo(element1);
      element0.tag();
      MockPrintStream mockPrintStream0 = null;
      // Undeclared exception!
      try { 
        element1.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[8];
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document2.head();
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = element0.wrap("Xa9686&R MfQTBw");
      element2.firstElementSibling();
      element0.lastElementSibling();
      Attributes attributes0 = element0.attributes();
      document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      Document document3 = (Document)document0.val("r?@$6ZiU$E-<pq)|c");
      attributes0.clone();
      element1.parentNode = (Node) document3;
      document2.siblingElements();
      document0.empty();
      Element element3 = element1.toggleClass("Xa9686&R MfQTBw");
      element3.cssSelector();
      element0.previousElementSibling();
      element3.text("]bV_Y/^U9");
      // Undeclared exception!
      try { 
        element3.child(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "html";
      Document document0 = Document.createShell("html");
      Element element0 = document0.appendTo(document0);
      int int0 = 90;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      element0.html("html");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("body");
      Attributes attributes0 = cDataNode0.attributes();
      cDataNode0.siblingNodes();
      Tag.valueOf("/Z2th+e");
      Attributes attributes1 = attributes0.put("Pattern syntax error: ", true);
      Element element0 = new Element(tag0, "r", attributes1);
      Pattern pattern0 = Pattern.compile("textarea");
      element0.getElementsMatchingText(pattern0);
      Element element1 = element0.prependText("RS-eux0n(N =l");
      element1.elementSiblingIndex();
      element1.getElementsByAttributeValueMatching("!5:V(=K-Fw't^koE-", "textarea");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element2 = element0.attr("Pattern syntax error: ", "!5:V(=K-Fw't^koE-");
      // Undeclared exception!
      try { 
        element2.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("col");
      Element element1 = element0.html("col");
      Element element2 = element1.selectFirst("col");
      FileSystemHandling.shouldAllThrowIOExceptions();
      element0.elementSiblingIndex();
      element0.hasText();
      Element element3 = element0.clone();
      element3.attributes();
      element0.prependElement("output");
      int int0 = (-298);
      element2.outerHtml();
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-298));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.shallowClone();
      pattern0.asPredicate();
      document0.nodelistChanged();
      Element element0 = document0.html("e~c[4r=c\":P5\"#c&2Hu");
      element0.getElementsByAttributeStarting("x#u0PP");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      element0.getElementsByAttributeValueMatching("textarea", pattern0);
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      element0.cssSelector();
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "html";
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      Element element1 = element0.appendTo(document0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element1;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        element1.insertChildren(90, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.nodelistChanged();
      Document document1 = document0.normalise();
      document1.getElementsByAttributeStarting("x#u0PP");
      document1.getElementsByAttributeValueMatching("textarea", pattern0);
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      document0.prependText("UZ");
      document1.getElementsContainingText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document1.classNames((Set<String>) linkedHashSet0);
      element0.textNodes();
      element0.toString();
      document0.getElementsByAttributeValueMatching("x#u0PP", pattern0);
      document0.hasText();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "r?@$6ZiU$E-<pq)|c";
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      String string1 = Node.EmptyString;
      int int0 = 53;
      Node[] nodeArray0 = new Node[8];
      String string2 = "]bV_Y/^U9";
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      document2.head();
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      String string3 = "Xa9686&R MfQTBw";
      Element element1 = element0.wrap("Xa9686&R MfQTBw");
      Element element2 = element1.firstElementSibling();
      element2.siblingIndex = (-690);
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      // Undeclared exception!
      try { 
        document2.getElementsByClass("]bV_Y/^U9");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.body();
      element0.attr("BeforeDoctypeName", "#");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "head";
      Document document0 = Document.createShell("head");
      String string1 = "EtCR!O*G";
      document0.getElementsByAttributeStarting("EtCR!O*G");
      document0.hasText();
      Document document1 = (Document)document0.appendText("head");
      int int0 = 26;
      Document document2 = (Document)document1.removeClass("EtCR!O*G");
      document0.getElementsByAttribute("head");
      document2.childNodes = null;
      document1.tagName("EtCR!O*G");
      // Undeclared exception!
      try { 
        document1.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("#root");
      Element element0 = document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Element element1 = document4.head();
      element1.prepend("menu");
      document2.nextSibling();
      element1.siblingElements();
      document3.getElementsByAttributeValueEnding("Lm\"R", "Lm\"R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.appendText("menu");
      element0.hasText();
      // Undeclared exception!
      try { 
        document0.before("menu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.getElementsByAttributeStarting("head");
      Document document1 = (Document)document0.appendText("head");
      Document document2 = (Document)document1.removeClass("head");
      document0.getElementsByAttribute("head");
      document1.tagName("head");
      document1.getAllElements();
      Element element0 = document1.createElement("head");
      document2.tag();
      element0.html((MockPrintStream) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document document3 = new Document("head");
      Charset charset0 = document3.charset();
      document_OutputSettings3.charset(charset0);
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.text("WD/hm]VV5#_b,#@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element2 = element1.classNames((Set<String>) linkedHashSet0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element2;
      element1.parents();
      element2.nextElementSibling();
      element1.children();
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element1;
      // Undeclared exception!
      try { 
        document0.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      int int0 = 53;
      Node[] nodeArray0 = new Node[8];
      String string0 = "]bV_Y/^U9";
      element0.data();
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document2.head();
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = element0.wrap("Xa9686&R MfQTBw");
      element2.firstElementSibling();
      element0.lastElementSibling();
      Attributes attributes0 = element0.attributes();
      Document document3 = (Document)document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      attributes0.clone();
      document2.siblingElements();
      document3.getElementsByIndexLessThan(53);
      document0.empty();
      Element element3 = element1.toggleClass("Xa9686&R MfQTBw");
      // Undeclared exception!
      try { 
        element3.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000280': unexpected token at '@0000000280'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("#root");
      Element element0 = document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      document4.head();
      element0.getElementsByTag("#root");
      document3.getElementsByAttributeValueEnding("Lm\"R", "Lm\"R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document0.before("menu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element1.textNodes();
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      element0.prependElement("output");
      element0.getElementsByAttributeValueMatching("output", "basefont");
      element0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*WzD;UM/45}+9^b");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("#", "*WzD;UM/45}+9^b");
      Attributes attributes1 = attributes0.put(attribute0);
      String string0 = "D!LBrTH5*e@AIf`iP_!";
      Attributes attributes2 = attributes1.put("D!LBrTH5*e@AIf`iP_!", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+K#B!By[_";
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "u'~t", attributes2);
      Document document0 = new Document("FzqP%g1uWQP");
      FormElement formElement1 = formElement0.addElement(document0);
      // Undeclared exception!
      try { 
        formElement1.getElementsByAttributeValueStarting("FzqP%g1uWQP", "wWyUpM5@zLV,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = new Document(":nth-child(%d)");
      document0.dataNodes();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.doClone(document0);
      document0.isBlock();
      Pattern.compile(":nth-child(%d)");
      Pattern.compile(":nth-child(%d)", 58);
      document1.getElementsByAttributeValue("anb OeF.*y#b4U[@)nt", "wDps");
      // Undeclared exception!
      try { 
        element0.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      int int0 = 53;
      Node[] nodeArray0 = new Node[8];
      String string0 = "]bV_Y/^U9";
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document2.head();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.wrap("Xa9686&R MfQTBw");
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      document0.attributes();
      document2.siblingElements();
      Element element2 = element1.toggleClass("Xa9686&R MfQTBw");
      // Undeclared exception!
      try { 
        element2.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000230': unexpected token at '@0000000230'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("gT&n7eN~gx@L%");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      document0.getElementsContainingText(" 0>6QTs");
      Set<String> set0 = document0.classNames();
      Element element1 = document0.removeClass("VU");
      Element element2 = document0.classNames(set0);
      document0.baseUri();
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsMatchingText(pattern0);
      element0.previousElementSibling();
      element2.dataset();
      element1.getElementsByClass("gT&n7eN~gx@L%");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("ins");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document0.nextElementSibling();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.head();
      Document document3 = element0.ownerDocument();
      document2.getAllElements();
      Document document4 = document3.clone();
      document4.nodelistChanged();
      document0.data();
      document3.toggleClass("");
      document2.nodelistChanged();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("[t[2cfKV]qwJDN<", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("       ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.quirksMode(document_QuirksMode0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.outline(false);
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document1.doSetBaseUri("org.jsoup.select.StructuralEvaluator$Has");
      document1.textNodes();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("'dY`Ap[U5.n3*}?Qr");
      Document document1 = document0.normalise();
      document1.siblingNodes();
      document1.prependChild(document0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      String string0 = "";
      document1.replaceWith(document0);
      document2.doSetBaseUri("");
      // Undeclared exception!
      try { 
        document1.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", attributes0);
      Element element0 = formElement0.clone();
      element0.parents();
      // Undeclared exception!
      try { 
        element0.before("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "defer";
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "defer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document(":eq(%d)");
      Element element0 = document0.empty();
      document0.nextElementSibling();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = Document.createShell(":nth-child(%d)");
      String string1 = null;
      MockFile mockFile0 = new MockFile((String) null, "1DK");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      Charset charset0 = document0.charset();
      document0.getElementsByTag("1DK");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(outputStreamWriter0, 916, document_OutputSettings0);
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("kQw6rh-qWzI");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      Document document3 = document2.normalise();
      Element element0 = document3.body();
      element0.attr("kQw6rh-qWzI", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("9=_y'x&ki");
      Document document1 = document0.clone();
      Element element0 = document1.createElement("9=_y'x&ki");
      Pattern pattern0 = Pattern.compile("}#JEt", (-1425));
      element0.getElementsMatchingText(pattern0);
      element0.hasAttributes();
      element0.getElementsContainingText("9=_y'x&ki");
      document1.text();
      Pattern pattern1 = Pattern.compile("");
      document1.getElementsByAttributeValueMatching("", pattern1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "               ";
      Document document0 = Document.createShell("               ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = (Document)document2.text("               ");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      document3.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      String string1 = "#root";
      Document document4 = (Document)document2.attr("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", false);
      // Undeclared exception!
      try { 
        document4.getElementsByAttributeStarting("               ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("IjDy2XCp(k4Lh~", parseSettings0);
      Tag.valueOf("IjDy2XCp(k4Lh~", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("IjDy2XCp(k4Lh~");
      cDataNode0.coreValue("");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("i=EVCT#8m^4A`", true);
      FormElement formElement0 = new FormElement(tag0, "Children collection to be inserted must not be null.", attributes1);
      formElement0.val();
      FormElement formElement1 = (FormElement)formElement0.attr("IjDy2XCp(k4Lh~", "i=EVCT#8m^4A`");
      formElement1.getElementsByAttributeStarting("org.jsoup.select.Evaluator$Class");
      formElement1.hasAttributes();
      formElement0.data();
      int int0 = 1496;
      formElement1.getElementsByIndexGreaterThan(1496);
      formElement0.nodeName();
      // Undeclared exception!
      try { 
        formElement1.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Element", true);
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element", attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "6aXcDmAM~2ZOUFkWQ";
      Document document0 = Document.createShell("6aXcDmAM~2ZOUFkWQ");
      document0.setBaseUri("6aXcDmAM~2ZOUFkWQ");
      document0.getElementsMatchingOwnText("6aXcDmAM~2ZOUFkWQ");
      Element element0 = document0.head();
      Element element1 = element0.html("6aXcDmAM~2ZOUFkWQ");
      element1.prependChild(element0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "textarea";
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      pattern0.asPredicate();
      document0.nodelistChanged();
      String string1 = ":ha}JDO`\\%>>EJQ";
      // Undeclared exception!
      try { 
        document0.select(":ha}JDO`%>>EJQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':ha}JDO`%>>EJQ': unexpected token at ':ha}JDO`%>>EJQ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      String string0 = "";
      document0.normalise();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("%vH)BClBjQo'yd7n ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: %vH)BClBjQo'yd7n 
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element("|MmvW!myfwNaBYZ=p");
      String string0 = "";
      String string1 = null;
      element0.nextSibling();
      // Undeclared exception!
      try { 
        element0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("hBFb'yF%?l]");
      Element element0 = document0.addClass("hBFb'yF%?l]");
      Pattern pattern0 = Pattern.compile("hBFb'yF%?l]");
      document0.text();
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      evaluator_MatchesOwn0.matches(document0, document0);
      element0.is((Evaluator) evaluator_MatchesOwn0);
      Document document1 = document0.ownerDocument();
      document1.appendElement("=o+b||)$mh;gL!g");
      document0.previousSibling();
      document1.head();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Pattern pattern0 = null;
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = " `";
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(" `", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " `", attributes0);
      pseudoTextElement0.ownerDocument();
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "SClR]lD~J";
      Document document0 = new Document("SClR]lD~J");
      document0.children();
      String string1 = "5ZK_dm4u2b";
      document0.toggleClass("vh_FV5m!PG 2*++}");
      document0.getElementsByAttributeValueContaining("5ZK_dm4u2b", "5ZK_dm4u2b");
      document0.className();
      String string2 = " Twbdd^H";
      document0.val(" Twbdd^H");
      String string3 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "s(E:3|dbhs#*Fv>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: s(E:3|dbhs#*Fv>
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "iSUov6K4k\"I'gq[.,";
      Document document0 = Document.createShell("iSUov6K4k\"I'gq[.,");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.head();
      element0.siblingIndex = 1127;
      element0.getElementsByTag("iSUov6K4k\"I'gq[.,");
      Pattern pattern0 = Pattern.compile("#", 2400);
      document1.children();
      Pattern.matches("#", "iSUov6K4k\"I'gq[.,");
      pattern0.matcher("#");
      document1.getElementsMatchingText(pattern0);
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.after((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
      Document document0 = new Document("fr-!");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "jGLeM.yM:7o4n_'";
      Document document0 = Document.createShell("jGLeM.yM:7o4n_'");
      document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = 4;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4);
      document0.outputSettings(document_OutputSettings1);
      String string1 = "\\V6RQ%{b ";
      Element element0 = document0.append("V6RQ%{b ");
      // Undeclared exception!
      try { 
        element0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      element0.prependElement("output");
      element0.dataNodes();
      TextNode textNode0 = new TextNode("nohref");
      Element.preserveWhitespace(textNode0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("RH$cphu8");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      document0.attr("RH$cphu8", true);
      document2.getElementsByAttributeValueEnding("RH$cphu8", "Ii0:L;i=");
      // Undeclared exception!
      try { 
        document1.is("Ii0:L;i=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Ii0:L;i=': unexpected token at ':L;i='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("}F{g5yR_/kN02`:I");
      document0.getAllElements();
      document0.appendElement("}F{g5yR_/kN02`:I");
      Element element0 = document0.appendElement("}F{g5yR_/kN02`:I");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      element0.outerHtmlHead(charArrayWriter0, 0, document_OutputSettings4);
      element0.outerHtml((Appendable) charArrayWriter0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("}F{g5yR_/kN02`:I", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.outerHtml();
      document0.getElementsByAttributeStarting("ut");
      element0.previousElementSibling();
      document0.getElementsByAttributeValueContaining(";RI", "z");
      document0.clone();
      document0.parents();
      document0.classNames();
      Element element2 = element0.prepend("+K#!By[_");
      Pattern pattern0 = Pattern.compile("AfterDoctypeSystemIdentifier", 2077);
      element2.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = document2.ownerDocument();
      Element element0 = document3.head();
      element0.parents();
      String string0 = " ";
      // Undeclared exception!
      try { 
        document1.selectFirst(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#C~In{C*doPXMx");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("encoding", "encoding", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("encoding", "#C~In{C*doPXMx");
      Element element0 = new Element(tag0, "encoding", attributes2);
      Element element1 = element0.prependElement("#C~In{C*doPXMx");
      element1.isBlock();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      document0.doClone(element0);
      document0.outerHtml();
      document0.getElementsByAttributeStarting("ut");
      element0.removeClass("org.jsoup.nodes.Element$1");
      document0.getElementsByAttributeValueContaining(";~I", "{k[i+L3qZf");
      document0.clone();
      document0.parents();
      document0.classNames();
      element0.prepend("+K#!By[_");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.val("");
      element1.outerHtml();
      document0.getElementsByAttributeStarting("ut");
      document0.getElementsByAttributeValueContaining(";RI", "z");
      document0.clone();
      document0.parents();
      document0.classNames();
      element0.prepend("+K#!By[_");
      document0.hasAttributes();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.outerHtml();
      document0.getElementsByAttributeStarting("ut");
      element0.appendText("br");
      document0.getElementsByAttributeValueContaining(";RI", "z");
      document0.clone();
      document0.parents();
      document0.classNames();
      element0.prepend("+K#!By[_");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("r");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      document2.title();
      Document document3 = document2.ownerDocument();
      Document document4 = (Document)document3.attr("r", true);
      document0.prepend("r");
      document4.ensureChildNodes();
      document3.toggleClass("");
      document4.prepend("pD gt|,");
      document0.select("r");
      document4.toggleClass("r");
      document3.cssSelector();
      document0.toString();
      document0.html();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = new Document(".");
      Document document1 = document0.clone();
      document1.absUrl(".");
      document1.toString();
      Element element0 = document0.appendChild(document1);
      element0.clearAttributes();
      element0.previousSibling();
      document1.elementSiblingIndex();
      document0.setSiblingIndex(0);
      element0.html();
      // Undeclared exception!
      try { 
        document1.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell(")w1<Tyfy4X[M");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.empty();
      Element element1 = document1.removeClass(")w1<Tyfy4X[M");
      element0.toString();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = "Split offset must be not be negative";
      document0.attr("", "Split offset must be not be negative");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
      document0.clone();
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "org.jsoup.select.NodeFilter$FilterResult";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.select.NodeFilter$FilterResult");
      String string1 = "L_::/&GLpWX";
      Document document0 = new Document("L_::/&GLpWX");
      Document document1 = document0.normalise();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document1.text();
      Document document2 = document1.ownerDocument();
      Document document3 = document2.clone();
      Document document4 = (Document)document3.text("L_::/&GLpWX");
      Document document5 = (Document)document4.appendChild(document2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document4.ensureChildNodes();
      // Undeclared exception!
      try { 
        document5.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "z9<$=0N(gS?o|[ <w ";
      Document document0 = Document.createShell("z9<$=0N(gS?o|[ <w ");
      Element element0 = document0.text("z9<$=0N(gS?o|[ <w ");
      document0.wholeText();
      element0.id();
      document0.siblingIndex = 2498;
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xmlns");
      String string0 = "GG+&k*.i`C";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element0 = new Element(tag0, "GG+&k*.i`C");
      Tag.valueOf("ACj8WR:qC<");
      element0.html();
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("_");
      element0.setBaseUri("_");
      element0.hasAttr("PcP)`e>");
      element0.getElementsByAttributeValueMatching("charset", "value");
      element0.baseUri();
      element0.getAllElements();
      // Undeclared exception!
      try { 
        element0.wrap("_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      String string1 = "\"}EE?\\$.8v !s,bf";
      int int0 = 121;
      document0.updateMetaCharsetElement(false);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "(e|s=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (e|s=
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.getElementsByIndexLessThan((-1305));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Set<String> set0 = document0.classNames();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ijdy2xcp(k4lh~");
      Element element0 = document0.classNames(set0);
      element0.getAllElements();
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("kZXIHN~vPQXVUMBEI[z");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.tagName("kZXIHN~vPQXVUMBEI[z");
      Element element1 = document1.head();
      element1.firstElementSibling();
      element0.ownText();
      document0.append("kZXIHN~vPQXVUMBEI[z");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append('M');
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(143, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 143
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = " \\`0^d9TZ7bf";
      Document document0 = new Document(" `0^d9TZ7bf");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Pattern pattern0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("X");
      String string0 = "body";
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.getElementsByAttributeValueNot("X", "body");
      String string1 = "-B&x$7Th$Z";
      int int0 = 2147483645;
      document0.setSiblingIndex(2147483645);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        document0.wrap("-B&x$7Th$Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Tag tag0 = Tag.valueOf("![+J=");
      Element element0 = new Element(tag0, "?2vr#B!)<");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element(" > ");
      String string0 = "";
      Element element1 = element0.attr("", " > ");
      element1.childNodesAsArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      element1.removeAttr("#root");
      element0.attributes();
      element0.parent();
      // Undeclared exception!
      try { 
        element1.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      document1.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter(1301);
      StringWriter stringWriter1 = stringWriter0.append('}');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.jsoup.nodes.TextNode");
      element0.outerHtmlTail(stringWriter2, 1301, document_OutputSettings0);
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("org.jsoup.nodes.TextNode");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.jsoup.nodes.TextNode
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.outerHtml();
      document0.getElementsByAttributeStarting("ut");
      document0.getElementsByAttributeValueContaining(";RI", "z");
      document0.append("");
      document0.clone();
      document0.parents();
      document0.classNames();
      Element element2 = element0.prepend("+K#!By[_");
      element2.text();
      element1.dataNodes();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "CommentEndDash";
      Document document0 = new Document("CommentEndDash");
      document0.setBaseUri("CommentEndDash");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w+ba5ixf");
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      pattern0.asPredicate();
      document0.nodelistChanged();
      pattern0.matcher("textarea");
      Element element0 = document0.html("e~c[4r=c\":P5\"#c&2Hu");
      element0.getElementsByAttributeStarting("x#u0PP");
      element0.getElementsByAttributeValueMatching("textarea", pattern0);
      element0.is("w+ba5ixf");
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      element0.cssSelector();
      // Undeclared exception!
      try { 
        document0.child((-3952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("var");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Charset charset0 = Charset.defaultCharset();
      Charset.isSupported("var");
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      document2.html();
      Document document3 = document2.normalise();
      document_OutputSettings2.outline(false);
      // Undeclared exception!
      try { 
        document3.title((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      element0.prependElement("output");
      element0.attr("output", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("ijdy2xcp(k4lh~");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ijdy2xcp(k4lh~");
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ijdy2xcp(k4lh~");
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(1192721831);
      Document document2 = document1.outputSettings(document_OutputSettings3);
      // Undeclared exception!
      document2.html();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.getElementsByTag("html");
      document0.getElementsByAttribute("html");
      element0.children();
      Element element1 = document0.createElement("#root");
      Element element2 = document0.appendTo(element1);
      Element element3 = element2.empty();
      element3.appendElement("html");
      String string0 = "ijdy2xcp(k4l\\h~";
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element2;
      // Undeclared exception!
      try { 
        element0.addChildren(32768, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32768, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      document0.getElementsByTag(".");
      document0.clone();
      MockFile mockFile0 = new MockFile("-/p54W$I", " ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Element element0 = new Element(":containsOwn(");
      Element element1 = element0.empty();
      Element element2 = element1.doClone(element0);
      element0.toString();
      String string0 = "basefont";
      Element element3 = element2.removeClass(":containsOwn(");
      element3.toString();
      element1.getElementsByAttributeStarting("basefont");
      element1.children();
      String string1 = "id";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      // Undeclared exception!
      try { 
        element0.prependChild(element2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element0.getElementsByIndexEquals(2267);
      element1.outerHtml();
      element0.empty();
      document0.getElementsByAttributeStarting("ut");
      document0.getElementsByAttributeValueContaining(";RI", "z");
      document0.clone();
      document0.parents();
      document0.classNames();
      element0.prepend("+K#!By[_");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "ijdy2xcp(k4l\\h~";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("ijdy2xcp(k4lh~", parseSettings0);
      Element element0 = new Element(tag0, "/&VG1yM^aIgE", (Attributes) null);
      Element element1 = new Element(tag0, "L@^)Y'9Rc6!%IDe])", (Attributes) null);
      Element element2 = element0.appendTo(element1);
      Element element3 = element2.appendTo(element1);
      element0.removeClass("L@^)Y'9Rc6!%IDe])");
      element3.getAllElements();
      element3.wrap("/&VG1yM^aIgE");
      element1.parent();
      MockFileWriter mockFileWriter0 = new MockFileWriter("ijdy2xcp(k4lh~", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(22);
      document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      element2.outerHtmlHead(mockFileWriter0, 22, document_OutputSettings2);
      int int0 = 46;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      char char0 = 'I';
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('I');
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) "L@^)Y'9Rc6!%IDe])", 22, 22);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("U7m");
      Document document1 = document0.normalise();
      document0.selectFirst("U7m");
      document0.id();
      int int0 = 53;
      Node[] nodeArray0 = new Node[3];
      document1.val("]bV_Y/^U9");
      document0.val();
      // Undeclared exception!
      try { 
        document1.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("^0aqS", parseSettings0);
      Tag.valueOf("`qM\"uvt1K9w/+&:!OL");
      Element element0 = new Element(tag0, "class", (Attributes) null);
      element0.getElementsContainingOwnText("");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("2ds9 -");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document3 = document2.outputSettings(document_OutputSettings2);
      Element element0 = document3.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("boW`th3Y%bQ{JmHns=");
      Document document1 = document0.normalise();
      String string0 = "i GNj g{^I_Rx";
      Element element0 = document1.text("i GNj g{^I_Rx");
      element0.outerHtml();
      Document document2 = document1.normalise();
      element0.nodeName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.getElementsByIndexLessThan((-354));
      document2.getElementsByAttributeValueStarting("#document", "<html>\n <head></head>\n <body>\n  i GNj g{^I_Rx\n </body>\n</html>i GNj g{^I_Rx\n </body>\n</html>");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("class");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":=QKbTTZ)>Cdk}");
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      document_OutputSettings0.prepareEncoder();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.appendTo(document2);
      Element element0 = document3.head();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document2.filter(nodeFilter0);
      Element element1 = element0.appendChild(document0);
      // Undeclared exception!
      element1.before("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "Y6", (Attributes) null);
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.elementSiblingIndex();
      element0.clone();
      Element element2 = element0.prependElement("output");
      element2.html("");
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      pattern0.matcher("");
      String string1 = " Ya%^</LA[bMRPW/ Sl";
      CDataNode cDataNode0 = new CDataNode("html");
      Node node0 = cDataNode0.shallowClone();
      document0.prependChild(node0);
      document0.getElementsByAttributeValueMatching(" Ya%^</LA[bMRPW/ Sl", pattern0);
      document0.getElementsMatchingOwnText(pattern0);
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(348, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("/G=.pbb+&rgh1]Ui|z");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.childNodeSize();
      document0.appendElement("eF2@P?S3v#%'0(I5");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("basefont");
      document0.html("basefont");
      document0.hasClass("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document0.elementSiblingIndex();
      document0.hasText();
      document0.clone();
      Element element0 = new Element("output");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("boW`th3Y%bQ{JmHns=");
      Document document1 = document0.normalise();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "i GNj g{^I_Rx";
      Element element0 = document1.text("i GNj g{^I_Rx");
      element0.outerHtml();
      document0.prepend("i GNj g{^I_Rx");
      element0.nodeName();
      document0.ownText();
      document0.getElementsByIndexLessThan((-354));
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Element element0 = document4.head();
      document3.setSiblingIndex((-564));
      document3.getElementsByAttributeValueEnding("Lm\"R", "Lm\"R");
      document3.append("menu");
      document0.previousElementSibling();
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      element0.outerHtmlHead(stringBuffer0, 65536, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      int int0 = 348;
      pattern0.matcher("");
      document0.getElementsByAttributeValueMatching(" Ya%^</LA[bMPW/ Sl", pattern0);
      Pattern.compile("", 348);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Document document5 = document4.normalise();
      document_OutputSettings0.outline(true);
      document5.data();
      document5.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        document0.before((Node) document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7),eecyI%X}3lioHG6");
      Document document0 = new Document("7),eecyI%X}3lioHG6");
      Element element0 = document0.createElement("7),eecyI%X}3lioHG6");
      element0.attr("^6g]J`doJ@T`XND03H");
      element0.id();
      document0.ownText();
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("boW`th3Y%bQ{JmHns=");
      Document document1 = document0.normalise();
      String string0 = "i GNj g{^I_Rx";
      Element element0 = document1.text("i GNj g{^I_Rx");
      element0.outerHtml();
      document0.prepend("i GNj g{^I_Rx");
      element0.nodeName();
      document0.getElementsByIndexLessThan((-337));
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Element element0 = new Element("allowfullscreen");
      // Undeclared exception!
      try { 
        element0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("3");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("3");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document1.traverse(nodeVisitor0);
      element0.id();
      Node[] nodeArray0 = new Node[3];
      document1.val("]bV_Y/AW^U9");
      document0.val();
      Element element1 = document1.body();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.wrap("Xa9686&R MfQTBw");
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      element1.append("2C{v [|M1");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Element element0 = new Element("html");
      element0.append("html");
      Element element1 = null;
      try {
        element1 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[3];
      Document document2 = new Document("r?@$6ZiU$E-<pq)|c");
      document0.val();
      Element element1 = document1.body();
      element1.before("");
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.wrap("Xa9686&R MfQTBw");
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      document1.data();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.body();
      element0.html("4([49xw");
      Document document3 = document2.normalise();
      document3.data();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "id";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell("id");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText(pattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3319154);
      document0.siblingNodes();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.siblingNodes();
      Document document3 = document2.clone();
      Element element0 = document3.body();
      Element element1 = element0.shallowClone();
      element0.after((Node) document2);
      Pattern pattern1 = Pattern.compile("id", 3332049);
      element0.getElementsByAttributeValueMatching("id", pattern1);
      document2.getElementsMatchingText(pattern1);
      // Undeclared exception!
      try { 
        element1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Element element0 = new Element("col");
      Element element1 = element0.html("col");
      element1.selectFirst("col");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      Element element2 = element0.clone();
      element2.attributes();
      element0.prependElement("output");
      int int0 = (-298);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-298));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      Element element2 = element0.clone();
      element2.ensureChildNodes();
      Element element3 = element0.prependElement("output");
      element3.getElementsContainingText("output");
      element1.baseUri();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("{\"v");
      DataNode dataNode0 = new DataNode("{\"v", "/qP:US");
      // Undeclared exception!
      try { 
        document0.after((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "$9},";
      Tag tag0 = Tag.valueOf("$9},");
      String string1 = ".";
      Element element0 = new Element(tag0, ".");
      String string2 = null;
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("value", true);
      FormElement formElement0 = new FormElement(tag0, "value", attributes1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      String string0 = "D]TVCJ#5rJ";
      Element element0 = formElement0.attr("D]TVCJ#5rJ", true);
      Element element1 = formElement0.prependText("value");
      element1.siblingNodes();
      Pattern pattern0 = Pattern.compile(".", 15);
      element1.getElementsMatchingText(pattern0);
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        element0.insertChildren((-3293), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "id";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell("id");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText(pattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3319154);
      document0.siblingNodes();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      document2.toString();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("");
      document0.getElementsByAttributeValueStarting("+K#!By[_", "+K#!By[_");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.outerHtml();
      document0.getElementsByAttributeStarting("ut");
      document0.getElementsByAttributeValueContaining(";RI", "z");
      Element element2 = document0.clone();
      element0.tagName("br");
      document0.parents();
      document0.classNames();
      Element element3 = element0.prepend("+K#!By[_");
      element2.parent();
      element3.lastElementSibling();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = ".CX?\"!{'x";
      Document document0 = Document.createShell(".CX?\"!{'x");
      Document document1 = document0.clone();
      document0.getElementsByClass("html");
      Element element0 = document1.body();
      element0.parentNode = (Node) document1;
      element0.getOutputSettings();
      Set<String> set0 = document0.classNames();
      Element element1 = element0.classNames(set0);
      element1.getElementsByAttributeValue("html", ".CX?\"!{'x");
      String string1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      element1.val(".CX?\"!{'x");
      // Undeclared exception!
      try { 
        element0.selectFirst(".CX?\"!{'x");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '.CX?\"!{'x': unexpected token at '?\"!{'x'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesCopy();
      document0.getElementsContainingText("head");
      document0.getElementsByAttributeValueStarting("+K#B!By[_", "+K#B!By[_");
      Element element0 = document0.body();
      Document document1 = element0.ownerDocument();
      document1.outerHtml();
      document0.getElementsByAttributeValueContaining(";RI", "z");
      document0.clone();
      element0.getElementsByAttribute("<html>\n <head></head>\n <body></body>\n</html>");
      document0.classNames();
      element0.prepend("+K#B!By[_");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      Element element2 = element1.selectFirst("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.getElementsByIndexLessThan((-914));
      element0.clone();
      element0.prependElement("output");
      element2.child(0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[3];
      document1.val("]bV_Y/^U9");
      document0.val();
      document1.body();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element1 = element0.wrap("Xa9686&R MfQTBw");
      element0.lastElementSibling();
      document0.siblingIndex = 53;
      element0.attributes();
      document0.toggleClass("");
      // Undeclared exception!
      try { 
        element1.child(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("body");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Element element0 = document2.createElement("</");
      StringBuilder stringBuilder0 = new StringBuilder("body");
      StringBuilder stringBuilder1 = stringBuilder0.append(2551.56445299);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(6);
      StringBuilder stringBuilder3 = stringBuilder2.insert(6, (CharSequence) stringBuilder0);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder3, (-1732), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "br";
      Tag tag0 = Tag.valueOf("br", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", (Attributes) null);
      pseudoTextElement0.ownText();
      pseudoTextElement0.classNames();
      Element element0 = pseudoTextElement0.prepend("");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("0m}WfF',Ki]Whp{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 0m}WfF',Ki]Whp{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("WQ", "textarea");
      Attributes attributes2 = attributes1.put(attribute0);
      Element element0 = new Element(tag0, "WQ", attributes2);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      element0.addClass("org.jsoup.select.CombiningEvaluator$Or");
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element1 = (Element)element0.filter(nodeFilter0);
      Attribute.createFromEncoded("AfterHead", "AfterHead");
      Pattern pattern0 = Pattern.compile("textarea", 892);
      element0.getElementsMatchingText(pattern0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      element0.ownerDocument();
      nodeArray0[1] = (Node) null;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) element1;
      nodeArray0[4] = (Node) element0;
      element1.prependChild(cDataNode0);
      element1.is("textarea");
      // Undeclared exception!
      try { 
        element0.insertChildren((-587), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      document0.text();
      Node[] nodeArray0 = new Node[5];
      Comment comment0 = new Comment("");
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1364), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "head";
      Document document0 = Document.createShell("head");
      String string1 = "EtCR!O*G";
      document0.getElementsByAttributeStarting("EtCR!O*G");
      document0.hasText();
      Element element0 = document0.appendText("head");
      int int0 = 26;
      // Undeclared exception!
      try { 
        element0.insertChildren(26, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Document.createShell("basefont");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(10);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      Document document3 = document2.clone();
      Element element0 = document3.body();
      element0.addClass("basefont");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      Element element1 = element0.prependElement("output");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Element element1 = document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[3];
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element2 = document2.head();
      element2.prependText(":nth-child(%d)");
      nodeArray0[0] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.wrap("Xa9686&R MfQTBw");
      element0.lastElementSibling();
      element0.attributes();
      Document document3 = (Document)document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      document2.getElementsMatchingText("]bV_Y/^U9");
      document3.val("r?@$6ZiU$E-<pq)|c");
      element1.ownText();
      Pattern pattern0 = Pattern.compile("Xa9686&R MfQTBw", 6);
      document3.getElementsByAttributeValueMatching("Kn&@m/RmkIF@|", pattern0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("a//P#8N");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document document2 = document1.clone();
      document0.getElementsByClass("a//P#8N");
      Element element0 = document2.text(":b3IY`");
      element0.outerHtml();
      element0.classNames();
      element0.html();
      element0.parents();
      document0.clone();
      document1.getElementsByAttributeStarting(":b3IY`");
      element0.appendTo(document1);
      MockFile mockFile0 = new MockFile("eA?4> S!A~Gq0'^mZ0A");
      File file0 = MockFile.createTempFile("textarea", "@]=<PK.=G3.9", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1966);
      bufferedWriter0.write("textarea", (-556), (-65));
      document2.html(bufferedWriter0);
      document2.attr("textarea", "a//P#8N");
      document2.tagName();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("#root");
      document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      document0.is("menu");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Element element0 = document4.head();
      document4.className();
      element0.siblingElements();
      document3.getElementsByAttributeValueEnding("Lm\"R", "Lm\"R");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-564));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("boW`th3Y%bQ{JmHns=");
      Document document1 = document0.clone();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "i GNj g{^I_Rx";
      document0.outerHtml();
      document0.prepend("i GNj g{^I_Rx");
      document1.nodeName();
      document0.ownText();
      document0.getElementsByIndexLessThan((-354));
      // Undeclared exception!
      try { 
        document1.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element1.selectFirst("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      Element element2 = element0.clone();
      element0.prependElement("output");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      // Undeclared exception!
      try { 
        element2.outerHtmlHead((Appendable) null, 0, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "*2";
      Document document0 = Document.createShell("*2");
      List<Node> list0 = new LinkedList<Node>();
      document0.getElementsContainingText("*2");
      document0.getElementsByAttributeValueStarting("*2", "*2");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("6aXcDmAM~2ZOUFkWQ");
      document0.getElementsMatchingOwnText("6aXcDmAM~2ZOUFkWQ");
      Element element0 = document0.head();
      Element element1 = element0.html("6aXcDmAM~2ZOUFkWQ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('L');
      stringWriter1.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element1.parentNode = (Node) document0;
      element1.toString();
      Element element2 = element0.after((Node) document0);
      element0.getElementsMatchingOwnText("6aXcDmAM~2ZOUFkWQ");
      document0.appendChild(element1.parentNode);
      document0.dataNodes();
      element2.isBlock();
      element0.dataset();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.nodelistChanged();
      Document document1 = document0.normalise();
      document1.getElementsByAttributeStarting("x#u0PP");
      document1.getElementsByAttributeValueMatching("textarea", pattern0);
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      document0.prependText("UZ");
      document1.getElementsContainingText("");
      Set<String> set0 = document0.classNames();
      Element element0 = document1.classNames(set0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell(":?3_u=}W^>rAr7*wna");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.getElementsMatchingText("br");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("{8Fij");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: {8Fij
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "head", (Attributes) null);
      formElement0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("version");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Element element0 = document2.createElement("version");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[3];
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      document2.head();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.wrap("Xa9686&R MfQTBw");
      Element element1 = element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      Element element2 = element1.text("head");
      element2.tagName();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "r?@$6ZiU$E-<pq)|c";
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.normalise();
      element0.id();
      Node[] nodeArray0 = new Node[3];
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document2.head();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      // Undeclared exception!
      try { 
        document2.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 41;
      String string0 = "oiO,Xal-4SdX^#K&t%";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("YSZ+", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(":'T_", "oiO,Xal-4SdX^#K&t%", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("", false);
      FormElement formElement0 = new FormElement(tag0, "w&*6(2a_|", attributes2);
      Document document0 = Document.createShell("ijdy2xcp(k4lh~");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.body();
      FormElement formElement1 = formElement0.addElement(element0);
      // Undeclared exception!
      try { 
        formElement1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document_OutputSettings2.prettyPrint(false);
      document2.getElementsByIndexGreaterThan(658);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.baseUri();
      document_OutputSettings2.outline(false);
      document3.dataset();
      document1.childNodesCopy();
      document0.text("org.jsoup.nodes.Element$2");
      document1.getElementsByIndexGreaterThan(3);
      Document document4 = (Document)document1.toggleClass("org.jsoup.nodes.Element$2");
      document4.doClone(document3);
      document0.ownText();
      document3.hasClass("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.attr("org.jsoup.nodes.Element", false);
      element0.baseUri();
      element0.parents();
      document0.getElementsContainingOwnText("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Element element1 = element0.after("");
      Element element2 = element1.doClone(document0);
      element2.getElementsMatchingOwnText("NHWZ,ZU5xG");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      Element element2 = element0.prependElement("output");
      element2.after("output");
      element1.is("org.jsoup.nodes.XmlDeclaration");
      element0.html();
      element0.text("In983n]VT%4*uHB");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4#<p~FW&*&@6");
      Document document0 = new Document("CH55n&1!v!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.clearAttributes();
      document0.getElementsByAttribute("CH55n&1!v!");
      Element element0 = document0.tagName("*WzD;UM/45}+9^b");
      document0.parents();
      document0.attributes();
      element0.parentNode = (Node) document0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.childNodeSize();
      Document document1 = (Document)element0.val("p");
      document1.nodelistChanged();
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outputSettings(document_OutputSettings0);
      Document document2 = document0.outputSettings(document_OutputSettings0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      Document document4 = document3.normalise();
      document4.getElementsContainingOwnText("id");
      document4.parentNode = (Node) document3;
      document2.getElementsByAttributeStarting("id");
      document1.getElementsByIndexGreaterThan(2);
      document4.data();
      document1.lastElementSibling();
      document1.classNames();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("vQ.S$oo&K{");
      document0.dataset();
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[3];
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document2.head();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      element0.wrap("Xa9686&R MfQTBw");
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
      document2.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      document0.attributes();
      document2.siblingElements();
      Element element2 = element1.toggleClass("Xa9686&R MfQTBw");
      element0.previousElementSibling();
      Element element3 = element2.text("]bV_Y/^U9");
      element3.parent();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Element element0 = new Element("YSZ+");
      Element element1 = element0.prependElement("YSZ+");
      element0.addClass("FTPMeV#A:!m++P");
      element1.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("?V:99Z}*^>,>bn");
      Document document1 = new Document("link");
      document0.prependChild(document1);
      Element element0 = new Element("?V:99Z}*^>,>bn");
      int int0 = 897;
      element0.textNodes();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.attr((String) null, "ScriptDataDoubleEscapeEnd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      List<Node> list0 = element1.childNodes();
      element0.childNodes = list0;
      element0.hasText();
      element0.clone();
      // Undeclared exception!
      try { 
        element0.prependElement("output");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document3.quirksMode(document_QuirksMode0);
      Document document4 = document2.quirksMode(document_QuirksMode0);
      document4.getElementsContainingOwnText("id");
      document1.getElementsByIndexGreaterThan(2);
      document4.data();
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("id");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = new Document("id");
      Document document3 = document2.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Document document5 = document4.normalise();
      Elements elements0 = document5.getElementsContainingOwnText("id");
      document5.insertChildren(0, (Collection<? extends Node>) elements0);
      document1.getElementsByIndexGreaterThan(2);
      document5.data();
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("hY7Y");
      Element element0 = document0.text("hY7Y");
      Document document1 = element0.ownerDocument();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%s");
      Document document2 = document1.clone();
      document2.shallowClone();
      document2.empty();
      document1.appendElement("hY7Y");
      String string0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.getElementsByAttributeStarting("EtCR!O*G");
      document0.hasText();
      Document document1 = (Document)document0.appendText("head");
      Document document2 = (Document)document1.removeClass("EtCR!O*G");
      document0.getElementsByAttribute("head");
      document1.tagName("EtCR!O*G");
      document1.getAllElements();
      Element element0 = document1.createElement("EtCR!O*G");
      document2.tag();
      element0.html((MockPrintStream) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document document3 = new Document("head");
      Charset charset0 = document3.charset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 26, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.clone();
      Element element2 = element0.prependElement("output");
      element1.doClone((Node) null);
      element2.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Tag tag0 = Tag.valueOf("75j");
      Tag.valueOf("75j");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8d!y");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "8", (Attributes) null);
      pseudoTextElement0.getOutputSettings();
      pseudoTextElement0.siblingElements();
      pseudoTextElement0.className();
      pseudoTextElement0.getElementById("75j");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Element element1 = document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[3];
      document1.val("]bV_Y/^U9");
      document0.val();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = element0.wrap("Xa9686&R MfQTBw");
      element2.setParentNode(element1);
      element0.lastElementSibling();
      element0.attributes();
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("8p~AIyH>0/Jf");
      document0.normalise();
      Element element0 = document0.head();
      element0.dataNodes();
      element0.getElementsByIndexGreaterThan(3808);
      element0.prepend("org.jsoup.nodes.XmlDeclaration");
      document0.prependElement("org.jsoup.nodes.XmlDeclaration");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Document document5 = document4.normalise();
      document5.data();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("id");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document3.quirksMode(document_QuirksMode0);
      document2.getElementsContainingOwnText("id");
      document1.getElementsByIndexGreaterThan((-33));
      document0.data();
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("4mT6");
      Element element0 = document0.createElement("4mT6");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.shallowClone();
      pattern0.asPredicate();
      document0.nodelistChanged();
      Element element0 = document0.html("e~c[4r=c\":P5\"#c&2Hu");
      element0.getElementsByAttributeStarting("x#u0PP");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      element0.getElementsByAttributeValueMatching("textarea", pattern0);
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      element0.cssSelector();
      document0.val();
      // Undeclared exception!
      try { 
        document0.child((-3952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.select.NodeFilter$FilterResult");
      Document document0 = new Document("L_::/&GLpWX");
      Document document1 = document0.normalise();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document1.text();
      Document document2 = document1.ownerDocument();
      Document document3 = (Document)document0.text("L_::/&GLpWX");
      Document document4 = (Document)document3.appendChild(document2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document3.ensureChildNodes();
      // Undeclared exception!
      try { 
        document4.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document(",hDs*gd5X\"e6HRNfP}");
      Document document1 = document0.normalise();
      document0.setParentNode(document1);
      String string0 = "O7)N,sDu+8L'TjkTj2,";
      Element element0 = document1.attr("O7)N,sDu+8L'TjkTj2,", "org.jsoup.nodes.Element$NodeList");
      element0.getElementsByAttributeValueMatching("", "");
      element0.ownText();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "=NTC)ydjM{B~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.html("basefont");
      element0.elementSiblingIndex();
      element0.hasText();
      Element element1 = element0.prependElement("output");
      element1.cssSelector();
      element0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      document0.attr("", false);
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      document2.html(charArrayWriter0);
      // Undeclared exception!
      try { 
        document2.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = " ";
      Document document0 = Document.createShell(" ");
      Document document1 = document0.clone();
      document1.dataNodes();
      Element element0 = document0.prependText("");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Document document1 = document0.clone();
      Element element0 = document0.prependText(" ");
      PipedWriter pipedWriter0 = new PipedWriter();
      document1.hasAttributes();
      Element element1 = document0.prepend(" ");
      element1.hasText();
      element0.getElementsByClass("p n2vMvDy0HCl|");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("Fg4HO)lsr}3");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.createElement(";/,2Q>M40\na");
      element0.getAllElements();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsByIndexEquals(70);
      document0.addClass("br");
      document0.ensureChildNodes();
      document0.getElementsByAttributeStarting("br");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell(",X`sZ#8A");
      Document document1 = document0.normalise();
      document1.getElementsByAttribute(",X`sZ#8A");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.html();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Element element0 = document2.classNames(set0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        document1.insertChildren(1297, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = new Document("&2)?Od&oVh)Iv({+D");
      String string0 = "Q$ey$8+N2+>T{5kY@W";
      document0.removeClass("Q$ey$8+N2+>T{5kY@W");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q$ey$8+N2+>T{5kY@W");
      document0.wholeText();
      document0.id();
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("#root");
      document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Element element0 = document4.head();
      element0.siblingElements();
      document3.getElementsByAttributeValueEnding("Lm\"R", "Lm\"R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.appendText("menu");
      // Undeclared exception!
      try { 
        document0.before("menu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.getElementsByIndexLessThan(30);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("xT !?#+kECh(,}y");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
      document2.createElement("xT !?#+kECh(,}y");
      document2.tagName("mwp@4h");
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, 2511);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      element0.prependElement("output");
      // Undeclared exception!
      try { 
        element1.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = new Element("^O;2`,y-slq`9S~Fnc-");
      Element element1 = element0.html("^O;2`,y-slq`9S~Fnc-");
      element0.elementSiblingIndex();
      element0.clone();
      Element element2 = element0.prependElement("output");
      element2.html("");
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element1.selectFirst("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      Element element2 = element0.clone();
      Element element3 = element0.prependElement("output");
      element3.before((Node) element2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Document document0 = Document.createShell("MYx/PH*%}m|tY+V");
      document0.appendText("sO1k2p8MN");
      document0.hasAttr("MYx/PH*%}m|tY+V");
      document0.siblingNodes();
      Element element0 = document0.head();
      element0.getElementsByAttributeValueStarting("!`Zr@]SK`V", "EiwTKEFc:");
      document0.getElementsByAttribute(":nth-child(%d)");
      element0.childNodesCopy();
      document0.getElementsByAttributeValueContaining("Mjf,JvI5Zp", "!`Zr@]SK`V");
      document0.getElementsByIndexGreaterThan((-528));
      element0.getElementsByAttributeValueStarting("!`Zr@]SK`V", "EiwTKEFc:");
      element0.getElementsByIndexLessThan((-528));
      Pattern pattern0 = Pattern.compile("basefont");
      element0.getElementsByAttributeValueMatching("body", pattern0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "html";
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      Element element1 = element0.appendTo(document0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[4] = (Node) element1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element1;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        element1.insertChildren(90, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Document.createShell("+eM)pO");
      document0.html();
      Element.preserveWhitespace(document0);
      document0.wholeText();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      DocumentType documentType0 = new DocumentType("+eM)pO", "", "Unexpected character '%s' in input state [%s]");
      nodeArray0[2] = (Node) documentType0;
      CDataNode cDataNode0 = new CDataNode(":has(");
      Node node0 = cDataNode0.shallowClone();
      nodeArray0[3] = node0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(16, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.html("basefont");
      element0.hasClass("");
      element0.elementSiblingIndex();
      element0.hasText();
      element0.clone();
      element0.prependElement("-}LsFxE##p;&");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        element1.insertChildren((-1433506051), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.text("WD/hm]VV5#_b,#@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element2 = element1.classNames((Set<String>) linkedHashSet0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element2;
      element1.parents();
      element2.nextElementSibling();
      document1.attributes();
      element1.children();
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element1;
      element2.cssSelector();
      // Undeclared exception!
      try { 
        document0.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("WQ", "textarea");
      Attributes attributes2 = attributes1.put(attribute0);
      Element element0 = new Element(tag0, "WQ", attributes2);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      element0.addClass("org.jsoup.select.CombiningEvaluator$Or");
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element1 = (Element)element0.filter(nodeFilter0);
      Attribute.createFromEncoded("AfterHead", "AfterHead");
      Pattern pattern0 = Pattern.compile("textarea", 892);
      element0.getElementsMatchingText(pattern0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      element0.ownerDocument();
      element0.addClass("WQ");
      nodeArray0[1] = (Node) null;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) element1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      nodeArray0[4] = (Node) element0;
      element1.prependChild(cDataNode0);
      element1.is("textarea");
      // Undeclared exception!
      try { 
        element0.insertChildren((-587), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Document.createShell("c=:_r,MF");
      Document document1 = document0.normalise();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      document1.getOutputSettings();
      document1.clearAttributes();
      document1.nodeName();
      Element element0 = document1.val("#document");
      element0.getElementsByIndexEquals(46);
      document0.text();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.getElementsMatchingText("body");
      element0.cssSelector();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)45;
      byteArray0[6] = (byte) (-84);
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        element0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Document document2 = (Document)document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[8];
      Document document3 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document3.head();
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = document2.body();
      Element element3 = element2.firstElementSibling();
      element0.lastElementSibling();
      Attributes attributes0 = element0.attributes();
      document0.toggleClass("");
      document3.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      attributes0.clone();
      document3.siblingElements();
      document0.empty();
      Element element4 = element1.toggleClass("Xa9686&R MfQTBw");
      element2.attr("", false);
      String string0 = Node.EmptyString;
      element3.ensureChildNodes();
      document0.getElementsByAttributeStarting("r?@$6ZiU$E-<pq)|c");
      element0.previousElementSibling();
      element4.text("]bV_Y/^U9");
      // Undeclared exception!
      try { 
        element4.child(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Document document2 = (Document)document0.text("r?@$6ZiU$E-<pq)|c");
      element0.id();
      Node[] nodeArray0 = new Node[8];
      Document document3 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document3.head();
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = document2.body();
      Element element3 = element2.firstElementSibling();
      element0.lastElementSibling();
      Attributes attributes0 = element0.attributes();
      document0.toggleClass("");
      document3.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      attributes0.clone();
      document3.siblingElements();
      document0.empty();
      Element element4 = element1.toggleClass("Xa9686&R MfQTBw");
      String string0 = Node.EmptyString;
      element3.ensureChildNodes();
      element0.previousElementSibling();
      element4.text("]bV_Y/^U9");
      // Undeclared exception!
      try { 
        element4.child(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("r?@$6ZiU$E-<pq)|c");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      document0.text("r?@$6ZiU$E-<pq)|c");
      int int0 = 53;
      Node[] nodeArray0 = new Node[8];
      String string0 = "]bV_Y/^U9";
      Document document2 = (Document)document1.val("]bV_Y/^U9");
      document0.val();
      Element element1 = document2.head();
      document1.data();
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      element0.getElementsByIndexGreaterThan(53);
      Element element2 = element0.wrap("Xa9686&R MfQTBw");
      element2.firstElementSibling();
      element0.lastElementSibling();
      Attributes attributes0 = element0.attributes();
      document2.getElementsByClass("]bV_Y/^U9");
      document0.val("r?@$6ZiU$E-<pq)|c");
      attributes0.clone();
      element0.getElementsByAttributeValueStarting("]bV_Y/^U9", "]bV_Y/^U9");
      document0.empty();
      Element element3 = element1.toggleClass("Xa9686&R MfQTBw");
      // Undeclared exception!
      try { 
        element3.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000226': unexpected token at '@0000000226'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      pattern0.matcher("");
      pattern0.matcher("");
      pattern0.split((CharSequence) "");
      document0.getElementsByAttributeValueMatching(" Ya%^</LA[bMRPW/ Sl", pattern0);
      Pattern.compile("", 348);
      document0.getElementsMatchingOwnText(pattern0);
      List<DataNode> list0 = document0.dataNodes();
      document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(348, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "menu";
      Document document0 = new Document("menu");
      Document document1 = document0.clone();
      Document document2 = document1.ownerDocument();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("#root");
      document1.classNames((Set<String>) linkedHashSet0);
      Document document3 = document2.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("menu");
      Document document4 = document3.quirksMode(document_QuirksMode0);
      Element element0 = document4.head();
      String string1 = "Lm\"R";
      element0.siblingElements();
      document3.getElementsByAttributeValueEnding("Lm\"R", "Lm\"R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.appendText("menu");
      // Undeclared exception!
      try { 
        document0.before("menu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.nodelistChanged();
      Document document1 = document0.normalise();
      document1.getElementsByAttributeStarting("x#u0PP");
      document1.getElementsByAttributeValueMatching("textarea", pattern0);
      document0.getElementsByAttributeValueNot("textarea", "textarea");
      document0.prependText("Uc");
      document1.getElementsContainingText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document1.classNames((Set<String>) linkedHashSet0);
      element0.textNodes();
      element0.toString();
      document0.getElementsByAttributeValueMatching("x#u0PP", pattern0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingText(pattern0);
      document0.shallowClone();
      pattern0.asPredicate();
      document0.nodelistChanged();
      Element element0 = document0.html("e~c[4r=c\":P5\"#c&2Hu");
      element0.getElementsByAttributeStarting("x#u0PP");
      Pattern.compile(":matches");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      element0.getElementsByAttributeValueMatching("textarea", pattern0);
      element0.getElementsByAttributeValue("x#u0PP", "e~c[4r=c\":P5\"#c&2Hu");
      element0.cssSelector();
      int int0 = (-3952);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("|9<)hi[XkmTMy=", "*WzD;UM/45}+9^b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *WzD;UM/45}+9^b
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Document.createShell("id");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText(pattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3319154);
      document0.siblingNodes();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.siblingNodes();
      Document document3 = document2.clone();
      Element element0 = document3.body();
      Element element1 = document2.text("id");
      element0.after((Node) document2);
      Pattern pattern1 = Pattern.compile("id", 3332049);
      element1.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
      document2.getElementsMatchingText(pattern1);
      element1.remove();
      document3.getElementById(":nth-child(%d)");
      document3.getElementsByAttributeValueContaining("id", "Q8h/(\"O4CQZ");
      assertEquals(2, document1.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.html();
      document0.getElementsByAttributeStarting("EtCR!O*G");
      document0.hasText();
      Document document1 = new Document("EtCR!O*G");
      Element element0 = document1.removeClass("EtCR!O*G");
      document0.getElementsByAttribute("head");
      document1.tagName("EtCR!O*G");
      document1.getAllElements();
      Element element1 = document1.createElement("EtCR!O*G");
      element0.tag();
      element1.html((MockPrintStream) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document document2 = new Document("head");
      Charset charset0 = document2.charset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      element1.empty();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 26, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
