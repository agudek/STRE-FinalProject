/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 09:05:57 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = comment0.getOutputSettings();
      comment0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      comment0.getData();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      comment0.getData();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      comment0.reparentChild(comment0);
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment((String) null, ":%'Cey#BQ)t$Q:F");
      CDataNode cDataNode0 = new CDataNode("");
      comment0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      Comment comment1 = new Comment("#=VZWe=y-7Rg@T|J", "#=VZWe=y-7Rg@T|J");
      comment1.value = (Object) comment0;
      // Undeclared exception!
      try { 
        comment1.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment(" SPR", " SPR");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, (-946), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("?@ GB^X)|t}Wk-Bq");
      MockFile mockFile0 = new MockFile((File) null, "<!--");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(mockFileWriter0, 106, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = comment0.getOutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charArrayWriter0, (-1216), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      comment0.value = (Object) charArrayWriter0;
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = comment0.getOutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(stringBuffer0, 12, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.CharArrayWriter cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("rA{5.lGd[Y-PXI", "rA{5.lGd[Y-PXI");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        comment0.outerHtmlHead(pipedWriter0, 0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      Object object0 = new Object();
      comment0.value = object0;
      // Undeclared exception!
      try { 
        comment0.getData();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      comment0.getData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = comment0.getOutputSettings();
      document_OutputSettings0.prettyPrint(false);
      comment0.outerHtmlHead(stringBuffer0, 12, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment("#=VZWe=y-7Rg@T|J");
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment(" SPR", " SPR");
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }
}
