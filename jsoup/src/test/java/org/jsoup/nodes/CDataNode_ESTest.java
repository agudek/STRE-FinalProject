/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 09:09:26 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CDataNode_ESTest extends CDataNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      cDataNode0.outerHtmlTail(stringWriter0, (-1571), document_OutputSettings0);
      assertEquals("]]>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      cDataNode0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
      assertEquals("<![CDATA[", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.text();
      assertEquals("#cdata", cDataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.text();
      assertEquals("#cdata", cDataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("meter");
      Object object0 = new Object();
      cDataNode0.value = object0;
      // Undeclared exception!
      try { 
        cDataNode0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("2u2f!yqu");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlTail(pipedWriter0, 722, (Document.OutputSettings) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("2u2f!yqu");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "2u2f!yqu");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlTail(charBuffer0, 1879, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("I{JD!b6gR");
      Document.OutputSettings document_OutputSettings0 = cDataNode0.getOutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlTail((Appendable) null, (-297), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = cDataNode0.getOutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlHead(charBuffer0, 63, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("to$C-m'0[Z;");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("_}=X+-^|8n;!,");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = cDataNode0.getOutputSettings();
      try { 
        cDataNode0.outerHtmlHead(pipedWriter0, (-1651), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("\u0007|n?>P_eWQd");
      cDataNode0.text();
      assertEquals("#cdata", cDataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("2u2!yqu");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlTail(charBuffer0, 0, (Document.OutputSettings) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      String string0 = cDataNode0.nodeName();
      assertEquals("#cdata", string0);
  }
}
