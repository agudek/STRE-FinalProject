/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 08:52:53 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.List;
import java.util.UnknownFormatConversionException;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsMatchingOwnText("");
      Element element0 = elements0.last();
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.eq(0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("&cy==A");
      Elements elements0 = document0.getElementsByAttributeValueNot(",~=<W|ov mD", ",~=<W|ov mD");
      elements0.val(",~=<W|ov mD");
      String string0 = elements0.val();
      assertEquals(",~=<W|ov mD", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(208);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(652);
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      Elements elements1 = elements0.select(" ha,1Hcd");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.select(":last-child");
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      document0.text("T|T8w:Z/$5ln1-GK");
      Elements elements0 = document0.getElementsMatchingText("T|T8w:Z/$5ln1-GK");
      Elements elements1 = elements0.prevAll((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.prevAll();
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("O\n");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.prev();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.prepend("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("required");
      Elements elements0 = element0.getElementsByAttributeValue("required", "required");
      Elements elements1 = elements0.not("required");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(3137);
      Elements elements1 = elements0.nextAll((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(652);
      Elements elements1 = elements0.next((String) null);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("mO>UY4~");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-3197));
      Elements elements1 = elements0.next((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(208);
      Elements elements1 = elements0.next();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.prepend("org.jsoup.nodes.PseudoTextElement");
      Element element0 = elements0.last();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Element element0 = elements0.first();
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Element element0 = elements0.first();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Id");
      Elements elements0 = document0.getElementsByAttribute("|");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("uv$3OJ");
      Elements elements0 = document0.getElementsByAttributeStarting("Z)OA=@5SHWPEEYw");
      Elements elements1 = elements0.before("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("Wh");
      Elements elements0 = document0.getElementsByAttribute(" ");
      Elements elements1 = elements0.attr("eKc3QSc", "Wh");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.after("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document(")6btCy=");
      Elements elements0 = document0.getAllElements();
      document0.appendChild(document0);
      // Undeclared exception!
      elements0.wrap(":matchesOwn(%s) :matchesOwn(%s)  ");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("uv$3OJ");
      Elements elements0 = document0.getElementsByAttributeStarting("Z)OA=@5SHWPEEYw");
      // Undeclared exception!
      try { 
        elements0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element[] elementArray0 = new Element[9];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      Elements elements1 = elements0.html("+K#r#V6!qeF");
      // Undeclared exception!
      try { 
        elements1.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("d$;: *=qcV;cUh");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("GQj-#.");
      Elements elements0 = document0.getElementsByClass("]v{WPiS`')q\n_?");
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Elements elements0 = new Elements(3810);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.toggleClass("!3|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      document0.appendChild(document0);
      Elements elements0 = document0.children();
      // Undeclared exception!
      elements0.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element[] elementArray0 = new Element[15];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("5(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = new Document("");
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''': unexpected token at '''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Element[] elementArray0 = new Element[15];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      elements0.html("+K#r#V6!qeF");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("~/");
      Elements elements0 = document0.getElementsByAttributeValueStarting("~/", "\n");
      elements0.add((Element) document0);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4o9^ts4,3(<");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "UL^", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueNot("4o9^ts4,3(<", "UL^");
      // Undeclared exception!
      try { 
        elements0.prevAll("CNX-!vuq1Yd\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'CNX-!vuq1Yd\"': unexpected token at '!vuq1Yd\"'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prevAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      // Undeclared exception!
      try { 
        elements0.prev("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prev("jktPV[%&*s P");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '&'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("34Z+");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element[] elementArray0 = new Element[15];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.parents();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("&cy==A");
      Elements elements0 = document0.getElementsByAttributeValueNot(",~=<W|ov mD", ",~=<W|ov mD");
      // Undeclared exception!
      try { 
        elements0.not("7W#1\"(?Gs'*Wr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '7W#1\"(?Gs'*Wr': unexpected token at '\"(?Gs'*Wr'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Elements elements0 = new Elements(508);
      // Undeclared exception!
      try { 
        elements0.not("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.nextAll("LC%5q=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'LC%5q=': unexpected token at '%5q='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.nextAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(208);
      // Undeclared exception!
      try { 
        elements0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      document0.prependChild(document0);
      // Undeclared exception!
      elements0.is("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element[] elementArray0 = new Element[14];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.is("Unexpected count of entities loaded");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.html("embed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Tag tag0 = Tag.valueOf("e");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "C.e", attributes0);
      Elements elements0 = element0.getElementsByAttributeStarting("](%L[");
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("Wh");
      Elements elements0 = document0.getElementsByAttribute(" ");
      // Undeclared exception!
      try { 
        elements0.eq((-829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element[] elementArray0 = new Element[15];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element[] elementArray0 = new Element[10];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.eachText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      CDataNode cDataNode0 = new CDataNode("2_uy!xV(cVC");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aNzL!=PXTKb=3|[5$:", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      // Undeclared exception!
      try { 
        elements0.eachAttr("aNzL!=PXTKb=3|[5$:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      // Undeclared exception!
      try { 
        elements0.eachAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document(")6btCy=");
      Elements elements0 = document0.getAllElements();
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.before(":matchesOwn(%s)");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.attr("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.attr((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Elements");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Elements", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeValueNot("org.jsoup.select.Elements", "figcaption");
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("");
      Pattern pattern0 = Pattern.compile("", 495);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element[] elementArray0 = new Element[15];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.after((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document(":matchesOwn(%s)");
      Elements elements0 = document0.getElementsByAttributeValueNot(",~=<W|ov mD", ",~=<W|ov mD");
      // Undeclared exception!
      try { 
        elements0.after(":matchesOwn(%s)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.addClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-589));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -589
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(3137);
      Element element0 = elements0.first();
      assertEquals("html", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("Wh");
      Elements elements0 = document0.getElementsByAttribute(" ");
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = new Elements((List<Element>) elements0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.contains(formElement0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("Wh");
      Elements elements0 = document0.getElementsByAttribute(" ");
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      Element element0 = elements0.last();
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      assertEquals("windows-1252", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      Elements elements1 = elements0.parents();
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("mO>3MUY4~");
      Pattern pattern0 = Pattern.compile("|$N:RZ6b#I");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = elements0.prev((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      boolean boolean0 = elements0.is("r3kc1lR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      boolean boolean0 = elements0.is("org.jsoup.nodes.PseudoTextElement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.eq(0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document(")6btCy=");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.eq(3137);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.remove();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.empty();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.empty();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.unwrap();
      // Undeclared exception!
      try { 
        elements1.wrap("mEm27");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.unwrap();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.wrap("org.jsoup.nodes.PseudoTextElement");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.wrap("org.jsoup.nodes.PseudoTextElement");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      Elements elements1 = elements0.append("r3kc1lR");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("uv$3OJ");
      Elements elements0 = document0.getElementsByAttributeStarting("Z)OA=@5SHWPEEYw");
      Elements elements1 = elements0.append("Z)OA=@5SHWPEEYw");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.html("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.tagName("2+O^");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.tagName("2+O^");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("mO>3MUY4~");
      Pattern pattern0 = Pattern.compile("|$N:RZ6b");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.prepend("2+I");
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("2+I"));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      List<String> list0 = elements0.eachText();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.after("2+I");
      Elements elements1 = elements0.nextAll();
      boolean boolean0 = elements1.hasText();
      assertTrue(boolean0);
      assertEquals(2, elements1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = new Document(")6btCy=");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getAllElements();
      Predicate<Element> predicate0 = Predicate.isEqual((Object) document1);
      elements0.removeIf(predicate0);
      elements0.before(":matchesOwn(%s)");
      String string0 = elements0.text();
      assertEquals(2, document1.childNodeSize());
      assertEquals(":matchesOwn(%s) :matchesOwn(%s)  ", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.val("<2+O^ class=\"java.lang.String@0000000027\"></2+O^>");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("&cy==A");
      Elements elements0 = document0.getElementsByAttributeValueNot(",~=<W|ov mD", ",~=<W|ov mD");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      boolean boolean0 = elements0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "r3kc1lR", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      Elements elements1 = elements0.toggleClass("");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("uv$3OJ");
      Elements elements0 = document0.getElementsByAttributeStarting("Z)OA=@5SHWPEEYw");
      Elements elements1 = elements0.toggleClass("uv$3OJ");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.removeClass("2+I");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.removeClass("2+I");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.addClass("2+O^");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByAttributeValue("org.jsoup.nodes.PseudoTextElement", "org.jsoup.nodes.PseudoTextElement");
      Elements elements1 = elements0.addClass("2+O^");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Elements");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Elements", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeValueNot("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Elements elements1 = elements0.removeAttr(":contains");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Elements elements0 = new Elements(3810);
      Elements elements1 = elements0.removeAttr((String) null);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Elements");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Elements", attributes1);
      Elements elements0 = formElement0.getElementsByAttributeValueNot("org.jsoup.select.Elements", "figcaption");
      List<String> list0 = elements0.eachAttr("org.jsoup.select.Elements");
      assertTrue(list0.contains("org.jsoup.select.Elements"));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Elements");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Elements", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeValueNot("org.jsoup.select.Elements", "figcaption");
      List<String> list0 = elements0.eachAttr("org.jsoup.select.Elements");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("8){FzdB", "r3kc1lR");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "r3kc1lR", attributes1);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      boolean boolean0 = elements0.hasAttr("8){FzdB");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("2+I");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      boolean boolean0 = elements0.hasAttr("org.jsoup.nodes.PseudoTextElement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.attr("~@j}mK<4>", "2+O^");
      String string0 = elements0.attr("~@j}mK<4>");
      assertEquals("2+O^", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("2+O^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      String string0 = elements0.attr("2+O^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prev("KT");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.not("ERP");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Elements elements0 = new Elements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("mO>3MUY4~");
      Pattern pattern0 = Pattern.compile("|$N:RZ6b");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = elements0.clone();
      assertEquals(4, elements1.size());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document(")6btCy=");
      Elements elements0 = document0.getAllElements();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.prevAll((String) null);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Element[] elementArray0 = new Element[15];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prev();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3kc1lR");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.getElementsByAttribute("8){FzdB");
      // Undeclared exception!
      try { 
        elements0.next("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("uv$3OJ");
      Elements elements0 = document0.getElementsByAttributeStarting("Z)OA=@5SHWPEEYw");
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("+K#r#V6!qeF");
      Elements elements0 = document0.getElementsByIndexLessThan(632);
      Elements elements1 = elements0.nextAll(" ha,1Hcd");
      assertTrue(elements1.isEmpty());
  }
}
