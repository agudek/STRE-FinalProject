/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 09:09:26 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Spliterator;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluator_ESTest extends Evaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding(">G]q[Y9w", "+Bxl");
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      evaluator_AttributeWithValueEnding0.matches(document2, document0);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("TR", "\"+Bxl");
      evaluator_AttributeWithValueContaining0.matches(document2, document0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Tag tag0 = Tag.valueOf("\"org.jsoup.select.Evaluator$IsNthLastOfType");
      FormElement formElement0 = new FormElement(tag0, "\"org.jsoup.select.Evaluator$IsNthLastOfType", (Attributes) null);
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("\"org.jsoup.select.Evaluator$IsNthLastOfType", "\"org.jsoup.select.Evaluator$IsNthLastOfType");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_MatchText0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.parser.TreeBuilder", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$IsEmpty");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$IsEmpty", attributes0);
      evaluator_MatchText0.matches(pseudoTextElement0, pseudoTextElement0);
      structuralEvaluator_Parent0.evaluator = (Evaluator) evaluator_MatchText0;
      structuralEvaluator_Parent0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 0);
      assertNotNull(evaluator_IsNthOfType0);
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthOfType0);
      assertNotNull(structuralEvaluator_Not0);
      
      Document document0 = Document.createShell("Ty'W~TB/x");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ty'W~TB/x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ty'W~TB/x", document0.baseUri());
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Ty'W~TB/x", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Ty'W~TB/x", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Tag tag1 = Tag.valueOf(",@9Yl/ZP2|P{");
      assertNotNull(tag1);
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertEquals(",@9Yl/ZP2|P{", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      FormElement formElement0 = new FormElement(tag0, "Ty'W~TB/x", (Attributes) null);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Ty'W~TB/x", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Ty'W~TB/x", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(tag0.equals((Object)tag1));
      
      PipedWriter pipedWriter0 = formElement0.html((PipedWriter) null);
      assertNull(pipedWriter0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Ty'W~TB/x", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Ty'W~TB/x", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      
      boolean boolean0 = structuralEvaluator_Not0.matches(document0, formElement0);
      assertTrue(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ty'W~TB/x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ty'W~TB/x", document0.baseUri());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Ty'W~TB/x", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Ty'W~TB/x", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      
      Evaluator[] evaluatorArray0 = new Evaluator[3];
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      evaluatorArray0[0] = (Evaluator) evaluator_MatchText0;
      evaluatorArray0[1] = (Evaluator) evaluator_IsNthOfType0;
      evaluatorArray0[2] = (Evaluator) structuralEvaluator_Not0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      assertNotNull(combiningEvaluator_And0);
      assertEquals(3, evaluatorArray0.length);
      
      ArrayList<Evaluator> arrayList0 = combiningEvaluator_And0.evaluators;
      assertNotNull(arrayList0);
      assertEquals(3, evaluatorArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(arrayList0);
      assertNotNull(combiningEvaluator_Or0);
      assertEquals(3, evaluatorArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      
      combiningEvaluator_Or0.add(evaluator_IsNthOfType0);
      assertEquals(3, evaluatorArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-733), 0);
      assertNotNull(evaluator_IsNthLastOfType0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ty'W~TB/x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ty'W~TB/x", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Ty'W~TB/x", element0.baseUri());
      assertTrue(element0.isBlock());
      
      int int0 = evaluator_IsNthLastOfType0.calculatePosition(formElement0, element0);
      assertEquals(1, int0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ty'W~TB/x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ty'W~TB/x", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Ty'W~TB/x", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Ty'W~TB/x", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Ty'W~TB/x", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(combiningEvaluator_And0);
      assertNotNull(structuralEvaluator_Parent0);
      assertEquals(3, evaluatorArray0.length);
      
      // Undeclared exception!
      try { 
        structuralEvaluator_Parent0.matches(element0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchText", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      Document document0 = new Document("2[v1{Un");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2[v1{Un", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2[v1{Un", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2[v1{Un", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2[v1{Un", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("2[v1{Un", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("2[v1{Un", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertNotNull(elements0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2[v1{Un", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2[v1{Un", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      boolean boolean0 = document0.hasClass("Yu");
      assertFalse(boolean0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2[v1{Un", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2[v1{Un", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      
      Element element0 = document0.createElement("2[v1{Un");
      assertNotNull(element0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2[v1{Un", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2[v1{Un", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("2[v1{Un", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("_,ip|tr]aGK");
      assertNotNull(evaluator_Class0);
      
      boolean boolean1 = evaluator_Class0.matches(document1, document0);
      assertFalse(boolean1);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2[v1{Un", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2[v1{Un", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("2[v1{Un", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("2[v1{Un", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = evaluator_Class0.toString();
      assertEquals("._,ip|tr]aGK", string0);
      assertNotNull(string0);
      
      String string1 = evaluator_Class0.toString();
      assertEquals("._,ip|tr]aGK", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        evaluator_IsRoot0.matches(document1, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-689), (-689));
      assertNotNull(evaluator_IsNthOfType0);
      
      String string0 = evaluator_IsNthOfType0.toString();
      assertEquals(":nth-of-type(-689n-689)", string0);
      assertNotNull(string0);
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot(":nth-of-type(-689n-689)", ":nth-of-type(-689n-689)");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":nth-of-type(-689n-689)", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(":nth-of-type(-689n-689)", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(":nth-of-type(-689n-689)", false);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertTrue(attributes2.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":nth-of-type(-689n-689)", attributes2);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(":nth-of-type(-689n-689)", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes2.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      
      Document document0 = new Document(":nth-of-type(-689n-689)");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(":nth-of-type(-689n-689)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", document0.baseUri());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(":nth-of-type(-689n-689)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", document0.baseUri());
      assertEquals(":nth-of-type(-689n-689)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = evaluator_AttributeWithValueNot0.matches(pseudoTextElement0, document1);
      assertTrue(boolean0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(":nth-of-type(-689n-689)", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(":nth-of-type(-689n-689)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", document0.baseUri());
      assertEquals(":nth-of-type(-689n-689)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(":nth-of-type(-689n-689)", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes2.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("");
      assertNotNull(evaluator_Id0);
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("sjr^^{OgULU8NC%Hu$", "lLDWfXNXjc");
      assertNotNull(evaluator_AttributeWithValue0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = document2.normalise();
      assertNotNull(document3);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = (Document)document2.appendText("[%s~=%s]");
      assertNotNull(document4);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      
      Document document5 = document3.quirksMode(document_QuirksMode0);
      assertNotNull(document5);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      
      Element element0 = document0.createElement("lLDWfXNXjc");
      assertNotNull(element0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      
      boolean boolean0 = evaluator_AttributeWithValue0.matches(document5, element0);
      assertFalse(boolean0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      
      Element element1 = (Element)element0.removeAttr("");
      assertNotNull(element1);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = evaluator_AttributeWithValue0.toString();
      assertEquals("[sjr^^{ogulu8nc%hu$=lldwfxnxjc]", string0);
      assertNotNull(string0);
      
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      assertNotNull(combiningEvaluator_And0);
      assertEquals(0, evaluatorArray0.length);
      
      boolean boolean1 = combiningEvaluator_And0.matches(element0, document0);
      assertTrue(boolean1);
      assertEquals(0, evaluatorArray0.length);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(element0, element1);
      
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_AttributeWithValue0);
      assertNotNull(structuralEvaluator_Parent0);
      
      boolean boolean2 = structuralEvaluator_Parent0.matches(document4, document5);
      assertFalse(boolean2);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      String string0 = "\"";
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = null;
      try {
        evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("address", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      Tag tag0 = Tag.valueOf("KtRS;:hb}VFMjzu,HaP");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertEquals("KtRS;:hb}VFMjzu,HaP", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("KtRS;:hb}VFMjzu,HaP", "L^7W=YH~w(");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = tag0.getName();
      assertEquals("KtRS;:hb}VFMjzu,HaP", string0);
      assertNotNull(string0);
      assertFalse(tag0.isData());
      assertEquals("KtRS;:hb}VFMjzu,HaP", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      attributes2.removeIgnoreCase("org.jsoup.select.Evaluator$IsFirstChild");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "KtRS;:hb}VFMjzu,HaP", attributes2);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertEquals("KtRS;:hb}VFMjzu,HaP", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("KtRS;:hb}VFMjzu,HaP", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      boolean boolean0 = evaluator_IsLastOfType0.matches(formElement0, formElement0);
      assertFalse(boolean0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertFalse(tag0.isData());
      assertEquals("KtRS;:hb}VFMjzu,HaP", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("KtRS;:hb}VFMjzu,HaP", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      String string1 = evaluator_IsLastOfType0.toString();
      assertEquals(":last-of-type", string1);
      assertNotNull(string1);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      boolean boolean1 = evaluator_AllElements0.matches(formElement0, formElement0);
      assertTrue(boolean1);
      assertFalse(tag0.isData());
      assertEquals("KtRS;:hb}VFMjzu,HaP", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("KtRS;:hb}VFMjzu,HaP", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("*", evaluator_AllElements0.toString());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(boolean1 == boolean0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastOfType0);
      assertNotNull(structuralEvaluator_Has0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      boolean boolean2 = structuralEvaluator_Has0.matches(formElement0, formElement0);
      assertFalse(boolean2);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertFalse(tag0.isData());
      assertEquals("KtRS;:hb}VFMjzu,HaP", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("KtRS;:hb}VFMjzu,HaP", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      String string2 = evaluator_IsLastChild0.toString();
      assertEquals(":last-child", string2);
      assertNotNull(string2);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("nth-last-child");
      assertNotNull(evaluator_Attribute0);
      
      Tag tag0 = Tag.valueOf("nth-last-child");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("nth-last-child", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      
      Element element0 = new Element(tag0, "IW+\",UvY6tg");
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("nth-last-child", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IW+\",UvY6tg", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      boolean boolean0 = evaluator_Attribute0.matches(element0, element0);
      assertFalse(boolean0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("nth-last-child", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IW+\",UvY6tg", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(13);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      boolean boolean1 = evaluator_IndexGreaterThan0.matches(element0, element0);
      assertFalse(boolean1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("nth-last-child", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IW+\",UvY6tg", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(boolean1 == boolean0);
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = null;
      try {
        evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(685);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      evaluator_IndexGreaterThan0.index = 856;
      String string0 = evaluator_IndexGreaterThan0.toString();
      assertEquals(":gt(856)", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      assertNotNull(structuralEvaluator_Root0);
      
      Element element0 = new Element("nowrap");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getElementsByAttributeStarting("u>RG4M?U5cw$Yyk~2j");
      assertNotNull(elements0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = structuralEvaluator_Root0.matches(element0, element0);
      assertTrue(boolean0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertNotNull(evaluator_IsFirstChild0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      
      String string1 = evaluator_IsFirstChild0.toString();
      assertEquals(":first-child", string1);
      assertNotNull(string1);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("-ER2*Y*", ":gt(856)");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      String string2 = evaluator_AttributeWithValueNot0.toString();
      assertEquals("[-er2*y*!=:gt(856)]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("ABWIDIzR2O |#6", "ABWIDIzR2O |#6");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      Tag tag0 = Tag.valueOf("ABWIDIzR2O |#6");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("ABWIDIzR2O |#6", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ABWIDIzR2O |#6", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("ABWIDIzR2O |#6", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ABWIDIzR2O |#6", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      PipedWriter pipedWriter1 = formElement0.html(pipedWriter0);
      assertNotNull(pipedWriter1);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("ABWIDIzR2O |#6", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ABWIDIzR2O |#6", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertSame(pipedWriter0, pipedWriter1);
      assertSame(pipedWriter1, pipedWriter0);
      
      boolean boolean0 = evaluator_AttributeWithValueNot0.matches(formElement0, formElement0);
      assertTrue(boolean0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("ABWIDIzR2O |#6", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ABWIDIzR2O |#6", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-1830), (-1830));
      assertNotNull(evaluator_IsNthOfType0);
      
      String string0 = evaluator_IsNthOfType0.getPseudoClass();
      assertEquals("nth-of-type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsOnlyChild");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.baseUri());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document1 = (Document)document0.text("");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.tagName();
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = evaluator_IsEmpty0.matches(document1, document1);
      assertFalse(boolean0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Document.createShell("~S`y0C^*qA@l#;");
      assertNotNull(document2);
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("~S`y0C^*qA@l#;", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("~S`y0C^*qA@l#;", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.head();
      assertNotNull(element0);
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("~S`y0C^*qA@l#;", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("~S`y0C^*qA@l#;", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("~S`y0C^*qA@l#;", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("<f]/mQjPIUrOo>2", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("<f]/mQjPIUrOo>2", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      
      String string1 = tag0.getName();
      assertEquals("<f]/mQjPIUrOo>2", string1);
      assertNotNull(string1);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("<f]/mQjPIUrOo>2", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = new Element(tag0, "<f]/mQjPIUrOo>2");
      assertNotNull(element1);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("<f]/mQjPIUrOo>2", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("<f]/mQjPIUrOo>2", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean1 = evaluator_IsEmpty0.matches(element0, element1);
      assertTrue(boolean1);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("~S`y0C^*qA@l#;", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("~S`y0C^*qA@l#;", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("~S`y0C^*qA@l#;", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("<f]/mQjPIUrOo>2", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("<f]/mQjPIUrOo>2", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string2 = element1.val();
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("<f]/mQjPIUrOo>2", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("<f]/mQjPIUrOo>2", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(element1, element0);
      
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild((-1336), (-1336));
      assertNotNull(evaluator_IsNthLastChild0);
      
      // Undeclared exception!
      try { 
        evaluator_IsNthLastChild0.calculatePosition(element1, document2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthLastChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("open");
      assertNotNull(evaluator_Class0);
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsLastChild0);
      assertNotNull(structuralEvaluator_ImmediatePreviousSibling0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      Element element0 = new Element("open");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      boolean boolean0 = element0.is((Evaluator) evaluator_IsLastChild0);
      assertFalse(boolean0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      structuralEvaluator_ImmediatePreviousSibling0.evaluator = (Evaluator) evaluator_Class0;
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      boolean boolean1 = structuralEvaluator_ImmediatePreviousSibling0.matches(element0, element0);
      assertFalse(boolean1);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(boolean1 == boolean0);
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("open", "open");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      boolean boolean2 = evaluator_AttributeWithValueNot0.matches(element0, element0);
      assertTrue(boolean2);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("sUb^Zf#U%/.>", "org.jsoup.select.Evaluator$AttributeStarting");
      assertNotNull(evaluator_AttributeWithValueStarting0);
      
      String string0 = evaluator_AttributeWithValueStarting0.toString();
      assertEquals("[sub^zf#u%/.>^=org.jsoup.select.evaluator$attributestarting]", string0);
      assertNotNull(string0);
      
      boolean boolean3 = evaluator_AttributeWithValueStarting0.matches(element0, element0);
      assertFalse(boolean3);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = evaluator_AttributeWithValueStarting0.matches((Element) null, element0);
      assertFalse(boolean4);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      assertNotNull(evaluator_ContainsData0);
      
      boolean boolean5 = evaluator_ContainsData0.matches((Element) null, element0);
      assertTrue(boolean5);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      
      String string1 = evaluator_ContainsData0.toString();
      assertEquals(":containsData()", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("y8IW^2r(~/Z");
      assertNotNull(evaluator_AttributeStarting0);
      
      String string2 = evaluator_AttributeStarting0.toString();
      assertEquals("[^y8iw^2r(~/z]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(128, 128);
      assertNotNull(evaluator_IsNthLastChild0);
      
      String string3 = evaluator_IsNthLastChild0.toString();
      assertEquals(":nth-last-child(128n+128)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertNotNull(evaluator_IsFirstOfType0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      // Undeclared exception!
      try { 
        evaluator_IsFirstOfType0.calculatePosition(document2, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthOfType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild((-2695), (-2695));
      assertNotNull(evaluator_IsNthLastChild0);
      
      Element element0 = null;
      // Undeclared exception!
      try { 
        evaluator_IsNthLastChild0.calculatePosition((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthLastChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(0);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      Document document0 = new Document("Flj v9^!T");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("Flj v9^!T", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Flj v9^!T", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Flj v9^!T", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Flj v9^!T", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Flj v9^!T", document1.location());
      assertEquals("Flj v9^!T", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = evaluator_IsEmpty0.matches(document1, document1);
      assertFalse(boolean0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Flj v9^!T", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Flj v9^!T", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Flj v9^!T", document1.location());
      assertEquals("Flj v9^!T", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      boolean boolean1 = evaluator_IsOnlyChild0.matches(document0, document1);
      assertFalse(boolean1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Flj v9^!T", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Flj v9^!T", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Flj v9^!T", document1.location());
      assertEquals("Flj v9^!T", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      String string0 = evaluator_IsLastChild0.toString();
      assertEquals(":last-child", string0);
      assertNotNull(string0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("Flj v9^!T", ":last-child");
      assertNotNull(evaluator_AttributeWithValue0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(":last-child", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = null;
      try {
        pseudoTextElement0 = new PseudoTextElement((Tag) null, "Flj v9^!T", attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("", pattern0);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("?UP[m&S<?nD!L'");
      assertNotNull(evaluator_AttributeStarting0);
      
      String string1 = evaluator_AttributeStarting0.toString();
      assertEquals("[^?up[m&s<?nd!l']", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Element element0 = null;
      // Undeclared exception!
      try { 
        evaluator_AttributeStarting0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeStarting", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(1);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertEquals(":eq(1)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(2, 2);
      assertNotNull(evaluator_IsNthLastOfType0);
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthLastOfType0);
      assertNotNull(structuralEvaluator_Not0);
      
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("Wo[");
      assertNotNull(evaluator_Tag0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("[%s~=%s]", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("[%s~=%s]", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "Wo[", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("[%s~=%s]", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Wo[", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      
      Element element0 = new Element("[%s~=%s]");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertNotNull(formElement1);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("[%s~=%s]", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Wo[", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("Wo[", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Document document0 = formElement1.ownerDocument();
      assertNull(document0);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("[%s~=%s]", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Wo[", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("Wo[", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      boolean boolean0 = evaluator_Tag0.matches((Element) null, formElement1);
      assertFalse(boolean0);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("[%s~=%s]", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Wo[", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("Wo[", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      String string0 = evaluator_Tag0.toString();
      assertEquals("Wo[", string0);
      assertNotNull(string0);
      
      Document document1 = new Document("Wo[");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Wo[", document1.location());
      assertEquals("Wo[", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      
      boolean boolean1 = evaluator_Tag0.matches(document1, document1);
      assertFalse(boolean1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Wo[", document1.location());
      assertEquals("Wo[", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        document1.text("open");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData(":eq(%d)");
      assertNotNull(evaluator_ContainsData0);
      
      Document document0 = Document.createShell("org.jsoup.nodes.PseudoTextElement");
      assertNotNull(document0);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean0 = document2.hasSameValue(evaluator_ContainsData0);
      assertFalse(boolean0);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document2.createElement("org.jsoup.nodes.PseudoTextElement");
      assertNotNull(element0);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.PseudoTextElement", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean1 = evaluator_ContainsData0.matches(element0, document2);
      assertFalse(boolean1);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.PseudoTextElement", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element1 = new Element("publicId");
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      
      String string0 = element1.id();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      
      Element element2 = element1.clone();
      assertNotNull(element2);
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Elements elements0 = element1.getElementsByAttributeValueMatching("publicId", (Pattern) null);
      assertNotNull(elements0);
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      boolean boolean2 = evaluator_ContainsData0.matches(element1, element1);
      assertFalse(boolean2);
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      Evaluator.Class evaluator_Class0 = new Evaluator.Class(":eq(%d)");
      assertNotNull(evaluator_Class0);
      
      Document document3 = (Document)document2.text("publicId");
      assertNotNull(document3);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      boolean boolean3 = evaluator_Class0.matches(element2, document3);
      assertFalse(boolean3);
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document2.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("org.jsoup.nodes.PseudoTextElement", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      String string1 = evaluator_Class0.toString();
      assertEquals(".:eq(%d)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("Ul>Ncw!4C//m8*o", "kY*Zd[^>*eMld");
      assertNotNull(evaluator_AttributeWithValueContaining0);
      
      String string0 = evaluator_AttributeWithValueContaining0.toString();
      assertEquals("[ul>ncw!4c//m8*o*=ky*zd[^>*emld]", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_AttributeWithValueContaining0);
      assertNotNull(structuralEvaluator_Parent0);
      
      String string1 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent[ul>ncw!4c//m8*o*=ky*zd[^>*emld]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertNotNull(evaluator_IsFirstChild0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      
      Document document0 = new Document("kY*Zd[^>*eMld");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kY*Zd[^>*eMld", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("kY*Zd[^>*eMld", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement("Ul>Ncw!4C//m8*o");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kY*Zd[^>*eMld", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("kY*Zd[^>*eMld", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("kY*Zd[^>*eMld", element0.baseUri());
      
      boolean boolean0 = evaluator_IsFirstChild0.matches(element0, element0);
      assertFalse(boolean0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kY*Zd[^>*eMld", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("kY*Zd[^>*eMld", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("kY*Zd[^>*eMld", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("main");
      assertNotNull(evaluator_Tag0);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_Tag0);
      assertNotNull(structuralEvaluator_Has0);
      
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(main)", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(structuralEvaluator_Has0);
      assertNotNull(structuralEvaluator_ImmediatePreviousSibling0);
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(39);
      assertNotNull(evaluator_IndexLessThan0);
      
      String string1 = evaluator_IndexLessThan0.toString();
      assertEquals(":lt(39)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = evaluator_IndexLessThan0.toString();
      assertEquals(":lt(39)", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("main");
      assertNotNull(evaluator_AttributeStarting0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":lt(39)", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(":lt(39)", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.put((String) null, "hHTDu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("main");
      assertNotNull(evaluator_Class0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("main", parseSettings0);
      assertNotNull(tag0);
      assertEquals("main", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("main", "sBc Z][r_gvg+\"b");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "", attributes2);
      assertNotNull(formElement0);
      assertEquals("main", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      
      boolean boolean0 = evaluator_Class0.matches(formElement0, formElement0);
      assertFalse(boolean0);
      assertEquals("main", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      String string0 = evaluator_Class0.toString();
      assertEquals(".main", string0);
      assertNotNull(string0);
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("hmwcMm/5=u&Q[d", ":matches(%s)");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      String string1 = evaluator_AttributeWithValueNot0.toString();
      assertEquals("[hmwcmm/5=u&q[d!=:matches(%s)]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(">/#vy-", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(">/#vy-", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      String string0 = tag0.getName();
      assertEquals(">/#vy-", string0);
      assertNotNull(string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(">/#vy-", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes2 = attributes1.put(">/#vy-", ">/#vy-");
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ">/#vy-", attributes2);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(">/#vy-", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">/#vy-", pseudoTextElement0.baseUri());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      boolean boolean0 = evaluator_IsEmpty0.matches(pseudoTextElement0, pseudoTextElement0);
      assertTrue(boolean0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(">/#vy-", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">/#vy-", pseudoTextElement0.baseUri());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      String string1 = attributes0.get(">/#vy-");
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, attributes0.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean1 = evaluator_IsRoot0.matches(pseudoTextElement0, pseudoTextElement0);
      assertTrue(boolean1);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(">/#vy-", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">/#vy-", pseudoTextElement0.baseUri());
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      String string2 = evaluator_IsLastOfType0.toString();
      assertEquals(":last-of-type", string2);
      assertNotNull(string2);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("[%s~=%s]", "[%s~=%s]");
      assertNotNull(evaluator_AttributeWithValue0);
      
      String string0 = evaluator_AttributeWithValue0.toString();
      assertEquals("[[%s~=%s]=[%s~=%s]]", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AttributeWithValue0);
      assertNotNull(structuralEvaluator_PreviousSibling0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("[[%s~=%s]=[%s~=%s]]", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("[[%s~=%s]=[%s~=%s]]", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("EYZ>R#+#XfSt-!\"fw");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "Gm3iO:XL=$&*&d77*}", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("[[%s~=%s]=[%s~=%s]]", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      
      boolean boolean0 = structuralEvaluator_PreviousSibling0.matches(formElement0, formElement0);
      assertFalse(boolean0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("[[%s~=%s]=[%s~=%s]]", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("[%s~=%s]");
      assertNotNull(evaluator_AttributeStarting0);
      
      boolean boolean1 = evaluator_AttributeStarting0.matches(formElement0, formElement0);
      assertFalse(boolean1);
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("[[%s~=%s]=[%s~=%s]]", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertTrue(boolean1 == boolean0);
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean2 = evaluator_IsRoot0.matches(formElement0, formElement0);
      assertTrue(boolean2);
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("[[%s~=%s]=[%s~=%s]]", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_AttributeWithValue0);
      assertNotNull(structuralEvaluator_Has0);
      
      String string1 = structuralEvaluator_Has0.toString();
      assertEquals(":has([[%s~=%s]=[%s~=%s]])", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      String string0 = evaluator_MatchText0.toString();
      assertEquals(":matchText", string0);
      assertNotNull(string0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue(":matchText", "pW$)' CSA]d;Cop$p");
      assertNotNull(evaluator_AttributeWithValue0);
      
      String string1 = evaluator_AttributeWithValue0.toString();
      assertEquals("[:matchtext=pw$)' csa]d;cop$p]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = evaluator_AttributeWithValue0.toString();
      assertEquals("[:matchtext=pw$)' csa]d;cop$p]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild((-933), (-3338));
      assertNotNull(evaluator_IsNthLastChild0);
      
      String string3 = evaluator_IsNthLastChild0.getPseudoClass();
      assertEquals("nth-last-child", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = evaluator_IsNthLastChild0.toString();
      assertEquals(":nth-last-child(-933n-3338)", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(0);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      // Undeclared exception!
      try { 
        evaluator_IndexGreaterThan0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IndexGreaterThan", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-532), (-232));
      assertNotNull(evaluator_IsNthLastOfType0);
      
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("J>");
      assertNotNull(evaluator_ContainsData0);
      
      Document document0 = new Document("Fe(q96");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Fe(q96", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Fe(q96", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Fe(q96", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Fe(q96", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Fe(q96", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Fe(q96", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Fe(q96", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Fe(q96", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Fe(q96", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Fe(q96", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Fe(q96", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Fe(q96", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = evaluator_ContainsData0.matches(document2, document2);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Fe(q96", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Fe(q96", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Fe(q96", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Fe(q96", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Fe(q96", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Fe(q96", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 6);
      assertNotNull(evaluator_IsNthOfType0);
      
      String string0 = evaluator_IsNthOfType0.getPseudoClass();
      assertEquals("nth-of-type", string0);
      assertNotNull(string0);
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      Document document0 = Document.createShell("k]X$<JwGS}d");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = element0.ownerDocument();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("k]X$<JwGS}d", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("k]X$<JwGS}d", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.text("mKy{");
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("k]X$<JwGS}d", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("k]X$<JwGS}d", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("k]X$<JwGS}d", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("k]X$<JwGS}d", document3.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Pattern pattern0 = Pattern.compile("mKy{", 21);
      assertNotNull(pattern0);
      assertEquals(21, pattern0.flags());
      assertEquals("mKy{", pattern0.toString());
      assertEquals("mKy{", pattern0.pattern());
      
      Elements elements0 = document3.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("k]X$<JwGS}d", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("k]X$<JwGS}d", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("k]X$<JwGS}d", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("k]X$<JwGS}d", document3.baseUri());
      assertEquals(21, pattern0.flags());
      assertEquals("mKy{", pattern0.toString());
      assertEquals("mKy{", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      boolean boolean0 = evaluator_MatchText0.matches(document3, document1);
      assertFalse(boolean0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("k]X$<JwGS}d", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("k]X$<JwGS}d", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("k]X$<JwGS}d", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("k]X$<JwGS}d", document3.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Pattern pattern1 = Pattern.compile("", 1590);
      assertNotNull(pattern1);
      assertEquals("", pattern1.pattern());
      assertEquals(1590, pattern1.flags());
      assertEquals("", pattern1.toString());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      
      Document document4 = (Document)document1.append("Fzt6");
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("k]X$<JwGS}d", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("k]X$<JwGS}d", document4.baseUri());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("nth-of-type", pattern1);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals("", pattern1.pattern());
      assertEquals(1590, pattern1.flags());
      assertEquals("", pattern1.toString());
      assertFalse(pattern1.equals((Object)pattern0));
      
      boolean boolean1 = evaluator_AttributeWithValueMatching0.matches(document2, document1);
      assertFalse(boolean1);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("k]X$<JwGS}d", document1.location());
      assertEquals("k]X$<JwGS}d", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k]X$<JwGS}d", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("k]X$<JwGS}d", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", pattern1.pattern());
      assertEquals(1590, pattern1.flags());
      assertEquals("", pattern1.toString());
      assertTrue(boolean1 == boolean0);
      assertFalse(pattern1.equals((Object)pattern0));
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(pattern1, pattern0);
      
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsNthOfType0);
      assertNotNull(structuralEvaluator_ImmediatePreviousSibling0);
      
      String string1 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:nth-of-type(6)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = structuralEvaluator_ImmediatePreviousSibling0.matches(element0, document0);
      assertFalse(boolean2);
      assertFalse(document0.hasParent());
      assertEquals("k]X$<JwGS}d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k]X$<JwGS}d", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("k]X$<JwGS}d", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("[%s~=%s]");
      assertNotNull(evaluator_ContainsData0);
      
      String string2 = evaluator_ContainsData0.toString();
      assertEquals(":containsData([%s~=%s])", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      assertNotNull(combiningEvaluator_Or0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      assertNotNull(evaluator_MatchesOwn0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      combiningEvaluator_Or0.add(evaluator_MatchesOwn0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(combiningEvaluator_Or0);
      assertNotNull(structuralEvaluator_Has0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.text("");
      assertNotNull(document3);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      boolean boolean0 = structuralEvaluator_Has0.matches(document3, document1);
      assertTrue(boolean0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Evaluator.Class evaluator_Class0 = new Evaluator.Class((String) null);
      assertNotNull(evaluator_Class0);
      
      String string0 = evaluator_Class0.toString();
      assertEquals(".null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      assertNotNull(evaluator_IsOnlyOfType0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      String string0 = evaluator_IsOnlyOfType0.toString();
      assertEquals(":only-of-type", string0);
      assertNotNull(string0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      Evaluator.Class evaluator_Class0 = new Evaluator.Class(":only-of-type");
      assertNotNull(evaluator_Class0);
      
      String string1 = evaluator_Class0.toString();
      assertEquals(".:only-of-type", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn((Pattern) null);
      assertNotNull(evaluator_MatchesOwn0);
      
      // Undeclared exception!
      try { 
        evaluator_MatchesOwn0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData((String) null);
      assertNotNull(evaluator_ContainsData0);
      
      String string0 = evaluator_ContainsData0.toString();
      assertEquals(":containsData()", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_ContainsData0);
      assertNotNull(structuralEvaluator_Parent0);
      
      String string1 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent:containsData()", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("jF|");
      assertNotNull(evaluator_ContainsText0);
      
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        evaluator_ContainsText0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$ContainsText", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(1082);
      assertNotNull(evaluator_IndexEquals0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("l'[RlT q$??R");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string0 = evaluator_ContainsOwnText0.toString();
      assertEquals(":containsOwn(l'[rlt q$??r)", string0);
      assertNotNull(string0);
      
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      assertNotNull(combiningEvaluator_And0);
      assertEquals(0, linkedList0.size());
      
      combiningEvaluator_And0.updateNumEvaluators();
      assertEquals(0, linkedList0.size());
      
      String string1 = combiningEvaluator_And0.toString();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      Document document0 = new Document("");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      boolean boolean0 = evaluator_ContainsOwnText0.matches(document1, document0);
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string2 = document2.attr("l'[RlT q$??R");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean1 = evaluator_IsOnlyChild0.matches(document2, document2);
      assertFalse(boolean1);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string3 = evaluator_IsOnlyChild0.toString();
      assertEquals(":only-child", string3);
      assertNotNull(string3);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = evaluator_ContainsOwnText0.toString();
      assertEquals(":containsOwn(l'[rlt q$??r)", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText(":({78a#mpZJQT");
      assertNotNull(evaluator_ContainsText0);
      
      boolean boolean2 = evaluator_ContainsText0.matches(document2, document1);
      assertFalse(boolean2);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean3 = evaluator_ContainsText0.matches(document0, document2);
      assertFalse(boolean3);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      String string5 = evaluator_IsRoot0.toString();
      assertEquals(":root", string5);
      assertNotNull(string5);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute(":containsOwn(l'[rlt q$??\r)");
      assertNotNull(evaluator_Attribute0);
      
      String string6 = evaluator_Attribute0.toString();
      assertEquals("[:containsOwn(l'[rlt q$??\r)]", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      Document document3 = Document.createShell("l'[RlT q$??R");
      assertNotNull(document3);
      assertEquals(1, document3.childNodeSize());
      assertEquals("l'[RlT q$??R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("l'[RlT q$??R", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      boolean boolean4 = evaluator_IndexEquals0.matches(document0, document3);
      assertFalse(boolean4);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("l'[RlT q$??R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("l'[RlT q$??R", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertNotNull(evaluator_IsFirstOfType0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      String string7 = evaluator_IsFirstOfType0.toString();
      assertEquals(":first-of-type", string7);
      assertNotNull(string7);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = null;
      try {
        evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      assertNotNull(evaluator_ContainsData0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string0 = evaluator_ContainsOwnText0.toString();
      assertEquals(":containsOwn()", string0);
      assertNotNull(string0);
      
      String string1 = evaluator_ContainsOwnText0.toString();
      assertEquals(":containsOwn()", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.Collector$Accumulator", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$Accumulator", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("Y$?>_:r:#,v4", (String) null, attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertNull(attribute0.getValue());
      assertEquals("Y$?>_:r:#,v4", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertNull(attribute0.getValue());
      assertEquals("Y$?>_:r:#,v4", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ":containsOwn()", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$Accumulator", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertNull(attribute0.getValue());
      assertEquals("Y$?>_:r:#,v4", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":containsOwn()", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      
      Element element0 = new Element("}|)D=?Q");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertNotNull(formElement1);
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$Accumulator", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertNull(attribute0.getValue());
      assertEquals("Y$?>_:r:#,v4", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":containsOwn()", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(formElement1.hasParent());
      assertEquals(":containsOwn()", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      boolean boolean0 = evaluator_IsRoot0.matches(formElement1, formElement0);
      assertTrue(boolean0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$Accumulator", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertNull(attribute0.getValue());
      assertEquals("Y$?>_:r:#,v4", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":containsOwn()", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(formElement1.hasParent());
      assertEquals(":containsOwn()", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      String string2 = evaluator_IsRoot0.toString();
      assertEquals(":root", string2);
      assertNotNull(string2);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("2h/NQ2eh,");
      assertNotNull(evaluator_TagEndsWith0);
      
      String string0 = evaluator_TagEndsWith0.toString();
      assertEquals("2h/NQ2eh,", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_TagEndsWith0);
      assertNotNull(structuralEvaluator_Parent0);
      
      structuralEvaluator_Parent0.evaluator = (Evaluator) evaluator_TagEndsWith0;
      String string1 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent2h/NQ2eh,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("2h/NQ2eh,");
      assertNotNull(evaluator_Attribute0);
      
      Document document0 = Document.createShell(":parent2h/NQ2eh,");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.updateMetaCharsetElement(true);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertNotNull(document2);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document2.hasParent());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":parent2h/NQ2eh,", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("2h/NQ2eh,"));
      
      Document document3 = document2.clone();
      assertNotNull(document3);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document2.hasParent());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":parent2h/NQ2eh,", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(":parent2h/NQ2eh,", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":parent2h/NQ2eh,", document3.location());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      Elements elements0 = document3.getElementsByAttributeValueContaining(":parent2h/NQ2eh,", "2h/NQ2eh,");
      assertNotNull(elements0);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document2.hasParent());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":parent2h/NQ2eh,", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(":parent2h/NQ2eh,", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":parent2h/NQ2eh,", document3.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      boolean boolean0 = evaluator_Attribute0.matches(document3, document3);
      assertFalse(boolean0);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document2.hasParent());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":parent2h/NQ2eh,", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(":parent2h/NQ2eh,", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":parent2h/NQ2eh,", document3.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("2h/NQ2eh,", "`|Err");
      assertNotNull(evaluator_AttributeWithValueEnding0);
      
      boolean boolean1 = evaluator_AttributeWithValueEnding0.matches(document2, document2);
      assertFalse(boolean1);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document2.hasParent());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":parent2h/NQ2eh,", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(boolean1 == boolean0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean2 = evaluator_AttributeWithValueEnding0.matches(document1, document1);
      assertFalse(boolean2);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      String string2 = evaluator_IsLastOfType0.getPseudoClass();
      assertEquals("nth-last-of-type", string2);
      assertNotNull(string2);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-1779), (-1779));
      assertNotNull(evaluator_IsNthChild0);
      
      int int0 = evaluator_IsNthChild0.calculatePosition(document1, document3);
      assertEquals(1, int0);
      assertEquals(":parent2h/NQ2eh,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(":parent2h/NQ2eh,", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":parent2h/NQ2eh,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document2.hasParent());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":parent2h/NQ2eh,", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":parent2h/NQ2eh,", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(":parent2h/NQ2eh,", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":parent2h/NQ2eh,", document3.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      assertNotNull(combiningEvaluator_Or0);
      assertEquals(0, linkedList0.size());
      
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(123, 0);
      assertNotNull(evaluator_IsNthLastOfType0);
      
      String string0 = evaluator_IsNthLastOfType0.getPseudoClass();
      assertEquals("nth-last-of-type", string0);
      assertNotNull(string0);
      
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 0);
      assertNotNull(evaluator_IsNthChild0);
      
      Document document0 = new Document("nth-last-of-type");
      assertNotNull(document0);
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNull(element0);
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      String string1 = evaluator_IsNthChild0.toString();
      assertEquals(":nth-child(0)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = evaluator_IsNthLastOfType0.toString();
      assertEquals(":nth-last-of-type(123n)", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = evaluator_IsNthChild0.calculatePosition((Element) null, document0);
      assertEquals(1, int0);
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      String string3 = evaluator_IsNthLastOfType0.getPseudoClass();
      assertEquals("nth-last-of-type", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      combiningEvaluator_Or0.add(evaluator_IsNthLastOfType0);
      assertEquals(0, linkedList0.size());
      
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("nth-last-of-type");
      assertNotNull(evaluator_Attribute0);
      
      String string4 = evaluator_Attribute0.toString();
      assertEquals("[nth-last-of-type]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("l);]45c", "l);]45c");
      assertNotNull(evaluator_AttributeWithValueStarting0);
      
      Document document0 = new Document("l);]45c");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.val("l);]45c");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l);]45c", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("l);]45c", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      
      evaluator_AttributeWithValueStarting0.key = "";
      boolean boolean0 = evaluator_AttributeWithValueStarting0.matches(document0, document0);
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_AttributeWithValueStarting0);
      assertNotNull(structuralEvaluator_ImmediateParent0);
      
      String string0 = structuralEvaluator_ImmediateParent0.toString();
      assertEquals(":ImmediateParent[^=l);]45c]", string0);
      assertNotNull(string0);
      
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      String string1 = evaluator_IsEmpty0.toString();
      assertEquals(":empty", string1);
      assertNotNull(string1);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("");
      assertNotNull(evaluator_Id0);
      
      String string2 = evaluator_Id0.toString();
      assertEquals("#", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals((-1592));
      assertNotNull(evaluator_IndexEquals0);
      
      boolean boolean1 = evaluator_IndexEquals0.matches(document1, document1);
      assertFalse(boolean1);
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l);]45c", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("l);]45c", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-1592));
      assertNotNull(evaluator_IndexGreaterThan0);
      
      boolean boolean2 = evaluator_IndexGreaterThan0.matches(document0, document0);
      assertTrue(boolean2);
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(document0, document1);
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      Document document2 = Document.createShell("");
      assertNotNull(document2);
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      boolean boolean3 = evaluator_IsLastChild0.matches(document2, document0);
      assertFalse(boolean3);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      boolean boolean4 = evaluator_IsLastChild0.matches(document0, document0);
      assertFalse(boolean4);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertFalse(document0.hasParent());
      assertEquals("l);]45c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("l);]45c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(3);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("br", "declare");
      assertNotNull(evaluator_AttributeWithValue0);
      
      Tag tag0 = Tag.valueOf("br");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isEmpty());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "Z^q5P)r_a", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isKnownTag());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals("Z^q5P)r_a", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      boolean boolean0 = evaluator_AttributeWithValue0.matches(formElement0, formElement0);
      assertFalse(boolean0);
      assertTrue(tag0.isKnownTag());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals("Z^q5P)r_a", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      Document document0 = Document.createShell("a)");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("a)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("a)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("a)", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("a)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("a)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("a)", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("a)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document2.clone();
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals("a)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("a)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("a)", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("a)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("a)", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("a)", document3.baseUri());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document4 = document3.normalise();
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertEquals("a)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("a)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("a)", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("a)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("a)", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("a)", document3.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("a)", document4.location());
      assertEquals("a)", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      
      boolean boolean0 = evaluator_IsOnlyChild0.matches((Element) null, document4);
      assertFalse(boolean0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertEquals("#document", document0.nodeName());
      assertEquals("a)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("a)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("a)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("a)", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("a)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("a)", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("a)", document3.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("a)", document4.location());
      assertEquals("a)", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      assertNotNull(combiningEvaluator_Or0);
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("h85TU_Sm5^+V$V8N", "h85TU_Sm5^+V$V8N");
      assertNotNull(evaluator_AttributeWithValue0);
      
      Document document0 = new Document("h85TU_Sm5^+V$V8N");
      assertNotNull(document0);
      assertEquals("h85TU_Sm5^+V$V8N", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("h85TU_Sm5^+V$V8N", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = evaluator_AttributeWithValue0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals("h85TU_Sm5^+V$V8N", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("h85TU_Sm5^+V$V8N", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(542);
      assertNotNull(evaluator_IndexEquals0);
      
      Document document0 = Document.createShell("org.jsoup.select.Elements");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Elements", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Elements", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Elements", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Elements", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.Elements", element0.baseUri());
      
      boolean boolean0 = evaluator_IndexEquals0.matches(element0, document0);
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Elements", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Elements", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.Elements", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("0R*LhcUr", "0R*LhcUr");
      assertNotNull(evaluator_AttributeWithValueContaining0);
      
      Document document0 = new Document("0R*LhcUr");
      assertNotNull(document0);
      assertEquals("0R*LhcUr", document0.location());
      assertEquals("0R*LhcUr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = evaluator_AttributeWithValueContaining0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals("0R*LhcUr", document0.location());
      assertEquals("0R*LhcUr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Document$QuirksMode";
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Document$QuirksMode");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", pattern0.pattern());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", pattern0.toString());
      
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      assertNotNull(evaluator_Matches0);
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", pattern0.pattern());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", pattern0.toString());
      
      Element element0 = new Element("org.jsoup.nodes.Document$QuirksMode");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Node node0 = element0.nextSibling();
      assertNull(node0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = evaluator_Matches0.matches(element0, element0);
      assertFalse(boolean0);
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", pattern0.pattern());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", pattern0.toString());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        evaluator_IsLastOfType0.calculatePosition(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthLastOfType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-751));
      assertNotNull(evaluator_IndexGreaterThan0);
      
      evaluator_IndexGreaterThan0.index = 0;
      evaluator_IndexGreaterThan0.index = 1;
      String string0 = evaluator_IndexGreaterThan0.toString();
      assertEquals(":gt(1)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("noframes");
      assertNotNull(evaluator_Id0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      boolean boolean0 = evaluator_Id0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_MatchText0);
      assertNotNull(structuralEvaluator_ImmediatePreviousSibling0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      String string0 = document0.attr("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      String string1 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:matchText", string1);
      assertNotNull(string1);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 16);
      assertNotNull(evaluator_IsNthChild0);
      
      int int0 = evaluator_IsNthChild0.calculatePosition(document0, document0);
      assertEquals(1, int0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      boolean boolean1 = evaluator_IsLastChild0.matches(document0, document0);
      assertFalse(boolean1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      String string0 = evaluator_IsLastChild0.toString();
      assertEquals(":last-child", string0);
      assertNotNull(string0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertNotNull(evaluator_IsFirstOfType0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      String string0 = evaluator_IsFirstOfType0.toString();
      assertEquals(":first-of-type", string0);
      assertNotNull(string0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("org.jsoup.select.Evaluator$Class");
      assertNotNull(evaluator_ContainsData0);
      
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Class", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.childNode(1168);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1168, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("1^\"Tx", "W%h'wz.a}XAJ>B");
      assertNotNull(evaluator_AttributeWithValueStarting0);
      
      String string0 = evaluator_AttributeWithValueStarting0.toString();
      assertEquals("[1^\"tx^=w%h'wz.a}xaj>b]", string0);
      assertNotNull(string0);
      
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("2i('KN:RTZ-e");
      assertNotNull(evaluator_Attribute0);
      
      String string1 = evaluator_Attribute0.toString();
      assertEquals("[2i('KN:RTZ-e]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("$7a(iZ;A:4g#&z1~2hi", "2i('KN:RTZ-e");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      String string2 = evaluator_AttributeWithValueNot0.toString();
      assertEquals("[$7a(iz;a:4g#&z1~2hi!=2i('kn:rtz-e]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertNotNull(evaluator_IsFirstOfType0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      String string0 = evaluator_IsFirstOfType0.getPseudoClass();
      assertEquals("nth-of-type", string0);
      assertNotNull(string0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild((-2466), (-4287));
      assertNotNull(evaluator_IsNthLastChild0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("$VALUES", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("$values", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("$VALUES", "$VALUES");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "$VALUES", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("$values", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("$VALUES", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      Element element0 = new Element(tag0, "nth-last-child");
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("$values", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nth-last-child", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertNotNull(formElement1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("$values", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("$VALUES", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nth-last-child", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("$VALUES", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      boolean boolean0 = evaluator_IsNthLastChild0.matches(formElement1, element0);
      assertFalse(boolean0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("$values", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("$VALUES", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nth-last-child", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("$VALUES", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      String string0 = evaluator_IsNthLastChild0.getPseudoClass();
      assertEquals("nth-last-child", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      String string0 = evaluator_IsOnlyChild0.toString();
      assertEquals(":only-child", string0);
      assertNotNull(string0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      Document document0 = new Document(":only-child");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":only-child", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-child", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":only-child", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-child", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":only-child", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(":only-child", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document1, document1);
      assertFalse(boolean0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":only-child", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-child", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":only-child", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(":only-child", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":only-child", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-child", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":only-child", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(":only-child", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      
      Element element1 = new Element(tag0, "jPj]$jB(q}SY");
      assertNotNull(element1);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(":only-child", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(element1.isBlock());
      assertEquals("jPj]$jB(q}SY", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      
      boolean boolean1 = evaluator_AllElements0.matches(element1, element1);
      assertTrue(boolean1);
      assertEquals("*", evaluator_AllElements0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals(":only-child", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(element1.isBlock());
      assertEquals("jPj]$jB(q}SY", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(boolean1 == boolean0);
      
      Evaluator.Id evaluator_Id0 = new Evaluator.Id(":only-child");
      assertNotNull(evaluator_Id0);
      
      boolean boolean2 = evaluator_Id0.matches(document0, document0);
      assertFalse(boolean2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":only-child", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-child", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(document0, document1);
      
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent((Evaluator) null);
      assertNotNull(structuralEvaluator_ImmediateParent0);
      
      String string1 = structuralEvaluator_ImmediateParent0.toString();
      assertEquals(":ImmediateParentnull", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_AllElements0);
      assertNotNull(structuralEvaluator_Has0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string2 = structuralEvaluator_Has0.toString();
      assertEquals(":has(*)", string2);
      assertNotNull(string2);
      assertEquals("*", evaluator_AllElements0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      Evaluator[] evaluatorArray0 = new Evaluator[3];
      evaluatorArray0[0] = (Evaluator) evaluator_MatchText0;
      Document document0 = new Document("@'BR-%6");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("@'BR-%6", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("@'BR-%6", document0.baseUri());
      
      boolean boolean0 = evaluator_MatchText0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("@'BR-%6", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("@'BR-%6", document0.baseUri());
      
      evaluatorArray0[1] = (Evaluator) evaluator_MatchText0;
      evaluatorArray0[2] = (Evaluator) evaluator_MatchText0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      assertNotNull(combiningEvaluator_Or0);
      assertEquals(3, evaluatorArray0.length);
      
      String string0 = combiningEvaluator_Or0.toString();
      assertNotNull(string0);
      assertEquals(3, evaluatorArray0.length);
      
      Pattern pattern0 = Pattern.compile("U^oVaho", 0);
      assertNotNull(pattern0);
      assertEquals("U^oVaho", pattern0.toString());
      assertEquals("U^oVaho", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("org.jsoup.select.Evaluator$MatchText@0000000001, :matchText, :matchText", pattern0);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals("U^oVaho", pattern0.toString());
      assertEquals("U^oVaho", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      String string1 = evaluator_AttributeWithValueMatching0.toString();
      assertNotNull(string1);
      assertEquals("U^oVaho", pattern0.toString());
      assertEquals("U^oVaho", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      assertNotNull(evaluator_IsOnlyOfType0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      assertNotNull(evaluator_ContainsOwnText0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      boolean boolean0 = evaluator_ContainsOwnText0.matches(document0, document1);
      assertTrue(boolean0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertNotNull(document2);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document2.ownerDocument();
      assertNotNull(document3);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      
      Document document4 = (Document)document3.classNames(set0);
      assertNotNull(document4);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertFalse(set0.contains(""));
      
      Element element0 = document3.body();
      assertNotNull(element0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      
      boolean boolean1 = evaluator_ContainsOwnText0.matches(element0, document3);
      assertTrue(boolean1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      
      Document document5 = (Document)document0.attr("", "xX\"S}rXSnm$");
      assertNotNull(document5);
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsOnlyOfType0);
      assertNotNull(structuralEvaluator_Has0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:only-of-type)", string0);
      assertNotNull(string0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      String string1 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:only-of-type)", string1);
      assertNotNull(string1);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      assertTrue(string1.equals((Object)string0));
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean2 = evaluator_IsRoot0.matches(document2, element0);
      assertFalse(boolean2);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document5);
      
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("xX\"S}rXSnm$");
      assertNotNull(evaluator_Class0);
      
      String string2 = evaluator_Class0.toString();
      assertEquals(".xX\"S}rXSnm$", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("|>", 0);
      assertNotNull(pattern0);
      assertEquals("|>", pattern0.toString());
      assertEquals("|>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Pattern pattern1 = Pattern.compile("");
      assertNotNull(pattern1);
      assertEquals("", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      assertNotNull(evaluator_MatchesOwn0);
      assertEquals("|>", pattern0.toString());
      assertEquals("|>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(pattern0.equals((Object)pattern1));
      
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals(":matchesOwn(|>)", string0);
      assertNotNull(string0);
      assertEquals("|>", pattern0.toString());
      assertEquals("|>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(pattern0.equals((Object)pattern1));
      assertNotSame(pattern0, pattern1);
      
      String string1 = evaluator_MatchesOwn0.toString();
      assertEquals(":matchesOwn(|>)", string1);
      assertNotNull(string1);
      assertEquals("|>", pattern0.toString());
      assertEquals("|>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(pattern0.equals((Object)pattern1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(pattern0, pattern1);
      
      String string2 = evaluator_MatchesOwn0.toString();
      assertEquals(":matchesOwn(|>)", string2);
      assertNotNull(string2);
      assertEquals("|>", pattern0.toString());
      assertEquals("|>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(pattern0.equals((Object)pattern1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(pattern0, pattern1);
      
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText(":matchText");
      assertNotNull(evaluator_ContainsText0);
      
      String string3 = evaluator_ContainsText0.toString();
      assertEquals(":contains(:matchtext)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Document document0 = new Document(" ne!");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ne!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ne!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ne!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ne!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(" ne!", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals(" ne!", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ne!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ne!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(" ne!", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" ne!", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" ne!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(" ne!", document2.baseUri());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = document2.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ne!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ne!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(" ne!", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" ne!", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" ne!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(" ne!", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(" ne!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = evaluator_ContainsText0.matches(element0, document1);
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ne!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ne!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(" ne!", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" ne!", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" ne!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(" ne!", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(" ne!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      Document document0 = Document.createShell("nth-last-of-type");
      assertNotNull(document0);
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.text("org.jsoup.select.Evaluator$Attribute");
      assertNotNull(document1);
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("nth-last-of-type", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("nth-last-of-type", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = evaluator_IsRoot0.matches(document1, document0);
      assertFalse(boolean0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("nth-last-of-type", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("nth-last-of-type", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "";
      Document document2 = (Document)document0.text("");
      assertNotNull(document2);
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("nth-last-of-type", document2.location());
      assertEquals("nth-last-of-type", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document2.ownerDocument();
      assertNotNull(document3);
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("nth-last-of-type", document2.location());
      assertEquals("nth-last-of-type", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("nth-last-of-type", document3.baseUri());
      assertEquals("nth-last-of-type", document3.location());
      assertFalse(document3.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      assertNotNull(document4);
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("nth-last-of-type", document2.location());
      assertEquals("nth-last-of-type", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("nth-last-of-type", document3.baseUri());
      assertEquals("nth-last-of-type", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("nth-last-of-type", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("nth-last-of-type", document4.location());
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Element element0 = document4.createElement("nth-last-of-type");
      assertNotNull(element0);
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("nth-last-of-type", document2.location());
      assertEquals("nth-last-of-type", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("nth-last-of-type", document3.baseUri());
      assertEquals("nth-last-of-type", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("nth-last-of-type", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("nth-last-of-type", document4.location());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      boolean boolean1 = evaluator_IsRoot0.matches(element0, element0);
      assertTrue(boolean1);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("nth-last-of-type", document2.location());
      assertEquals("nth-last-of-type", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("nth-last-of-type", document3.baseUri());
      assertEquals("nth-last-of-type", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("nth-last-of-type", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("nth-last-of-type", document4.location());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Document document5 = Document.createShell("");
      assertNotNull(document5);
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("", document5.baseUri());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      
      // Undeclared exception!
      try { 
        document5.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("<Zp4I{eEgdV'+(", "<Zp4I{eEgdV'+(");
      assertNotNull(evaluator_AttributeWithValueEnding0);
      
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(52, 0);
      assertNotNull(evaluator_IsNthLastChild0);
      
      String string0 = evaluator_IsNthLastChild0.toString();
      assertEquals(":nth-last-child(52n)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has((Evaluator) null);
      assertNotNull(structuralEvaluator_Has0);
      
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("}6B^y;rFzth?[M/", "k~':|=F0y9");
      assertNotNull(evaluator_AttributeWithValueEnding0);
      
      Tag tag0 = Tag.valueOf("k~':|=F0y9");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("k~':|=F0y9", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("base", true);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "base", attributes2);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("k~':|=F0y9", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("base", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      boolean boolean0 = evaluator_AttributeWithValueEnding0.matches(formElement0, formElement0);
      assertFalse(boolean0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("k~':|=F0y9", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("base", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      String string0 = evaluator_AttributeWithValueEnding0.toString();
      assertEquals("[}6b^y;rfzth?[m/$=k~':|=f0y9]", string0);
      assertNotNull(string0);
      
      String string1 = evaluator_AttributeWithValueEnding0.toString();
      assertEquals("[}6b^y;rfzth?[m/$=k~':|=f0y9]", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("[}6b^y;rfzth?[m/$=k~':|=f0y9]");
      assertNotNull(evaluator_Class0);
      
      String string2 = evaluator_Class0.toString();
      assertEquals(".[}6b^y;rfzth?[m/$=k~':|=f0y9]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      String string0 = evaluator_MatchText0.toString();
      assertEquals(":matchText", string0);
      assertNotNull(string0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith(":matchText");
      assertNotNull(evaluator_TagEndsWith0);
      
      String string1 = evaluator_TagEndsWith0.toString();
      assertEquals(":matchText", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      evaluatorArray0[0] = (Evaluator) evaluator_TagEndsWith0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      assertNotNull(combiningEvaluator_Or0);
      assertEquals(1, evaluatorArray0.length);
      
      String string2 = combiningEvaluator_Or0.toString();
      assertNotNull(string2);
      assertEquals(1, evaluatorArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      Document document0 = Document.createShell("#u7{-.^e");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#u7{-.^e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#u7{-.^e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#u7{-.^e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#u7{-.^e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#u7{-.^e", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#u7{-.^e", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = evaluator_MatchText0.matches(document1, document0);
      assertFalse(boolean0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#u7{-.^e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#u7{-.^e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#u7{-.^e", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#u7{-.^e", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("#u7{-.^e", "m*by]X7)))");
      assertNotNull(evaluator_AttributeWithValueEnding0);
      
      boolean boolean1 = evaluator_AttributeWithValueEnding0.matches(document0, document1);
      assertFalse(boolean1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#u7{-.^e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#u7{-.^e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#u7{-.^e", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#u7{-.^e", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(780);
      assertNotNull(evaluator_IndexLessThan0);
      
      String string0 = evaluator_IndexLessThan0.toString();
      assertEquals(":lt(780)", string0);
      assertNotNull(string0);
      
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith(":lt(780)");
      assertNotNull(evaluator_TagEndsWith0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      boolean boolean0 = evaluator_TagEndsWith0.matches(document3, document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      String string1 = evaluator_TagEndsWith0.toString();
      assertEquals(":lt(780)", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("");
      assertNotNull(evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText(";I<-d");
      assertNotNull(evaluator_ContainsText0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(";I<-d", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(";i<-d", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Element element0 = new Element(tag0, ";I<-d", attributes1);
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(";i<-d", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(";I<-d", element0.baseUri());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      
      boolean boolean0 = element0.is((Evaluator) evaluator_ContainsText0);
      assertFalse(boolean0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(";i<-d", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(";I<-d", element0.baseUri());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      boolean boolean1 = evaluator_ContainsText0.matches(element0, element0);
      assertFalse(boolean1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals(";i<-d", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(";I<-d", element0.baseUri());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      assertNotNull(evaluator_Matches0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      String string0 = evaluator_Matches0.toString();
      assertEquals(":matches()", string0);
      assertNotNull(string0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Evaluator[] evaluatorArray0 = new Evaluator[2];
      evaluatorArray0[0] = (Evaluator) evaluator_Matches0;
      evaluatorArray0[1] = (Evaluator) evaluator_Matches0;
      Tag tag0 = Tag.valueOf("'sLrlb5vb^L~5A!");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'sLrlb5vb^L~5A!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("", false);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes0.put("@Tq!W]YU~:xhU", false);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      Attributes attributes3 = attributes1.clone();
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      attributes3.addAll(attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      boolean boolean0 = attributes1.hasKeyIgnoreCase("");
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      Element element0 = new Element(tag0, ":matches()", attributes3);
      assertNotNull(element0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'sLrlb5vb^L~5A!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(":matches()", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      
      List<Attribute> list0 = attributes0.asList();
      assertNotNull(list0);
      assertEquals(0, attributes0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(attributes0.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      
      boolean boolean1 = evaluator_Matches0.matches(element0, element0);
      assertTrue(boolean1);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'sLrlb5vb^L~5A!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(":matches()", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean1 == boolean0);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      Document document0 = Document.createShell(":matches()");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(":matches()", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":matches()", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean2 = evaluatorArray0[0].matches(element0, document0);
      assertTrue(boolean2);
      assertEquals(2, evaluatorArray0.length);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(":matches()", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":matches()", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'sLrlb5vb^L~5A!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(":matches()", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      assertNotNull(combiningEvaluator_And0);
      assertEquals(2, evaluatorArray0.length);
      
      String string1 = combiningEvaluator_And0.toString();
      assertNotNull(string1);
      assertEquals(2, evaluatorArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluatorArray0[1]);
      assertNotNull(structuralEvaluator_Has0);
      assertEquals(2, evaluatorArray0.length);
      
      String string2 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:matches())", string2);
      assertNotNull(string2);
      assertEquals(2, evaluatorArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("'sLrlb5vb^L~5A!", pattern0);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      boolean boolean3 = evaluator_AttributeWithValueMatching0.matches(element0, element0);
      assertFalse(boolean3);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'sLrlb5vb^L~5A!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(":matches()", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(attributes0.equals((Object)attributes3));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string3 = evaluator_AllElements0.toString();
      assertEquals("*", string3);
      assertNotNull(string3);
      assertEquals("*", evaluator_AllElements0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(56, 57);
      assertNotNull(evaluator_IsNthChild0);
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthChild0);
      assertNotNull(structuralEvaluator_Not0);
      
      structuralEvaluator_Not0.evaluator = (Evaluator) evaluator_IsNthChild0;
      String string0 = structuralEvaluator_Not0.toString();
      assertEquals(":not:nth-child(56n+57)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertNotNull(evaluator_IsFirstChild0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      
      Document document0 = Document.createShell("abbr");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("abbr", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("abbr", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("abbr", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("abbr", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("abbr", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("abbr", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("abbr", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("abbr", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("abbr", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("abbr", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("abbr", document2.baseUri());
      assertEquals("abbr", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document2.createElement("%,D45B;Kkf@.}(");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("abbr", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("abbr", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("abbr", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("abbr", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("abbr", document2.baseUri());
      assertEquals("abbr", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("abbr", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = evaluator_IsFirstChild0.matches(element0, document0);
      assertFalse(boolean0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      assertFalse(document0.hasParent());
      assertEquals("abbr", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("abbr", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("abbr", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("abbr", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("abbr", document2.baseUri());
      assertEquals("abbr", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("abbr", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("|Nhw!M Yo(O)g@{?o|?");
      assertNotNull(evaluator_AttributeStarting0);
      
      Document document0 = Document.createShell("|Nhw!M Yo(O)g@{?o|?");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("col");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.tagName("col");
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document2.baseUri());
      assertTrue(document2.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.appendTo(element0);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.baseUri());
      assertTrue(document1.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      boolean boolean0 = evaluator_AttributeStarting0.matches(element0, document1);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.baseUri());
      assertTrue(document1.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      Pattern pattern0 = Pattern.compile("col", 1476);
      assertNotNull(pattern0);
      assertEquals("col", pattern0.toString());
      assertEquals(1476, pattern0.flags());
      assertEquals("col", pattern0.pattern());
      
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      assertNotNull(evaluator_Matches0);
      assertEquals("col", pattern0.toString());
      assertEquals(1476, pattern0.flags());
      assertEquals("col", pattern0.pattern());
      
      boolean boolean1 = evaluator_Matches0.matches(document3, element0);
      assertFalse(boolean1);
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.baseUri());
      assertTrue(document1.isBlock());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("|Nhw!M Yo(O)g@{?o|?", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("col", pattern0.toString());
      assertEquals(1476, pattern0.flags());
      assertEquals("col", pattern0.pattern());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertNotNull(evaluator_IsFirstChild0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      
      Document document0 = new Document("$Bk[+u'Pu;Y");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$Bk[+u'Pu;Y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("$Bk[+u'Pu;Y", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Pattern pattern0 = Pattern.compile("", (-2997));
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals((-2997), pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$Bk[+u'Pu;Y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("$Bk[+u'Pu;Y", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", pattern0.toString());
      assertEquals((-2997), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean0 = evaluator_IsFirstChild0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$Bk[+u'Pu;Y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("$Bk[+u'Pu;Y", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertNotNull(evaluator_IsFirstChild0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 1454);
      assertNotNull(evaluator_IsNthChild0);
      
      String string0 = evaluator_IsNthChild0.getPseudoClass();
      assertEquals("nth-child", string0);
      assertNotNull(string0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      Document document0 = new Document("nth-child");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nth-child", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nth-child", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("nth-child");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nth-child", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nth-child", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nth-child", element0.baseUri());
      
      boolean boolean0 = evaluator_IndexEquals0.matches(element0, document0);
      assertTrue(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nth-child", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nth-child", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nth-child", element0.baseUri());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string1 = evaluator_AllElements0.toString();
      assertEquals("*", string1);
      assertNotNull(string1);
      assertEquals("*", evaluator_AllElements0.toString());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches((Pattern) null);
      assertNotNull(evaluator_Matches0);
      
      String string0 = evaluator_Matches0.toString();
      assertEquals(":matches(null)", string0);
      assertNotNull(string0);
      
      Document document0 = Document.createShell("]cxF/*v1Ek/%B9-3+");
      assertNotNull(document0);
      assertEquals("]cxF/*v1Ek/%B9-3+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("]cxF/*v1Ek/%B9-3+", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("]cxF/*v1Ek/%B9-3+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("]cxF/*v1Ek/%B9-3+", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("]cxF/*v1Ek/%B9-3+", document1.location());
      assertEquals("]cxF/*v1Ek/%B9-3+", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document1.insertChildren((-1079), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("?");
      assertNotNull(evaluator_Attribute0);
      
      Document document0 = new Document("?");
      assertNotNull(document0);
      assertEquals("?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingText("String must not be empty");
      assertNotNull(elements0);
      assertEquals("?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.text("?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Stream<String> stream0 = pattern0.splitAsStream("");
      assertNotNull(stream0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      assertNotNull(evaluator_IsOnlyOfType0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      String string0 = evaluator_IsOnlyOfType0.toString();
      assertEquals(":only-of-type", string0);
      assertNotNull(string0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      boolean boolean0 = Pattern.matches("org.jsoup.select.Evaluator$Matches", ":only-of-type");
      assertFalse(boolean0);
      
      Pattern pattern1 = Pattern.compile("", (-323));
      assertNotNull(pattern1);
      assertEquals("", pattern1.toString());
      assertEquals((-323), pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      
      Stream<String> stream1 = pattern0.splitAsStream("");
      assertNotNull(stream1);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(stream1.equals((Object)stream0));
      assertNotSame(pattern0, pattern1);
      assertNotSame(stream1, stream0);
      
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      assertNotNull(evaluator_Matches0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(pattern0.equals((Object)pattern1));
      
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("");
      assertNotNull(evaluator_ContainsText0);
      
      String string1 = evaluator_ContainsText0.toString();
      assertEquals(":contains()", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching((String) null, pattern1);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals("", pattern1.toString());
      assertEquals((-323), pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertFalse(pattern1.equals((Object)pattern0));
      
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeKeyPair");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeKeyPair", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeKeyPair", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        evaluator_AttributeWithValueMatching0.matches(document0, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 2;
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(2, 2);
      assertNotNull(evaluator_IsNthLastOfType0);
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthLastOfType0);
      assertNotNull(structuralEvaluator_Not0);
      
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = structuralEvaluator_Not0.toString();
      assertEquals(":not:nth-last-of-type(2n+2)", string0);
      assertNotNull(string0);
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(2);
      assertNotNull(evaluator_IndexLessThan0);
      
      boolean boolean0 = evaluator_IndexLessThan0.matches(document0, document1);
      assertTrue(boolean0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IndexLessThan0);
      assertNotNull(structuralEvaluator_Has0);
      
      String string1 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:lt(2))", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:lt(2))", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = null;
      try {
        evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      Document document0 = new Document("u/Qf$?uGbO\"P");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      String string0 = document2.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("u/Qf$?uGbO\"P", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements0 = document3.getElementsByIndexLessThan((-3382));
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("u/Qf$?uGbO\"P", document3.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = (Document)document1.val("j|3]fn)ew^`m18");
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("u/Qf$?uGbO\"P", document4.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      Element element0 = document3.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("u/Qf$?uGbO\"P", document3.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("u/Qf$?uGbO\"P", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      
      boolean boolean0 = evaluator_IsRoot0.matches(element0, element0);
      assertTrue(boolean0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("u/Qf$?uGbO\"P", document3.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("u/Qf$?uGbO\"P", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      assertNotNull(evaluator_IsOnlyOfType0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      boolean boolean1 = evaluator_IsOnlyOfType0.matches(element0, document3);
      assertFalse(boolean1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("u/Qf$?uGbO\"P", document3.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("u/Qf$?uGbO\"P", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      
      boolean boolean2 = evaluator_IsRoot0.matches(element0, document3);
      assertFalse(boolean2);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("u/Qf$?uGbO\"P", document0.baseUri());
      assertEquals("u/Qf$?uGbO\"P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("u/Qf$?uGbO\"P", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("u/Qf$?uGbO\"P", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("u/Qf$?uGbO\"P", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("u/Qf$?uGbO\"P", document3.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("u/Qf$?uGbO\"P", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsRoot0);
      assertNotNull(structuralEvaluator_Not0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      String string1 = structuralEvaluator_Not0.toString();
      assertEquals(":not:root", string1);
      assertNotNull(string1);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(96);
      assertNotNull(evaluator_IndexLessThan0);
      
      boolean boolean0 = evaluator_IndexLessThan0.matches((Element) null, (Element) null);
      assertFalse(boolean0);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IndexLessThan0);
      assertNotNull(structuralEvaluator_Has0);
      
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:lt(96))", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-295), (-295));
      assertNotNull(evaluator_IsNthLastOfType0);
      
      String string0 = "";
      String string1 = evaluator_IsNthLastOfType0.toString();
      assertEquals(":nth-last-of-type(-295n-295)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Element element0 = null;
      // Undeclared exception!
      try { 
        evaluator_IsNthLastOfType0.calculatePosition((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthLastOfType", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("5s<$FdK3$={Du");
      assertNotNull(evaluator_Class0);
      
      String string0 = evaluator_Class0.toString();
      assertEquals(".5s<$FdK3$={Du", string0);
      assertNotNull(string0);
      
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-3054), (-3226));
      assertNotNull(evaluator_IsNthLastOfType0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      // Undeclared exception!
      try { 
        evaluator_MatchText0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchText", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("1", "1");
      assertNotNull(evaluator_AttributeWithValueStarting0);
      
      evaluator_AttributeWithValueStarting0.key = "'caption";
      Document document0 = new Document("'caption");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("'caption", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("'caption", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasSameValue("'caption");
      assertFalse(boolean0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      
      boolean boolean1 = evaluator_AttributeWithValueStarting0.matches(document1, document0);
      assertFalse(boolean1);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("'caption", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("'caption", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      boolean boolean2 = evaluator_IsOnlyChild0.matches(document0, document1);
      assertFalse(boolean2);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("'caption", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("'caption", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean3 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertFalse(boolean3);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertSame(document0, document1);
      
      boolean boolean4 = evaluator_IsOnlyChild0.matches(document1, document0);
      assertFalse(boolean4);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("'caption", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("'caption", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(1);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      boolean boolean5 = evaluator_IndexGreaterThan0.matches(document0, document0);
      assertFalse(boolean5);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertSame(document0, document1);
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("'caption");
      assertNotNull(evaluator_AttributeStarting0);
      
      boolean boolean6 = evaluator_AttributeStarting0.matches(document0, document0);
      assertFalse(boolean6);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'caption", document0.baseUri());
      assertEquals("'caption", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      Document document0 = Document.createShell("InCell");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = document2.normalise();
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document document4 = document3.outputSettings(document_OutputSettings2);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("InCell", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("InCell", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      
      boolean boolean0 = evaluator_IsLastOfType0.matches(document4, document0);
      assertFalse(boolean0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("InCell", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("InCell", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastOfType0);
      assertNotNull(structuralEvaluator_Has0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      boolean boolean1 = structuralEvaluator_Has0.matches(document3, document3);
      assertTrue(boolean1);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      
      ArrayList<Evaluator> arrayList0 = new ArrayList<Evaluator>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(arrayList0);
      assertNotNull(combiningEvaluator_Or0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = combiningEvaluator_Or0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(structuralEvaluator_Has0);
      assertNotNull(structuralEvaluator_ImmediateParent0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      Document document5 = document4.outputSettings(document_OutputSettings1);
      assertNotNull(document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("InCell", document5.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("InCell", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("InCell", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("InCell", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      
      boolean boolean2 = structuralEvaluator_ImmediateParent0.matches(document3, document5);
      assertFalse(boolean2);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("InCell", document5.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("InCell", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("InCell", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("InCell", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-1592));
      assertNotNull(evaluator_IndexGreaterThan0);
      
      boolean boolean3 = evaluator_IndexGreaterThan0.matches(document1, document5);
      assertTrue(boolean3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("InCell", document5.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("InCell", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("InCell", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("InCell", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      Element element0 = document2.createElement("InCell");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("InCell", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      
      boolean boolean4 = evaluator_IsOnlyChild0.matches(document4, element0);
      assertFalse(boolean4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("InCell", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("InCell", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InCell", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InCell", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InCell", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("InCell", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InCell", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("InCell", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("InCell", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("InCell", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("InCell", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      assertNotNull(combiningEvaluator_And0);
      assertEquals(0, evaluatorArray0.length);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$IsNthLastOfType");
      assertNotNull(tag0);
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$IsNthLastOfType", (Attributes) null);
      assertNotNull(formElement0);
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      Document document0 = formElement0.ownerDocument();
      assertNull(document0);
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      boolean boolean0 = combiningEvaluator_And0.matches((Element) null, (Element) null);
      assertTrue(boolean0);
      assertEquals(0, evaluatorArray0.length);
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("org.jsoup.select.Evaluator$IsNthLastOfType", "org.jsoup.select.Evaluator$IsNthLastOfType");
      assertNotNull(evaluator_AttributeWithValue0);
      
      // Undeclared exception!
      try { 
        evaluator_AttributeWithValue0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("[%s~=s]", "[%s~=s]");
      assertNotNull(evaluator_AttributeWithValue0);
      
      String string0 = evaluator_AttributeWithValue0.toString();
      assertEquals("[[%s~=s]=[%s~=s]]", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AttributeWithValue0);
      assertNotNull(structuralEvaluator_PreviousSibling0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("[[%s~=s]=[%s~=s]]", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      
      CDataNode cDataNode0 = new CDataNode("EYZ>R#+#XfSt-!\"fw");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "Gm3iO:XL=$&*&d77*}", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      boolean boolean0 = structuralEvaluator_PreviousSibling0.matches(formElement0, formElement0);
      assertFalse(boolean0);
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("[%s~=s]");
      assertNotNull(evaluator_AttributeStarting0);
      
      Elements elements0 = formElement0.getElementsByClass("\"+Bxl");
      assertNotNull(elements0);
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean1 = evaluator_AttributeStarting0.matches(formElement0, formElement0);
      assertFalse(boolean1);
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(boolean1 == boolean0);
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean2 = evaluator_IsRoot0.matches(formElement0, formElement0);
      assertTrue(boolean2);
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_AttributeWithValue0);
      assertNotNull(structuralEvaluator_Has0);
      
      String string1 = structuralEvaluator_Has0.toString();
      assertEquals(":has([[%s~=s]=[%s~=s]])", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      boolean boolean3 = evaluator_MatchText0.matches(formElement0, formElement0);
      assertFalse(boolean3);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("[[%s~=s]=[%s~=s]]", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Gm3iO:XL=$&*&d77*}", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("]A+$}H+`tOjy/B0");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string0 = evaluator_ContainsOwnText0.toString();
      assertEquals(":containsOwn(]a+$}h+`tojy/b0)", string0);
      assertNotNull(string0);
      
      Document document0 = Document.createShell("]A+$}H+`tOjy/B0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      boolean boolean0 = evaluator_ContainsOwnText0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("]A+$}H+`tOjy/B0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.tagName("]A+$}H+`tOjy/B0");
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("]A+$}H+`tOjy/B0", document3.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = document2.clone();
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("]A+$}H+`tOjy/B0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      
      Element element0 = document4.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("]A+$}H+`tOjy/B0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      
      Elements elements0 = document2.getAllElements();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("]A+$}H+`tOjy/B0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      boolean boolean1 = evaluator_ContainsOwnText0.matches(element0, document4);
      assertFalse(boolean1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("]A+$}H+`tOjy/B0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("]A+$}H+`tOjy/B0", (Pattern) null);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      
      boolean boolean2 = evaluator_AttributeWithValueMatching0.matches(document2, document0);
      assertFalse(boolean2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("]A+$}H+`tOjy/B0", document0.baseUri());
      assertEquals("]A+$}H+`tOjy/B0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]A+$}H+`tOjy/B0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("]A+$}H+`tOjy/B0", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("]A+$}H+`tOjy/B0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]A+$}H+`tOjy/B0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_AttributeWithValueMatching0);
      assertNotNull(structuralEvaluator_ImmediatePreviousSibling0);
      
      // Undeclared exception!
      try { 
        structuralEvaluator_ImmediatePreviousSibling0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding(">G]q[Y9w", "+Bxl");
      assertNotNull(evaluator_AttributeWithValueEnding0);
      
      Document document0 = new Document("");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = evaluator_AttributeWithValueEnding0.matches(document2, document0);
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_AttributeWithValueEnding0);
      assertNotNull(structuralEvaluator_Not0);
      
      String string0 = structuralEvaluator_Not0.toString();
      assertEquals(":not[>g]q[y9w$=+bxl]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("caption", pattern0);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      String string0 = evaluator_AttributeWithValueMatching0.toString();
      assertEquals("[caption~=]", string0);
      assertNotNull(string0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData(":only-of-type");
      assertNotNull(evaluator_ContainsData0);
      
      Document document0 = Document.createShell("^9y(1jV");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9y(1jV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^9y(1jV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9y(1jV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^9y(1jV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("^9y(1jV", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("^9y(1jV", document1.location());
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      String string1 = evaluator_ContainsData0.toString();
      assertEquals(":containsData(:only-of-type)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document2 = document0.clone();
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9y(1jV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^9y(1jV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("^9y(1jV", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("^9y(1jV", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean0 = evaluator_ContainsData0.matches(document2, document2);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9y(1jV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^9y(1jV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("^9y(1jV", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("^9y(1jV", document2.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertNotNull(evaluator_IsOnlyChild0);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      
      String string2 = evaluator_IsOnlyChild0.toString();
      assertEquals(":only-child", string2);
      assertNotNull(string2);
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      assertNotNull(evaluator_Matches0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      boolean boolean1 = evaluator_Matches0.matches(document0, document2);
      assertTrue(boolean1);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9y(1jV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^9y(1jV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("^9y(1jV", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("^9y(1jV", document2.baseUri());
      assertFalse(boolean1 == boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = null;
      try {
        evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("^9y(1jV", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("LdujJnMiDktx");
      assertNotNull(evaluator_ContainsText0);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_ContainsText0);
      assertNotNull(structuralEvaluator_Has0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("LdujJnMiDktx", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("LdujJnMiDktx", tag0.toString());
      assertFalse(tag0.isFormListed());
      
      Document document0 = new Document("e^P TV&f!TJY|V");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement(":%s(%d)");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, element0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Element element1 = new Element(tag0, "nth-of-type");
      assertNotNull(element1);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("LdujJnMiDktx", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(element1.hasParent());
      assertEquals("nth-of-type", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean1 = structuralEvaluator_Has0.matches(element1, element1);
      assertFalse(boolean1);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("LdujJnMiDktx", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(element1.hasParent());
      assertEquals("nth-of-type", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(element1, element0);
      
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(structuralEvaluator_Has0);
      assertNotNull(structuralEvaluator_ImmediatePreviousSibling0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("e^P TV&f!TJY|V", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("nth-of-type", "nth-of-type");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("e^P TV&f!TJY|V", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      
      boolean boolean2 = structuralEvaluator_ImmediatePreviousSibling0.matches(document1, element0);
      assertFalse(boolean2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e^P TV&f!TJY|V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("e^P TV&f!TJY|V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("e^P TV&f!TJY|V", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("e^P TV&f!TJY|V", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      String string0 = evaluator_IsEmpty0.toString();
      assertEquals(":empty", string0);
      assertNotNull(string0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      assertNotNull(evaluator_IndexLessThan0);
      
      String string1 = evaluator_IndexLessThan0.toString();
      assertEquals(":lt(0)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Pattern.compile("Z]{vq#Pf");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1\r
         // Z]{vq#Pf\r
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(2403);
      assertNotNull(evaluator_IndexEquals0);
      
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      assertNotNull(evaluator_IsOnlyOfType0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      
      Document document0 = new Document("^9i!nxW<oY4nY)");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document0.baseUri());
      assertEquals("^9i!nxW<oY4nY)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document0.baseUri());
      assertEquals("^9i!nxW<oY4nY)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.ownerDocument();
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document0.baseUri());
      assertEquals("^9i!nxW<oY4nY)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("^9i!nxW<oY4nY)", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document2.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document0.baseUri());
      assertEquals("^9i!nxW<oY4nY)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("^9i!nxW<oY4nY)", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document2.location());
      assertEquals("^9i!nxW<oY4nY)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = evaluator_IsOnlyOfType0.matches(element0, document0);
      assertFalse(boolean0);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document0.baseUri());
      assertEquals("^9i!nxW<oY4nY)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("^9i!nxW<oY4nY)", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^9i!nxW<oY4nY)", document2.location());
      assertEquals("^9i!nxW<oY4nY)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = Document.createShell("");
      assertNotNull(document3);
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      
      Document document4 = (Document)document3.text("");
      assertNotNull(document4);
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      boolean boolean1 = evaluator_IsOnlyOfType0.matches(document4, document3);
      assertFalse(boolean1);
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertTrue(boolean1 == boolean0);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("");
      assertNotNull(evaluator_ContainsText0);
      
      String string0 = evaluator_ContainsText0.toString();
      assertEquals(":contains()", string0);
      assertNotNull(string0);
      
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_IndexEquals0);
      assertNotNull(structuralEvaluator_Parent0);
      
      boolean boolean2 = structuralEvaluator_Parent0.matches(document3, document4);
      assertFalse(boolean2);
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(2403);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      String string1 = evaluator_IndexGreaterThan0.toString();
      assertEquals(":gt(2403)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = evaluator_ContainsText0.matches(document4, document4);
      assertTrue(boolean3);
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IndexGreaterThan0);
      assertNotNull(structuralEvaluator_Has0);
      
      boolean boolean4 = structuralEvaluator_Has0.matches(document4, document0);
      assertFalse(boolean4);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^9i!nxW<oY4nY)", document0.baseUri());
      assertEquals("^9i!nxW<oY4nY)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(2921, 2921);
      Document document0 = Document.createShell("~3{Sx,-FENa");
      Element element0 = document0.head();
      evaluator_IsNthChild0.matches(element0, element0);
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_IsNthChild0);
      structuralEvaluator_PreviousSibling0.toString();
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("#document");
      evaluator_Attribute0.matches(document0, element0);
      structuralEvaluator_PreviousSibling0.matches(element0, document0);
      // Undeclared exception!
      try { 
        Pattern.compile("%JTNUipKFv*buZb)oy-", 2921);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 14\r
         // %JTNUipKFv*buZb)oy-\r
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
}
