/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 09:04:46 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.TreeBuilder;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser.parseBodyFragment("", "rt");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-3427));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader("org.jsoup.parser.Token$Tag");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "?s@!@*]HB");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("?s@!@*]HB", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("?s@!@*]HB", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(parser0, parser1);
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Node> list0 = Parser.parseXmlFragment("Gv", "]gN?]x5hfJ2`~K$8m#");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("CharacterReferenceInData", "9HQ'gj&J");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("9HQ'gj&J", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9HQ'gj&J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("YRu <a}; U?U", (Element) document0, "YRu <a}; U?U", parseErrorList0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("9HQ'gj&J", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9HQ'gj&J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Parser.unescapeEntities("", false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(2481);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Parser parser2 = parser1.settings((ParseSettings) null);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(parser2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      ParseSettings parseSettings0 = parser1.settings();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNull(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(241);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser2 = parser0.setTreeBuilder(xmlTreeBuilder0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(parser2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "d&iSs?QyzW/F-D");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("d&iSs?QyzW/F-D", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("d&iSs?QyzW/F-D", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTreeBuilder((TreeBuilder) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      TreeBuilder treeBuilder0 = parser1.getTreeBuilder();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNull(treeBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("CharacterReferenceInData", "9HQ'gj&J");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("9HQ'gj&J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9HQ'gj&J", document0.baseUri());
      assertNotNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<ParseError> list0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.unescapeEntities((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment((String) null, ",Lj{9.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      // Undeclared exception!
      try { 
        parser1.parseInput("a%dN79M.wn_", "a%dN79M.wn_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput("t7p5", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("Y%M5T4L'L2$-W8n");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) stringReader0, "");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTreeBuilder((TreeBuilder) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader("org.jsoup.parser.Token$Tag");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) stringReader0, "?s@!@*]HB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3147));
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) null, "org.jsoup.safety.Cleaner$CleaningVisitor", parseErrorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ad$WRxR", "_{DiB,");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_{DiB,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("_{DiB,", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_{DiB,", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("_{DiB,", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("_{DiB,", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("_{DiB,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      Parser.parseFragment("_{DiB,", (Element) document1, "_{DiB,");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L?5", "L?5");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L?5", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("L?5", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) document0, "</");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("", "");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        Parser.parseFragment("", (Element) document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "&>b)kTZ%5&,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse((String) null, "De{9|5Yf5T+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse("1G0Uyj[M-", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean0 = parser0.isTrackErrors();
      assertFalse(boolean0);
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(26);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      boolean boolean0 = parser1.isTrackErrors();
      assertTrue(boolean0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader(">}*h,");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "!w:R");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!w:R", document0.baseUri());
      assertEquals("!w:R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      List<Node> list0 = Parser.parseFragment("!w:R", (Element) document0, "!w:R");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!w:R", document0.baseUri());
      assertEquals("!w:R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[<ymV>3+=tC|`$_0'", "/=9T<sH=!");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/=9T<sH=!", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("/=9T<sH=!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(55);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader(">}*h,");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "!w:R");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!w:R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!w:R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "ub<3^]4LS8ZU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(55);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("[%s~=%s]", "?)a^ 4Wdab0z%");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("?)a^ 4Wdab0z%", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("?)a^ 4Wdab0z%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseFragment("", (Element) null, (String) null, (ParseErrorList) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = parser0.settings();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<ParseError> list0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Parser.parse("", "script");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("script", document0.baseUri());
      assertEquals("script", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = Parser.unescapeEntities("P~o1irBdiiil] kT", true);
      assertEquals("P~o1irBdiiil] kT", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.getTreeBuilder();
      assertFalse(parser0.isTrackErrors());
  }
}
