/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 23 08:53:09 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue.unescape(")]w*b&FSXVRZ");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.addFirst("'");
      tokenQueue0.chompBalanced('\u001A', '$');
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.addFirst("'");
      tokenQueue0.chompBalanced('(', '$');
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consume(" ");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H\"1l!q");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompBalanced('!', '!');
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue.unescape("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.remainder();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6LVf");
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.matchesCS("org.jsoup.parser.TokenQueue");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      tokenQueue0.chompBalanced('T', 'c');
      tokenQueue0.matches("              ");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      tokenQueue0.consumeTagName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#T}`:qPp'");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#5-Jm");
      tokenQueue0.consumeCssIdentifier();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      tokenQueue0.consumeAttributeKey();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6n#@~");
      tokenQueue0.consume();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      Character character0 = new Character('d');
      tokenQueue0.addFirst(character0);
      tokenQueue0.consume();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.chompTo("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h*|l!q");
      tokenQueue0.addFirst("org.jsoup.helper.Validate");
      Character character0 = Character.valueOf('a');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('a', 'j');
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("  ");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesCS((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("SKiW");
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8");
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_oINu{1:O2r");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6n#@~");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("NN'+ql0N?]2$@FX:k");
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" _d1>Nr  ");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("T=vFcPe`OE)O8CTjr");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue.unescape("\\KnW uB:wpZ{%K");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      tokenQueue0.consumeToIgnoreCase("AJdGs*q(75&0RQ]:Wpe");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$r?o?8E5q{");
      tokenQueue0.consumeToIgnoreCase("$r?o?8E5q{");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      tokenQueue0.consumeTo("'");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.matchesWord();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.matchesWord();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.matchesWord();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesWhitespace();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" _d1>Nr  ");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesWhitespace();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      tokenQueue0.consume();
      tokenQueue0.matchesWhitespace();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.matchChomp("Queue did not match expected sequence");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.matchChomp("");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6mvI`6.j#Fv{wS$!");
      Character character0 = Character.valueOf('t');
      tokenQueue0.addFirst(character0);
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      tokenQueue0.matchesAny(charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6mvI`6.j#Fv{wS$!");
      char[] charArray0 = new char[7];
      tokenQueue0.matchesAny(charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Did not find balanced marker at '";
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6LVf");
      tokenQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#T}`:qPp'");
      tokenQueue0.remainder();
      tokenQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s-d");
      tokenQueue0.consumeCssIdentifier();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h_1l!q");
      tokenQueue0.consumeTagName();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("SKiW");
      tokenQueue0.consumeTagName();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H\"1l!q");
      tokenQueue0.addFirst("H\"1l!q");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('H', ';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '\"1l!qH\"1l!q'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"1l!q");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', ',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '1l!q'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#T}`:qPp'");
      tokenQueue0.addFirst(" 'PnfPZ8@?");
      tokenQueue0.advance();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'PnfPZ8@?#T}`:qPp''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h_1l!q");
      tokenQueue0.addFirst("lYcv7R'dd:n/pzZ");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('v', 'v');
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeTo("5");
      tokenQueue0.chompBalanced('6', '6');
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not findubalaced @arker at '");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("SKiW");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.consumeToAny((String[]) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consume();
      tokenQueue0.consumeToIgnoreCase(" did not match expected sequence");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H\"1l!q");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("Wn$;)4P");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_oINu{1:O2r");
      tokenQueue0.consume("_oINu{1:O2r");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dU");
      tokenQueue0.chompToIgnoreCase("org.jsoup.helper.StringUtil");
      tokenQueue0.advance();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeTo("5");
      tokenQueue0.consumeWord();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H\"1l!q");
      tokenQueue0.consumeWhitespace();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("kH<rKt");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ko< K}^t");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H\"1l!q");
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil$1");
      tokenQueue0.chompToIgnoreCase("#");
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("KnnW uB:wpZ{%K");
      tokenQueue0.chompTo(" ");
      tokenQueue0.consumeAttributeKey();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("kH<rKt");
      tokenQueue0.consumeAttributeKey();
      char[] charArray0 = new char[3];
      tokenQueue0.chompTo("kH");
      tokenQueue0.matchesAny(charArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s-d");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.advance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("SKiW");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ko< K}^t");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompTo("ko");
      assertEquals("", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompToIgnoreCase("< K}^t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil$1");
      String string0 = tokenQueue0.toString();
      assertEquals("org.jsoup.helper.StringUtil$1", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#5-Jm");
      tokenQueue0.chompToIgnoreCase("#5-Jm");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#5-Jm");
      boolean boolean0 = tokenQueue0.matches("#5-Jm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ko< K}^t");
      boolean boolean0 = tokenQueue0.matchesCS("ko< K}^t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
