/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 10:59:28 GMT 2018
 */

package nl.tudelft.jpacman.sprite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.VolatileImage;
import javax.swing.Box;
import nl.tudelft.jpacman.sprite.AnimatedSprite;
import nl.tudelft.jpacman.sprite.EmptySprite;
import nl.tudelft.jpacman.sprite.ImageSprite;
import nl.tudelft.jpacman.sprite.Sprite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnimatedSprite_ESTest extends AnimatedSprite_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[15];
      EmptySprite emptySprite0 = new EmptySprite();
      Sprite sprite0 = emptySprite0.split(7, (-400), (-400), (-400));
      spriteArray0[0] = sprite0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 67, false);
      animatedSprite0.getWidth();
      animatedSprite0.getHeight();
      System.setCurrentTimeMillis(5L);
      animatedSprite0.getWidth();
      animatedSprite0.restart();
      animatedSprite0.getHeight();
      animatedSprite0.split((-631), (-1412), 32, 0);
      animatedSprite0.getWidth();
      System.setCurrentTimeMillis(1153L);
      animatedSprite0.split(0, 0, 9, 7);
      animatedSprite0.getHeight();
      animatedSprite0.getWidth();
      animatedSprite0.getWidth();
      animatedSprite0.getHeight();
      EmptySprite emptySprite1 = new EmptySprite();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[15];
      EmptySprite emptySprite0 = new EmptySprite();
      Sprite sprite0 = emptySprite0.split(7, (-400), (-400), (-400));
      spriteArray0[0] = sprite0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, (-400), false);
      animatedSprite0.getWidth();
      animatedSprite0.getHeight();
      System.setCurrentTimeMillis(5L);
      animatedSprite0.getWidth();
      animatedSprite0.restart();
      animatedSprite0.getHeight();
      animatedSprite0.split((-631), (-1412), 32, 0);
      animatedSprite0.getHeight();
      animatedSprite0.getWidth();
      System.setCurrentTimeMillis(1153L);
      // Undeclared exception!
      animatedSprite0.split(0, 0, 9, 7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      Sprite sprite0 = emptySprite0.split(7, (-400), (-400), (-400));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 12288, false);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      int int0 = animatedSprite0.getWidth();
      assertEquals(0, int0);
      assertEquals(1, spriteArray0.length);
      
      int int1 = animatedSprite0.getHeight();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, spriteArray0.length);
      
      System.setCurrentTimeMillis(5L);
      int int2 = animatedSprite0.getWidth();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(1, spriteArray0.length);
      
      int int3 = animatedSprite0.getHeight();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(1, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split((-631), (-1412), 32, 0);
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertFalse(sprite1.equals((Object)sprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, emptySprite0);
      assertNotSame(sprite1, sprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite1.getHeight());
      assertEquals(0, sprite1.getWidth());
      
      int int4 = animatedSprite0.getHeight();
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(1, spriteArray0.length);
      
      int int5 = animatedSprite0.getWidth();
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      assertEquals(1, spriteArray0.length);
      
      System.setCurrentTimeMillis(1153L);
      int int6 = animatedSprite0.getHeight();
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      assertEquals(1, spriteArray0.length);
      
      int int7 = animatedSprite0.getWidth();
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertEquals(0, int7);
      assertEquals(1, spriteArray0.length);
      
      int int8 = animatedSprite0.getWidth();
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertEquals(0, int8);
      assertEquals(1, spriteArray0.length);
      
      int int9 = animatedSprite0.getHeight();
      assertTrue(int9 == int5);
      assertTrue(int9 == int2);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int4);
      assertTrue(int9 == int3);
      assertEquals(0, int9);
      assertEquals(1, spriteArray0.length);
      
      Sprite sprite2 = animatedSprite0.split(1276, (-631), (-1412), 32);
      assertFalse(sprite2.equals((Object)sprite0));
      assertFalse(sprite2.equals((Object)sprite1));
      assertFalse(sprite2.equals((Object)emptySprite0));
      assertNotNull(sprite2);
      assertNotSame(sprite2, sprite0);
      assertNotSame(sprite2, sprite1);
      assertNotSame(sprite2, emptySprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite2.getHeight());
      assertEquals(0, sprite2.getWidth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[15];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      Sprite sprite0 = emptySprite0.split(7, (-400), (-400), (-400));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 12288, true);
      assertNotNull(animatedSprite0);
      assertEquals(15, spriteArray0.length);
      
      int int0 = animatedSprite0.getWidth();
      assertEquals(0, int0);
      assertEquals(15, spriteArray0.length);
      
      int int1 = animatedSprite0.getHeight();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(15, spriteArray0.length);
      
      System.setCurrentTimeMillis(5L);
      int int2 = animatedSprite0.getWidth();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(15, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(15, spriteArray0.length);
      
      int int3 = animatedSprite0.getHeight();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(15, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split((-631), (-1412), 32, 0);
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(15, spriteArray0.length);
      assertEquals(0, sprite1.getWidth());
      assertEquals(0, sprite1.getHeight());
      
      int int4 = animatedSprite0.getHeight();
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(15, spriteArray0.length);
      
      int int5 = animatedSprite0.getWidth();
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      assertEquals(15, spriteArray0.length);
      
      System.setCurrentTimeMillis(1153L);
      // Undeclared exception!
      try { 
        animatedSprite0.split(0, 0, 9, 7);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[15];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      Sprite sprite0 = emptySprite0.split(7, (-400), (-400), (-400));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 12288, false);
      assertNotNull(animatedSprite0);
      assertEquals(15, spriteArray0.length);
      
      int int0 = animatedSprite0.getWidth();
      assertEquals(0, int0);
      assertEquals(15, spriteArray0.length);
      
      int int1 = animatedSprite0.getHeight();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(15, spriteArray0.length);
      
      System.setCurrentTimeMillis(5L);
      int int2 = animatedSprite0.getWidth();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(15, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(15, spriteArray0.length);
      
      int int3 = animatedSprite0.getHeight();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(15, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split((-631), (-1412), 32, 0);
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(15, spriteArray0.length);
      assertEquals(0, sprite1.getHeight());
      assertEquals(0, sprite1.getWidth());
      
      int int4 = animatedSprite0.getHeight();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(15, spriteArray0.length);
      
      int int5 = animatedSprite0.getWidth();
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertEquals(15, spriteArray0.length);
      
      System.setCurrentTimeMillis(1153L);
      // Undeclared exception!
      try { 
        animatedSprite0.split(0, 0, 9, 7);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      Sprite sprite0 = emptySprite0.split(7, (-400), (-400), (-400));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 12288, true);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      int int0 = animatedSprite0.getWidth();
      assertEquals(0, int0);
      assertEquals(1, spriteArray0.length);
      
      int int1 = animatedSprite0.getHeight();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, spriteArray0.length);
      
      System.setCurrentTimeMillis(5L);
      int int2 = animatedSprite0.getWidth();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(1, spriteArray0.length);
      
      int int3 = animatedSprite0.getHeight();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split((-631), (-1412), 32, 0);
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite1.getWidth());
      assertEquals(0, sprite1.getHeight());
      
      int int4 = animatedSprite0.getHeight();
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(1, spriteArray0.length);
      
      int int5 = animatedSprite0.getWidth();
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(1, spriteArray0.length);
      
      System.setCurrentTimeMillis(1153L);
      Sprite sprite2 = animatedSprite0.split(0, 0, 9, 7);
      assertFalse(sprite2.equals((Object)emptySprite0));
      assertFalse(sprite2.equals((Object)sprite1));
      assertFalse(sprite2.equals((Object)sprite0));
      assertNotNull(sprite2);
      assertNotSame(sprite2, emptySprite0);
      assertNotSame(sprite2, sprite1);
      assertNotSame(sprite2, sprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite2.getWidth());
      assertEquals(0, sprite2.getHeight());
      
      int int6 = animatedSprite0.getHeight();
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      assertEquals(1, spriteArray0.length);
      
      int int7 = animatedSprite0.getWidth();
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      assertEquals(1, spriteArray0.length);
      
      int int8 = animatedSprite0.getWidth();
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertEquals(0, int8);
      assertEquals(1, spriteArray0.length);
      
      int int9 = animatedSprite0.getHeight();
      assertTrue(int9 == int5);
      assertTrue(int9 == int3);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int0);
      assertTrue(int9 == int8);
      assertTrue(int9 == int1);
      assertEquals(0, int9);
      assertEquals(1, spriteArray0.length);
      
      Sprite sprite3 = animatedSprite0.split(1276, (-631), (-1412), 32);
      assertFalse(sprite3.equals((Object)sprite1));
      assertFalse(sprite3.equals((Object)sprite0));
      assertFalse(sprite3.equals((Object)sprite2));
      assertFalse(sprite3.equals((Object)emptySprite0));
      assertNotNull(sprite3);
      assertNotSame(sprite3, sprite1);
      assertNotSame(sprite3, sprite0);
      assertNotSame(sprite3, sprite2);
      assertNotSame(sprite3, emptySprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite3.getHeight());
      assertEquals(0, sprite3.getWidth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[2];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      Sprite sprite0 = emptySprite0.split(11, 2389, 3031, 3031);
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      
      Sprite sprite1 = emptySprite0.split((-1), (-1), 0, 0);
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite1.getHeight());
      assertEquals(0, sprite1.getWidth());
      
      spriteArray0[0] = sprite1;
      Sprite[] spriteArray1 = new Sprite[2];
      assertFalse(spriteArray1.equals((Object)spriteArray0));
      
      spriteArray1[0] = sprite1;
      Sprite sprite2 = emptySprite0.split(1, (-1), 0, (-1484));
      assertFalse(emptySprite0.equals((Object)sprite1));
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite2.equals((Object)emptySprite0));
      assertFalse(sprite2.equals((Object)sprite1));
      assertFalse(sprite2.equals((Object)sprite0));
      assertNotNull(sprite2);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(emptySprite0, sprite2);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite2, emptySprite0);
      assertNotSame(sprite2, sprite1);
      assertNotSame(sprite2, sprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite2.getWidth());
      assertEquals(0, sprite2.getHeight());
      
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray1, (-1), false);
      assertFalse(spriteArray1.equals((Object)spriteArray0));
      assertNotNull(animatedSprite0);
      assertEquals(2, spriteArray1.length);
      
      animatedSprite0.setAnimating(false);
      assertFalse(spriteArray1.equals((Object)spriteArray0));
      assertNotSame(spriteArray1, spriteArray0);
      assertEquals(2, spriteArray1.length);
      
      Sprite sprite3 = animatedSprite0.split(0, (-1484), 234, (-1));
      assertFalse(spriteArray1.equals((Object)spriteArray0));
      assertFalse(sprite3.equals((Object)sprite0));
      assertFalse(sprite3.equals((Object)sprite1));
      assertFalse(sprite3.equals((Object)sprite2));
      assertFalse(sprite3.equals((Object)emptySprite0));
      assertNotNull(sprite3);
      assertNotSame(spriteArray1, spriteArray0);
      assertNotSame(sprite3, sprite0);
      assertNotSame(sprite3, sprite1);
      assertNotSame(sprite3, sprite2);
      assertNotSame(sprite3, emptySprite0);
      assertEquals(2, spriteArray1.length);
      assertEquals(0, sprite3.getHeight());
      assertEquals(0, sprite3.getWidth());
      
      animatedSprite0.restart();
      assertFalse(spriteArray1.equals((Object)spriteArray0));
      assertNotSame(spriteArray1, spriteArray0);
      assertEquals(2, spriteArray1.length);
      
      Sprite sprite4 = emptySprite0.split(1, 234, (-1), (-1));
      assertFalse(emptySprite0.equals((Object)sprite1));
      assertFalse(emptySprite0.equals((Object)sprite2));
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(emptySprite0.equals((Object)sprite3));
      assertFalse(sprite4.equals((Object)sprite1));
      assertFalse(sprite4.equals((Object)sprite0));
      assertFalse(sprite4.equals((Object)emptySprite0));
      assertFalse(sprite4.equals((Object)sprite2));
      assertFalse(sprite4.equals((Object)sprite3));
      assertNotNull(sprite4);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(emptySprite0, sprite4);
      assertNotSame(emptySprite0, sprite2);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(emptySprite0, sprite3);
      assertNotSame(sprite4, sprite1);
      assertNotSame(sprite4, sprite0);
      assertNotSame(sprite4, emptySprite0);
      assertNotSame(sprite4, sprite2);
      assertNotSame(sprite4, sprite3);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite4.getHeight());
      assertEquals(0, sprite4.getWidth());
      
      AnimatedSprite animatedSprite1 = new AnimatedSprite(spriteArray0, 1, true, true);
      assertFalse(spriteArray0.equals((Object)spriteArray1));
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertNotNull(animatedSprite1);
      assertEquals(2, spriteArray0.length);
      
      int int0 = animatedSprite1.getHeight();
      assertFalse(spriteArray0.equals((Object)spriteArray1));
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertEquals(0, int0);
      assertNotSame(spriteArray0, spriteArray1);
      assertNotSame(animatedSprite1, animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      int int1 = animatedSprite1.getHeight();
      assertFalse(spriteArray0.equals((Object)spriteArray1));
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(spriteArray0, spriteArray1);
      assertNotSame(animatedSprite1, animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      int int2 = animatedSprite0.getWidth();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(spriteArray1.equals((Object)spriteArray0));
      assertFalse(animatedSprite0.equals((Object)animatedSprite1));
      assertEquals(0, int2);
      assertNotSame(spriteArray1, spriteArray0);
      assertNotSame(animatedSprite0, animatedSprite1);
      assertEquals(2, spriteArray1.length);
      
      Sprite sprite5 = animatedSprite1.split((-1484), 0, (-1), 0);
      assertFalse(spriteArray0.equals((Object)spriteArray1));
      assertFalse(sprite5.equals((Object)emptySprite0));
      assertFalse(sprite5.equals((Object)sprite4));
      assertFalse(sprite5.equals((Object)sprite0));
      assertFalse(sprite5.equals((Object)sprite3));
      assertFalse(sprite5.equals((Object)sprite1));
      assertFalse(sprite5.equals((Object)sprite2));
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertNotNull(sprite5);
      assertNotSame(spriteArray0, spriteArray1);
      assertNotSame(sprite5, emptySprite0);
      assertNotSame(sprite5, sprite4);
      assertNotSame(sprite5, sprite0);
      assertNotSame(sprite5, sprite3);
      assertNotSame(sprite5, sprite1);
      assertNotSame(sprite5, sprite2);
      assertNotSame(animatedSprite1, animatedSprite0);
      assertEquals(2, spriteArray0.length);
      assertEquals(0, sprite5.getHeight());
      assertEquals(0, sprite5.getWidth());
      
      System.setCurrentTimeMillis((-1484));
      int int3 = animatedSprite1.getWidth();
      assertFalse(spriteArray0.equals((Object)spriteArray1));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertEquals(0, int3);
      assertNotSame(spriteArray0, spriteArray1);
      assertNotSame(animatedSprite1, animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      Sprite sprite6 = animatedSprite1.split(0, (-777), (-777), 5484);
      assertFalse(spriteArray0.equals((Object)spriteArray1));
      assertFalse(sprite6.equals((Object)sprite1));
      assertFalse(sprite6.equals((Object)emptySprite0));
      assertFalse(sprite6.equals((Object)sprite4));
      assertFalse(sprite6.equals((Object)sprite0));
      assertFalse(sprite6.equals((Object)sprite3));
      assertFalse(sprite6.equals((Object)sprite5));
      assertFalse(sprite6.equals((Object)sprite2));
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertNotNull(sprite6);
      assertNotSame(spriteArray0, spriteArray1);
      assertNotSame(sprite6, sprite1);
      assertNotSame(sprite6, emptySprite0);
      assertNotSame(sprite6, sprite4);
      assertNotSame(sprite6, sprite0);
      assertNotSame(sprite6, sprite3);
      assertNotSame(sprite6, sprite5);
      assertNotSame(sprite6, sprite2);
      assertNotSame(animatedSprite1, animatedSprite0);
      assertEquals(2, spriteArray0.length);
      assertEquals(0, sprite6.getHeight());
      assertEquals(0, sprite6.getWidth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[2];
      boolean boolean0 = true;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 2103, true);
      assertNotNull(animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      spriteArray0[0] = (Sprite) animatedSprite0;
      int int0 = 0;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        animatedSprite0.getHeight();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[2];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      spriteArray0[0] = (Sprite) emptySprite0;
      Sprite sprite0 = emptySprite0.split(81, 1, 1, 2670);
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      
      spriteArray0[1] = sprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 2670, true);
      assertNotNull(animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(2, spriteArray0.length);
      
      int int0 = animatedSprite0.getHeight();
      assertEquals(0, int0);
      assertEquals(2, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split(0, (-454), 5, 5);
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(2, spriteArray0.length);
      assertEquals(0, sprite1.getWidth());
      assertEquals(0, sprite1.getHeight());
      
      int int1 = animatedSprite0.getWidth();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, spriteArray0.length);
      
      int int2 = animatedSprite0.getWidth();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(2, spriteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      int int0 = 1139;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 1139, false, false);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      spriteArray0[0] = (Sprite) animatedSprite0;
      int int1 = 1;
      boolean boolean0 = false;
      AnimatedSprite animatedSprite1 = new AnimatedSprite(spriteArray0, 1, false);
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertNotNull(animatedSprite1);
      assertEquals(1, spriteArray0.length);
      
      // Undeclared exception!
      try { 
        animatedSprite1.getWidth();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      AnimatedSprite animatedSprite0 = null;
      try {
        animatedSprite0 = new AnimatedSprite((Sprite[]) null, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.sprite.AnimatedSprite", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[3];
      Box box0 = Box.createVerticalBox();
      assertNotNull(box0);
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      
      int int0 = (-751);
      VolatileImage volatileImage0 = box0.createVolatileImage((-751), (-751));
      assertNull(volatileImage0);
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      
      ImageSprite imageSprite0 = new ImageSprite((Image) null);
      assertNotNull(imageSprite0);
      
      Component[] componentArray0 = box0.getComponents();
      assertNotNull(componentArray0);
      assertEquals(0, componentArray0.length);
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      
      spriteArray0[0] = (Sprite) imageSprite0;
      boolean boolean0 = true;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, true, true);
      assertNotNull(animatedSprite0);
      assertEquals(3, spriteArray0.length);
      
      int int1 = 1682554634;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        animatedSprite0.split(1682554634, (-506), (-751), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.sprite.ImageSprite", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[5];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, true);
      assertNotNull(animatedSprite0);
      assertEquals(5, spriteArray0.length);
      
      spriteArray0[0] = (Sprite) animatedSprite0;
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      spriteArray0[1] = (Sprite) emptySprite0;
      Sprite sprite0 = emptySprite0.split((-1189), 0, 0, 0);
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      
      spriteArray0[2] = sprite0;
      AnimatedSprite animatedSprite1 = new AnimatedSprite(spriteArray0, 0, false);
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertNotNull(animatedSprite1);
      assertEquals(5, spriteArray0.length);
      
      spriteArray0[3] = (Sprite) animatedSprite1;
      Sprite sprite1 = emptySprite0.split(0, 0, 0, 0);
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertFalse(sprite1.equals((Object)sprite0));
      assertNotNull(sprite1);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(sprite1, emptySprite0);
      assertNotSame(sprite1, sprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite1.getWidth());
      assertEquals(0, sprite1.getHeight());
      
      spriteArray0[4] = sprite1;
      AnimatedSprite animatedSprite2 = new AnimatedSprite(spriteArray0, (-3632), false, false);
      assertFalse(animatedSprite2.equals((Object)animatedSprite0));
      assertFalse(animatedSprite2.equals((Object)animatedSprite1));
      assertNotNull(animatedSprite2);
      assertEquals(5, spriteArray0.length);
      
      Box box0 = Box.createHorizontalBox();
      assertNotNull(box0);
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusCycleRoot());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      
      Graphics graphics0 = box0.getGraphics();
      assertNull(graphics0);
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertFalse(box0.isFocusCycleRoot());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        animatedSprite2.draw((Graphics) null, 0, (-886), 0, 663);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      Sprite sprite0 = emptySprite0.split(497, 0, 497, (-1294));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      
      spriteArray0[0] = sprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, (-1066), false);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      Box box0 = Box.createHorizontalBox();
      assertNotNull(box0);
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      
      Graphics graphics0 = box0.getGraphics();
      assertNull(graphics0);
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      
      animatedSprite0.draw((Graphics) null, 0, 0, 497, 497);
      assertEquals(1, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(1, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split(1938, (-2039), 0, 497);
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite1.getHeight());
      assertEquals(0, sprite1.getWidth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      spriteArray0[0] = (Sprite) emptySprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 306654252, true, true);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      animatedSprite0.setAnimating(false);
      assertEquals(1, spriteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = null;
      try {
        animatedSprite0 = new AnimatedSprite(spriteArray0, (-1), false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[0];
      int int0 = 0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      AnimatedSprite animatedSprite0 = null;
      try {
        animatedSprite0 = new AnimatedSprite(spriteArray0, 0, true, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      Sprite sprite0 = emptySprite0.split(0, 0, 306654252, 605);
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false, false);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      Sprite sprite1 = animatedSprite0.split(54, 54, (-1), 0);
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(1, spriteArray0.length);
      assertEquals(0, sprite1.getWidth());
      assertEquals(0, sprite1.getHeight());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[3];
      boolean boolean0 = true;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, true, true);
      assertNotNull(animatedSprite0);
      assertEquals(3, spriteArray0.length);
      
      spriteArray0[0] = (Sprite) animatedSprite0;
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      int int0 = 110;
      Sprite sprite0 = emptySprite0.split(0, 0, 110, (-2349));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      
      int int1 = 494;
      Sprite sprite1 = emptySprite0.split(494, (-80), (-80), 1879);
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertFalse(sprite1.equals((Object)sprite0));
      assertNotNull(sprite1);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertNotSame(sprite1, sprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite1.getHeight());
      assertEquals(0, sprite1.getWidth());
      
      spriteArray0[1] = sprite1;
      animatedSprite0.restart();
      assertEquals(3, spriteArray0.length);
      
      Sprite sprite2 = emptySprite0.split(494, 1879, 1516, 1);
      assertFalse(emptySprite0.equals((Object)sprite1));
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite2.equals((Object)sprite0));
      assertFalse(sprite2.equals((Object)emptySprite0));
      assertFalse(sprite2.equals((Object)sprite1));
      assertNotNull(sprite2);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(emptySprite0, sprite2);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite2, sprite0);
      assertNotSame(sprite2, emptySprite0);
      assertNotSame(sprite2, sprite1);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite2.getHeight());
      assertEquals(0, sprite2.getWidth());
      
      spriteArray0[2] = sprite2;
      AnimatedSprite animatedSprite1 = new AnimatedSprite(spriteArray0, 1, true);
      assertFalse(animatedSprite1.equals((Object)animatedSprite0));
      assertNotNull(animatedSprite1);
      assertEquals(3, spriteArray0.length);
      
      // Undeclared exception!
      try { 
        animatedSprite1.split((-80), 0, (-637), (-715));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnimatedSprite animatedSprite0 = null;
      try {
        animatedSprite0 = new AnimatedSprite((Sprite[]) null, 1431, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.sprite.AnimatedSprite", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[2];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      
      Sprite sprite0 = emptySprite0.split((-1855), (-1855), (-1190), (-1855));
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      Sprite sprite1 = emptySprite0.split((-1190), 1471, 1471, 3261);
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, sprite1.getHeight());
      assertEquals(0, sprite1.getWidth());
      
      spriteArray0[1] = sprite1;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, (-1190), true, true);
      assertNotNull(animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      Sprite sprite2 = animatedSprite0.split((-1855), 0, (-1855), 1471);
      assertFalse(sprite2.equals((Object)emptySprite0));
      assertFalse(sprite2.equals((Object)sprite1));
      assertFalse(sprite2.equals((Object)sprite0));
      assertNotNull(sprite2);
      assertNotSame(sprite2, emptySprite0);
      assertNotSame(sprite2, sprite1);
      assertNotSame(sprite2, sprite0);
      assertEquals(2, spriteArray0.length);
      assertEquals(0, sprite2.getHeight());
      assertEquals(0, sprite2.getWidth());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[2];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      Sprite sprite0 = emptySprite0.split(1, 1, (-3851), 1);
      assertFalse(sprite0.equals((Object)emptySprite0));
      assertNotNull(sprite0);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(sprite0, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite0.getHeight());
      assertEquals(0, sprite0.getWidth());
      
      spriteArray0[0] = sprite0;
      Sprite sprite1 = emptySprite0.split(1, 1, 1, 1);
      assertFalse(emptySprite0.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)sprite0));
      assertFalse(sprite1.equals((Object)emptySprite0));
      assertNotNull(sprite1);
      assertNotSame(emptySprite0, sprite0);
      assertNotSame(emptySprite0, sprite1);
      assertNotSame(sprite1, sprite0);
      assertNotSame(sprite1, emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      assertEquals(0, sprite1.getWidth());
      assertEquals(0, sprite1.getHeight());
      
      spriteArray0[1] = sprite1;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 1, true);
      assertNotNull(animatedSprite0);
      assertEquals(2, spriteArray0.length);
      
      int int0 = animatedSprite0.getWidth();
      assertEquals(0, int0);
      assertEquals(2, spriteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[7];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 1261, false, false);
      assertNotNull(animatedSprite0);
      assertEquals(7, spriteArray0.length);
      
      // Undeclared exception!
      try { 
        animatedSprite0.split(1261, 1261, 1261, 1261);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      assertNotNull(emptySprite0);
      assertEquals(0, emptySprite0.getWidth());
      assertEquals(0, emptySprite0.getHeight());
      
      spriteArray0[0] = (Sprite) emptySprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, (-179), true);
      assertNotNull(animatedSprite0);
      assertEquals(1, spriteArray0.length);
      
      animatedSprite0.restart();
      assertEquals(1, spriteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnimatedSprite animatedSprite0 = null;
      try {
        animatedSprite0 = new AnimatedSprite((Sprite[]) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.sprite.AnimatedSprite", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[1];
      EmptySprite emptySprite0 = new EmptySprite();
      spriteArray0[0] = (Sprite) emptySprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 7, false);
      animatedSprite0.getWidth();
      System.setCurrentTimeMillis(7);
      animatedSprite0.getWidth();
      animatedSprite0.restart();
      animatedSprite0.getHeight();
      animatedSprite0.split((-631), (-631), 17, 0);
      animatedSprite0.getHeight();
      System.setCurrentTimeMillis(1153L);
      animatedSprite0.getHeight();
      animatedSprite0.getWidth();
      Sprite sprite0 = animatedSprite0.split(1276, (-631), 0, 17);
      assertFalse(sprite0.equals((Object)emptySprite0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[15];
      EmptySprite emptySprite0 = new EmptySprite();
      Sprite sprite0 = emptySprite0.split(7, 7, 7, 7);
      spriteArray0[0] = sprite0;
      sprite0.split(7, 7, (-10), (-10));
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 7, true);
      System.setCurrentTimeMillis(7);
      animatedSprite0.getWidth();
      animatedSprite0.restart();
      animatedSprite0.getHeight();
      animatedSprite0.getHeight();
      animatedSprite0.getWidth();
      System.setCurrentTimeMillis(1153L);
      // Undeclared exception!
      try { 
        animatedSprite0.split(0, 0, (-1412), 7);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = null;
      try {
        animatedSprite0 = new AnimatedSprite(spriteArray0, (-389), false, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[4];
      EmptySprite emptySprite0 = new EmptySprite();
      spriteArray0[0] = (Sprite) emptySprite0;
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 497, true);
      Box box0 = Box.createHorizontalBox();
      box0.getGraphics();
      animatedSprite0.draw((Graphics) null, 497, 497, 497, 497);
  }
}
