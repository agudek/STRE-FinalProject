/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 11:03:03 GMT 2018
 */

package nl.tudelft.jpacman.sprite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import nl.tudelft.jpacman.sprite.AnimatedSprite;
import nl.tudelft.jpacman.sprite.EmptySprite;
import nl.tudelft.jpacman.sprite.ImageSprite;
import nl.tudelft.jpacman.sprite.Sprite;
import nl.tudelft.jpacman.sprite.SpriteStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpriteStore_ESTest extends SpriteStore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      BufferedImage bufferedImage0 = new BufferedImage(20, 20, 12);
      ImageSprite imageSprite0 = new ImageSprite(bufferedImage0);
      spriteStore0.createAnimatedSprite(imageSprite0, 755, (-760), false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      ImageSprite imageSprite0 = new ImageSprite((Image) null);
      // Undeclared exception!
      try { 
        spriteStore0.createAnimatedSprite(imageSprite0, 0, (-1930), true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      // Undeclared exception!
      try { 
        spriteStore0.loadSprite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      Sprite[] spriteArray0 = new Sprite[7];
      EmptySprite emptySprite0 = new EmptySprite();
      AnimatedSprite animatedSprite0 = spriteStore0.createAnimatedSprite(emptySprite0, 1468, 8146, false);
      spriteArray0[1] = (Sprite) animatedSprite0;
      // Undeclared exception!
      spriteStore0.createAnimatedSprite(spriteArray0[1], 5279, 0, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      Sprite sprite0 = spriteStore0.loadSprite("");
      // Undeclared exception!
      try { 
        spriteStore0.createAnimatedSprite(sprite0, 596, 1879, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.sprite.ImageSprite", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SpriteStore spriteStore0 = new SpriteStore();
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 2465, true);
      animatedSprite0.restart();
      System.setCurrentTimeMillis(2470);
      // Undeclared exception!
      try { 
        spriteStore0.createAnimatedSprite(animatedSprite0, 2466, 2465, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      ImageSprite imageSprite0 = new ImageSprite(bufferedImage0);
      // Undeclared exception!
      try { 
        spriteStore0.createAnimatedSprite(imageSprite0, 1, 94, true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      // Undeclared exception!
      try { 
        spriteStore0.createAnimatedSprite((Sprite) null, 330, 330, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      Sprite sprite0 = spriteStore0.loadSprite("");
      // Undeclared exception!
      try { 
        spriteStore0.createAnimatedSprite(sprite0, (-3836), (-3836), true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      try { 
        spriteStore0.loadSprite("1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to load 1, resource does not exist.
         //
         verifyException("nl.tudelft.jpacman.sprite.SpriteStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpriteStore spriteStore0 = new SpriteStore();
      Sprite sprite0 = spriteStore0.loadSprite("");
      Sprite sprite1 = spriteStore0.loadSprite("");
      assertSame(sprite1, sprite0);
  }
}
