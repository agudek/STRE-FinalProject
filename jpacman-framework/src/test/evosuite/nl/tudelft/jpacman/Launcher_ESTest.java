/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 11:18:40 GMT 2018
 */

package nl.tudelft.jpacman;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import nl.tudelft.jpacman.Launcher;
import nl.tudelft.jpacman.board.BoardFactory;
import nl.tudelft.jpacman.game.Game;
import nl.tudelft.jpacman.game.GameFactory;
import nl.tudelft.jpacman.level.LevelFactory;
import nl.tudelft.jpacman.level.MapParser;
import nl.tudelft.jpacman.level.PlayerFactory;
import nl.tudelft.jpacman.npc.ghost.GhostFactory;
import nl.tudelft.jpacman.sprite.PacManSprites;
import nl.tudelft.jpacman.ui.PacManUiBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Launcher_ESTest extends Launcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      PacManUiBuilder pacManUiBuilder0 = new PacManUiBuilder();
      launcher0.addSinglePlayerKeys(pacManUiBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      PacManSprites pacManSprites0 = launcher0.getSpriteStore();
      assertNotNull(pacManSprites0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      PlayerFactory playerFactory0 = launcher0.getPlayerFactory();
      assertNotNull(playerFactory0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      MapParser mapParser0 = launcher0.getMapParser();
      assertNotNull(mapParser0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Launcher launcher1 = launcher0.withMapFile((String) null);
      String string0 = launcher1.getLevelMap();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      String string0 = launcher0.getLevelMap();
      assertEquals("/board.txt", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Launcher launcher1 = launcher0.withMapFile("");
      String string0 = launcher1.getLevelMap();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      LevelFactory levelFactory0 = launcher0.getLevelFactory();
      assertNotNull(levelFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      GhostFactory ghostFactory0 = launcher0.getGhostFactory();
      assertNotNull(ghostFactory0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      GameFactory gameFactory0 = launcher0.getGameFactory();
      assertNotNull(gameFactory0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      BoardFactory boardFactory0 = launcher0.getBoardFactory();
      assertNotNull(boardFactory0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Launcher launcher1 = launcher0.withMapFile("*Nig6");
      // Undeclared exception!
      try { 
        launcher1.makeLevel();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get resource for: *Nig6
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      launcher0.withMapFile((String) null);
      // Undeclared exception!
      try { 
        launcher0.makeLevel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Launcher launcher1 = launcher0.withMapFile((String) null);
      // Undeclared exception!
      try { 
        launcher1.makeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      launcher0.withMapFile("");
      // Undeclared exception!
      try { 
        launcher0.launch();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input text lines are not of equal width.
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Launcher launcher1 = launcher0.withMapFile((String) null);
      // Undeclared exception!
      try { 
        launcher1.launch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      // Undeclared exception!
      try { 
        launcher0.launch();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      // Undeclared exception!
      try { 
        launcher0.makeLevel();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      // Undeclared exception!
      try { 
        launcher0.dispose();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Game game0 = launcher0.getGame();
      assertNull(game0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      // Undeclared exception!
      try { 
        launcher0.addSinglePlayerKeys((PacManUiBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.Launcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      Launcher launcher1 = launcher0.withMapFile("vGm4+Y");
      // Undeclared exception!
      try { 
        launcher1.makeGame();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get resource for: vGm4+Y
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        Launcher.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Launcher launcher0 = new Launcher();
      // Undeclared exception!
      try { 
        launcher0.makeGame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }
}
