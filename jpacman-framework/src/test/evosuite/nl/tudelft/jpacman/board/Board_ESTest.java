/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 10:53:34 GMT 2018
 */

package nl.tudelft.jpacman.board;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import nl.tudelft.jpacman.board.Board;
import nl.tudelft.jpacman.board.Square;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Square[][] squareArray0 = new Square[1][7];
      Square[] squareArray1 = new Square[0];
      squareArray0[0] = squareArray1;
      Board board0 = new Board(squareArray0);
      // Undeclared exception!
      try { 
        board0.squareAt(0, 886);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Square[][] squareArray0 = new Square[1][7];
      Square[] squareArray1 = new Square[0];
      squareArray0[0] = squareArray1;
      Board board0 = new Board(squareArray0);
      // Undeclared exception!
      try { 
        board0.squareAt(0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Square[][] squareArray0 = new Square[1][6];
      Square[] squareArray1 = new Square[0];
      squareArray0[0] = squareArray1;
      Board board0 = new Board(squareArray0);
      // Undeclared exception!
      try { 
        board0.squareAt(1, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Square[][] squareArray0 = new Square[0][2];
      Board board0 = new Board(squareArray0);
      boolean boolean0 = board0.invariant();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Square[][] squareArray0 = new Square[0][4];
      Board board0 = new Board(squareArray0);
      int int0 = board0.getWidth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Square[][] squareArray0 = new Square[0][3];
      Board board0 = new Board(squareArray0);
      // Undeclared exception!
      try { 
        board0.getHeight();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("nl.tudelft.jpacman.board.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Square[][] squareArray0 = new Square[0][7];
      Board board0 = new Board(squareArray0);
      boolean boolean0 = board0.withinBorders((-4069), (-2451));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Square[][] squareArray0 = new Square[1][7];
      Square[] squareArray1 = new Square[0];
      squareArray0[0] = squareArray1;
      Board board0 = new Board(squareArray0);
      int int0 = board0.getWidth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Square[][] squareArray0 = new Square[7][0];
      Board board0 = new Board(squareArray0);
      boolean boolean0 = board0.withinBorders(0, (-43));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Square[][] squareArray0 = new Square[3][0];
      Board board0 = new Board(squareArray0);
      boolean boolean0 = board0.withinBorders(2, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Square[][] squareArray0 = new Square[3][0];
      Board board0 = new Board(squareArray0);
      // Undeclared exception!
      try { 
        board0.squareAt(348, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Square[][] squareArray0 = new Square[27][8];
      Board board0 = null;
      try {
        board0 = new Board(squareArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Initial grid cannot contain null squares
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Board board0 = null;
      try {
        board0 = new Board((Square[][]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Square[][] squareArray0 = new Square[1][7];
      Square[] squareArray1 = new Square[0];
      squareArray0[0] = squareArray1;
      Board board0 = new Board(squareArray0);
      int int0 = board0.getHeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Square[][] squareArray0 = new Square[0][7];
      Board board0 = new Board(squareArray0);
      boolean boolean0 = board0.withinBorders(1403, 1403);
      assertFalse(boolean0);
  }
}
