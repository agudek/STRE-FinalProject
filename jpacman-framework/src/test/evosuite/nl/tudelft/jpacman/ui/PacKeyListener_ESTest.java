/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 11:17:39 GMT 2018
 */

package nl.tudelft.jpacman.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Box;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import nl.tudelft.jpacman.ui.Action;
import nl.tudelft.jpacman.ui.PacKeyListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PacKeyListener_ESTest extends PacKeyListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Action> hashMap0 = new HashMap<Integer, Action>();
      PacKeyListener pacKeyListener0 = new PacKeyListener(hashMap0);
      JPopupMenu jPopupMenu0 = new JPopupMenu((String) null);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      Integer integer0 = new Integer(0);
      Action action0 = mock(Action.class, new ViolatedAssumptionAnswer());
      hashMap0.put(integer0, action0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 0, 0L, 0, 0, 'w', menuElementArray0, menuSelectionManager0);
      pacKeyListener0.keyPressed(menuKeyEvent0);
      assertEquals(0L, menuKeyEvent0.getWhen());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Integer, Action> hashMap0 = new HashMap<Integer, Action>();
      PacKeyListener pacKeyListener0 = new PacKeyListener(hashMap0);
      // Undeclared exception!
      try { 
        pacKeyListener0.keyPressed((KeyEvent) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Action> hashMap0 = new HashMap<Integer, Action>();
      PacKeyListener pacKeyListener0 = new PacKeyListener(hashMap0);
      JPopupMenu jPopupMenu0 = new JPopupMenu((String) null);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 0, 0L, 0, 0, 'w', menuElementArray0, menuSelectionManager0);
      pacKeyListener0.keyPressed(menuKeyEvent0);
      assertFalse(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PacKeyListener pacKeyListener0 = null;
      try {
        pacKeyListener0 = new PacKeyListener((Map<Integer, Action>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Integer, Action> hashMap0 = new HashMap<Integer, Action>();
      PacKeyListener pacKeyListener0 = new PacKeyListener(hashMap0);
      JPopupMenu jPopupMenu0 = new JPopupMenu((String) null);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 0, 0L, 0, 0, 'w', menuElementArray0, menuSelectionManager0);
      pacKeyListener0.keyReleased(menuKeyEvent0);
      assertFalse(menuKeyEvent0.isActionKey());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Integer, Action> hashMap0 = new HashMap<Integer, Action>();
      PacKeyListener pacKeyListener0 = new PacKeyListener(hashMap0);
      Component component0 = Box.createHorizontalStrut(0);
      KeyEvent keyEvent0 = new KeyEvent(component0, 0, 0, 0, 0, '>');
      pacKeyListener0.keyTyped(keyEvent0);
      assertFalse(keyEvent0.isConsumed());
  }
}
