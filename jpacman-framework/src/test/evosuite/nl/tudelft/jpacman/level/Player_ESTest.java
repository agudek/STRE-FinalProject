/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 11:21:05 GMT 2018
 */

package nl.tudelft.jpacman.level;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import nl.tudelft.jpacman.board.Direction;
import nl.tudelft.jpacman.level.Player;
import nl.tudelft.jpacman.sprite.AnimatedSprite;
import nl.tudelft.jpacman.sprite.Sprite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 596, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      assertTrue(player0.isAlive());
      
      player0.setAlive(false);
      player0.isAlive();
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[2];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      player0.addPoints(1470);
      int int0 = player0.getScore();
      assertEquals(1470, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false);
      Player player0 = new Player((Map<Direction, Sprite>) null, animatedSprite0);
      // Undeclared exception!
      try { 
        player0.getSprite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.level.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[2];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      Sprite sprite0 = player0.getSprite();
      assertEquals(0, player0.getScore());
      assertNull(sprite0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Sprite[] spriteArray0 = new Sprite[2];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, (-3030), true, true);
      Player player0 = new Player((Map<Direction, Sprite>) null, animatedSprite0);
      assertTrue(player0.isAlive());
      
      player0.setAlive(false);
      assertFalse(player0.isAlive());
      
      player0.getSprite();
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[2];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      player0.setAlive(true);
      assertEquals(0, player0.getScore());
      assertTrue(player0.isAlive());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[2];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      boolean boolean0 = player0.isAlive();
      assertEquals(0, player0.getScore());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      int int0 = player0.getScore();
      assertEquals(0, int0);
      assertTrue(player0.isAlive());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      player0.addPoints((-1845));
      int int0 = player0.getScore();
      assertEquals((-1845), int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Player player0 = null;
      try {
        player0 = new Player(hashMap0, (AnimatedSprite) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.level.Player", e);
      }
  }
}
