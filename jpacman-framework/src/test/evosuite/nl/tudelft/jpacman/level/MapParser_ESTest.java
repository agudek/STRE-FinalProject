/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 10:45:42 GMT 2018
 */

package nl.tudelft.jpacman.level;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import nl.tudelft.jpacman.board.BoardFactory;
import nl.tudelft.jpacman.board.Square;
import nl.tudelft.jpacman.level.Level;
import nl.tudelft.jpacman.level.LevelFactory;
import nl.tudelft.jpacman.level.MapParser;
import nl.tudelft.jpacman.npc.NPC;
import nl.tudelft.jpacman.npc.ghost.GhostFactory;
import nl.tudelft.jpacman.sprite.PacManSprites;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapParser_ESTest extends MapParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("tGy(n=.fmT");
      vector0.add("");
      // Undeclared exception!
      try { 
        mapParser0.parseMap((List<String>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input text lines are not of equal width.
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, (GhostFactory) null);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 131);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((InputStream) pushbackInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid character at 2,0: \u0000
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      char[][] charArray0 = new char[7][7];
      char[] charArray1 = new char[1];
      charArray1[0] = ' ';
      charArray0[0] = charArray1;
      charArray0[1] = charArray1;
      // Undeclared exception!
      try { 
        mapParser0.parseMap(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid character at 2,0: \u0000
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      char[][] charArray0 = new char[5][1];
      char[] charArray1 = new char[0];
      charArray0[0] = charArray1;
      Level level0 = mapParser0.parseMap(charArray0);
      assertFalse(level0.isInProgress());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      char[][] charArray0 = new char[0][2];
      // Undeclared exception!
      try { 
        mapParser0.parseMap(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      char[][] charArray0 = new char[3][9];
      char[] charArray1 = new char[1];
      charArray1[0] = 'G';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        mapParser0.parseMap(charArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((List<String>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory((PacManSprites) null);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory((PacManSprites) null);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)40, 132);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      mapParser0.parseMap((InputStream) pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory((PacManSprites) null);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((InputStream) byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.board.BoardFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, (GhostFactory) null);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-88), 9);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((InputStream) pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)49);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      try { 
        mapParser0.parseMap((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((InputStream) byteArrayInputStream0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser((LevelFactory) null, boardFactory0);
      Square[][] squareArray0 = new Square[8][9];
      LinkedList<NPC> linkedList0 = new LinkedList<NPC>();
      ArrayList<Square> arrayList0 = new ArrayList<Square>();
      // Undeclared exception!
      try { 
        mapParser0.addSquare(squareArray0, linkedList0, arrayList0, 0, 4320, 'Y');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid character at 0,4320: Y
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GhostFactory ghostFactory0 = new GhostFactory((PacManSprites) null);
      LevelFactory levelFactory0 = new LevelFactory((PacManSprites) null, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory((PacManSprites) null);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      Vector<NPC> vector0 = new Vector<NPC>();
      Stack<Square> stack0 = new Stack<Square>();
      // Undeclared exception!
      try { 
        mapParser0.addSquare((Square[][]) null, vector0, stack0, 0, 699, 'P');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.board.BoardFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      MapParser mapParser0 = new MapParser(levelFactory0, (BoardFactory) null);
      Square[][] squareArray0 = new Square[0][4];
      Vector<Square> vector0 = new Vector<Square>();
      // Undeclared exception!
      try { 
        mapParser0.addSquare(squareArray0, (List<NPC>) null, vector0, (-289), (-289), '#');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -289
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      Vector<String> vector0 = new Vector<String>(0, 0);
      vector0.add("CLASS_BODY");
      // Undeclared exception!
      try { 
        mapParser0.parseMap((List<String>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid character at 0,0: C
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap("Fxa@:U2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get resource for: Fxa@:U2
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input text lines are not of equal width.
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      // Undeclared exception!
      try { 
        mapParser0.parseMap((List<String>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input text lines cannot be empty.
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((List<String>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input text cannot be null.
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      char[][] charArray0 = new char[4][6];
      char[] charArray1 = new char[7];
      charArray1[0] = 'P';
      charArray1[1] = '.';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        mapParser0.parseMap(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid character at 0,2: \u0000
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PacManSprites pacManSprites0 = new PacManSprites();
      GhostFactory ghostFactory0 = new GhostFactory(pacManSprites0);
      LevelFactory levelFactory0 = new LevelFactory(pacManSprites0, ghostFactory0);
      BoardFactory boardFactory0 = new BoardFactory(pacManSprites0);
      MapParser mapParser0 = new MapParser(levelFactory0, boardFactory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      mapParser0.parseMap((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        mapParser0.parseMap((InputStream) byteArrayInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input text must consist of at least 1 row.
         //
         verifyException("nl.tudelft.jpacman.level.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoardFactory boardFactory0 = new BoardFactory((PacManSprites) null);
      MapParser mapParser0 = new MapParser((LevelFactory) null, boardFactory0);
      char[][] charArray0 = new char[8][4];
      char[] charArray1 = new char[3];
      charArray1[0] = 'G';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        mapParser0.parseMap(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.board.BoardFactory", e);
      }
  }
}
