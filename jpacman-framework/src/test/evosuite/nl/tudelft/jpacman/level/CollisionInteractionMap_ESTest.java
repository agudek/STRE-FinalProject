/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 10:55:33 GMT 2018
 */

package nl.tudelft.jpacman.level;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.util.HashMap;
import java.util.Hashtable;
import nl.tudelft.jpacman.board.Direction;
import nl.tudelft.jpacman.level.CollisionInteractionMap;
import nl.tudelft.jpacman.level.Pellet;
import nl.tudelft.jpacman.level.Player;
import nl.tudelft.jpacman.sprite.AnimatedSprite;
import nl.tudelft.jpacman.sprite.ImageSprite;
import nl.tudelft.jpacman.sprite.Sprite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollisionInteractionMap_ESTest extends CollisionInteractionMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Class<Pellet> class0 = Pellet.class;
      CollisionInteractionMap.CollisionHandler<Pellet, Pellet> collisionInteractionMap_CollisionHandler0 = (CollisionInteractionMap.CollisionHandler<Pellet, Pellet>) mock(CollisionInteractionMap.CollisionHandler.class, new ViolatedAssumptionAnswer());
      collisionInteractionMap0.onCollision(class0, class0, collisionInteractionMap_CollisionHandler0);
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 0, true, true);
      Sprite sprite0 = animatedSprite0.split(0, 0, 0, 0);
      Pellet pellet0 = new Pellet(0, sprite0);
      collisionInteractionMap0.collide(pellet0, pellet0);
      assertEquals(0, pellet0.getValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Class<Pellet> class0 = Pellet.class;
      Class<Player> class1 = Player.class;
      CollisionInteractionMap.CollisionHandler<Pellet, Player> collisionInteractionMap_CollisionHandler0 = (CollisionInteractionMap.CollisionHandler<Pellet, Player>) mock(CollisionInteractionMap.CollisionHandler.class, new ViolatedAssumptionAnswer());
      collisionInteractionMap0.onCollision(class0, class1, collisionInteractionMap_CollisionHandler0);
      ImageSprite imageSprite0 = new ImageSprite((Image) null);
      Pellet pellet0 = new Pellet(309, imageSprite0);
      Hashtable<Direction, Sprite> hashtable0 = new Hashtable<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[1];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 45, true, false);
      Player player0 = new Player(hashtable0, animatedSprite0);
      collisionInteractionMap0.collide(pellet0, player0);
      assertTrue(player0.isAlive());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Class<Player> class0 = Player.class;
      Class<Pellet> class1 = Pellet.class;
      collisionInteractionMap0.onCollision(class0, class1, true, (CollisionInteractionMap.CollisionHandler<Player, Pellet>) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Class<Pellet> class0 = Pellet.class;
      Class<Player> class1 = Player.class;
      collisionInteractionMap0.onCollision(class0, class1, (CollisionInteractionMap.CollisionHandler<Pellet, Player>) null);
      Pellet pellet0 = new Pellet(11, (Sprite) null);
      Hashtable<Direction, Sprite> hashtable0 = new Hashtable<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 11, true, true);
      Player player0 = new Player(hashtable0, animatedSprite0);
      collisionInteractionMap0.collide(pellet0, player0);
      assertFalse(player0.hasSquare());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[1];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 1, false);
      Class<Pellet> class0 = Pellet.class;
      Player player0 = new Player(hashMap0, animatedSprite0);
      Pellet pellet0 = new Pellet(1, spriteArray0[0]);
      CollisionInteractionMap.CollisionHandler<Pellet, Pellet> collisionInteractionMap_CollisionHandler0 = (CollisionInteractionMap.CollisionHandler<Pellet, Pellet>) mock(CollisionInteractionMap.CollisionHandler.class, new ViolatedAssumptionAnswer());
      collisionInteractionMap0.onCollision(class0, class0, false, collisionInteractionMap_CollisionHandler0);
      collisionInteractionMap0.collide(pellet0, player0);
      assertEquals(Direction.EAST, player0.getDirection());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      HashMap<Direction, Sprite> hashMap0 = new HashMap<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[1];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 1, false);
      Player player0 = new Player(hashMap0, animatedSprite0);
      Pellet pellet0 = new Pellet(1, spriteArray0[0]);
      collisionInteractionMap0.collide(player0, pellet0);
      assertEquals(Direction.EAST, player0.getDirection());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Class<Pellet> class0 = Pellet.class;
      Class<Player> class1 = Player.class;
      collisionInteractionMap0.onCollision(class0, class1, (CollisionInteractionMap.CollisionHandler<Pellet, Player>) null);
      Pellet pellet0 = new Pellet(11, (Sprite) null);
      Hashtable<Direction, Sprite> hashtable0 = new Hashtable<Direction, Sprite>();
      Sprite[] spriteArray0 = new Sprite[0];
      AnimatedSprite animatedSprite0 = new AnimatedSprite(spriteArray0, 11, true, true);
      Player player0 = new Player(hashtable0, animatedSprite0);
      // Undeclared exception!
      try { 
        collisionInteractionMap0.collide(player0, pellet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler", e);
      }
  }
}
