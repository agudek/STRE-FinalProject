/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 12 11:20:46 GMT 2018
 */

package nl.tudelft.jpacman.game;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import nl.tudelft.jpacman.board.Board;
import nl.tudelft.jpacman.board.Square;
import nl.tudelft.jpacman.game.SinglePlayerGame;
import nl.tudelft.jpacman.level.CollisionInteractionMap;
import nl.tudelft.jpacman.level.CollisionMap;
import nl.tudelft.jpacman.level.Level;
import nl.tudelft.jpacman.level.Player;
import nl.tudelft.jpacman.npc.NPC;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SinglePlayerGame_ESTest extends SinglePlayerGame_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      Vector<NPC> vector0 = new Vector<NPC>();
      Level level0 = new Level((Board) null, vector0, (List<Square>) null, (CollisionMap) null);
      SinglePlayerGame singlePlayerGame0 = null;
      try {
        singlePlayerGame0 = new SinglePlayerGame(player0, level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.jpacman.level.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      ArrayList<NPC> arrayList0 = new ArrayList<NPC>();
      ArrayList<Square> arrayList1 = new ArrayList<Square>();
      Level level0 = new Level((Board) null, arrayList0, arrayList1, (CollisionMap) null);
      SinglePlayerGame singlePlayerGame0 = null;
      try {
        singlePlayerGame0 = new SinglePlayerGame(player0, level0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      Vector<NPC> vector0 = new Vector<NPC>(859, (-1));
      Vector<Square> vector1 = new Vector<Square>();
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Level level0 = new Level((Board) null, vector0, vector1, collisionInteractionMap0);
      SinglePlayerGame singlePlayerGame0 = null;
      try {
        singlePlayerGame0 = new SinglePlayerGame(player0, level0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      SinglePlayerGame singlePlayerGame0 = null;
      try {
        singlePlayerGame0 = new SinglePlayerGame(player0, (Level) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SinglePlayerGame singlePlayerGame0 = null;
      try {
        singlePlayerGame0 = new SinglePlayerGame((Player) null, (Level) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<NPC> arrayList0 = new ArrayList<NPC>();
      LinkedList<Square> linkedList0 = new LinkedList<Square>();
      linkedList0.add((Square) null);
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      Level level0 = new Level((Board) null, arrayList0, linkedList0, collisionInteractionMap0);
      SinglePlayerGame singlePlayerGame0 = new SinglePlayerGame(player0, level0);
      Level level1 = singlePlayerGame0.getLevel();
      assertFalse(level1.isInProgress());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<NPC> arrayList0 = new ArrayList<NPC>();
      LinkedList<Square> linkedList0 = new LinkedList<Square>();
      linkedList0.add((Square) null);
      CollisionInteractionMap collisionInteractionMap0 = new CollisionInteractionMap();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      Level level0 = new Level((Board) null, arrayList0, linkedList0, collisionInteractionMap0);
      SinglePlayerGame singlePlayerGame0 = new SinglePlayerGame(player0, level0);
      List<Player> list0 = singlePlayerGame0.getPlayers();
      assertEquals(1, list0.size());
  }
}
