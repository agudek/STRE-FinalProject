/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 12 11:20:46 GMT 2018
 */

package nl.tudelft.jpacman.game;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SinglePlayerGame_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "nl.tudelft.jpacman.game.SinglePlayerGame"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/home/agudek/Documents/STRE/final_project/jpacman-framework"); 
    java.lang.System.setProperty("user.home", "/home/agudek"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "agudek"); 
    java.lang.System.setProperty("user.timezone", "Europe/Amsterdam"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SinglePlayerGame_ESTest_scaffolding.class.getClassLoader() ,
      "com.github.javaparser.ast.expr.ArrayAccessExpr",
      "com.github.javaparser.ast.stmt.ContinueStmt",
      "com.github.javaparser.ast.expr.ClassExpr",
      "com.github.javaparser.ast.stmt.WhileStmt",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "com.google.common.math.LongMath$1",
      "com.google.common.hash.Striped64$1",
      "com.github.javaparser.ast.expr.InstanceOfExpr",
      "com.github.javaparser.metamodel.BlockCommentMetaModel",
      "com.github.javaparser.ast.stmt.UnparsableStmt",
      "com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt",
      "org.checkerframework.checker.nullness.qual.UnknownKeyFor",
      "nl.tudelft.jpacman.level.Level$LevelObserver",
      "com.google.common.hash.BloomFilter$Strategy",
      "nl.tudelft.jpacman.game.Game",
      "com.github.javaparser.ast.expr.LiteralExpr",
      "com.github.javaparser.ast.type.Type",
      "com.github.javaparser.ast.expr.CharLiteralExpr",
      "nl.tudelft.jpacman.npc.ghost.Ghost",
      "com.github.javaparser.ast.nodeTypes.NodeWithRange",
      "nl.tudelft.jpacman.board.Unit",
      "com.github.javaparser.ast.modules.ModuleOpensStmt",
      "com.github.javaparser.ast.expr.SimpleName",
      "com.github.javaparser.metamodel.LiteralExprMetaModel",
      "nl.tudelft.jpacman.level.Pellet",
      "com.google.common.base.Converter$IdentityConverter",
      "com.github.javaparser.metamodel.ExpressionMetaModel",
      "com.github.javaparser.ast.type.VoidType",
      "com.github.javaparser.ast.expr.VariableDeclarationExpr",
      "com.github.javaparser.ast.Modifier",
      "com.github.javaparser.ast.stmt.ThrowStmt",
      "com.github.javaparser.ast.modules.ModuleRequiresStmt",
      "com.github.javaparser.ast.modules.ModuleUsesStmt",
      "nl.tudelft.jpacman.level.Level$NpcMoveTask",
      "com.google.common.base.Predicate",
      "nl.tudelft.jpacman.level.CollisionMap",
      "com.github.javaparser.HasParentNode",
      "com.github.javaparser.ast.expr.ArrayInitializerExpr",
      "com.google.common.hash.Striped64",
      "com.github.javaparser.ast.nodeTypes.NodeWithOptionalBlockStmt",
      "com.github.javaparser.ast.expr.LambdaExpr",
      "com.github.javaparser.ast.expr.ConditionalExpr",
      "com.github.javaparser.ast.expr.AnnotationExpr",
      "com.github.javaparser.ast.Node$Parsedness",
      "org.checkerframework.framework.qual.TypeUseLocation",
      "com.github.javaparser.ast.body.AnnotationMemberDeclaration",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "org.checkerframework.framework.qual.MonotonicQualifier",
      "com.github.javaparser.ast.StubUnit",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.github.javaparser.ast.stmt.SynchronizedStmt",
      "com.github.javaparser.ast.nodeTypes.NodeWithConstructors",
      "com.github.javaparser.ast.Node$TreeTraversal",
      "org.checkerframework.framework.qual.SubtypeOf",
      "org.checkerframework.framework.qual.DefaultQualifierInHierarchy",
      "com.github.javaparser.ast.expr.NameExpr",
      "com.github.javaparser.ast.stmt.IfStmt",
      "org.checkerframework.framework.qual.TypeKind",
      "com.github.javaparser.ast.expr.NormalAnnotationExpr",
      "com.github.javaparser.ast.body.InitializerDeclaration",
      "com.google.common.base.Preconditions",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier",
      "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt",
      "com.google.common.hash.LongAddables$1",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier",
      "com.github.javaparser.ast.type.ClassOrInterfaceType",
      "com.google.common.base.Converter$ConverterComposition",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier",
      "com.github.javaparser.ast.observer.AstObserver",
      "com.github.javaparser.ast.stmt.EmptyStmt",
      "com.github.javaparser.metamodel.LineCommentMetaModel",
      "com.google.common.collect.ImmutableCollection",
      "org.checkerframework.checker.initialization.qual.UnknownInitialization",
      "nl.tudelft.jpacman.board.Square",
      "com.github.javaparser.ast.expr.LiteralStringValueExpr",
      "com.google.common.hash.BloomFilterStrategies",
      "com.github.javaparser.resolution.SymbolResolver",
      "com.github.javaparser.ast.ImportDeclaration",
      "com.github.javaparser.ast.body.ConstructorDeclaration",
      "com.github.javaparser.ast.type.UnionType",
      "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName",
      "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
      "com.github.javaparser.ast.nodeTypes.NodeWithStatements",
      "com.github.javaparser.metamodel.NodeMetaModel",
      "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
      "com.github.javaparser.ast.CompilationUnit",
      "com.github.javaparser.ast.Node",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.github.javaparser.ast.nodeTypes.NodeWithType",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "nl.tudelft.jpacman.sprite.EmptySprite",
      "com.github.javaparser.ast.Node$1",
      "com.google.common.math.LongMath",
      "com.github.javaparser.ast.expr.StringLiteralExpr",
      "com.github.javaparser.ast.expr.EnclosedExpr",
      "com.github.javaparser.ast.ArrayCreationLevel",
      "com.google.common.base.Converter$ReverseConverter",
      "com.github.javaparser.ast.nodeTypes.NodeWithVariables",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "com.github.javaparser.metamodel.NormalAnnotationExprMetaModel",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier",
      "com.github.javaparser.resolution.Resolvable",
      "com.github.javaparser.ast.expr.FieldAccessExpr",
      "com.github.javaparser.ast.expr.TypeExpr",
      "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration",
      "com.github.javaparser.ast.nodeTypes.NodeWithArguments",
      "com.google.common.collect.Lists$1",
      "com.google.common.hash.LongAdder",
      "com.github.javaparser.ast.stmt.ReturnStmt",
      "com.github.javaparser.ast.body.Parameter",
      "com.google.common.base.Supplier",
      "com.google.common.hash.LongAddable",
      "com.github.javaparser.metamodel.CommentMetaModel",
      "com.github.javaparser.metamodel.BaseNodeMetaModel",
      "com.github.javaparser.ast.stmt.CatchClause",
      "com.github.javaparser.ast.nodeTypes.NodeWithExtends",
      "com.google.common.hash.Striped64$Cell",
      "com.github.javaparser.ast.nodeTypes.NodeWithBody",
      "com.github.javaparser.ast.body.VariableDeclarator",
      "com.github.javaparser.ast.modules.ModuleStmt",
      "com.google.common.collect.ImmutableList",
      "com.github.javaparser.ast.nodeTypes.NodeWithTokenRange",
      "nl.tudelft.jpacman.level.Player",
      "org.checkerframework.checker.nullness.qual.Nullable",
      "com.google.common.hash.LongAddables",
      "org.checkerframework.framework.qual.DefaultFor",
      "com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel",
      "com.github.javaparser.ast.expr.BooleanLiteralExpr",
      "com.google.common.hash.BloomFilter",
      "com.github.javaparser.ast.body.BodyDeclaration",
      "com.github.javaparser.ast.stmt.BreakStmt",
      "nl.tudelft.jpacman.game.SinglePlayerGame",
      "com.github.javaparser.ast.observer.ObservableProperty",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.github.javaparser.ast.expr.MethodReferenceExpr",
      "com.github.javaparser.ast.comments.LineComment",
      "com.github.javaparser.ast.expr.MemberValuePair",
      "com.github.javaparser.ast.type.PrimitiveType",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier",
      "com.github.javaparser.ast.body.AnnotationDeclaration",
      "com.github.javaparser.ast.expr.IntegerLiteralExpr",
      "com.github.javaparser.ast.observer.AstObserver$ListChangeType",
      "com.github.javaparser.ast.nodeTypes.NodeWithIdentifier",
      "com.google.common.collect.ImmutableList$SubList",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier",
      "com.github.javaparser.ast.type.IntersectionType",
      "com.github.javaparser.ast.nodeTypes.NodeWithTraversableScope",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.hash.BloomFilterStrategies$1",
      "com.github.javaparser.ast.expr.NullLiteralExpr",
      "com.google.common.hash.BloomFilterStrategies$2",
      "nl.tudelft.jpacman.board.Board",
      "nl.tudelft.jpacman.npc.ghost.Blinky",
      "org.checkerframework.framework.qual.ImplicitFor",
      "nl.tudelft.jpacman.npc.ghost.Inky",
      "com.github.javaparser.ast.expr.ObjectCreationExpr",
      "com.github.javaparser.ast.Node$ObserverRegistrationMode",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "com.github.javaparser.ast.expr.Expression",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers",
      "com.github.javaparser.ast.expr.ArrayCreationExpr",
      "com.github.javaparser.ast.stmt.LabeledStmt",
      "com.github.javaparser.ast.body.TypeDeclaration",
      "com.github.javaparser.ast.expr.MethodCallExpr",
      "com.github.javaparser.ast.stmt.AssertStmt",
      "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
      "org.checkerframework.framework.qual.LiteralKind",
      "com.google.common.hash.Funnel",
      "com.github.javaparser.ast.visitor.Visitable",
      "com.github.javaparser.ast.modules.ModuleExportsStmt",
      "com.github.javaparser.metamodel.ArrayCreationLevelMetaModel",
      "com.github.javaparser.ast.stmt.SwitchEntryStmt",
      "com.github.javaparser.ast.visitor.GenericVisitor",
      "com.github.javaparser.metamodel.LiteralStringValueExprMetaModel",
      "com.github.javaparser.ast.expr.UnaryExpr",
      "com.github.javaparser.ast.comments.Comment",
      "com.github.javaparser.ast.stmt.BlockStmt",
      "com.github.javaparser.ast.PackageDeclaration",
      "com.github.javaparser.ast.stmt.ExpressionStmt",
      "com.github.javaparser.ast.modules.ModuleProvidesStmt",
      "com.google.common.collect.ImmutableAsList",
      "com.github.javaparser.ast.expr.Name",
      "com.google.common.collect.RegularImmutableAsList",
      "com.github.javaparser.ast.body.EnumDeclaration",
      "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments",
      "com.github.javaparser.ast.expr.CastExpr",
      "nl.tudelft.jpacman.level.CollisionInteractionMap",
      "org.checkerframework.checker.initialization.qual.Initialized",
      "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations",
      "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier",
      "com.github.javaparser.ast.nodeTypes.NodeWithOptionalScope",
      "com.github.javaparser.ast.comments.JavadocComment",
      "com.github.javaparser.resolution.types.ResolvedType",
      "com.github.javaparser.ast.expr.MarkerAnnotationExpr",
      "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr",
      "com.github.javaparser.ast.stmt.SwitchStmt",
      "nl.tudelft.jpacman.level.Level",
      "com.google.common.hash.PrimitiveSink",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "com.github.javaparser.ast.comments.BlockComment",
      "nl.tudelft.jpacman.npc.ghost.Pinky",
      "com.github.javaparser.printer.PrettyPrinterConfiguration",
      "com.github.javaparser.ast.visitor.VoidVisitor",
      "com.github.javaparser.ast.body.CallableDeclaration",
      "com.google.common.collect.ImmutableList$1",
      "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
      "com.github.javaparser.ast.body.MethodDeclaration",
      "com.github.javaparser.ast.type.WildcardType",
      "com.github.javaparser.metamodel.IntegerLiteralExprMetaModel",
      "com.github.javaparser.ast.nodeTypes.NodeWithScope",
      "nl.tudelft.jpacman.sprite.Sprite",
      "com.google.common.collect.UnmodifiableIterator",
      "com.github.javaparser.metamodel.AnnotationExprMetaModel",
      "com.github.javaparser.ast.nodeTypes.NodeWithCondition",
      "com.github.javaparser.ast.body.ReceiverParameter",
      "com.github.javaparser.ast.nodeTypes.NodeWithExpression",
      "nl.tudelft.jpacman.board.Direction",
      "com.github.javaparser.ast.expr.ThisExpr",
      "com.github.javaparser.ast.stmt.ForeachStmt",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "org.checkerframework.checker.nullness.qual.MonotonicNonNull",
      "com.github.javaparser.ast.DataKey",
      "com.github.javaparser.ast.observer.Observable",
      "com.github.javaparser.ast.nodeTypes.NodeWithParameters",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "nl.tudelft.jpacman.npc.ghost.Navigation",
      "com.github.javaparser.ast.expr.BinaryExpr",
      "com.google.common.collect.SingletonImmutableList",
      "nl.tudelft.jpacman.npc.NPC",
      "com.google.common.base.Converter",
      "com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel",
      "com.github.javaparser.ast.NodeList",
      "com.github.javaparser.Range",
      "nl.tudelft.jpacman.sprite.AnimatedSprite",
      "com.github.javaparser.ast.type.ReferenceType",
      "com.github.javaparser.JavaToken",
      "com.github.javaparser.ast.type.UnknownType",
      "com.google.common.base.Function",
      "com.github.javaparser.ast.nodeTypes.NodeWithDeclaration",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.primitives.Ints$IntConverter",
      "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt",
      "com.github.javaparser.ast.stmt.ForStmt",
      "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc",
      "com.github.javaparser.ast.stmt.TryStmt",
      "com.github.javaparser.utils.Utils",
      "com.github.javaparser.ast.expr.LongLiteralExpr",
      "com.github.javaparser.TokenRange",
      "com.google.common.collect.ImmutableList$Builder",
      "com.github.javaparser.printer.PrettyPrintVisitor",
      "org.checkerframework.checker.nullness.qual.NonNull",
      "com.github.javaparser.ast.observer.ObservableProperty$Type",
      "nl.tudelft.jpacman.npc.ghost.Clyde",
      "org.checkerframework.framework.qual.InvisibleQualifier",
      "com.github.javaparser.Position",
      "nl.tudelft.jpacman.sprite.ImageSprite",
      "com.github.javaparser.metamodel.CompilationUnitMetaModel",
      "com.github.javaparser.ast.stmt.DoStmt",
      "org.checkerframework.framework.qual.DefaultInUncheckedCodeFor",
      "com.github.javaparser.ast.nodeTypes.NodeWithName",
      "com.github.javaparser.ast.expr.DoubleLiteralExpr",
      "com.github.javaparser.ast.expr.SuperExpr",
      "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.github.javaparser.ast.nodeTypes.NodeWithOptionalLabel",
      "com.github.javaparser.printer.PrettyPrinter",
      "com.github.javaparser.ast.nodeTypes.NodeWithImplements",
      "com.github.javaparser.ast.nodeTypes.NodeWithModifiers",
      "com.github.javaparser.ast.type.ArrayType",
      "com.github.javaparser.ast.type.TypeParameter",
      "com.github.javaparser.ast.body.EnumConstantDeclaration",
      "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions",
      "com.github.javaparser.ast.expr.AssignExpr",
      "com.github.javaparser.ast.stmt.Statement",
      "com.google.common.primitives.Ints",
      "com.github.javaparser.ast.nodeTypes.NodeWithMembers",
      "com.github.javaparser.ast.type.VarType",
      "com.github.javaparser.ast.body.FieldDeclaration",
      "nl.tudelft.jpacman.level.PlayerCollisions",
      "com.github.javaparser.ast.modules.ModuleDeclaration"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("nl.tudelft.jpacman.level.Player", false, SinglePlayerGame_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SinglePlayerGame_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "nl.tudelft.jpacman.game.Game",
      "nl.tudelft.jpacman.game.SinglePlayerGame",
      "org.checkerframework.framework.qual.LiteralKind",
      "org.checkerframework.framework.qual.TypeKind",
      "org.checkerframework.framework.qual.TypeUseLocation",
      "nl.tudelft.jpacman.board.Unit",
      "nl.tudelft.jpacman.level.Player",
      "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
      "nl.tudelft.jpacman.level.CollisionInteractionMap",
      "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
      "nl.tudelft.jpacman.npc.NPC",
      "nl.tudelft.jpacman.npc.ghost.Ghost",
      "nl.tudelft.jpacman.npc.ghost.Blinky",
      "nl.tudelft.jpacman.level.Pellet",
      "nl.tudelft.jpacman.npc.ghost.Inky",
      "nl.tudelft.jpacman.level.Level",
      "nl.tudelft.jpacman.level.PlayerCollisions",
      "nl.tudelft.jpacman.sprite.ImageSprite",
      "nl.tudelft.jpacman.npc.ghost.Pinky",
      "nl.tudelft.jpacman.npc.ghost.Clyde",
      "com.google.common.hash.BloomFilter",
      "com.google.common.hash.BloomFilterStrategies",
      "com.google.common.base.Preconditions",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.google.common.math.LongMath",
      "com.google.common.math.LongMath$1",
      "com.google.common.primitives.Ints",
      "com.google.common.hash.Striped64$1",
      "com.google.common.hash.Striped64",
      "com.google.common.hash.LongAdder",
      "com.google.common.hash.LongAddables$1",
      "com.google.common.hash.LongAddables",
      "nl.tudelft.jpacman.sprite.EmptySprite",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.SingletonImmutableList",
      "nl.tudelft.jpacman.npc.ghost.Navigation",
      "nl.tudelft.jpacman.sprite.AnimatedSprite",
      "com.github.javaparser.printer.PrettyPrinter",
      "com.github.javaparser.printer.PrettyPrinterConfiguration",
      "com.github.javaparser.utils.Utils",
      "com.github.javaparser.ast.DataKey",
      "com.github.javaparser.ast.Node$1",
      "com.github.javaparser.ast.Node",
      "com.github.javaparser.ast.ArrayCreationLevel",
      "nl.tudelft.jpacman.level.Level$NpcMoveTask",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.collect.Lists"
    );
  }
}
