/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:08:05 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.naming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractClassNameCheck_ESTest extends AbstractClassNameCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      int[] intArray0 = abstractClassNameCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {14}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      // Undeclared exception!
      try { 
        abstractClassNameCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      Pattern pattern0 = Pattern.compile("no.abstract.class.modifier");
      abstractClassNameCheck0.setFormat(pattern0);
      assertFalse(abstractClassNameCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      int[] intArray0 = abstractClassNameCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {14}, intArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      int[] intArray0 = abstractClassNameCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {14}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      abstractClassNameCheck0.setIgnoreModifier(true);
      assertEquals(SeverityLevel.ERROR, abstractClassNameCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AbstractClassNameCheck abstractClassNameCheck0 = new AbstractClassNameCheck();
      abstractClassNameCheck0.setIgnoreName(true);
      assertFalse(abstractClassNameCheck0.isCommentNodesRequired());
  }
}
