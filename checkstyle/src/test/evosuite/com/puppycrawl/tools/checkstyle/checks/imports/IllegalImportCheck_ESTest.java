/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:55:13 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.imports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalImportCheck_ESTest extends IllegalImportCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(234);
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      // Undeclared exception!
      try { 
        illegalImportCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST0.setFirstChild(detailAST1);
      detailAST0.addChild(detailAST1);
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      // Undeclared exception!
      illegalImportCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      // Undeclared exception!
      try { 
        illegalImportCheck0.setIllegalPkgs((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      String[] stringArray0 = new String[4];
      stringArray0[2] = ":qR41S [|ep";
      // Undeclared exception!
      try { 
        illegalImportCheck0.setIllegalPkgs(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression ^:qR41S [|ep\\..*
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      // Undeclared exception!
      try { 
        illegalImportCheck0.setIllegalClasses((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "import.illegal";
      stringArray0[1] = "import.illegal";
      stringArray0[2] = "import.illegal";
      stringArray0[3] = ":(FU";
      // Undeclared exception!
      try { 
        illegalImportCheck0.setIllegalClasses(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression :(FU
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      String[] stringArray0 = new String[2];
      illegalImportCheck0.setIllegalPkgs(stringArray0);
      assertNull(illegalImportCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      int[] intArray0 = illegalImportCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addChild(detailAST0);
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "import.illegal";
      stringArray0[1] = "import.illegal";
      stringArray0[2] = "import.illegal";
      stringArray0[3] = "import.illegal";
      stringArray0[4] = "import.illegal";
      stringArray0[5] = "import.illegal";
      stringArray0[6] = "import.illegal";
      stringArray0[7] = "import.illegal";
      stringArray0[8] = "import.illegal";
      illegalImportCheck0.setIllegalClasses(stringArray0);
      illegalImportCheck0.visitToken(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addChild(detailAST0);
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      illegalImportCheck0.setRegexp(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "import.illegal";
      stringArray0[1] = "import.illegal";
      stringArray0[2] = "import.illegal";
      stringArray0[3] = "import.illegal";
      stringArray0[4] = "import.illegal";
      stringArray0[5] = "import.illegal";
      stringArray0[6] = "import.illegal";
      stringArray0[7] = "import.illegal";
      stringArray0[8] = "2jXx";
      illegalImportCheck0.setIllegalClasses(stringArray0);
      illegalImportCheck0.visitToken(detailAST0);
      assertEquals(1, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(30);
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      illegalImportCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      int[] intArray0 = illegalImportCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllegalImportCheck illegalImportCheck0 = new IllegalImportCheck();
      int[] intArray0 = illegalImportCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }
}
