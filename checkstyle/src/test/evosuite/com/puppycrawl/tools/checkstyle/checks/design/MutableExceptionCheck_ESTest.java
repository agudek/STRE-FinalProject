/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:19:57 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.design;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import antlr.BaseAST;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableExceptionCheck_ESTest extends MutableExceptionCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(99);
      mutableExceptionCheck0.leaveToken(detailAST0);
      assertEquals(99, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setNextSibling(detailAST0);
      // Undeclared exception!
      mutableExceptionCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      String[] stringArray0 = new String[0];
      BaseAST.setVerboseStringConversion(true, stringArray0);
      detailAST0.initialize(13, "mutable.exception");
      // Undeclared exception!
      try { 
        mutableExceptionCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("antlr.BaseAST", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      // Undeclared exception!
      try { 
        mutableExceptionCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      int[] intArray0 = mutableExceptionCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {14, 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      mutableExceptionCheck0.leaveToken(detailAST0);
      assertFalse(mutableExceptionCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        mutableExceptionCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // null[-2147483648x-2147483648]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(10, "mutable.exception");
      mutableExceptionCheck0.visitToken(detailAST0);
      assertNull(mutableExceptionCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(14, "mutable.exception");
      // Undeclared exception!
      try { 
        mutableExceptionCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(14, "mutable.exception");
      // Undeclared exception!
      try { 
        mutableExceptionCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      int[] intArray0 = mutableExceptionCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {14, 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      int[] intArray0 = mutableExceptionCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {14, 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      Pattern pattern0 = Pattern.compile("mutable.exception");
      mutableExceptionCheck0.setExtendedClassNameFormat(pattern0);
      assertEquals(SeverityLevel.ERROR, mutableExceptionCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableExceptionCheck mutableExceptionCheck0 = new MutableExceptionCheck();
      Pattern pattern0 = Pattern.compile("mutable.exception");
      mutableExceptionCheck0.setFormat(pattern0);
      assertEquals(SeverityLevel.ERROR, mutableExceptionCheck0.getSeverityLevel());
  }
}
