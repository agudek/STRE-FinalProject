/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:11:35 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.ThreadModeSettings;
import com.puppycrawl.tools.checkstyle.TreeWalker;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.regexp.RegexpOnFilenameCheck;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegexpOnFilenameCheck_ESTest extends RegexpOnFilenameCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      ThreadModeSettings threadModeSettings0 = ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("regexp.filename.match", threadModeSettings0);
      regexpOnFilenameCheck0.configure(defaultConfiguration0);
      MockFile mockFile0 = new MockFile("");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      regexpOnFilenameCheck0.processFiltered(mockFile0, fileText0);
      assertEquals(0L, mockFile0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      MockFile mockFile0 = new MockFile("", "regexp.filename.mismatch");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeWalker treeWalker0 = new TreeWalker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Set<String> set0 = treeWalker0.getExternalResourceLocations();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      FileText fileText0 = new FileText(mockFile0, list0);
      try { 
        regexpOnFilenameCheck0.processFiltered(mockFile0, fileText0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to create canonical path names for C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\regexp.filename.mismatch
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.regexp.RegexpOnFilenameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      Pattern pattern0 = Pattern.compile("regexp.filename.match");
      regexpOnFilenameCheck0.setFileNamePattern(pattern0);
      File file0 = MockFile.createTempFile("com.google.common.base.CharMatcher$NegatedFastMatcher", "regexp.filename.match");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(file0, linkedList0);
      // Undeclared exception!
      try { 
        regexpOnFilenameCheck0.processFiltered(file0, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      Pattern pattern0 = Pattern.compile("h&5bpxWd6ko,,");
      regexpOnFilenameCheck0.setFileNamePattern(pattern0);
      regexpOnFilenameCheck0.setFolderPattern(pattern0);
      MockFile mockFile0 = new MockFile("regexp.filename.mismatch", "regexp.filename.match");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(mockFile0, vector0);
      regexpOnFilenameCheck0.processFiltered(mockFile0, fileText0);
      assertNull(regexpOnFilenameCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      regexpOnFilenameCheck0.setIgnoreFileNameExtensions(true);
      MockFile mockFile0 = new MockFile("", "regexp.filename.mismatch");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeWalker treeWalker0 = new TreeWalker();
      Set<String> set0 = treeWalker0.getExternalResourceLocations();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      FileText fileText0 = new FileText(mockFile0, list0);
      // Undeclared exception!
      try { 
        regexpOnFilenameCheck0.processFiltered(mockFile0, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      File file0 = MockFile.createTempFile("com.google.common.base.CharMatcher$NegatedFastMatcher", "regexp.filename.match");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      regexpOnFilenameCheck0.init();
      FileText fileText0 = new FileText(file0, linkedList0);
      regexpOnFilenameCheck0.processFiltered(file0, fileText0);
      assertNull(regexpOnFilenameCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      Pattern pattern0 = Pattern.compile("h&5bpxWd6ko,,");
      regexpOnFilenameCheck0.setFolderPattern(pattern0);
      MockFile mockFile0 = new MockFile("regexp.filename.mismatch", "regexp.filename.match");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(mockFile0, vector0);
      regexpOnFilenameCheck0.processFiltered(mockFile0, fileText0);
      assertEquals("regexp.filename.match", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      regexpOnFilenameCheck0.init();
      regexpOnFilenameCheck0.init();
      assertEquals(SeverityLevel.ERROR, regexpOnFilenameCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      regexpOnFilenameCheck0.setMatch(false);
      MockFile mockFile0 = new MockFile("unable to create canonical path names for ");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      Pattern pattern0 = Pattern.compile("k%lO\".");
      regexpOnFilenameCheck0.setFolderPattern(pattern0);
      // Undeclared exception!
      try { 
        regexpOnFilenameCheck0.processFiltered(mockFile0, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RegexpOnFilenameCheck regexpOnFilenameCheck0 = new RegexpOnFilenameCheck();
      Pattern pattern0 = Pattern.compile("k%lO\".");
      regexpOnFilenameCheck0.setFolderPattern(pattern0);
      regexpOnFilenameCheck0.init();
      assertEquals(SeverityLevel.ERROR, regexpOnFilenameCheck0.getSeverityLevel());
  }
}
