/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:12:17 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.ant;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask;
import com.puppycrawl.tools.checkstyle.api.AuditListener;
import java.io.File;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.CommandlineJava;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Reference;
import org.apache.tools.ant.types.TarFileSet;
import org.apache.tools.ant.types.ZipFileSet;
import org.apache.tools.ant.types.selectors.ExtendSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckstyleAntTask_ESTest extends CheckstyleAntTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckstyleAntTask.FormatterType checkstyleAntTask_FormatterType0 = new CheckstyleAntTask.FormatterType();
      String[] stringArray0 = checkstyleAntTask_FormatterType0.getValues();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      // Undeclared exception!
      try { 
        checkstyleAntTask0.setFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      Path path0 = checkstyleAntTask0.createClasspath();
      Path path1 = checkstyleAntTask0.createClasspath();
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      CheckstyleAntTask.Formatter checkstyleAntTask_Formatter0 = new CheckstyleAntTask.Formatter();
      MockFile mockFile0 = new MockFile("");
      checkstyleAntTask_Formatter0.setTofile(mockFile0);
      checkstyleAntTask_Formatter0.setUseFile(false);
      AuditListener auditListener0 = checkstyleAntTask_Formatter0.createListener(checkstyleAntTask0);
      assertNotNull(auditListener0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
          CheckstyleAntTask.Formatter checkstyleAntTask_Formatter0 = new CheckstyleAntTask.Formatter();
          MockFile mockFile0 = new MockFile("");
          checkstyleAntTask_Formatter0.setTofile(mockFile0);
          // Undeclared exception!
          try { 
            checkstyleAntTask_Formatter0.createListener(checkstyleAntTask0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsChannelFactory.open(WindowsChannelFactory.java:292)
             // sun.nio.fs.WindowsChannelFactory.newFileChannel(WindowsChannelFactory.java:159)
             // sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:225)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask$Formatter.createDefaultLogger(CheckstyleAntTask.java:706)
             // com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask$Formatter.createListener(CheckstyleAntTask.java:683)
             // sun.reflect.GeneratedMethodAccessor172.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:483)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      CheckstyleAntTask.Formatter checkstyleAntTask_Formatter0 = new CheckstyleAntTask.Formatter();
      CheckstyleAntTask.FormatterType checkstyleAntTask_FormatterType0 = new CheckstyleAntTask.FormatterType();
      checkstyleAntTask_Formatter0.setType(checkstyleAntTask_FormatterType0);
      AuditListener auditListener0 = checkstyleAntTask_Formatter0.createListener(checkstyleAntTask0);
      assertNotNull(auditListener0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      List<File> list0 = checkstyleAntTask0.scanFileSets();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      Project project0 = new Project();
      checkstyleAntTask0.setProject(project0);
      checkstyleAntTask0.setConfig("xx6/UNbHFN");
      CheckstyleAntTask.Property checkstyleAntTask_Property0 = new CheckstyleAntTask.Property();
      checkstyleAntTask0.addProperty(checkstyleAntTask_Property0);
      checkstyleAntTask0.addFileset(zipFileSet0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      Project project0 = new Project();
      project0.init();
      checkstyleAntTask0.setProject(project0);
      checkstyleAntTask0.setConfig("xx6/UNbHFN");
      checkstyleAntTask0.addFileset(zipFileSet0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Unable to create Root Module: config {xx6/UNbHFN}, classpath {null}.
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipFileSet zipFileSet0 = new ZipFileSet();
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.addFileset(zipFileSet0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Must specify 'config'.
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      // Undeclared exception!
      try { 
        checkstyleAntTask0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Must specify at least one of 'file' or nested 'fileset' or 'path'.
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      MockFile mockFile0 = new MockFile("");
      checkstyleAntTask0.setFile(mockFile0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Must specify 'config'.
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setConfig("Running Checkstyle ");
      // Undeclared exception!
      try { 
        checkstyleAntTask0.setConfig("Running Checkstyle ");
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Attribute 'config' has already been set
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.createClasspath();
      checkstyleAntTask0.setClasspathRef((Reference) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Path path0 = commandlineJava0.createClasspath((Project) null);
      checkstyleAntTask0.setClasspath(path0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.setClasspath(path0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // This data type contains a circular reference.
         //
         verifyException("org.apache.tools.ant.types.DataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      CheckstyleAntTask.Formatter checkstyleAntTask_Formatter0 = new CheckstyleAntTask.Formatter();
      checkstyleAntTask0.addFormatter(checkstyleAntTask_Formatter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setExecuteIgnoredModules(false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      ExtendSelector extendSelector0 = new ExtendSelector();
      Path path0 = extendSelector0.getClasspath();
      checkstyleAntTask0.addPath(path0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.execute();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // Must specify 'config'.
         //
         verifyException("com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setMaxErrors(65536);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setFailOnViolation(false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setMaxWarnings(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      TarFileSet tarFileSet0 = new TarFileSet();
      checkstyleAntTask0.addFileset(tarFileSet0);
      // Undeclared exception!
      try { 
        checkstyleAntTask0.scanFileSets();
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for TarFileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setProperties((File) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckstyleAntTask checkstyleAntTask0 = new CheckstyleAntTask();
      checkstyleAntTask0.setFailureProperty("");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckstyleAntTask.Listener checkstyleAntTask_Listener0 = new CheckstyleAntTask.Listener();
      String string0 = checkstyleAntTask_Listener0.getClassname();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckstyleAntTask.Listener checkstyleAntTask_Listener0 = new CheckstyleAntTask.Listener();
      checkstyleAntTask_Listener0.setClassname((String) null);
      assertNull(checkstyleAntTask_Listener0.getClassname());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckstyleAntTask.Property checkstyleAntTask_Property0 = new CheckstyleAntTask.Property();
      String string0 = checkstyleAntTask_Property0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckstyleAntTask.Property checkstyleAntTask_Property0 = new CheckstyleAntTask.Property();
      checkstyleAntTask_Property0.setKey("");
      assertEquals("", checkstyleAntTask_Property0.getKey());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckstyleAntTask.Property checkstyleAntTask_Property0 = new CheckstyleAntTask.Property();
      File file0 = MockFile.createTempFile("H(i9M:F<jX[iIGM*)nV", "H(i9M:F<jX[iIGM*)nV");
      checkstyleAntTask_Property0.setFile(file0);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckstyleAntTask.Property checkstyleAntTask_Property0 = new CheckstyleAntTask.Property();
      checkstyleAntTask_Property0.setValue("");
      assertNull(checkstyleAntTask_Property0.getKey());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckstyleAntTask.Property checkstyleAntTask_Property0 = new CheckstyleAntTask.Property();
      String string0 = checkstyleAntTask_Property0.getKey();
      assertNull(string0);
  }
}
