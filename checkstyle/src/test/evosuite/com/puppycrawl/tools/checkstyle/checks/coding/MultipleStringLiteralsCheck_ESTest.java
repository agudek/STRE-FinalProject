/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:16:45 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipleStringLiteralsCheck_ESTest extends MultipleStringLiteralsCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      Pattern pattern0 = Pattern.compile("", 159);
      multipleStringLiteralsCheck0.setIgnoreStringsRegexp(pattern0);
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setLineNo(159);
      multipleStringLiteralsCheck0.visitToken(detailAST0);
      multipleStringLiteralsCheck0.visitToken(detailAST0);
      // Undeclared exception!
      try { 
        multipleStringLiteralsCheck0.finishTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      multipleStringLiteralsCheck0.setAllowedDuplicates(159);
      Pattern pattern0 = Pattern.compile("", 159);
      multipleStringLiteralsCheck0.setIgnoreStringsRegexp(pattern0);
      DetailAST detailAST0 = new DetailAST();
      multipleStringLiteralsCheck0.visitToken(detailAST0);
      multipleStringLiteralsCheck0.finishTree(detailAST0);
      assertEquals(0, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setText("' is too small ");
      detailAST0.setColumnNo(133);
      multipleStringLiteralsCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      // Undeclared exception!
      try { 
        multipleStringLiteralsCheck0.setIgnoreOccurrenceContext((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      int[] intArray0 = multipleStringLiteralsCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {139}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setText("multiple.string.literal");
      multipleStringLiteralsCheck0.visitToken(detailAST0);
      multipleStringLiteralsCheck0.finishTree(detailAST0);
      assertNull(multipleStringLiteralsCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setText("multiple.string.literal");
      Pattern pattern0 = Pattern.compile("multiple.string.literal");
      multipleStringLiteralsCheck0.setIgnoreStringsRegexp(pattern0);
      multipleStringLiteralsCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        multipleStringLiteralsCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        multipleStringLiteralsCheck0.setIgnoreOccurrenceContext(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given name null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      Pattern pattern0 = Pattern.compile("multiple.string.literal");
      String[] stringArray0 = pattern0.split((CharSequence) "multiple.string.literal");
      multipleStringLiteralsCheck0.setIgnoreOccurrenceContext(stringArray0);
      assertEquals(SeverityLevel.ERROR, multipleStringLiteralsCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      multipleStringLiteralsCheck0.setIgnoreStringsRegexp((Pattern) null);
      assertFalse(multipleStringLiteralsCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      int[] intArray0 = multipleStringLiteralsCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {139}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      int[] intArray0 = multipleStringLiteralsCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {139}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultipleStringLiteralsCheck multipleStringLiteralsCheck0 = new MultipleStringLiteralsCheck();
      DetailAST detailAST0 = new DetailAST();
      multipleStringLiteralsCheck0.beginTree(detailAST0);
      assertNull(multipleStringLiteralsCheck0.getId());
  }
}
