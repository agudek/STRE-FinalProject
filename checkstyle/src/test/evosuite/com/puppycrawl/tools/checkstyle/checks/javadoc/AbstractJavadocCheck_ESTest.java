/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:20:49 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.DetailNode;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.NonEmptyAtclauseDescriptionCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractJavadocCheck_ESTest extends AbstractJavadocCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      javadocParagraphCheck0.init();
      javadocParagraphCheck0.init();
      assertTrue(javadocParagraphCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocParagraphCheck0.visitJavadocToken(javadocNodeImpl0);
      assertEquals(SeverityLevel.ERROR, javadocParagraphCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AtclauseOrderCheck atclauseOrderCheck0 = new AtclauseOrderCheck();
      int[] intArray0 = atclauseOrderCheck0.getRequiredJavadocTokens();
      assertArrayEquals(new int[] {10000}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavadocTagContinuationIndentationCheck javadocTagContinuationIndentationCheck0 = new JavadocTagContinuationIndentationCheck();
      int[] intArray0 = javadocTagContinuationIndentationCheck0.getDefaultJavadocTokens();
      assertArrayEquals(new int[] {10068}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      // Undeclared exception!
      try { 
        nonEmptyAtclauseDescriptionCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.JavadocUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      // Undeclared exception!
      try { 
        javadocParagraphCheck0.visitJavadocToken((DetailNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      // Undeclared exception!
      try { 
        javadocParagraphCheck0.setJavadocTokens((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      int[] intArray0 = singleLineJavadocCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      int[] intArray0 = nonEmptyAtclauseDescriptionCheck0.getRequiredJavadocTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      String[] stringArray0 = new String[22];
      // Undeclared exception!
      try { 
        nonEmptyAtclauseDescriptionCheck0.setJavadocTokens(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown javadoc token name. Given name null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.JavadocUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      String[] stringArray0 = new String[0];
      javadocParagraphCheck0.setJavadocTokens(stringArray0);
      assertNull(javadocParagraphCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SummaryJavadocCheck summaryJavadocCheck0 = new SummaryJavadocCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      summaryJavadocCheck0.beginJavadocTree(javadocNodeImpl0);
      assertNull(javadocNodeImpl0.getText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AtclauseOrderCheck atclauseOrderCheck0 = new AtclauseOrderCheck();
      atclauseOrderCheck0.leaveJavadocToken((DetailNode) null);
      assertNull(atclauseOrderCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      int[] intArray0 = nonEmptyAtclauseDescriptionCheck0.getAcceptableJavadocTokens();
      assertArrayEquals(new int[] {10, 11, 17, 9, 8}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      nonEmptyAtclauseDescriptionCheck0.beginTree((DetailAST) null);
      assertNull(nonEmptyAtclauseDescriptionCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavadocTagContinuationIndentationCheck javadocTagContinuationIndentationCheck0 = new JavadocTagContinuationIndentationCheck();
      boolean boolean0 = javadocTagContinuationIndentationCheck0.acceptJavadocWithNonTightHtml();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      singleLineJavadocCheck0.setViolateExecutionOnNonTightHtml(true);
      assertTrue(singleLineJavadocCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      nonEmptyAtclauseDescriptionCheck0.init();
      assertTrue(nonEmptyAtclauseDescriptionCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavadocTagContinuationIndentationCheck javadocTagContinuationIndentationCheck0 = new JavadocTagContinuationIndentationCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocTagContinuationIndentationCheck0.finishJavadocTree(javadocNodeImpl0);
      assertEquals(0, javadocNodeImpl0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      int[] intArray0 = singleLineJavadocCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      javadocParagraphCheck0.finishTree((DetailAST) null);
      assertTrue(javadocParagraphCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      DetailAST detailAST0 = singleLineJavadocCheck0.getBlockCommentAst();
      assertNull(detailAST0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NonEmptyAtclauseDescriptionCheck nonEmptyAtclauseDescriptionCheck0 = new NonEmptyAtclauseDescriptionCheck();
      int[] intArray0 = nonEmptyAtclauseDescriptionCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      boolean boolean0 = singleLineJavadocCheck0.isCommentNodesRequired();
      assertTrue(boolean0);
  }
}
