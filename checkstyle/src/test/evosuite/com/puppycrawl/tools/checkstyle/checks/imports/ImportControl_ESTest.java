/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:35:07 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.imports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.checks.imports.AbstractImportRule;
import com.puppycrawl.tools.checkstyle.checks.imports.AccessResult;
import com.puppycrawl.tools.checkstyle.checks.imports.ClassImportRule;
import com.puppycrawl.tools.checkstyle.checks.imports.ImportControl;
import com.puppycrawl.tools.checkstyle.checks.imports.MismatchStrategy;
import com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImportControl_ESTest extends ImportControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "qb7 :";
      boolean boolean0 = false;
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl0 = new ImportControl("qb7 :", false, mismatchStrategy0);
      importControl0.checkAccess("qb7 :", ".");
      ImportControl importControl1 = new ImportControl(importControl0, "qb7 :", false);
      PkgImportRule pkgImportRule0 = new PkgImportRule(false, false, ")", true, true);
      importControl0.addImportRule(pkgImportRule0);
      importControl0.locateFinest("Ks JJX_%1Ht");
      importControl0.addChild(importControl1);
      String string1 = ")";
      String string2 = null;
      String string3 = "cJ\\bqk$hwxoT$t_{J";
      // Undeclared exception!
      try { 
        importControl0.checkAccess((String) null, "cJ\bqk$hwxoT$t_{J");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'\r
         // )\\..*
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl0 = new ImportControl("", true, mismatchStrategy0);
      ImportControl importControl1 = new ImportControl("", true, mismatchStrategy0);
      importControl0.addChild(importControl1);
      ImportControl importControl2 = new ImportControl(importControl0, "", true);
      importControl2.addChild(importControl0);
      ImportControl importControl3 = importControl2.locateFinest(")");
      importControl1.addChild(importControl3);
      importControl3.checkAccess("", ")");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImportControl importControl0 = new ImportControl("com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", false);
      ImportControl importControl1 = new ImportControl((String) null, false);
      importControl0.addChild(importControl1);
      PkgImportRule pkgImportRule0 = new PkgImportRule(true, true, "com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", true, true);
      importControl0.addImportRule(pkgImportRule0);
      importControl0.checkAccess("com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", "com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule");
      ImportControl importControl2 = new ImportControl(importControl0, (String) null, true);
      importControl2.addImportRule(pkgImportRule0);
      importControl0.addChild(importControl2);
      importControl0.addChild(importControl2);
      importControl0.addChild(importControl2);
      importControl2.checkAccess("?.xrVS% `K)9", "h5");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DISALLOWED;
      ImportControl importControl0 = new ImportControl("com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", false, mismatchStrategy0);
      ImportControl importControl1 = new ImportControl(importControl0, "com.puppycrawl.tools.checkstyle.checks.imports.ImportControl", false, mismatchStrategy0);
      importControl1.checkAccess((String) null, "{S'f7e1!Y\nB}");
      importControl0.addChild(importControl1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DISALLOWED;
      ImportControl importControl0 = new ImportControl("", false, mismatchStrategy0);
      importControl0.addChild((ImportControl) null);
      importControl0.locateFinest("#3E");
      ImportControl importControl1 = new ImportControl("#3E", false);
      importControl0.addChild(importControl1);
      ClassImportRule classImportRule0 = new ClassImportRule(false, false, "d\"(Xv`", false);
      classImportRule0.verifyImport(".");
      importControl1.addImportRule(classImportRule0);
      ClassImportRule classImportRule1 = new ClassImportRule(false, false, "", false);
      importControl1.addImportRule(classImportRule1);
      importControl1.checkAccess("#3E", ".");
      importControl1.locateFinest("");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl0 = new ImportControl("", false, mismatchStrategy0);
      importControl0.addChild((ImportControl) null);
      String string0 = ".";
      // Undeclared exception!
      try { 
        importControl0.locateFinest(".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImportControl importControl0 = null;
      String string0 = "4z7]K\\W!gZ{<";
      boolean boolean0 = true;
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl1 = null;
      try {
        importControl1 = new ImportControl((ImportControl) null, "4z7]KW!gZ{<", true, mismatchStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      ImportControl importControl0 = new ImportControl((String) null, true);
      // Undeclared exception!
      try { 
        importControl0.locateFinest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "=`>`*>qwD?";
      boolean boolean0 = true;
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DELEGATE_TO_PARENT;
      ImportControl importControl0 = new ImportControl("=`>`*>qwD?", true, mismatchStrategy0);
      boolean boolean1 = false;
      ImportControl importControl1 = null;
      try {
        importControl1 = new ImportControl(importControl0, "j)pwNM,b=,Nl+t", false, mismatchStrategy0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 20\r
         // (?:(?:=`>`*>qwD?))\\.j)pwNM,b=,Nl+t(?:\\..*)?\r
         //                     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImportControl importControl0 = new ImportControl("", false);
      ClassImportRule classImportRule0 = new ClassImportRule(false, false, "", false);
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DISALLOWED;
      ImportControl importControl1 = new ImportControl("SYzs0>t)a|A", false, mismatchStrategy0);
      importControl0.addChild(importControl1);
      importControl0.addImportRule(classImportRule0);
      importControl0.checkAccess("", "");
      importControl0.checkAccess("", "");
      MismatchStrategy mismatchStrategy1 = MismatchStrategy.DELEGATE_TO_PARENT;
      ImportControl importControl2 = new ImportControl("", false, mismatchStrategy1);
      importControl2.addChild(importControl0);
      importControl2.addImportRule((AbstractImportRule) null);
      importControl0.addChild(importControl2);
      importControl2.locateFinest("E|iTH_C:,l");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImportControl importControl0 = null;
      ImportControl importControl1 = null;
      try {
        importControl1 = new ImportControl((ImportControl) null, "Xwca1~DA?YDh+\"n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DELEGATE_TO_PARENT;
      ImportControl importControl0 = new ImportControl("", false, mismatchStrategy0);
      ImportControl importControl1 = new ImportControl(importControl0, "", false);
      importControl1.addChild(importControl0);
      PkgImportRule pkgImportRule0 = new PkgImportRule(true, true, "", false, true);
      pkgImportRule0.verifyImport("");
      importControl1.addImportRule(pkgImportRule0);
      importControl0.checkAccess("N", "N");
      importControl1.checkAccess("N", "N");
      importControl1.addChild(importControl0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl0 = new ImportControl("=rSp'q6#UD.qB?", true, mismatchStrategy0);
      ImportControl importControl1 = new ImportControl(importControl0, "=rSp'q6#UD.qB?", true, mismatchStrategy0);
      importControl1.checkAccess("BwTTA", "UNKNOWN");
      importControl1.addChild(importControl0);
      ImportControl importControl2 = importControl0.locateFinest("BwTTA");
      ImportControl importControl3 = importControl2.locateFinest("BwTTA");
      PkgImportRule pkgImportRule0 = new PkgImportRule(true, true, "BwTTA", true, true);
      pkgImportRule0.verifyImport("UNKNOWN");
      importControl1.addImportRule(pkgImportRule0);
      importControl0.addImportRule(pkgImportRule0);
      importControl3.addImportRule(pkgImportRule0);
      importControl1.addImportRule(pkgImportRule0);
      importControl2.checkAccess("BwTTA", "");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DISALLOWED;
      ImportControl importControl0 = new ImportControl("", false, mismatchStrategy0);
      PkgImportRule pkgImportRule0 = new PkgImportRule(false, false, "", true, true);
      importControl0.addImportRule(pkgImportRule0);
      importControl0.checkAccess("", "");
      AbstractImportRule abstractImportRule0 = null;
      ImportControl importControl1 = new ImportControl("", false, mismatchStrategy0);
      importControl1.addChild(importControl0);
      importControl0.addChild(importControl1);
      importControl0.addImportRule((AbstractImportRule) null);
      String string1 = "";
      // Undeclared exception!
      try { 
        importControl0.checkAccess("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "NU7?q _7p~M{ZrYS";
      boolean boolean0 = true;
      ImportControl importControl0 = null;
      try {
        importControl0 = new ImportControl("NU7?q _7p~M{ZrYS", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 13\r
         // (?:NU7?q _7p~M{ZrYS)(?:\\..*)?\r
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      ImportControl importControl0 = new ImportControl("", false);
      String string1 = "m<19[oRh9^4h7UK`";
      String string2 = "";
      importControl0.checkAccess("", "m<19[oRh9^4h7UK`");
      ImportControl importControl1 = new ImportControl(":tq+1wwR\"@vrX<V]", false);
      ClassImportRule classImportRule0 = new ClassImportRule(false, false, "", false);
      importControl1.addImportRule(classImportRule0);
      importControl0.addChild(importControl1);
      ImportControl importControl2 = null;
      try {
        importControl2 = new ImportControl(importControl0, "m<19[oRh9^4h7UK`", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 30\r
         // \\.(?:m<19[oRh9^4h7UK`)(?:\\..*)?\r
         //                               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ")>=Zn\\dm=E";
      boolean boolean0 = true;
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DELEGATE_TO_PARENT;
      ImportControl importControl0 = null;
      try {
        importControl0 = new ImportControl(")>=Zndm=E", true, mismatchStrategy0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 11\r
         // (?:)>=Zndm=E)(?:\\..*)?\r
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImportControl importControl0 = new ImportControl(".", false);
      ImportControl importControl1 = new ImportControl(importControl0, ".", true);
      importControl1.checkAccess(".", ".");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl0 = new ImportControl("", false, mismatchStrategy0);
      ClassImportRule classImportRule0 = new ClassImportRule(false, false, "", false);
      String string0 = "lkZ^z.xDP1R\\up";
      classImportRule0.verifyImport(string0);
      classImportRule0.verifyImport(string0);
      classImportRule0.verifyImport("");
      importControl0.addImportRule(classImportRule0);
      ImportControl importControl1 = importControl0.locateFinest("");
      importControl1.checkAccess("", string0);
      importControl1.checkAccess(string0, "");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImportControl importControl0 = new ImportControl("com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", false);
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DELEGATE_TO_PARENT;
      ImportControl importControl1 = new ImportControl(importControl0, "tVpZqP;M", true, mismatchStrategy0);
      importControl0.addChild(importControl1);
      ImportControl importControl2 = new ImportControl((String) null, false);
      importControl0.addChild(importControl2);
      PkgImportRule pkgImportRule0 = new PkgImportRule(true, true, "com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", true, true);
      importControl0.addImportRule(pkgImportRule0);
      importControl0.checkAccess("com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule", "com.puppycrawl.tools.checkstyle.checks.imports.PkgImportRule");
      ImportControl importControl3 = new ImportControl(importControl0, (String) null, true);
      importControl3.addImportRule(pkgImportRule0);
      importControl0.addChild(importControl3);
      importControl0.addChild(importControl3);
      importControl0.addChild(importControl3);
      importControl3.checkAccess("?.xrVS% `K)9", "h5");
      importControl2.checkAccess("tVpZqP;M", "tVpZqP;M");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl0 = new ImportControl("W)cEQ=*e1N]kWe/U", false, mismatchStrategy0);
      ImportControl importControl1 = new ImportControl(importControl0, "W)cEQ=*e1N]kWe/U", false);
      importControl1.locateFinest("bRF0'");
      importControl1.checkAccess("fz5iGEA-", "W)cEQ=*e1N]kWe/U");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      ImportControl importControl0 = new ImportControl("", false);
      String string1 = "com.puppycrawl.tools.checkstyle.checks.imports.ClassImportRule";
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.DELEGATE_TO_PARENT;
      ImportControl importControl1 = new ImportControl(importControl0, "com.puppycrawl.tools.checkstyle.checks.imports.ClassImportRule", false, mismatchStrategy0);
      importControl1.addChild(importControl0);
      importControl1.addChild(importControl0);
      String string2 = "\\.";
      importControl1.checkAccess("t?V@6", ".");
      PkgImportRule pkgImportRule0 = new PkgImportRule(false, false, "com.puppycrawl.tools.checkstyle.checks.imports.ClassImportRule", false, false);
      pkgImportRule0.verifyImport("");
      importControl1.addImportRule(pkgImportRule0);
      importControl0.addChild(importControl1);
      importControl0.locateFinest("");
      ImportControl importControl2 = importControl0.locateFinest("");
      importControl2.locateFinest("com.puppycrawl.tools.checkstyle.checks.imports.ClassImportRule");
      ImportControl importControl3 = null;
      try {
        importControl3 = new ImportControl((ImportControl) null, "wik 3r}JPrp", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImportControl importControl0 = new ImportControl("q%rI^gKbi", true);
      ImportControl importControl1 = new ImportControl(importControl0, "q%rI^gKbi", true);
      ClassImportRule classImportRule0 = new ClassImportRule(true, false, "(}", false);
      AccessResult accessResult0 = classImportRule0.verifyImport("(}");
      AccessResult accessResult1 = classImportRule0.verifyImport("");
      importControl0.addImportRule(classImportRule0);
      importControl0.locateFinest("q%rI^gKbi");
      importControl1.addChild(importControl0);
      ImportControl importControl2 = importControl1.locateFinest("Q oe)");
      assertNotNull(importControl2);
      
      importControl0.checkAccess("DELEGATE_TO_PARENT", "Q oe)");
      ClassImportRule classImportRule1 = new ClassImportRule(false, true, "q%rI^gKbi", true);
      classImportRule1.verifyImport("./ljF0I\"wvP}A>egeqg");
      importControl0.addImportRule(classImportRule1);
      ImportControl importControl3 = importControl0.locateFinest(".");
      importControl2.checkAccess("~)n-l", "q%rI^gKbi");
      ImportControl importControl4 = importControl1.locateFinest("");
      importControl2.addChild(importControl3);
      importControl4.addChild(importControl3);
      importControl1.addChild(importControl3);
      importControl4.checkAccess(".", "q%rI^gKbi");
      AccessResult accessResult2 = importControl0.checkAccess("./ljF0I\"wvP}A>egeqg", ".");
      assertNotSame(accessResult2, accessResult0);
      assertNotSame(accessResult2, accessResult1);
      assertSame(importControl0, importControl2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImportControl importControl0 = new ImportControl("", true);
      MismatchStrategy mismatchStrategy0 = MismatchStrategy.ALLOWED;
      ImportControl importControl1 = new ImportControl(importControl0, (String) null, true, mismatchStrategy0);
      MismatchStrategy mismatchStrategy1 = MismatchStrategy.DISALLOWED;
      ImportControl importControl2 = new ImportControl(importControl1, "", false, mismatchStrategy1);
      assertFalse(importControl2.equals((Object)importControl0));
  }
}
