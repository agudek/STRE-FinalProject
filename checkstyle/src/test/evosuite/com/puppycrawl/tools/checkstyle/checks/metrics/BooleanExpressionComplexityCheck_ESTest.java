/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:38:59 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BooleanExpressionComplexityCheck_ESTest extends BooleanExpressionComplexityCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      booleanExpressionComplexityCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, booleanExpressionComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(9);
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown type: null[-2147483648x-2147483648]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(114);
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(113, "booleanExpressionComplexity");
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(112);
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(111);
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(9);
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(8);
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      booleanExpressionComplexityCheck0.leaveToken(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      int[] intArray0 = booleanExpressionComplexityCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {8, 9, 28, 111, 114, 110, 112, 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      int[] intArray0 = booleanExpressionComplexityCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {8, 9, 28}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      booleanExpressionComplexityCheck0.setMax(112);
      assertFalse(booleanExpressionComplexityCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(28);
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      int[] intArray0 = booleanExpressionComplexityCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {8, 9, 28, 111, 114, 110, 112, 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(28);
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      booleanExpressionComplexityCheck0.leaveToken(detailAST0);
      assertNull(booleanExpressionComplexityCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(110, "booleanExpressionComplexity");
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }
}
