/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:28:25 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.sizes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Set;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineLengthCheck_ESTest extends LineLengthCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LineLengthCheck lineLengthCheck0 = new LineLengthCheck();
      MockFile mockFile0 = new MockFile("maxLineLen", "maxLineLen");
      Vector<String> vector0 = new Vector<String>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      vector0.addAll((Collection<? extends String>) set0);
      FileText fileText0 = new FileText(mockFile0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      lineLengthCheck0.setFileContents(fileContents0);
      DetailAST detailAST0 = new DetailAST();
      lineLengthCheck0.beginTree(detailAST0);
      // Undeclared exception!
      lineLengthCheck0.beginTree(detailAST0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LineLengthCheck lineLengthCheck0 = new LineLengthCheck();
      int[] intArray0 = lineLengthCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LineLengthCheck lineLengthCheck0 = new LineLengthCheck();
      MockFile mockFile0 = new MockFile("maxLineLen", "maxLineLen");
      Vector<String> vector0 = new Vector<String>(17, 17);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      vector0.addAll((Collection<? extends String>) set0);
      FileText fileText0 = new FileText(mockFile0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      lineLengthCheck0.setFileContents(fileContents0);
      lineLengthCheck0.setMax(17);
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        lineLengthCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LineLengthCheck lineLengthCheck0 = new LineLengthCheck();
      Pattern pattern0 = Pattern.compile("maxLineLen");
      lineLengthCheck0.setIgnorePattern(pattern0);
      assertFalse(lineLengthCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LineLengthCheck lineLengthCheck0 = new LineLengthCheck();
      int[] intArray0 = lineLengthCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LineLengthCheck lineLengthCheck0 = new LineLengthCheck();
      int[] intArray0 = lineLengthCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }
}
