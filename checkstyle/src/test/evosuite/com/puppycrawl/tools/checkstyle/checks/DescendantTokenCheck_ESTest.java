/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:42:50 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DescendantTokenCheck_ESTest extends DescendantTokenCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((int) (byte) (-18), "01EkB,(=,xL3,BD");
      // Undeclared exception!
      try { 
        descendantTokenCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMinimumDepth((-2331));
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        descendantTokenCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMaximumDepth(0);
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        descendantTokenCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      // Undeclared exception!
      try { 
        descendantTokenCheck0.setLimitedTokens((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        descendantTokenCheck0.setLimitedTokens(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given name null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      String[] stringArray0 = new String[0];
      descendantTokenCheck0.setLimitedTokens(stringArray0);
      assertNull(descendantTokenCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      String[] stringArray0 = new String[3];
      descendantTokenCheck0.setTokens(stringArray0);
      // Undeclared exception!
      try { 
        descendantTokenCheck0.getAcceptableTokens();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given name null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      int[] intArray0 = descendantTokenCheck0.getAcceptableTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMaximumDepth((-706));
      // Undeclared exception!
      try { 
        descendantTokenCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      DetailAST detailAST0 = new DetailAST();
      descendantTokenCheck0.setSumTokenCounts(true);
      detailAST0.initialize(100, "");
      descendantTokenCheck0.visitToken(detailAST0);
      assertNull(descendantTokenCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((int) (byte)1, "01$kB,v=,xL3,BD");
      descendantTokenCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      int[] intArray0 = descendantTokenCheck0.getDefaultTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMinimumMessage("descendant.token.min");
      assertFalse(descendantTokenCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      int[] intArray0 = descendantTokenCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMaximumMessage("");
      assertFalse(descendantTokenCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMinimumDepth(3261);
      descendantTokenCheck0.setSumTokenCounts(true);
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        descendantTokenCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given id 0
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMaximumNumber((-3238));
      assertFalse(descendantTokenCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DescendantTokenCheck descendantTokenCheck0 = new DescendantTokenCheck();
      descendantTokenCheck0.setMinimumNumber((-19));
      assertFalse(descendantTokenCheck0.isCommentNodesRequired());
  }
}
