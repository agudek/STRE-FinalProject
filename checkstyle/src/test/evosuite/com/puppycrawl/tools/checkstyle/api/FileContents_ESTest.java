/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:45:33 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.TextBlock;
import java.io.File;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileContents_ESTest extends FileContents_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "La+E";
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment("1w-#2-1V/}", 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[1] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[4] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[3] = "com.google.common.base.Predicates$OrPredicate";
      stringArray0[5] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[6] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[7] = "$hwpG3JFb";
      FileContents fileContents0 = new FileContents("com.google.common.primitives.Ints$IntConverterpackage-info.java", stringArray0);
      fileContents0.getCppComments();
      fileContents0.getJavadocBefore(4);
      // Undeclared exception!
      try { 
        fileContents0.getJavadocBefore(2815);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/**";
      stringArray0[1] = "/**";
      stringArray0[2] = "package-info.java";
      stringArray0[3] = "/**";
      stringArray0[4] = "package-info.java";
      FileContents fileContents0 = new FileContents("package-info.java", stringArray0);
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("/**", 2, 0, 2157, 1847);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[6] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      fileContents0.getCppComments();
      int int0 = 4;
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment(4, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      fileContents0.getLine(3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "//";
      stringArray0[2] = "//";
      stringArray0[3] = "//";
      stringArray0[4] = "//";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4J=NYypst4ntqpackage-info.java");
      FileContents fileContents0 = new FileContents("//", stringArray0);
      fileContents0.getLine(1);
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("com.puppycrawl.tools.checkstyle.api.FileContents", 1, 1, 1, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "//";
      stringArray0[2] = "//";
      stringArray0[3] = "//";
      stringArray0[4] = "//";
      FileContents fileContents0 = new FileContents("//", stringArray0);
      int int0 = 1;
      int int1 = 99;
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("com.puppycrawl.tools.checkstyle.api.FileContents", 1, 1, 99, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[20];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      String string0 = "}^u^0OM-";
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("", 4, 4, 4, 3204);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "//";
      stringArray0[1] = "//";
      stringArray0[2] = "//";
      stringArray0[3] = "//";
      stringArray0[4] = "//";
      FileContents fileContents0 = new FileContents("//", stringArray0);
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("com.puppycrawl.tools.checkstyle.api.FileContents", 1, 1, 99, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "pX>Xoh}uSMna-G";
      stringArray0[3] = "0Xe^PhjYmQ6WY0";
      stringArray0[4] = "pX>Xoh}uSMna-G";
      stringArray0[5] = "pX>Xoh}uSMna-G";
      stringArray0[6] = "pX>Xoh}uSMna-G";
      stringArray0[7] = "pX>Xoh}uSMna-G";
      stringArray0[8] = stringArray0[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileContents fileContents0 = new FileContents("pX>Xoh}uSMna-G", stringArray0);
      int int0 = (-394);
      fileContents0.getJavadocBefore((-394));
      fileContents0.getText();
      int int1 = 0;
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~V}<6~XB$";
      stringArray0[1] = "~V}<6~XB$";
      stringArray0[2] = "~V}<6~XB$";
      FileContents fileContents0 = new FileContents("~V}<6~XB$", stringArray0);
      int int0 = 2;
      fileContents0.reportSingleLineComment(2, 2);
      fileContents0.reportSingleLineComment(2, 2);
      fileContents0.getBlockComments();
      fileContents0.getLine(2);
      int int1 = 2;
      int int2 = 1290;
      // Undeclared exception!
      try { 
        fileContents0.lineIsBlank(1290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java";
      stringArray0[1] = "A/*'8Q[{[M~ns\"BcVai";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java";
      stringArray0[3] = "com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java";
      stringArray0[4] = "com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java";
      stringArray0[5] = "com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java";
      stringArray0[6] = "com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java";
      FileContents fileContents0 = new FileContents("com.puppycrawl.tools.checkstyle.api.FileContentspackage-info.java", stringArray0);
      fileContents0.getSingleLineComments();
      int int0 = 2;
      fileContents0.lineIsBlank(2);
      fileContents0.getSingleLineComments();
      fileContents0.getCppComments();
      fileContents0.getCComments();
      fileContents0.reportCppComment(2, 2);
      fileContents0.hasIntersectionWithComment(2, 2, 0, 2);
      fileContents0.reportSingleLineComment((String) null, 2, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("A/*'8Q[{[M~ns\"BcVai", 2, (-909), 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**";
      stringArray0[1] = "A/*'8Q[{[M~ns\"BcVai";
      stringArray0[2] = "/**";
      stringArray0[3] = "/**";
      stringArray0[4] = "/**";
      stringArray0[4] = "/**";
      stringArray0[6] = "/**";
      FileContents fileContents0 = new FileContents("/**", stringArray0);
      fileContents0.getSingleLineComments();
      fileContents0.lineIsBlank(2);
      fileContents0.getSingleLineComments();
      fileContents0.getCppComments();
      fileContents0.getCComments();
      fileContents0.reportCppComment(2, 2);
      fileContents0.hasIntersectionWithComment(2, 2, 0, 2);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment((String) null, 2, (-14));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**";
      stringArray0[1] = "A/*'8Q[{[M~ns\"BcVai";
      stringArray0[2] = "/**";
      stringArray0[3] = "/**";
      stringArray0[4] = "/**";
      stringArray0[5] = "/**";
      stringArray0[6] = "/**";
      FileContents fileContents0 = new FileContents("/**", stringArray0);
      fileContents0.getSingleLineComments();
      fileContents0.lineIsBlank(2);
      fileContents0.getSingleLineComments();
      fileContents0.getCppComments();
      fileContents0.getCComments();
      fileContents0.reportCppComment(2, 2);
      fileContents0.hasIntersectionWithComment(2, 2, 0, 2);
      fileContents0.reportSingleLineComment((String) null, 2, 1);
      fileContents0.getJavadocBefore(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      fileContents0.hasIntersectionWithComment((-3327), (-16), 1355, 2);
      fileContents0.hasIntersectionWithComment(2, 2, 2, 2);
      // Undeclared exception!
      try { 
        fileContents0.lineIsBlank((-1750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**";
      stringArray0[1] = "A/*'8Q[{[M~ns\"BcVai";
      stringArray0[2] = "/**";
      stringArray0[3] = "/**";
      stringArray0[4] = "/**";
      stringArray0[5] = "/**";
      stringArray0[6] = "/**";
      FileContents fileContents0 = new FileContents("/**", stringArray0);
      fileContents0.getSingleLineComments();
      int int0 = 2;
      fileContents0.lineIsBlank(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        fileContents0.reportCComment(1, 1510, 2, (-1430));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      fileContents0.getCComments();
      fileContents0.getSingleLineComments();
      fileContents0.getCComments();
      // Undeclared exception!
      try { 
        fileContents0.reportCppComment(2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "La+E";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[4] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      int int0 = 2;
      fileContents0.reportCComment(2, 2, 2, 2);
      int int1 = (-544);
      int int2 = 94;
      fileContents0.getBlockComments();
      fileContents0.hasIntersectionWithComment((-544), (-544), 2031, 2);
      fileContents0.hasIntersectionWithComment(2031, (-544), (-544), (-544));
      int int3 = (-1586);
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment((-1586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("HvV L~I4!8jCVh", "4J=NYypst4ntqpackage-info.java", (File) null);
      Stack<String> stack0 = new Stack<String>();
      FileText fileText0 = new FileText(file0, stack0);
      FileContents fileContents0 = new FileContents(fileText0);
      stack0.ensureCapacity((-1197));
      fileContents0.inPackageInfo();
      fileContents0.getCppComments();
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment((-1078), (-1078));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "La+E";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[4] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      int int0 = 2;
      fileContents0.reportCComment(2, 2, 2, 2);
      int int1 = (-544);
      int int2 = 94;
      fileContents0.getBlockComments();
      fileContents0.hasIntersectionWithComment(113, 113, 2031, 2);
      fileContents0.hasIntersectionWithComment(2031, 113, 113, (-544));
      int int3 = (-1586);
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment((-1586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "/**";
      stringArray0[4] = "/**";
      stringArray0[5] = "/**";
      stringArray0[6] = "/**";
      FileContents fileContents0 = new FileContents("/**", stringArray0);
      fileContents0.getSingleLineComments();
      fileContents0.getCppComments();
      int int0 = 0;
      // Undeclared exception!
      try { 
        fileContents0.reportCppComment(2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "La+E";
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[4] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      int int0 = 2;
      fileContents0.reportCComment(2, 2, 2, 2);
      int int1 = (-544);
      int int2 = 94;
      fileContents0.getBlockComments();
      fileContents0.hasIntersectionWithComment(2031, 113, 113, (-544));
      int int3 = (-1586);
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment((-1586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "l/a+P";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[4] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        fileContents0.reportCComment(2, 2, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**";
      stringArray0[1] = "A/*'8Q[{[M~ns\"BcVai";
      stringArray0[2] = "/**";
      stringArray0[3] = "/**";
      stringArray0[4] = "/**";
      stringArray0[5] = "/**";
      stringArray0[6] = "/**";
      FileContents fileContents0 = new FileContents("/**", stringArray0);
      fileContents0.getSingleLineComments();
      int int0 = 2;
      fileContents0.lineIsBlank(2);
      fileContents0.getSingleLineComments();
      fileContents0.getCppComments();
      fileContents0.getCComments();
      fileContents0.reportCppComment(2, 2);
      fileContents0.hasIntersectionWithComment(2, 2, 0, 2);
      fileContents0.reportSingleLineComment((String) null, 2, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      fileContents0.hasIntersectionWithComment(2, 2, 2, 2);
      int int1 = (-1731);
      // Undeclared exception!
      try { 
        fileContents0.lineIsBlank((-1731));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      fileContents0.getJavadocBefore(0);
      int int0 = (-447);
      fileContents0.lineIsBlank(0);
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment((-447));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7;K&.J^dQd";
      stringArray0[1] = "7;K&.J^dQd";
      stringArray0[2] = "7;K&.J^dQd";
      stringArray0[3] = "7;K&.J^dQd";
      stringArray0[4] = "7;K&.J^dQd";
      FileContents fileContents0 = new FileContents("7;K&.J^dQd", stringArray0);
      // Undeclared exception!
      try { 
        fileContents0.getLine(985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 985
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "0K");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("J}IVtZ(", "0K", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("0K", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("0K", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("J}IVtZ(00K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K\\J}IVtZ(00K", file0.toString());
      assertNotNull(file0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("0K"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FileText fileText0 = new FileText(file0, arrayList0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(arrayList0.contains("0K"));
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("0K", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("0K", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("J}IVtZ(00K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K\\J}IVtZ(00K", file0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileText fileText1 = new FileText(fileText0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(arrayList0.contains("0K"));
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("0K", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("0K", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("J}IVtZ(00K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K\\J}IVtZ(00K", file0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertNotNull(fileText1);
      
      FileContents fileContents0 = new FileContents(fileText1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(fileText0.equals((Object)fileText1));
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(arrayList0.contains("0K"));
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("0K", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("0K", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("J}IVtZ(00K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K\\J}IVtZ(00K", file0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\0K\\J}IVtZ(00K", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      fileContents0.hasIntersectionWithComment((-862048943), 0, 1419, 2652);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      boolean boolean0 = fileContents0.lineIsComment(0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "c#";
      stringArray0[1] = "c#";
      stringArray0[2] = "c#";
      stringArray0[3] = "c#";
      stringArray0[4] = "c#";
      stringArray0[5] = "c#";
      stringArray0[6] = "c#";
      FileContents fileContents0 = new FileContents("c#", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("c#", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportCComment((-64), (-64), (-368), 2469);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "com.google.common.base.CharMatcher$JavaLetter";
      FileContents fileContents0 = new FileContents("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getBlockComments();
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = fileContents0.hasIntersectionWithComment((-1461), (-1461), 0, (-861));
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      
      String string0 = fileContents0.getFileName();
      assertEquals("", string0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertNotNull(string0);
      
      Map<Integer, List<TextBlock>> map1 = fileContents0.getBlockComments();
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      
      boolean boolean1 = fileContents0.inPackageInfo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      
      // Undeclared exception!
      try { 
        fileContents0.reportCComment((-861), 2, (-861), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertNotNull(uRI1);
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertNotNull(mockFile0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      FileText fileText0 = new FileText(mockFile0, list0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("\\tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\\tmp\\foo.bar", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileContents fileContents0 = new FileContents(fileText0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("\\tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\\tmp\\foo.bar", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("\\tmp\\foo.bar", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportCComment(1331, 0, 1331, 1331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L|=z";
      stringArray0[1] = "L|=z";
      stringArray0[2] = "L|=z";
      stringArray0[3] = "L|=z";
      FileContents fileContents0 = new FileContents("L|=z", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("L|=z", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportCComment((-3645), (-1), (-1), 2730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      assertFalse(arrayList0.contains(""));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileText fileText1 = new FileText(fileText0);
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(arrayList0.contains(""));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertNotNull(fileText1);
      
      FileContents fileContents0 = new FileContents(fileText1);
      assertFalse(fileText0.equals((Object)fileText1));
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(arrayList0.contains(""));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertEquals("\\", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportCComment(429, 2, 0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "EMdp";
      stringArray0[2] = "EMdp";
      stringArray0[3] = "EMdp";
      stringArray0[4] = "EMdp";
      FileContents fileContents0 = new FileContents("EMdp", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("EMdp", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getSingleLineComments();
      assertEquals(5, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("EMdp", fileContents0.getFileName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Map<Integer, List<TextBlock>> map1 = fileContents0.getBlockComments();
      assertEquals(5, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("EMdp", fileContents0.getFileName());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      int int0 = (-1060);
      // Undeclared exception!
      try { 
        fileContents0.reportCppComment(0, (-1060));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "BloomFilters must have the same number of hash functions (%s != %s)";
      stringArray0[1] = "BloomFilters must have the same number of hash functions (%s != %s)";
      stringArray0[2] = "BloomFilters must have the same number of hash functions (%s != %s)";
      FileContents fileContents0 = new FileContents("BloomFilters must have the same number of hash functions (%s != %s)", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("BloomFilters must have the same number of hash functions (%s != %s)", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      boolean boolean0 = fileContents0.hasIntersectionWithComment(2, 0, 0, 2);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("BloomFilters must have the same number of hash functions (%s != %s)", fileContents0.getFileName());
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getCComments();
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("BloomFilters must have the same number of hash functions (%s != %s)", fileContents0.getFileName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        fileContents0.getJavadocBefore(2400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%mHxQI";
      stringArray0[1] = "%mHxQI";
      FileContents fileContents0 = new FileContents("%mHxQI", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("%mHxQI", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      boolean boolean0 = fileContents0.lineIsBlank(0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      assertEquals("%mHxQI", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SvTH1^i4Zi= !d]]z&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getCppComments();
      assertEquals(6, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      FileText fileText0 = fileContents0.getText();
      assertEquals(6, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertEquals(6, fileText0.size());
      assertNotNull(fileText0);
      
      Map<Integer, List<TextBlock>> map1 = fileContents0.getBlockComments();
      assertEquals(6, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      
      int int0 = 1593;
      // Undeclared exception!
      try { 
        fileContents0.getJavadocBefore(1593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "com.google.common.primitives.Ints$IntConverter";
      stringArray0[1] = "com.google.common.primitives.Ints$IntConverter";
      stringArray0[2] = "com.google.common.primitives.Ints$IntConverter";
      stringArray0[3] = "com.google.common.primitives.Ints$IntConverter";
      stringArray0[4] = "";
      stringArray0[5] = "com.google.common.primitives.Ints$IntConverter";
      FileContents fileContents0 = new FileContents("com.google.common.primitives.Ints$IntConverter", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      int int0 = (-2465);
      TextBlock textBlock0 = fileContents0.getJavadocBefore((-2465));
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNull(textBlock0);
      
      FileText fileText0 = fileContents0.getText();
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(6, fileText0.size());
      assertNotNull(fileText0);
      
      fileContents0.reportSingleLineComment("_~R4l_s[_|6Q$n=", 2, 2);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getCComments();
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Map<Integer, List<TextBlock>> map1 = fileContents0.getBlockComments();
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      String[] stringArray1 = fileContents0.getLines();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(stringArray1);
      
      Map<Integer, TextBlock> map2 = fileContents0.getCppComments();
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNotNull(map2);
      
      fileContents0.reportCppComment(2, 2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      boolean boolean0 = fileContents0.inPackageInfo();
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      TextBlock textBlock1 = fileContents0.getJavadocBefore(2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNull(textBlock1);
      
      FileText fileText1 = fileContents0.getText();
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(fileText1.equals((Object)fileText0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(fileText1, fileText0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, fileText1.size());
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileText1);
      
      boolean boolean1 = fileContents0.inPackageInfo();
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      FileText fileText2 = fileContents0.getText();
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(fileText2.equals((Object)fileText0));
      assertFalse(fileText2.equals((Object)fileText1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(fileText2, fileText0);
      assertNotSame(fileText2, fileText1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, fileText2.size());
      assertEquals("com.google.common.primitives.Ints$IntConverter", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileText2);
      
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("K!mdhv", 2, (-2465), (-2465), (-2465));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^s*//.*$";
      stringArray0[1] = "^s*//.*$";
      FileContents fileContents0 = new FileContents("^s*//.*$", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("^s*//.*$", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getSingleLineComments();
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("^s*//.*$", fileContents0.getFileName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Map<Integer, List<TextBlock>> map1 = fileContents0.getCComments();
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("^s*//.*$", fileContents0.getFileName());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      String string0 = fileContents0.getFileName();
      assertEquals("^s*//.*$", string0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("^s*//.*$", fileContents0.getFileName());
      assertNotNull(string0);
      
      boolean boolean0 = fileContents0.inPackageInfo();
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("^s*//.*$", fileContents0.getFileName());
      
      Map<Integer, TextBlock> map2 = fileContents0.getSingleLineComments();
      assertTrue(map2.equals((Object)map0));
      assertNotSame(map2, map0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("^s*//.*$", fileContents0.getFileName());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(map2);
      
      // Undeclared exception!
      try { 
        fileContents0.lineIsBlank(677);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.puppycrawl.tools.checkstyle.api.FileContents");
      assertNotNull(mockFile0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      int int0 = 1;
      stack0.setSize(1);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0);
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertFalse(list0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      FileText fileText0 = new FileText(mockFile0, list0);
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertFalse(list0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileContents fileContents0 = new FileContents(fileText0);
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertFalse(list0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      String[] stringArray0 = fileContents0.getLines();
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertFalse(list0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertEquals(0, stringArray0.length);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(stringArray0);
      
      FileText fileText1 = fileContents0.getText();
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertFalse(list0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertNotSame(fileText0, fileText1);
      assertNotSame(fileText1, fileText0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(0, fileText1.size());
      assertNotNull(fileText1);
      
      boolean boolean0 = fileContents0.inPackageInfo();
      assertFalse(fileText0.equals((Object)fileText1));
      assertFalse(boolean0);
      assertFalse(linkedList0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertFalse(list0.contains("com.puppycrawl.tools.checkstyle.api.FileContents"));
      assertNotSame(fileText0, fileText1);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, fileText0.size());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      // Undeclared exception!
      try { 
        fileContents0.reportCComment(1, 1, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      FileText fileText0 = new FileText((File) null, stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileContents fileContents0 = null;
      try {
        fileContents0 = new FileContents(fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "La+E";
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[4] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("Invalid range: ", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      int int0 = 2;
      fileContents0.reportCComment(2, 2, 2, 2);
      assertEquals(8, stringArray0.length);
      assertEquals("Invalid range: ", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      
      int int1 = (-544);
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("Invalid range: ", (-544), 2, 885, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "#lNnc)UT@n,UJ+";
      stringArray0[1] = "#lNnc)UT@n,UJ+";
      stringArray0[2] = "#lNnc)UT@n,UJ+";
      stringArray0[3] = "#lNnc)UT@n,UJ+";
      stringArray0[4] = "#lNnc)UT@n,UJ+";
      stringArray0[5] = "#lNnc)UT@n,UJ+";
      FileContents fileContents0 = new FileContents("#lNnc)UT@n,UJ+", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("#lNnc)UT@n,UJ+", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      String string0 = fileContents0.getFileName();
      assertEquals("#lNnc)UT@n,UJ+", string0);
      assertEquals(6, stringArray0.length);
      assertEquals("#lNnc)UT@n,UJ+", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(string0);
      
      String string1 = fileContents0.getFileName();
      assertEquals("#lNnc)UT@n,UJ+", string1);
      assertEquals(6, stringArray0.length);
      assertEquals("#lNnc)UT@n,UJ+", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(string1);
      
      Map<Integer, TextBlock> map0 = fileContents0.getSingleLineComments();
      assertEquals(6, stringArray0.length);
      assertEquals("#lNnc)UT@n,UJ+", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String string2 = ".7':[K";
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment("#lNnc)UT@n,UJ+", (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "IGNORE_TYPE_VARIABLE_OR_WILDCARD");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(">"));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      FileText fileText0 = new FileText(mockFile1, stack0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(stack0.contains(">"));
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(">", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(">", mockFile0.toString());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>\\IGNORE_TYPE_VARIABLE_OR_WILDCARD", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>", mockFile1.getParent());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileContents fileContents0 = new FileContents(fileText0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(stack0.contains(">"));
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(">", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(">", mockFile0.toString());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>\\IGNORE_TYPE_VARIABLE_OR_WILDCARD", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>", mockFile1.getParent());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, fileText0.size());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>\\IGNORE_TYPE_VARIABLE_OR_WILDCARD", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getCppComments();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(stack0.contains(">"));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(">", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(">", mockFile0.toString());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>\\IGNORE_TYPE_VARIABLE_OR_WILDCARD", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>", mockFile1.getParent());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, fileText0.size());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\>\\IGNORE_TYPE_VARIABLE_OR_WILDCARD", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment("IGNORE_TYPE_VARIABLE_OR_WILDCARD", 0, (-1140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@uWG:GP^uQ_";
      stringArray0[1] = "@uWG:GP^uQ_";
      stringArray0[2] = "@uWG:GP^uQ_";
      FileContents fileContents0 = new FileContents("@uWG:GP^uQ_", stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("@uWG:GP^uQ_", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getBlockComments();
      assertEquals(3, stringArray0.length);
      assertEquals("@uWG:GP^uQ_", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      int int0 = 179;
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment(179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F]{G;S=1)O)(+";
      stringArray0[1] = "F]{G;S=1)O)(+";
      FileContents fileContents0 = new FileContents("F]{G;S=1)O)(+", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("F]{G;S=1)O)(+", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      String string0 = fileContents0.getLine(0);
      assertEquals("F]{G;S=1)O)(+", string0);
      assertEquals(2, stringArray0.length);
      assertEquals("F]{G;S=1)O)(+", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      int int0 = 50;
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("", 0, 0, 50, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kf-qTW#'j8CL'h2F";
      stringArray0[1] = "kf-qTW#'j8CL'h2F";
      stringArray0[2] = "kf-qTW#'j8CL'h2F";
      stringArray0[3] = "kf-qTW#'j8CL'h2F";
      stringArray0[4] = "kf-qTW#'j8CL'h2F";
      stringArray0[5] = "kf-qTW#'j8CL'h2F";
      FileContents fileContents0 = new FileContents("kf-qTW#'j8CL'h2F", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("kf-qTW#'j8CL'h2F", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("", 0, 0, 1234, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m7en2!v%Bi$i0xE}U";
      stringArray0[1] = "m7en2!v%Bi$i0xE}U";
      stringArray0[2] = "m7en2!v%Bi$i0xE}U";
      stringArray0[3] = "m7en2!v%Bi$i0xE}U";
      stringArray0[4] = "m7en2!v%Bi$i0xE}U";
      stringArray0[5] = "J0N";
      stringArray0[6] = "m7en2!v%Bi$i0xE}U";
      FileContents fileContents0 = new FileContents("m7en2!v%Bi$i0xE}U", stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("m7en2!v%Bi$i0xE}U", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      FileText fileText0 = fileContents0.getText();
      assertEquals(7, stringArray0.length);
      assertEquals("m7en2!v%Bi$i0xE}U", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(7, fileText0.size());
      assertNotNull(fileText0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileContents fileContents0 = null;
      try {
        fileContents0 = new FileContents((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "QApZ8cF=";
      stringArray0[1] = "QApZ8cF=";
      FileContents fileContents0 = new FileContents("QApZ8cF=", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("QApZ8cF=", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      int int0 = 0;
      TextBlock textBlock0 = fileContents0.getJavadocBefore(0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("QApZ8cF=", fileContents0.getFileName());
      assertNull(textBlock0);
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getCComments();
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("QApZ8cF=", fileContents0.getFileName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportSingleLineComment(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x,f0H*F";
      stringArray0[1] = "x,f0H*F";
      stringArray0[2] = "x,f0H*F";
      stringArray0[3] = "x,f0H*F";
      stringArray0[4] = "x,f0H*F";
      FileContents fileContents0 = new FileContents("x,f0H*F", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("x,f0H*F", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      TextBlock textBlock0 = fileContents0.getJavadocBefore(1);
      assertEquals(5, stringArray0.length);
      assertEquals("x,f0H*F", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNull(textBlock0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getCppComments();
      assertEquals(5, stringArray0.length);
      assertEquals("x,f0H*F", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Map<Integer, TextBlock> map1 = fileContents0.getCppComments();
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertEquals(5, stringArray0.length);
      assertEquals("x,f0H*F", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      
      Map<Integer, List<TextBlock>> map2 = fileContents0.getBlockComments();
      assertEquals(5, stringArray0.length);
      assertEquals("x,f0H*F", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      assertNotNull(map2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@u.s0=%=:f5jHoo8";
      stringArray0[1] = "@u.s0=%=:f5jHoo8";
      FileContents fileContents0 = new FileContents("@u.s0=%=:f5jHoo8", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("@u.s0=%=:f5jHoo8", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      // Undeclared exception!
      try { 
        fileContents0.getJavadocBefore(1862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "evictionCount";
      stringArray0[1] = "evictionCount";
      FileContents fileContents0 = new FileContents("evictionCount", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("evictionCount", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getCComments();
      assertEquals(2, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("evictionCount", fileContents0.getFileName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.puppycrawl.tools.checkstyle.api.FileContents";
      FileContents fileContents0 = new FileContents("com.puppycrawl.tools.checkstyle.api.FileContents", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getBlockComments();
      assertEquals(1, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("com.puppycrawl.tools.checkstyle.api.FileContents", fileContents0.getFileName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        fileContents0.reportCppComment(2099, 2099);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.google.common.base.Predicates$ContainsPatternPredicate";
      stringArray0[1] = "com.google.common.base.Predicates$ContainsPatternPredicate";
      stringArray0[2] = "nhZ(<\"R^o";
      stringArray0[3] = "com.google.common.base.Predicates$ContainsPatternPredicate";
      stringArray0[4] = "$";
      FileContents fileContents0 = new FileContents("com.google.common.base.Predicates$ContainsPatternPredicate", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("com.google.common.base.Predicates$ContainsPatternPredicate", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      String string0 = fileContents0.getFileName();
      assertEquals("com.google.common.base.Predicates$ContainsPatternPredicate", string0);
      assertEquals(5, stringArray0.length);
      assertEquals("com.google.common.base.Predicates$ContainsPatternPredicate", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZON_lA2cM}$Ma");
      assertNotNull(mockFile0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("ZON_lA2cM}$Ma"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      assertFalse(arrayList0.contains("ZON_lA2cM}$Ma"));
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileText fileText1 = new FileText(fileText0);
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(arrayList0.contains("ZON_lA2cM}$Ma"));
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertNotNull(fileText1);
      
      FileContents fileContents0 = new FileContents(fileText1);
      assertFalse(fileText0.equals((Object)fileText1));
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(arrayList0.contains("ZON_lA2cM}$Ma"));
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertEquals("ZON_lA2cM}$Ma", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      FileText fileText2 = fileContents0.getText();
      assertFalse(fileText0.equals((Object)fileText1));
      assertFalse(fileText1.equals((Object)fileText0));
      assertFalse(fileText2.equals((Object)fileText1));
      assertFalse(fileText2.equals((Object)fileText0));
      assertFalse(arrayList0.contains("ZON_lA2cM}$Ma"));
      assertNotSame(fileText0, fileText2);
      assertNotSame(fileText0, fileText1);
      assertNotSame(fileText1, fileText0);
      assertNotSame(fileText1, fileText2);
      assertNotSame(fileText2, fileText1);
      assertNotSame(fileText2, fileText0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("ZON_lA2cM}$Ma", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(0, fileText1.size());
      assertEquals("ZON_lA2cM}$Ma", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(0, fileText2.size());
      assertNotNull(fileText2);
      
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileContents fileContents0 = new FileContents("8y;p('(jIdDZwC-k", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("8y;p('(jIdDZwC-k", fileContents0.getFileName());
      assertNotNull(fileContents0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**";
      stringArray0[1] = "A/*'8Q[{[M~ns\"BcVai";
      stringArray0[3] = "/**";
      stringArray0[4] = "/**";
      FileContents fileContents0 = new FileContents("/**", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getSingleLineComments();
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = fileContents0.lineIsBlank(2);
      assertTrue(boolean0);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      
      Map<Integer, TextBlock> map1 = fileContents0.getSingleLineComments();
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      Map<Integer, TextBlock> map2 = fileContents0.getCppComments();
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotSame(map2, map0);
      assertNotSame(map2, map1);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(map2);
      
      Map<Integer, List<TextBlock>> map3 = fileContents0.getCComments();
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      assertEquals(0, map3.size());
      assertTrue(map3.isEmpty());
      assertNotNull(map3);
      
      fileContents0.reportCppComment(2, 2);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      
      boolean boolean1 = fileContents0.hasIntersectionWithComment((-34), (-34), 2, (-34));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      
      fileContents0.reportSingleLineComment((String) null, 2, 1);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = fileContents0.hasIntersectionWithComment(2, 2, 2, 2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(7, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("/**", fileContents0.getFileName());
      
      // Undeclared exception!
      try { 
        fileContents0.lineIsBlank((-1750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[1] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[2] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[3] = "com.google.common.base.Predicates$OrPredicate";
      stringArray0[4] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[5] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[6] = "com.google.common.primitives.Ints$IntConverterpackage-info.java";
      stringArray0[7] = "$hwpG3JFb";
      FileContents fileContents0 = new FileContents("com.google.common.primitives.Ints$IntConverterpackage-info.java", stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(fileContents0.inPackageInfo());
      assertEquals("com.google.common.primitives.Ints$IntConverterpackage-info.java", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      TextBlock textBlock0 = fileContents0.getJavadocBefore(4);
      assertEquals(8, stringArray0.length);
      assertTrue(fileContents0.inPackageInfo());
      assertEquals("com.google.common.primitives.Ints$IntConverterpackage-info.java", fileContents0.getFileName());
      assertNull(textBlock0);
      
      FileText fileText0 = fileContents0.getText();
      assertEquals(8, stringArray0.length);
      assertTrue(fileContents0.inPackageInfo());
      assertEquals("com.google.common.primitives.Ints$IntConverterpackage-info.java", fileContents0.getFileName());
      assertEquals(8, fileText0.size());
      assertNotNull(fileText0);
      
      // Undeclared exception!
      try { 
        fileContents0.getJavadocBefore(2815);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "TShP\\umS";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("XTDE1280", "XTDE1280", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("TShP\\umS", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("umS", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("TShP", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS\\XTDE12800XTDE1280", file0.toString());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("XTDE12800XTDE1280", file0.getName());
      assertNotNull(file0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("XTDE1280"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FileText fileText0 = new FileText(file0, arrayList0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(arrayList0.contains("XTDE1280"));
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("TShP\\umS", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("umS", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("TShP", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS\\XTDE12800XTDE1280", file0.toString());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("XTDE12800XTDE1280", file0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertNotNull(fileText0);
      
      FileContents fileContents0 = new FileContents(fileText0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(arrayList0.contains("XTDE1280"));
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("TShP\\umS", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("umS", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("TShP", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS\\XTDE12800XTDE1280", file0.toString());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("XTDE12800XTDE1280", file0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\TShP\\umS\\XTDE12800XTDE1280", fileContents0.getFileName());
      assertNotNull(fileContents0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F1-}U.zmkn]$";
      stringArray0[1] = "F1-}U.zmkn]$";
      stringArray0[2] = "F1-}U.zmkn]$";
      stringArray0[3] = "F1-}U.zmkn]$";
      stringArray0[5] = "F1-}U.zmkn]$";
      stringArray0[6] = "F1-}U.zmkn]$";
      FileContents fileContents0 = new FileContents("F1-}U.zmkn]$", stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("F1-}U.zmkn]$", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      String string0 = fileContents0.getFileName();
      assertEquals("F1-}U.zmkn]$", string0);
      assertEquals(7, stringArray0.length);
      assertEquals("F1-}U.zmkn]$", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(string0);
      
      String[] stringArray1 = fileContents0.getLines();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertEquals("F1-}U.zmkn]$", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileContents fileContents0 = new FileContents("g", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("g", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNotNull(fileContents0);
      
      Map<Integer, TextBlock> map0 = fileContents0.getSingleLineComments();
      assertEquals(0, stringArray0.length);
      assertEquals("g", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      int int0 = 0;
      TextBlock textBlock0 = fileContents0.getJavadocBefore(0);
      assertEquals(0, stringArray0.length);
      assertEquals("g", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertNull(textBlock0);
      
      Map<Integer, List<TextBlock>> map1 = fileContents0.getBlockComments();
      assertEquals(0, stringArray0.length);
      assertEquals("g", fileContents0.getFileName());
      assertFalse(fileContents0.inPackageInfo());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      int int1 = (-15);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        fileContents0.getLine((-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -126
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "La+E";
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      fileContents0.reportCComment(2, 2, 2, 2);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      
      Map<Integer, List<TextBlock>> map0 = fileContents0.getBlockComments();
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = fileContents0.hasIntersectionWithComment((-544), 113, 113, (-544));
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      
      fileContents0.reportCppComment(2, 8);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid range: ";
      stringArray0[1] = "Invalid range: ";
      stringArray0[2] = "";
      stringArray0[4] = "Invalid range: ";
      stringArray0[5] = "Invalid range: ";
      stringArray0[6] = "Invalid range: ";
      stringArray0[7] = "Invalid range: ";
      FileContents fileContents0 = new FileContents("Invalid range: ", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      assertNotNull(fileContents0);
      
      int int0 = 2;
      fileContents0.reportCComment(2, 2, 2, 2);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      
      int int1 = (-544);
      int int2 = 94;
      Map<Integer, List<TextBlock>> map0 = fileContents0.getBlockComments();
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = fileContents0.hasIntersectionWithComment(2031, 113, 113, (-544));
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      assertFalse(fileContents0.inPackageInfo());
      assertEquals("Invalid range: ", fileContents0.getFileName());
      
      // Undeclared exception!
      try { 
        fileContents0.lineIsComment(885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "//";
      stringArray0[1] = "//";
      stringArray0[5] = "//";
      stringArray0[3] = "//";
      stringArray0[4] = "//";
      FileContents fileContents0 = new FileContents("//", stringArray0);
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("com.\"uppycrawl.tools.checkstyle.api.FileContents", 1, 1, 90, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[20];
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      FileContents fileContents0 = new FileContents("", stringArray0);
      String string0 = "}^u^0OM-";
      int int0 = 1361;
      fileContents0.getBlockComments();
      int int1 = (-1315);
      fileContents0.inPackageInfo();
      // Undeclared exception!
      try { 
        fileContents0.reportBlockComment("i)^|EjxO", 1361, 1361, 42, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileContents", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "C";
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**";
      stringArray0[1] = "3`'g^{2_e~%{(hYa";
      stringArray0[5] = "/**";
      FileContents fileContents0 = new FileContents("3`'g^{2_e~%{(hYa", stringArray0);
      fileContents0.getCppComments();
      TextBlock textBlock0 = fileContents0.getJavadocBefore(5);
      assertNull(textBlock0);
  }
}
