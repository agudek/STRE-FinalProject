/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:21:57 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NPathComplexityCheck_ESTest extends NPathComplexityCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      int[] intArray0 = nPathComplexityCheck0.getRequiredTokens();
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(109);
      detailAST0.setLineNo(0);
      nPathComplexityCheck0.visitToken(detailAST0);
      assertNull(nPathComplexityCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(109);
      detailAST0.setLineNo(109);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setColumnNo(19);
      detailAST0.setType(109);
      detailAST0.setLineNo(0);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      nPathComplexityCheck0.leaveToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(109);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(94);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(91, "BN^OhPbDz'");
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(88, "BN^OhPbDz'");
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(85);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(84, "BN^OhBb]z'");
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(33);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(12);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(9);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(8);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      nPathComplexityCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(109);
      nPathComplexityCheck0.visitToken(detailAST0);
      nPathComplexityCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, nPathComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(96);
      nPathComplexityCheck0.visitToken(detailAST0);
      nPathComplexityCheck0.leaveToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(94);
      nPathComplexityCheck0.visitToken(detailAST0);
      nPathComplexityCheck0.leaveToken(detailAST0);
      assertEquals(94, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(91, "eO;/UsIB{AL#v");
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(89);
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(88, "BN^OhPbDz'");
      nPathComplexityCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(85, "npathComplexity");
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(84, "BN^OhPbDz'");
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(83, "BN^OhPbDz'");
      // Undeclared exception!
      try { 
        nPathComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(33);
      nPathComplexityCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(12);
      nPathComplexityCheck0.visitToken(detailAST0);
      nPathComplexityCheck0.leaveToken(detailAST0);
      assertNull(nPathComplexityCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(9);
      nPathComplexityCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(8, "BN^OhPbDz'");
      nPathComplexityCheck0.visitToken(detailAST0);
      assertEquals("BN^OhPbDz'", detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(92);
      nPathComplexityCheck0.visitToken(detailAST0);
      nPathComplexityCheck0.leaveToken(detailAST0);
      nPathComplexityCheck0.visitToken(detailAST0);
      assertFalse(nPathComplexityCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(95, "npathComplexity");
      nPathComplexityCheck0.visitToken(detailAST0);
      nPathComplexityCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, nPathComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      int[] intArray0 = nPathComplexityCheck0.getAcceptableTokens();
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      int[] intArray0 = nPathComplexityCheck0.getDefaultTokens();
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      nPathComplexityCheck0.setMax(108);
      assertEquals(SeverityLevel.ERROR, nPathComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NPathComplexityCheck nPathComplexityCheck0 = new NPathComplexityCheck();
      DetailAST detailAST0 = new DetailAST();
      nPathComplexityCheck0.beginTree(detailAST0);
      assertFalse(nPathComplexityCheck0.isCommentNodesRequired());
  }
}
