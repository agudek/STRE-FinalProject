/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:29:16 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.imports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AvoidStarImportCheck_ESTest extends AvoidStarImportCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(2843);
      avoidStarImportCheck0.visitToken(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      int[] intArray0 = avoidStarImportCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(152);
      // Undeclared exception!
      try { 
        avoidStarImportCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(30);
      avoidStarImportCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, avoidStarImportCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      DetailAST detailAST0 = new DetailAST();
      avoidStarImportCheck0.visitToken(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D.*";
      // Undeclared exception!
      try { 
        avoidStarImportCheck0.setExcludes(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "import.avoidStar";
      stringArray0[1] = "import.avoidStar";
      avoidStarImportCheck0.setExcludes(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      avoidStarImportCheck0.setAllowStaticMemberImports(true);
      DetailAST detailAST0 = new DetailAST();
      avoidStarImportCheck0.visitToken(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      int[] intArray0 = avoidStarImportCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      int[] intArray0 = avoidStarImportCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AvoidStarImportCheck avoidStarImportCheck0 = new AvoidStarImportCheck();
      avoidStarImportCheck0.setAllowClassImports(true);
      DetailAST detailAST0 = new DetailAST();
      avoidStarImportCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }
}
