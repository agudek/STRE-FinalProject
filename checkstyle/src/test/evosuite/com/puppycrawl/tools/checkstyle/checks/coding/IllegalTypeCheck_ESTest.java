/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:35:44 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalTypeCheck_ESTest extends IllegalTypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.setMemberModifiers("^{+C^,d?}AQp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given name ^{+C^
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      String[] stringArray0 = new String[0];
      illegalTypeCheck0.setLegalAbstractClassNames(stringArray0);
      assertFalse(illegalTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addNextSibling(detailAST0);
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.visitToken(detailAST0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.setMemberModifiers((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.setIllegalClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.setIgnoredMethodNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      String[] stringArray0 = new String[4];
      illegalTypeCheck0.setIllegalClassNames(stringArray0);
      // Undeclared exception!
      try { 
        illegalTypeCheck0.beginTree((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      String[] stringArray0 = new String[2];
      illegalTypeCheck0.setIgnoredMethodNames(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      int[] intArray0 = illegalTypeCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {10, 21, 9, 30}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      illegalTypeCheck0.setMemberModifiers(",");
      assertFalse(illegalTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(30);
      // Undeclared exception!
      try { 
        illegalTypeCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(21, "illegal.type");
      // Undeclared exception!
      try { 
        illegalTypeCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // null[-2147483648x-2147483648]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      DetailAST detailAST0 = new DetailAST();
      illegalTypeCheck0.beginTree(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(10);
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      // Undeclared exception!
      try { 
        illegalTypeCheck0.setLegalAbstractClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      int[] intArray0 = illegalTypeCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {30}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      Pattern pattern0 = Pattern.compile("illegal.type", 719);
      illegalTypeCheck0.setFormat(pattern0);
      assertFalse(illegalTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      int[] intArray0 = illegalTypeCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {10, 21, 9, 30}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllegalTypeCheck illegalTypeCheck0 = new IllegalTypeCheck();
      illegalTypeCheck0.setValidateAbstractClassNames(true);
      assertEquals(SeverityLevel.ERROR, illegalTypeCheck0.getSeverityLevel());
  }
}
