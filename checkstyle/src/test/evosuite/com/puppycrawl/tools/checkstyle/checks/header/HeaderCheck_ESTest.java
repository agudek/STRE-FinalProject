/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:50:53 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.header;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.ThreadModeSettings;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck;
import java.io.File;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeaderCheck_ESTest extends HeaderCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("NoLineWrapCheck");
      FileText fileText0 = new FileText((File) null, stack0);
      headerCheck0.processFiltered((File) null, fileText0);
      assertEquals(SeverityLevel.ERROR, headerCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      headerCheck0.postProcessHeaderLines();
      assertNull(headerCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      ThreadModeSettings threadModeSettings0 = new ThreadModeSettings(1185, 1185);
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("header.missing", threadModeSettings0);
      headerCheck0.configure(defaultConfiguration0);
      headerCheck0.setHeader("A'*");
      MockFile mockFile0 = new MockFile("A'*", "A'*");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("A*");
      FileText fileText0 = new FileText(mockFile0, stack0);
      headerCheck0.processFiltered(mockFile0, fileText0);
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\A'*", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      // Undeclared exception!
      try { 
        headerCheck0.setIgnoreLines((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      headerCheck0.setHeader("header.missing");
      File file0 = MockFile.createTempFile("header.missing", "header.missing");
      Stack<String> stack0 = new Stack<String>();
      FileText fileText0 = new FileText(file0, stack0);
      // Undeclared exception!
      try { 
        headerCheck0.processFiltered(file0, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      int[] intArray0 = new int[0];
      headerCheck0.setIgnoreLines(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      headerCheck0.setHeader("header.mismatch");
      MockFile mockFile0 = new MockFile("header.missing", "header.missing");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("header.mismatch");
      FileText fileText0 = new FileText(mockFile0, stack0);
      headerCheck0.processFiltered(mockFile0, fileText0);
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.missing\\header.missing", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HeaderCheck headerCheck0 = new HeaderCheck();
      headerCheck0.setHeader("header.mismatch");
      MockFile mockFile0 = new MockFile("header.missing", "header.missing");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("header.mismatch");
      FileText fileText0 = new FileText(mockFile0, stack0);
      int[] intArray0 = new int[4];
      intArray0[3] = 1;
      headerCheck0.setIgnoreLines(intArray0);
      headerCheck0.processFiltered(mockFile0, fileText0);
      assertNull(headerCheck0.getId());
  }
}
