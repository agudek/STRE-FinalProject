/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:49:02 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndentLevel_ESTest extends IndentLevel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(4368);
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertEquals(4368, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertNotNull(indentLevel0);
      
      indentLevel0.addAcceptedIndent(0);
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertTrue(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      
      boolean boolean0 = indentLevel0.isGreaterThan(4368);
      assertFalse(boolean0);
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertTrue(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(4368);
      assertEquals(4368, indentLevel0.getFirstIndentLevel());
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertNotNull(indentLevel0);
      
      int[] intArray0 = new int[0];
      IndentLevel indentLevel1 = new IndentLevel(indentLevel0, intArray0);
      assertFalse(indentLevel1.equals((Object)indentLevel0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4368, indentLevel0.getFirstIndentLevel());
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals((-1), indentLevel1.getLastIndentLevel());
      assertEquals((-1), indentLevel1.getFirstIndentLevel());
      assertFalse(indentLevel1.isMultiLevel());
      assertNotNull(indentLevel1);
      
      String string0 = indentLevel1.toString();
      assertFalse(indentLevel0.equals((Object)indentLevel1));
      assertFalse(indentLevel1.equals((Object)indentLevel0));
      assertNotSame(indentLevel0, indentLevel1);
      assertNotSame(indentLevel1, indentLevel0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      assertEquals(4368, indentLevel0.getFirstIndentLevel());
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals((-1), indentLevel1.getLastIndentLevel());
      assertEquals((-1), indentLevel1.getFirstIndentLevel());
      assertFalse(indentLevel1.isMultiLevel());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(4368);
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertEquals(4368, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertNotNull(indentLevel0);
      
      indentLevel0.addAcceptedIndent(0);
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertTrue(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      
      boolean boolean0 = indentLevel0.isAcceptable(0);
      assertTrue(boolean0);
      assertEquals(4368, indentLevel0.getLastIndentLevel());
      assertTrue(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
      
      boolean boolean0 = indentLevel0.isAcceptable(50);
      assertFalse(boolean0);
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(556);
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(556, indentLevel0.getLastIndentLevel());
      assertEquals(556, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
      
      int int0 = indentLevel0.getLastIndentLevel();
      assertEquals(556, int0);
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(556, indentLevel0.getLastIndentLevel());
      assertEquals(556, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(2545);
      assertEquals(2545, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(2545, indentLevel0.getLastIndentLevel());
      assertNotNull(indentLevel0);
      
      int[] intArray0 = new int[0];
      IndentLevel indentLevel1 = new IndentLevel(indentLevel0, intArray0);
      assertFalse(indentLevel1.equals((Object)indentLevel0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(2545, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(2545, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel1.isMultiLevel());
      assertEquals((-1), indentLevel1.getFirstIndentLevel());
      assertEquals((-1), indentLevel1.getLastIndentLevel());
      assertNotNull(indentLevel1);
      
      int int0 = indentLevel1.getLastIndentLevel();
      assertFalse(indentLevel0.equals((Object)indentLevel1));
      assertFalse(indentLevel1.equals((Object)indentLevel0));
      assertNotSame(indentLevel0, indentLevel1);
      assertNotSame(indentLevel1, indentLevel0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(2545, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(2545, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel1.isMultiLevel());
      assertEquals((-1), indentLevel1.getFirstIndentLevel());
      assertEquals((-1), indentLevel1.getLastIndentLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(2545);
      assertEquals(2545, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(2545, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
      
      int int0 = indentLevel0.getFirstIndentLevel();
      assertEquals(2545, int0);
      assertEquals(2545, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(2545, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(17);
      assertEquals(17, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(17, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
      
      int[] intArray0 = new int[0];
      IndentLevel indentLevel1 = new IndentLevel(indentLevel0, intArray0);
      assertFalse(indentLevel1.equals((Object)indentLevel0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(17, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(17, indentLevel0.getFirstIndentLevel());
      assertEquals((-1), indentLevel1.getLastIndentLevel());
      assertFalse(indentLevel1.isMultiLevel());
      assertEquals((-1), indentLevel1.getFirstIndentLevel());
      assertNotNull(indentLevel1);
      
      int int0 = indentLevel1.getFirstIndentLevel();
      assertFalse(indentLevel0.equals((Object)indentLevel1));
      assertFalse(indentLevel1.equals((Object)indentLevel0));
      assertNotSame(indentLevel0, indentLevel1);
      assertNotSame(indentLevel1, indentLevel0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(17, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(17, indentLevel0.getFirstIndentLevel());
      assertEquals((-1), indentLevel1.getLastIndentLevel());
      assertFalse(indentLevel1.isMultiLevel());
      assertEquals((-1), indentLevel1.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(50);
      assertEquals(50, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(50, indentLevel0.getLastIndentLevel());
      assertNotNull(indentLevel0);
      
      // Undeclared exception!
      try { 
        indentLevel0.addAcceptedIndent((IndentLevel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(218);
      assertEquals(218, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(218, indentLevel0.getLastIndentLevel());
      assertNotNull(indentLevel0);
      
      // Undeclared exception!
      try { 
        indentLevel0.addAcceptedIndent((-219));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -219
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(3097);
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(3097, indentLevel0.getLastIndentLevel());
      assertEquals(3097, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
      
      IndentLevel indentLevel1 = null;
      try {
        indentLevel1 = new IndentLevel(indentLevel0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      IndentLevel indentLevel1 = null;
      try {
        indentLevel1 = new IndentLevel(indentLevel0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndentLevel indentLevel0 = null;
      try {
        indentLevel0 = new IndentLevel((-3574));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -3574
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertNotNull(indentLevel0);
      
      String string0 = indentLevel0.toString();
      assertEquals("0", string0);
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(556);
      indentLevel0.addAcceptedIndent(0);
      indentLevel0.toString();
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(556);
      boolean boolean0 = indentLevel0.isGreaterThan((-1991));
      assertEquals(556, indentLevel0.getFirstIndentLevel());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(4368);
      boolean boolean0 = indentLevel0.isGreaterThan(4368);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(495);
      boolean boolean0 = indentLevel0.isMultiLevel();
      assertFalse(boolean0);
      assertEquals(495, indentLevel0.getLastIndentLevel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      int int0 = indentLevel0.getLastIndentLevel();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      indentLevel0.addAcceptedIndent(indentLevel0);
      assertEquals(0, indentLevel0.getLastIndentLevel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      // Undeclared exception!
      try { 
        indentLevel0.isAcceptable((-3230));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -3230
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      int int0 = indentLevel0.getFirstIndentLevel();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IndentLevel indentLevel0 = new IndentLevel(0);
      indentLevel0.addAcceptedIndent(4125);
      boolean boolean0 = indentLevel0.isMultiLevel();
      assertEquals(4125, indentLevel0.getLastIndentLevel());
      assertTrue(boolean0);
  }
}
