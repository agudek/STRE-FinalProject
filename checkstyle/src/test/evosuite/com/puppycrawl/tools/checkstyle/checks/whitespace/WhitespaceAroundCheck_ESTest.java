/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:51:40 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.whitespace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WhitespaceAroundCheck_ESTest extends WhitespaceAroundCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertNotNull(detailAST0);
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      detailAST0.setFirstChild(detailAST0);
      assertEquals(0, detailAST0.getLine());
      assertEquals(1, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      assertNotNull(whitespaceAroundCheck0);
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      assertNull(whitespaceAroundCheck0.getId());
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      
      detailAST0.setType(84);
      assertEquals(0, detailAST0.getLine());
      assertEquals(1, detailAST0.getNumberOfChildren());
      assertEquals(84, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      whitespaceAroundCheck0.setAllowEmptyTypes(true);
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      assertNull(whitespaceAroundCheck0.getId());
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      
      // Undeclared exception!
      whitespaceAroundCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertNotNull(detailAST0);
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      
      detailAST0.setFirstChild(detailAST0);
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(1, detailAST0.getNumberOfChildren());
      
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      assertNotNull(whitespaceAroundCheck0);
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      assertNull(whitespaceAroundCheck0.getId());
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      
      detailAST0.setType(84);
      assertNull(detailAST0.getText());
      assertEquals(84, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(1, detailAST0.getNumberOfChildren());
      
      // Undeclared exception!
      whitespaceAroundCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertNotNull(detailAST0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      
      DetailAST detailAST1 = new DetailAST();
      assertNotNull(detailAST1);
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      detailAST0.setFirstChild(detailAST1);
      assertNotSame(detailAST0, detailAST1);
      assertNotSame(detailAST1, detailAST0);
      assertNull(detailAST0.getText());
      assertEquals(1, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      assertNotNull(whitespaceAroundCheck0);
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      assertNull(whitespaceAroundCheck0.getId());
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      
      detailAST1.setType(73);
      assertNotSame(detailAST1, detailAST0);
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertNull(detailAST1.getText());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(73, detailAST1.getType());
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      whitespaceAroundCheck0.setAllowEmptyCatches(true);
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      assertNull(whitespaceAroundCheck0.getId());
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      
      // Undeclared exception!
      try { 
        whitespaceAroundCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertNotNull(detailAST0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      DetailAST detailAST1 = new DetailAST();
      assertNotNull(detailAST1);
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      detailAST0.setFirstChild(detailAST1);
      assertNotSame(detailAST0, detailAST1);
      assertNotSame(detailAST1, detailAST0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(1, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      assertNotNull(whitespaceAroundCheck0);
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      assertNull(whitespaceAroundCheck0.getId());
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      
      detailAST1.setType(73);
      assertNotSame(detailAST1, detailAST0);
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(73, detailAST1.getType());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertNull(detailAST1.getText());
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      detailAST0.addNextSibling(detailAST1);
      assertNotSame(detailAST0, detailAST1);
      assertNotSame(detailAST1, detailAST0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(1, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(73, detailAST1.getType());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertNull(detailAST1.getText());
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertFalse(detailAST1.equals((Object)detailAST0));
      
      whitespaceAroundCheck0.setAllowEmptyTypes(true);
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
      assertNull(whitespaceAroundCheck0.getId());
      assertFalse(whitespaceAroundCheck0.isCommentNodesRequired());
      
      // Undeclared exception!
      try { 
        whitespaceAroundCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setFirstChild(detailAST0);
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      detailAST0.setType(60);
      // Undeclared exception!
      whitespaceAroundCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      whitespaceAroundCheck0.setIgnoreEnhancedForColon(false);
      assertEquals(SeverityLevel.ERROR, whitespaceAroundCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      int[] intArray0 = whitespaceAroundCheck0.getDefaultTokens();
      assertEquals(51, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      int[] intArray0 = whitespaceAroundCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      WhitespaceAroundCheck whitespaceAroundCheck0 = new WhitespaceAroundCheck();
      int[] intArray0 = whitespaceAroundCheck0.getAcceptableTokens();
      assertEquals(56, intArray0.length);
  }
}
