/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:22:00 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavadocTagInfo_ESTest extends JavadocTagInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavadocTagInfo.fromName("deprecated");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavadocTagInfo.fromText("@author");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.SERIAL;
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(916);
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.EXCEPTION;
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(2686);
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.SERIAL_DATA;
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        javadocTagInfo0.isValidOn(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavadocTagInfo[] javadocTagInfoArray0 = JavadocTagInfo.values();
      assertEquals(19, javadocTagInfoArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavadocTagInfo.valueOf("INHERIT_DOC");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.AUTHOR;
      // Undeclared exception!
      try { 
        javadocTagInfo0.isValidOn((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = JavadocTagInfo.isValidName("exception");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = JavadocTagInfo.isValidName("W\"/Mjf7=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavadocTagInfo.fromName("linkplain");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavadocTagInfo.fromName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the name is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavadocTagInfo.fromName("H)@Rm[]@ms%m>,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the name [H)@Rm[]@ms%m>,] is not a valid Javadoc tag name
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavadocTagInfo.fromText("writeReplace");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the text [writeReplace] is not a valid Javadoc tag text
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavadocTagInfo.fromText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the text is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavadocTagInfo.fromText("{@link}");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.VERSION;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.VALUE;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.THROWS;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.SINCE;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.SERIAL_FIELD;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.SERIAL;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.SEE;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.RETURN;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.PARAM;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.LITERAL;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.LINKPLAIN;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.LINK;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.INHERIT_DOC;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.EXCEPTION;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.DEPRECATED;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.DOC_ROOT;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.CODE;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.AUTHOR;
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = javadocTagInfo0.isValidOn(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.AUTHOR;
      String string0 = javadocTagInfo0.toString();
      assertEquals("text [@author] name [author] type [BLOCK]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.EXCEPTION;
      String string0 = javadocTagInfo0.getName();
      assertEquals("exception", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.LINK;
      String string0 = javadocTagInfo0.getText();
      assertEquals("{@link}", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JavadocTagInfo javadocTagInfo0 = JavadocTagInfo.AUTHOR;
      JavadocTagInfo.Type javadocTagInfo_Type0 = javadocTagInfo0.getType();
      assertEquals(JavadocTagInfo.Type.BLOCK, javadocTagInfo_Type0);
  }
}
