/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:26:43 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.blocks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeftCurlyCheck_ESTest extends LeftCurlyCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.setOption("NLOW");
      assertNull(leftCurlyCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      // Undeclared exception!
      try { 
        leftCurlyCheck0.setOption((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      int[] intArray0 = leftCurlyCheck0.getAcceptableTokens();
      assertEquals(20, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(157, "line.break.after");
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(155, " null[-2147483648x-2147483648]");
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(154, " null[-2147483648x-2147483648]");
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(92, "9>j$0'[vXfSASZBZQu");
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      // Undeclared exception!
      try { 
        leftCurlyCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(15, "com.puppycrawl.tools1checkstype.checks.blocks.LeftCurldCheck");
      leftCurlyCheck0.visitToken(detailAST0);
      assertFalse(leftCurlyCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(14, "");
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.visitToken(detailAST0);
      assertNull(leftCurlyCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(12, "line.previous");
      leftCurlyCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(9, "=fy");
      leftCurlyCheck0.visitToken(detailAST0);
      assertFalse(leftCurlyCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      DetailAST detailAST0 = new DetailAST();
      leftCurlyCheck0.visitToken(detailAST0);
      assertFalse(leftCurlyCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(8, "com.puppycrawl.tools1checkstype.checks.blocks.LeftCurlyCheck");
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.visitToken(detailAST0);
      assertEquals("com.puppycrawl.tools1checkstype.checks.blocks.LeftCurlyCheck", detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      int[] intArray0 = leftCurlyCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      leftCurlyCheck0.setIgnoreEnums(true);
      assertEquals(SeverityLevel.ERROR, leftCurlyCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      // Undeclared exception!
      try { 
        leftCurlyCheck0.setOption("line.previous");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse line.previous
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LeftCurlyCheck leftCurlyCheck0 = new LeftCurlyCheck();
      int[] intArray0 = leftCurlyCheck0.getDefaultTokens();
      assertEquals(20, intArray0.length);
  }
}
