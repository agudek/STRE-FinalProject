/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:37:44 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CaseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CatchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ClassDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.DoWhileHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ElseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.FinallyHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ForHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ImportHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndexHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LabelHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LambdaHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LineSet;
import com.puppycrawl.tools.checkstyle.checks.indentation.MemberDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MethodCallHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.NewHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ObjectBlockHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PackageDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PrimordialHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.SlistHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.StaticInitHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.SwitchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.TryHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.WhileHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractExpressionHandler_ESTest extends AbstractExpressionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNotNull(detailAST0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(primordialHandler0);
      
      // Undeclared exception!
      try { 
        primordialHandler0.checkRightParen((DetailAST) null, detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(primordialHandler0);
      
      ImportHandler importHandler0 = new ImportHandler(indentationCheck0, detailAST0, primordialHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(importHandler0);
      
      ObjectBlockHandler objectBlockHandler0 = new ObjectBlockHandler(indentationCheck0, detailAST0, importHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(objectBlockHandler0);
      
      // Undeclared exception!
      try { 
        objectBlockHandler0.checkWrappingIndentation(detailAST0, detailAST0, (-1854), 2335, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.LineWrappingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      // Undeclared exception!
      try { 
        AbstractExpressionHandler.areOnSameLine(detailAST0, (DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      primordialHandler0.checkIndentation();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(indentationCheck0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(primordialHandler0);
      
      FinallyHandler finallyHandler0 = new FinallyHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(finallyHandler0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, (DetailAST) null, finallyHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(caseHandler0);
      
      caseHandler0.checkWrappingIndentation(detailAST0, (DetailAST) null, (-2441), (-2441), true);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      WhileHandler whileHandler0 = new WhileHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(whileHandler0);
      
      // Undeclared exception!
      try { 
        whileHandler0.checkModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      TryHandler tryHandler0 = new TryHandler((IndentationCheck) null, detailAST0, primordialHandler0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(tryHandler0);
      
      IndentLevel indentLevel0 = primordialHandler0.getSuggestedChildIndent(tryHandler0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(memberDefHandler0);
      
      AbstractExpressionHandler abstractExpressionHandler0 = memberDefHandler0.getParent();
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNull(abstractExpressionHandler0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertNotNull(detailAST0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertNotNull(primordialHandler0);
      
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertNotNull(classDefHandler0);
      
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, (DetailAST) null, classDefHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertNotNull(arrayInitHandler0);
      
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, (DetailAST) null, arrayInitHandler0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertNotNull(labelHandler0);
      
      AbstractExpressionHandler abstractExpressionHandler0 = labelHandler0.getParent();
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertNotNull(abstractExpressionHandler0);
      assertSame(arrayInitHandler0, abstractExpressionHandler0);
      assertSame(abstractExpressionHandler0, arrayInitHandler0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      MethodDefHandler methodDefHandler0 = new MethodDefHandler((IndentationCheck) null, detailAST0, primordialHandler0);
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(methodDefHandler0);
      
      DetailAST detailAST1 = methodDefHandler0.getMainAst();
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertNotNull(detailAST1);
      assertSame(detailAST0, detailAST1);
      assertSame(detailAST1, detailAST0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      IndentLevel indentLevel0 = primordialHandler0.getIndentImpl();
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertNotNull(indentLevel0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNotNull(indentationCheck0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNotNull(primordialHandler0);
      
      FinallyHandler finallyHandler0 = new FinallyHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNotNull(finallyHandler0);
      
      ForHandler forHandler0 = new ForHandler(indentationCheck0, (DetailAST) null, finallyHandler0);
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNotNull(forHandler0);
      
      IndentLevel indentLevel0 = forHandler0.getIndentImpl();
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentLevel0.getLastIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(4, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      TryHandler tryHandler0 = new TryHandler((IndentationCheck) null, detailAST0, primordialHandler0);
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(tryHandler0);
      
      SwitchHandler switchHandler0 = new SwitchHandler((IndentationCheck) null, detailAST0, tryHandler0);
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(switchHandler0);
      
      IndentationCheck indentationCheck0 = switchHandler0.getIndentCheck();
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNull(indentationCheck0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      IndentLevel indentLevel0 = primordialHandler0.getIndent();
      assertEquals(0, indentLevel0.getLastIndentLevel());
      assertEquals(0, indentLevel0.getFirstIndentLevel());
      assertFalse(indentLevel0.isMultiLevel());
      assertNotNull(indentLevel0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNotNull(indentationCheck0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNotNull(primordialHandler0);
      
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNotNull(packageDefHandler0);
      
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, (DetailAST) null, packageDefHandler0);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNotNull(slistHandler0);
      
      WhileHandler whileHandler0 = new WhileHandler(indentationCheck0, (DetailAST) null, slistHandler0);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNotNull(whileHandler0);
      
      IndentLevel indentLevel0 = whileHandler0.getIndent();
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertFalse(indentLevel0.isMultiLevel());
      assertEquals(8, indentLevel0.getLastIndentLevel());
      assertEquals(8, indentLevel0.getFirstIndentLevel());
      assertNotNull(indentLevel0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      detailAST0.initialize((-1384), "indentation.error.multi");
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals((-1384), detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals("indentation.error.multi", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals((-1384), detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals("indentation.error.multi", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals((-1384), detailAST1.getType());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getColumn());
      assertEquals("indentation.error.multi", detailAST1.getText());
      assertNotNull(detailAST1);
      assertSame(detailAST0, detailAST1);
      assertSame(detailAST1, detailAST0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      int int0 = AbstractExpressionHandler.getFirstLine(0, detailAST0);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertNotNull(indentationCheck0);
      
      indentationCheck0.setBraceAdjustment(5);
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(5, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(5, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNotNull(primordialHandler0);
      
      int int0 = primordialHandler0.getBraceAdjustment();
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(5, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNotNull(indentationCheck0);
      
      StaticInitHandler staticInitHandler0 = new StaticInitHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNotNull(staticInitHandler0);
      
      int int0 = staticInitHandler0.getBasicOffset();
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertNotNull(primordialHandler0);
      
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST0, primordialHandler0);
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(slistHandler0);
      
      // Undeclared exception!
      try { 
        slistHandler0.isOnStartOfLine(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertNotNull(detailAST0);
      
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertNotNull(memberDefHandler0);
      
      // Undeclared exception!
      try { 
        memberDefHandler0.getLineStart(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      MethodCallHandler methodCallHandler0 = new MethodCallHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(methodCallHandler0);
      
      // Undeclared exception!
      try { 
        methodCallHandler0.getLineStart(1296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(catchHandler0);
      
      MethodCallHandler methodCallHandler0 = new MethodCallHandler(indentationCheck0, detailAST0, catchHandler0);
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(methodCallHandler0);
      
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST0, methodCallHandler0);
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(newHandler0);
      
      // Undeclared exception!
      try { 
        newHandler0.getIndentImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractExpressionHandler.getFirstToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractExpressionHandler.getFirstLine(8232, (DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      // Undeclared exception!
      try { 
        primordialHandler0.getBraceAdjustment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      assertNotNull(primordialHandler0);
      
      // Undeclared exception!
      try { 
        primordialHandler0.getBasicOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNotNull(indentationCheck0);
      
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNotNull(switchHandler0);
      
      // Undeclared exception!
      try { 
        switchHandler0.expandedTabsColumnNo((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(elseHandler0);
      
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, detailAST0, elseHandler0);
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(indexHandler0);
      
      detailAST0.addNextSibling(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST0, indexHandler0);
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(switchHandler0);
      
      // Undeclared exception!
      switchHandler0.checkWrappingIndentation(detailAST0, (DetailAST) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertNotNull(indentationCheck0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertNotNull(primordialHandler0);
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        primordialHandler0.checkChildren((DetailAST) null, intArray0, (IndentLevel) null, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(newHandler0);
      
      LambdaHandler lambdaHandler0 = new LambdaHandler(indentationCheck0, detailAST0, newHandler0);
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(lambdaHandler0);
      
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, lambdaHandler0);
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(memberDefHandler0);
      
      // Undeclared exception!
      try { 
        memberDefHandler0.getIndent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.LambdaHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertNotNull(indentationCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertNull(indentationCheck0.getId());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(memberDefHandler0);
      
      // Undeclared exception!
      try { 
        memberDefHandler0.checkLeftParen(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(indentationCheck0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertNotNull(primordialHandler0);
      
      primordialHandler0.checkLeftParen((DetailAST) null);
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(indentationCheck0);
      
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
      assertNotNull(primordialHandler0);
      
      primordialHandler0.checkRightParen((DetailAST) null, (DetailAST) null);
      assertFalse(indentationCheck0.isCommentNodesRequired());
      assertEquals(0, indentationCheck0.getBraceAdjustment());
      assertEquals(8, indentationCheck0.getIndentationTabWidth());
      assertEquals(4, indentationCheck0.getLineWrappingIndentation());
      assertEquals(4, indentationCheck0.getThrowsIndent());
      assertEquals(4, indentationCheck0.getCaseIndent());
      assertNull(indentationCheck0.getId());
      assertFalse(indentationCheck0.isForceStrictCondition());
      assertEquals(4, indentationCheck0.getArrayInitIndent());
      assertEquals(4, indentationCheck0.getBasicOffset());
      assertEquals(SeverityLevel.ERROR, indentationCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = classDefHandler0.getChildrenExpectedIndent();
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      // Undeclared exception!
      try { 
        memberDefHandler0.checkExpressionSubtree(detailAST0, indentLevel0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      DetailAST detailAST0 = new DetailAST();
      IndentLevel indentLevel0 = primordialHandler0.getIndentImpl();
      // Undeclared exception!
      try { 
        primordialHandler0.checkExpressionSubtree(detailAST0, indentLevel0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      DetailAST detailAST0 = new DetailAST();
      IndentLevel indentLevel0 = primordialHandler0.getIndentImpl();
      // Undeclared exception!
      try { 
        primordialHandler0.checkExpressionSubtree(detailAST0, indentLevel0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      int[] intArray0 = new int[2];
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = memberDefHandler0.getSuggestedChildIndent(primordialHandler0);
      classDefHandler0.checkChildren(detailAST0, intArray0, indentLevel0, true, true);
      assertEquals(0, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      assertSame(detailAST1, detailAST0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = AbstractExpressionHandler.areOnSameLine(detailAST0, detailAST0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = memberDefHandler0.getSuggestedChildIndent(primordialHandler0);
      indentLevel0.addAcceptedIndent(3);
      // Undeclared exception!
      try { 
        memberDefHandler0.logError(detailAST0, "t:y;o3Y<_}dX-h", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      DetailAST detailAST0 = new DetailAST();
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = primordialHandler0.getSuggestedChildIndent(indexHandler0);
      // Undeclared exception!
      try { 
        primordialHandler0.logError((DetailAST) null, "", 360, indentLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      DoWhileHandler doWhileHandler0 = new DoWhileHandler((IndentationCheck) null, detailAST0, primordialHandler0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST0, doWhileHandler0);
      LineSet lineSet0 = new LineSet();
      // Undeclared exception!
      try { 
        packageDefHandler0.findSubtreeLines(lineSet0, detailAST0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      ImportHandler importHandler0 = new ImportHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      FinallyHandler finallyHandler0 = new FinallyHandler(indentationCheck0, detailAST0, importHandler0);
      ForHandler forHandler0 = new ForHandler(indentationCheck0, detailAST0, finallyHandler0);
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST0, forHandler0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST0, slistHandler0);
      // Undeclared exception!
      try { 
        newHandler0.getSuggestedChildIndent(finallyHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      boolean boolean0 = primordialHandler0.shouldIncreaseIndent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      int int0 = memberDefHandler0.getBraceAdjustment();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, detailAST0, elseHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST0, indexHandler0);
      // Undeclared exception!
      try { 
        switchHandler0.checkWrappingIndentation(detailAST0, (DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }
}
