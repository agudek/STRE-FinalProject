/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:16:02 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.imports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomImportOrderCheck_ESTest extends CustomImportOrderCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      // Undeclared exception!
      try { 
        customImportOrderCheck0.setCustomImportOrderRules("SAME_PACKAGE.#(JW5Rf;`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(3965);
      customImportOrderCheck0.visitToken(detailAST0);
      assertFalse(customImportOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addPreviousSibling(detailAST0);
      // Undeclared exception!
      try { 
        customImportOrderCheck0.visitToken(detailAST0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      // Undeclared exception!
      try { 
        customImportOrderCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      // Undeclared exception!
      try { 
        customImportOrderCheck0.setCustomImportOrderRules("SAME_PACKAGEx[IsvLGH)OzCYUf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SAME_PACKAGEx[IsvLGH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      // Undeclared exception!
      try { 
        customImportOrderCheck0.setCustomImportOrderRules((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      // Undeclared exception!
      try { 
        customImportOrderCheck0.setCustomImportOrderRules("STATIr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected rule: STATIr
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      customImportOrderCheck0.setCustomImportOrderRules("STANDARD_JAVA_PACKAGE");
      assertFalse(customImportOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      customImportOrderCheck0.setCustomImportOrderRules("STATIC");
      assertNull(customImportOrderCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      Pattern pattern0 = Pattern.compile("SAME_PACKAGE");
      customImportOrderCheck0.setThirdPartyPackageRegExp(pattern0);
      customImportOrderCheck0.setCustomImportOrderRules("THIRD_PARTY_PACKAGE");
      customImportOrderCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      customImportOrderCheck0.setCustomImportOrderRules("SPECIAL_IMPORTS");
      customImportOrderCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      customImportOrderCheck0.setCustomImportOrderRules("THIRD_PARTY_PACKAGE");
      customImportOrderCheck0.visitToken(detailAST0);
      assertNull(customImportOrderCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      customImportOrderCheck0.finishTree((DetailAST) null);
      assertFalse(customImportOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      customImportOrderCheck0.visitToken(detailAST0);
      // Undeclared exception!
      try { 
        customImportOrderCheck0.finishTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      customImportOrderCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, customImportOrderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      Pattern pattern0 = Pattern.compile("STATIC");
      customImportOrderCheck0.setStandardPackageRegExp(pattern0);
      assertEquals("STATIC", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      int[] intArray0 = customImportOrderCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {30, 152, 16}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      int[] intArray0 = customImportOrderCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {30, 152, 16}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      customImportOrderCheck0.setSortImportsInGroupAlphabetically(true);
      assertEquals(SeverityLevel.ERROR, customImportOrderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      customImportOrderCheck0.setSeparateLineBetweenGroups(false);
      assertEquals(SeverityLevel.ERROR, customImportOrderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      Pattern pattern0 = Pattern.compile("STATIC");
      customImportOrderCheck0.setSpecialImportsRegExp(pattern0);
      assertFalse(customImportOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomImportOrderCheck customImportOrderCheck0 = new CustomImportOrderCheck();
      int[] intArray0 = customImportOrderCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {30, 152, 16}, intArray0);
  }
}
