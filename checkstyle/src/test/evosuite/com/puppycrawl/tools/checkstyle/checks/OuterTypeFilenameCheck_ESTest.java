/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:48:03 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck;
import java.io.File;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OuterTypeFilenameCheck_ESTest extends OuterTypeFilenameCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      File file0 = MockFile.createTempFile("#!c,Y d][Czd;n1Df", "#!c,Y d][Czd;n1Df");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(file0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      outerTypeFilenameCheck0.setFileContents(fileContents0);
      outerTypeFilenameCheck0.beginTree((DetailAST) null);
      assertNull(outerTypeFilenameCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      int[] intArray0 = outerTypeFilenameCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {14, 15, 154, 157}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      DetailAST detailAST0 = new DetailAST();
      outerTypeFilenameCheck0.finishTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, outerTypeFilenameCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        outerTypeFilenameCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      // Undeclared exception!
      try { 
        outerTypeFilenameCheck0.beginTree((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      int[] intArray0 = outerTypeFilenameCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {14, 15, 154, 157}, intArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OuterTypeFilenameCheck outerTypeFilenameCheck0 = new OuterTypeFilenameCheck();
      int[] intArray0 = outerTypeFilenameCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {14, 15, 154, 157}, intArray0);
  }
}
