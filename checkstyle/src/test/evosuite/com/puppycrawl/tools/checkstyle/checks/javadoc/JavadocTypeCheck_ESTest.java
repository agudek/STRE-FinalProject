/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:13:49 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.Scope;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavadocTypeCheck_ESTest extends JavadocTypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addChild(detailAST0);
      // Undeclared exception!
      javadocTypeCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      int[] intArray0 = javadocTypeCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {15, 14, 154, 157}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        javadocTypeCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      Scope scope0 = Scope.PUBLIC;
      javadocTypeCheck0.setExcludeScope(scope0);
      assertNull(javadocTypeCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      int[] intArray0 = javadocTypeCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      Pattern pattern0 = Pattern.compile("type.tagFormat");
      javadocTypeCheck0.setVersionFormat(pattern0);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      Pattern pattern0 = Pattern.compile("type.tagFormat");
      javadocTypeCheck0.setAuthorFormat(pattern0);
      assertFalse(javadocTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      Scope scope0 = Scope.PROTECTED;
      javadocTypeCheck0.setScope(scope0);
      assertFalse(javadocTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      javadocTypeCheck0.setAllowMissingParamTags(true);
      assertFalse(javadocTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      javadocTypeCheck0.setAllowUnknownTags(true);
      assertFalse(javadocTypeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavadocTypeCheck javadocTypeCheck0 = new JavadocTypeCheck();
      int[] intArray0 = javadocTypeCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {15, 14, 154, 157}, intArray0);
  }
}
