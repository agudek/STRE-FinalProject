/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:30:30 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import antlr.Token;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
import java.io.Closeable;
import java.io.File;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.net.URI;
import java.nio.file.InvalidPathException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommonUtils_ESTest extends CommonUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = CommonUtils.getFileNameWithoutExtension(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = CommonUtils.getFileNameWithoutExtension("u+w");
      assertEquals("u+w", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("DiscreteDomain.integers()");
      String string0 = CommonUtils.fillTemplateWithStringsByRegexp("T0H2YA<*//<Y", "DiscreteDomain.integers()", pattern0);
      assertEquals("T0H2YA<*//<Y", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = CommonUtils.endsWithChar("j{@f=j", 'r');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = CommonUtils.lengthExpandedTabs("sfN hBh", (-1908), (-1908));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = CommonUtils.lengthMinusTrailingWhitespace("G");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = CommonUtils.hasWhitespaceBefore((-3960), "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile(" 6,", "");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      CommonUtils.close(mockFileReader0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = CommonUtils.relativizeAndNormalizePath((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = CommonUtils.isPatternValid("?@!R2z|i4ew=H!.H$FK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = CommonUtils.isInt("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pattern pattern0 = CommonUtils.createPattern("wJrN");
      String string0 = CommonUtils.fillTemplateWithStringsByRegexp("", "o", pattern0);
      assertEquals("", string0);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pattern pattern0 = CommonUtils.createPattern("System", 0);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pattern pattern0 = CommonUtils.createPattern("", (-1213));
      assertEquals((-1213), pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.startsWithChar((String) null, '4');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.relativizeAndNormalizePath("Unable to find: ", "caE!LWn");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.relativizeAndNormalizePath("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.lengthMinusTrailingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.lengthExpandedTabs("0", 876, 876);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.lengthExpandedTabs((String) null, 2728, (-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.isPatternValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.isName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.isIdentifier((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.invokeConstructor((Constructor<Object>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Constructor<InputStream> constructor0 = CommonUtils.getConstructor(class0, (Class<?>[]) null);
      // Undeclared exception!
      try { 
        CommonUtils.invokeConstructor(constructor0, (Object[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.lang.InstantiationException
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = CommonUtils.getConstructor(class0, (Class<?>[]) null);
      // Undeclared exception!
      try { 
        CommonUtils.invokeConstructor(constructor0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.hasWhitespaceBefore(3018, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.getUriByFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.getFileNameWithoutExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.getFileExtension("`c7+k_}<");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.getFileExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.getConstructor((Class<String>) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        CommonUtils.getConstructor(class0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.lang.NoSuchMethodException: java.lang.String.<init>(null, null, null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.fillTemplateWithStringsByRegexp("j{@f=j", "com.google.common.collect.Range", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.endsWithChar((String) null, 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.createPattern("U@xg5sptQ;r8[", (-22));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.createPattern((String) null, (-1967));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.createPattern("*", 203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression *
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.createPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.createPattern("r*\"g(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression r*\"g(
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.createBlockCommentNode((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.baseClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = CommonUtils.isIdentifier("o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = CommonUtils.startsWithChar("eam", 'e');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = CommonUtils.startsWithChar("1+z$;)mzm&8H", '?');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = CommonUtils.isInt((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = CommonUtils.isInt("m'Q=mu0UR3&Hs'$Vl.4DJ)?@G!jwJ/m'Q=mu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = CommonUtils.isBlank(" 6,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = CommonUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = CommonUtils.isBlank(stringArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = CommonUtils.isName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = CommonUtils.isName("oP6iaV3x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = CommonUtils.isIdentifier("j&^D?2)3uO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = CommonUtils.isIdentifier("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = CommonUtils.getFileExtension("$xzqt-G");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = CommonUtils.getFileExtension(".0");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Pattern pattern0 = CommonUtils.createPattern(".Cannot close the stream", 120);
      CommonUtils.fillTemplateWithStringsByRegexp(".Cannot close the stream", ".Cannot close the stream", pattern0);
      assertEquals(120, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Pattern pattern0 = CommonUtils.createPattern(", defaultValue=");
      String string0 = CommonUtils.fillTemplateWithStringsByRegexp((String) null, "CxKO|hjAp=", pattern0);
      assertNull(string0);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      URI uRI0 = CommonUtils.getUriByFilename(".");
      assertNull(uRI0.getHost());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("$xzqt-G");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ";");
      URI uRI0 = CommonUtils.getUriByFilename("$xzqt-G");
      assertNull(uRI0.getRawFragment());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      try { 
        CommonUtils.getUriByFilename("F-fn");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to find: F-fn
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CommonUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = CommonUtils.endsWithChar("net.bytebuddy.asm.Advice$OnDefaultValue", 'e');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = CommonUtils.endsWithChar("ignorable", 'P');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = CommonUtils.endsWithChar("", 'f');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = CommonUtils.startsWithChar("", 'j');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = CommonUtils.relativizeAndNormalizePath((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = CommonUtils.relativizeAndNormalizePath("wpPaNA'Ag6HAZ`gR", "");
      assertEquals("..\\", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = CommonUtils.baseClassName("6ML1#!WmyZ@/");
      assertEquals("6ML1#!WmyZ@/", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = CommonUtils.baseClassName(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = CommonUtils.lengthExpandedTabs("org.apache.commons.io.filefilter", 13, 13);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = CommonUtils.lengthMinusTrailingWhitespace("Ioem0T#>dLy^z\":&0Failed to initialise regular expression .Failed to initialise regular expression ");
      assertEquals(97, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = CommonUtils.lengthMinusTrailingWhitespace("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonUtils.hasWhitespaceBefore(4, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = CommonUtils.hasWhitespaceBefore(4114, "Failed to initialise regular expression ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = CommonUtils.hasWhitespaceBefore(0, "okk?nj=hk5bbX}2=|K");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3r-=.j>@");
      File file0 = MockFile.createTempFile("The array of prefixes must not be null", ".Cannot close the stream", (File) mockFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3r-=.j>@";
      stringArray0[1] = "Cannot close the stream";
      stringArray0[2] = "The array of prefixes must not be null";
      stringArray0[3] = "3r-=.j>@";
      stringArray0[4] = ".Cannot close the stream";
      stringArray0[5] = ".Cannot close the stream";
      stringArray0[6] = ".Cannot close the stream";
      stringArray0[7] = "The array of prefixes must not be null";
      stringArray0[8] = "9-DQS1=cac]";
      boolean boolean0 = CommonUtils.matchesFileExtension(file0, stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3r-=.j>@");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3r-=.j>@";
      stringArray0[1] = "Cannot close the stream";
      stringArray0[2] = "The array of prefixes must not be null";
      stringArray0[3] = "3r-=.j>@";
      stringArray0[4] = ".Cannot close the stream";
      stringArray0[5] = ".Cannot close the stream";
      stringArray0[6] = ".Cannot close the stream";
      stringArray0[7] = "The array of prefixes must not be null";
      stringArray0[8] = "9-DQS1=cac]";
      boolean boolean0 = CommonUtils.matchesFileExtension(mockFile0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3r-=.j>@");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        CommonUtils.matchesFileExtension(mockFile0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",<", "0=bm=.;xCcbF:B");
      String[] stringArray0 = new String[0];
      boolean boolean0 = CommonUtils.matchesFileExtension(mockFile0, stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";5BQaj3WlfYj|", ";5BQaj3WlfYj|");
      boolean boolean0 = CommonUtils.matchesFileExtension(mockFile0, (String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = CommonUtils.isPatternValid("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Token token0 = new Token(16);
      DetailAST detailAST0 = CommonUtils.createBlockCommentNode(token0);
      assertEquals(145, detailAST0.getType());
      assertEquals("/*", detailAST0.getText());
      assertEquals(2, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DetailAST detailAST0 = CommonUtils.createBlockCommentNode("inline");
      assertEquals("/*", detailAST0.getText());
      assertEquals(2, detailAST0.getNumberOfChildren());
      assertEquals(145, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Constructor<String> constructor0 = CommonUtils.getConstructor(class0, (Class<?>[]) classArray0);
      String string0 = CommonUtils.invokeConstructor(constructor0, (Object[]) classArray0);
      assertEquals("", string0);
  }
}
