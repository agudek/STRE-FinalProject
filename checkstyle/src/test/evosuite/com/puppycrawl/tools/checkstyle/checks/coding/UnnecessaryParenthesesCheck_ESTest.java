/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:16:42 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnnecessaryParenthesesCheck_ESTest extends UnnecessaryParenthesesCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((int) (byte)77, "KtD?V");
      detailAST0.addPreviousSibling(detailAST0);
      unnecessaryParenthesesCheck0.visitToken(detailAST0);
      assertFalse(unnecessaryParenthesesCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(1297, "unnecessary.paren.ident");
      unnecessaryParenthesesCheck0.leaveToken(detailAST0);
      assertEquals("unnecessary.paren.ident", detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST1.initialize((int) (byte)76, "KtD?V");
      detailAST0.addPreviousSibling(detailAST1);
      unnecessaryParenthesesCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(1293);
      unnecessaryParenthesesCheck0.visitToken(detailAST0);
      assertNull(unnecessaryParenthesesCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST0.setFirstChild(detailAST1);
      detailAST0.addChild(detailAST1);
      detailAST0.setType(106);
      // Undeclared exception!
      unnecessaryParenthesesCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST0.setFirstChild(detailAST1);
      detailAST0.addPreviousSibling(detailAST1);
      detailAST0.setType((byte)80);
      unnecessaryParenthesesCheck0.leaveToken(detailAST0);
      assertNull(unnecessaryParenthesesCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType((byte)80);
      // Undeclared exception!
      try { 
        unnecessaryParenthesesCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      unnecessaryParenthesesCheck0.leaveToken(detailAST0);
      assertNull(unnecessaryParenthesesCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((int) (byte)76, "unnecessary.paren.literal");
      detailAST0.addPreviousSibling(detailAST0);
      unnecessaryParenthesesCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST0.setFirstChild(detailAST1);
      detailAST0.addPreviousSibling(detailAST1);
      detailAST0.setType((byte)80);
      unnecessaryParenthesesCheck0.visitToken(detailAST0);
      assertNull(detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType((byte)80);
      // Undeclared exception!
      try { 
        unnecessaryParenthesesCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      int[] intArray0 = unnecessaryParenthesesCheck0.getAcceptableTokens();
      assertEquals(23, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      int[] intArray0 = unnecessaryParenthesesCheck0.getDefaultTokens();
      assertEquals(23, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnnecessaryParenthesesCheck unnecessaryParenthesesCheck0 = new UnnecessaryParenthesesCheck();
      int[] intArray0 = unnecessaryParenthesesCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }
}
