/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:33:55 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FallThroughCheck_ESTest extends FallThroughCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST0.addPreviousSibling(detailAST1);
      fallThroughCheck0.setCheckLastCaseGroup(true);
      fallThroughCheck0.visitToken(detailAST1);
      assertFalse(fallThroughCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addPreviousSibling(detailAST0);
      detailAST0.setType(107);
      fallThroughCheck0.visitToken(detailAST0);
      assertFalse(fallThroughCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        fallThroughCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      int[] intArray0 = fallThroughCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {33}, intArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addNextSibling(detailAST0);
      detailAST0.setType(33);
      fallThroughCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, fallThroughCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      Pattern pattern0 = Pattern.compile("");
      fallThroughCheck0.setReliefPattern(pattern0);
      assertEquals("", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      int[] intArray0 = fallThroughCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {33}, intArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FallThroughCheck fallThroughCheck0 = new FallThroughCheck();
      int[] intArray0 = fallThroughCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {33}, intArray0);
  }
}
