/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:18:09 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.TranslationCheck;
import java.io.File;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Stack;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TranslationCheck_ESTest extends TranslationCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      File file0 = MockFile.createTempFile("translation.missingTranslationFile", "com.puppycrawl.tools.checkstyle.checks.messages");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(file0, linkedList0);
      translationCheck0.processFiltered(file0, fileText0);
      translationCheck0.finishProcessing();
      assertNull(translationCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        translationCheck0.setRequiredTranslations(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      Stack<String> stack0 = new Stack<String>();
      FileText fileText0 = new FileText((File) null, stack0);
      translationCheck0.processFiltered((File) null, fileText0);
      // Undeclared exception!
      try { 
        translationCheck0.finishProcessing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.TranslationCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      String[] stringArray0 = Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        translationCheck0.setRequiredTranslations(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified language code 'ps' is incorrect. [TranslationCheck]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.TranslationCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      Pattern pattern0 = Pattern.compile("huc.0");
      translationCheck0.setBaseName(pattern0);
      assertEquals(SeverityLevel.ERROR, translationCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      String[] stringArray0 = new String[0];
      translationCheck0.setRequiredTranslations(stringArray0);
      assertNull(translationCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TranslationCheck translationCheck0 = new TranslationCheck();
      translationCheck0.beginProcessing("huc.0");
      assertEquals(SeverityLevel.ERROR, translationCheck0.getSeverityLevel());
  }
}
