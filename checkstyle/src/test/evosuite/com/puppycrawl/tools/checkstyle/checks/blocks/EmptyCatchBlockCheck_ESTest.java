/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:10:00 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.blocks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.blocks.EmptyCatchBlockCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmptyCatchBlockCheck_ESTest extends EmptyCatchBlockCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      emptyCatchBlockCheck0.setCommentFormat("catch.block.empty");
      assertNull(emptyCatchBlockCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      // Undeclared exception!
      try { 
        emptyCatchBlockCheck0.setExceptionVariableName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      // Undeclared exception!
      try { 
        emptyCatchBlockCheck0.setExceptionVariableName("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression +
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      // Undeclared exception!
      try { 
        emptyCatchBlockCheck0.setCommentFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      int[] intArray0 = emptyCatchBlockCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {96}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        emptyCatchBlockCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.blocks.EmptyCatchBlockCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      int[] intArray0 = emptyCatchBlockCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {96}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      boolean boolean0 = emptyCatchBlockCheck0.isCommentNodesRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      // Undeclared exception!
      try { 
        emptyCatchBlockCheck0.setCommentFormat("o^$&SF<{[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression o^$&SF<{[
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      int[] intArray0 = emptyCatchBlockCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {96}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyCatchBlockCheck emptyCatchBlockCheck0 = new EmptyCatchBlockCheck();
      emptyCatchBlockCheck0.setExceptionVariableName("catch.block.empty");
      assertNull(emptyCatchBlockCheck0.getId());
  }
}
