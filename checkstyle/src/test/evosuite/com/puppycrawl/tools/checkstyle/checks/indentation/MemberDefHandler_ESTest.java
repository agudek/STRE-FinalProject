/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:30:20 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CaseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ImportHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndexHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LabelHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MemberDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ObjectBlockHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PackageDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PrimordialHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.WhileHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemberDefHandler_ESTest extends MemberDefHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      ObjectBlockHandler objectBlockHandler0 = new ObjectBlockHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, detailAST0, objectBlockHandler0);
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, (DetailAST) null, caseHandler0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, indexHandler0);
      // Undeclared exception!
      try { 
        memberDefHandler0.checkModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      // Undeclared exception!
      try { 
        memberDefHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.MemberDefHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = memberDefHandler0.getSuggestedChildIndent(primordialHandler0);
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      ImportHandler importHandler0 = new ImportHandler(indentationCheck0, (DetailAST) null, packageDefHandler0);
      WhileHandler whileHandler0 = new WhileHandler(indentationCheck0, (DetailAST) null, importHandler0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, (DetailAST) null, whileHandler0);
      IndentLevel indentLevel0 = memberDefHandler0.getSuggestedChildIndent(whileHandler0);
      assertEquals(12, indentLevel0.getLastIndentLevel());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      MemberDefHandler memberDefHandler0 = new MemberDefHandler((IndentationCheck) null, detailAST0, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        memberDefHandler0.getSuggestedChildIndent((AbstractExpressionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST0, primordialHandler0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, labelHandler0);
      // Undeclared exception!
      try { 
        memberDefHandler0.getSuggestedChildIndent(primordialHandler0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -4
         //
         verifyException("java.util.BitSet", e);
      }
  }
}
