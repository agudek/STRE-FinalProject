/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:37:25 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.whitespace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck;
import java.io.File;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodParamPadCheck_ESTest extends MethodParamPadCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(38, "TW^P6&<e\"T5VA");
      methodParamPadCheck0.visitToken(detailAST0);
      assertNull(methodParamPadCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      methodParamPadCheck0.setOption("NOSPACE");
      assertEquals(SeverityLevel.ERROR, methodParamPadCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(27, "ws.notPreceded");
      File file0 = MockFile.createTempFile("ws.preceded", "7;1g:@u+`}\"XYK{");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(file0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      methodParamPadCheck0.setFileContents(fileContents0);
      // Undeclared exception!
      try { 
        methodParamPadCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      // Undeclared exception!
      try { 
        methodParamPadCheck0.setOption((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      int[] intArray0 = methodParamPadCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {8, 136, 27, 9, 42, 155}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(27, "ws.notPreceded");
      // Undeclared exception!
      try { 
        methodParamPadCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      DetailAST detailAST0 = new DetailAST();
      methodParamPadCheck0.visitToken(detailAST0);
      assertNull(methodParamPadCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      // Undeclared exception!
      try { 
        methodParamPadCheck0.setOption("ws.preceded");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse ws.preceded
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      int[] intArray0 = methodParamPadCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      int[] intArray0 = methodParamPadCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {8, 136, 27, 9, 42, 155}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MethodParamPadCheck methodParamPadCheck0 = new MethodParamPadCheck();
      methodParamPadCheck0.setAllowLineBreaks(false);
      assertEquals(SeverityLevel.ERROR, methodParamPadCheck0.getSeverityLevel());
  }
}
