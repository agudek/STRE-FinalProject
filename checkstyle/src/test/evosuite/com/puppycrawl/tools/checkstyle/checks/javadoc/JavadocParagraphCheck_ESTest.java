/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:46:40 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailNode;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavadocParagraphCheck_ESTest extends JavadocParagraphCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocNodeImpl0.setType(10071);
      javadocParagraphCheck0.visitJavadocToken(javadocNodeImpl0);
      assertNull(javadocNodeImpl0.getText());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      int[] intArray0 = javadocParagraphCheck0.getDefaultJavadocTokens();
      assertArrayEquals(new int[] {6, 10001}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      DetailNode[] detailNodeArray0 = new DetailNode[1];
      detailNodeArray0[0] = (DetailNode) javadocNodeImpl0;
      javadocNodeImpl0.setChildren(detailNodeArray0);
      javadocNodeImpl0.setType(10001);
      javadocParagraphCheck0.visitJavadocToken(javadocNodeImpl0);
      assertTrue(javadocParagraphCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocNodeImpl0.setType(10001);
      // Undeclared exception!
      try { 
        javadocParagraphCheck0.visitJavadocToken(javadocNodeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocNodeImpl0.setType(6);
      javadocParagraphCheck0.visitJavadocToken(javadocNodeImpl0);
      assertTrue(javadocParagraphCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocParagraphCheck0.visitJavadocToken(javadocNodeImpl0);
      assertEquals(SeverityLevel.ERROR, javadocParagraphCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      javadocParagraphCheck0.setAllowNewlineParagraph(true);
      assertTrue(javadocParagraphCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      int[] intArray0 = javadocParagraphCheck0.getRequiredJavadocTokens();
      assertArrayEquals(new int[] {6, 10001}, intArray0);
  }
}
