/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:14:47 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReturnCountCheck_ESTest extends ReturnCountCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(9, "return.countVoid");
      returnCountCheck0.beginTree(detailAST0);
      // Undeclared exception!
      try { 
        returnCountCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST1.setNextSibling(detailAST0);
      detailAST0.addChild(detailAST1);
      // Undeclared exception!
      returnCountCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      returnCountCheck0.beginTree(detailAST0);
      detailAST0.initialize(181, "return.countVoid");
      returnCountCheck0.visitToken(detailAST0);
      returnCountCheck0.leaveToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        returnCountCheck0.leaveToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // null[-2147483648x-2147483648]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(88, "return.countVoid");
      returnCountCheck0.leaveToken(detailAST0);
      assertEquals(88, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(9, "return.countVoid");
      // Undeclared exception!
      try { 
        returnCountCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(8, "return.countVoid");
      // Undeclared exception!
      try { 
        returnCountCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        returnCountCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // null[-2147483648x-2147483648]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(8, "return.countVoid");
      // Undeclared exception!
      try { 
        returnCountCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      int[] intArray0 = returnCountCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {88}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      returnCountCheck0.setMax(1);
      assertFalse(returnCountCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      int[] intArray0 = returnCountCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {8, 9, 181, 88}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      int[] intArray0 = returnCountCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {8, 9, 181, 88}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      returnCountCheck0.setMaxForVoid(1);
      assertNull(returnCountCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      Pattern pattern0 = Pattern.compile("return.count");
      returnCountCheck0.setFormat(pattern0);
      assertFalse(returnCountCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReturnCountCheck returnCountCheck0 = new ReturnCountCheck();
      DetailAST detailAST0 = new DetailAST();
      returnCountCheck0.beginTree(detailAST0);
      detailAST0.initialize(181, "return.countVoid");
      // Undeclared exception!
      try { 
        returnCountCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }
}
