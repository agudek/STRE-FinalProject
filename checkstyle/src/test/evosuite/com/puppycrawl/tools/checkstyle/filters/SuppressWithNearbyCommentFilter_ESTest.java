/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:24:09 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;
import com.puppycrawl.tools.checkstyle.api.Comment;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter;
import java.io.File;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SuppressWithNearbyCommentFilter_ESTest extends SuppressWithNearbyCommentFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      suppressWithNearbyCommentFilter0.finishLocalSetup();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      suppressWithNearbyCommentFilter0.setInfluenceFormat(";F1h^qk9N<HB7#");
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = null;
      try {
        suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag(", tagMessageRegexp=", (-29), suppressWithNearbyCommentFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse influence from ', tagMessageRegexp=' using ;F1h^qk9N<HB7#
         //
         verifyException("com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      suppressWithNearbyCommentFilter0.setCheckFormat("39W9DKm>[C");
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = null;
      try {
        suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag(".*", 0, suppressWithNearbyCommentFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse expanded comment 39W9DKm>[C
         //
         verifyException("com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      // Undeclared exception!
      try { 
        suppressWithNearbyCommentFilter0.accept((TreeWalkerAuditEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      MockFile mockFile0 = new MockFile((File) null, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      suppressWithNearbyCommentFilter0.setFileContents(fileContents0);
      assertFalse(fileContents0.inPackageInfo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      suppressWithNearbyCommentFilter0.setMessageFormat("");
      suppressWithNearbyCommentFilter0.setCheckFormat("BeanIntrospector must not be null!");
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[6];
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(61, 994, 2, 994, "hYQeKXYq", "", objectArray0, severityLevel0, "", class0, "");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, (DetailAST) null);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("BeanIntrospector must not be null!", 61, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("HMH?b#91wz9tQm{e", 5, suppressWithNearbyCommentFilter0);
      File file0 = MockFile.createTempFile("HMH?b#91wz9tQm{e", "HMH?b#91wz9tQm{e", (File) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(file0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[6];
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<Comment> class0 = Comment.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(3304, "com.puppycrawl.tools.checkstyle.api.Comment", "<NULL>", objectArray0, severityLevel0, "", class0, "com.puppycrawl.tools.checkstyle.api.Comment");
      DetailAST detailAST0 = new DetailAST();
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "com.puppycrawl.tools.checkstyle.api.Comment", localizedMessage0, detailAST0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[6];
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(101, 994, 2, 994, "hYQeKXYq", "", objectArray0, severityLevel0, "", class0, "on");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, (DetailAST) null);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("BeanIntrospector must not be null!", 101, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      Object[] objectArray0 = new Object[7];
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-3036), "kk", "", objectArray0, severityLevel0, "kk", class0, "LAhr");
      DetailAST detailAST0 = new DetailAST();
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent((FileContents) null, "", localizedMessage0, detailAST0);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("", 0, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("JNZG\"g8z&.vS`znv", 164, suppressWithNearbyCommentFilter0);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag1 = new SuppressWithNearbyCommentFilter.Tag("JNZG\"g8z&.vS`znv", 164, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.equals(suppressWithNearbyCommentFilter_Tag1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("JNZG\"g8z&.vS`znv", 164, suppressWithNearbyCommentFilter0);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag1 = new SuppressWithNearbyCommentFilter.Tag("JNZG\"g8z&.vS`znv", 1371, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.equals(suppressWithNearbyCommentFilter_Tag1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("", 0, suppressWithNearbyCommentFilter0);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag1 = new SuppressWithNearbyCommentFilter.Tag("[;1]ya3", 0, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.equals(suppressWithNearbyCommentFilter_Tag1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("H", (-3113), suppressWithNearbyCommentFilter0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.equals(locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("JNZG\"g8z&.vS`znv", 164, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.equals(suppressWithNearbyCommentFilter_Tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("BeanIntrospector must not be null!", 101, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      Class<FileContents> class0 = FileContents.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-3113), "CharMatcher.javaLowerCase()", ">nBX5GVqONM", locale_CategoryArray0, "CharMatcher.javaLowerCase()", class0, ".*");
      DetailAST detailAST0 = new DetailAST();
      MockFile mockFile0 = new MockFile((File) null, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      suppressWithNearbyCommentFilter0.setCheckCPP(false);
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "9^l7=!9+N1", localizedMessage0, detailAST0);
      boolean boolean0 = suppressWithNearbyCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      Class<FileContents> class0 = FileContents.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-3113), "CharMatcher.javaLowerCase()", ">nBX5GVqONM", locale_CategoryArray0, "CharMatcher.javaLowerCase()", class0, ".*");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent((FileContents) null, "CharMatcher.javaLowerCase()", localizedMessage0, (DetailAST) null);
      boolean boolean0 = suppressWithNearbyCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      File file0 = MockFile.createTempFile("D7*'", "JNZG\"g8z&.vS`znv");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(file0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "JNZG\"g8z&.vS`znv", (LocalizedMessage) null, (DetailAST) null);
      boolean boolean0 = suppressWithNearbyCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("H", (-3113), suppressWithNearbyCommentFilter0);
      String string0 = suppressWithNearbyCommentFilter_Tag0.toString();
      assertEquals("Tag[text='H', firstLine=-3113, lastLine=-3113, tagCheckRegexp=.*, tagMessageRegexp=null]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      Pattern pattern0 = Pattern.compile("HMH?b#91wz9tQm{e", 5);
      suppressWithNearbyCommentFilter0.setCommentFormat(pattern0);
      assertEquals("HMH?b#91wz9tQm{e", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      suppressWithNearbyCommentFilter0.setCheckFormat("BeanIntrospector must not be null!");
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[6];
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(101, 994, 2, 994, "hYQeKXYq", "", objectArray0, severityLevel0, "", class0, "on");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, (DetailAST) null);
      SuppressWithNearbyCommentFilter.Tag suppressWithNearbyCommentFilter_Tag0 = new SuppressWithNearbyCommentFilter.Tag("BeanIntrospector must not be null!", 101, suppressWithNearbyCommentFilter0);
      boolean boolean0 = suppressWithNearbyCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter0 = new SuppressWithNearbyCommentFilter();
      suppressWithNearbyCommentFilter0.setCheckC(false);
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      Class<FileContents> class0 = FileContents.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-3113), "CharMatcher.javaLowerCase()", ">nBX5GVqONM", locale_CategoryArray0, "CharMatcher.javaLowerCase()", class0, ".*");
      DetailAST detailAST0 = new DetailAST();
      MockFile mockFile0 = new MockFile((File) null, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "9^l7=!9+N1", localizedMessage0, detailAST0);
      boolean boolean0 = suppressWithNearbyCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }
}
