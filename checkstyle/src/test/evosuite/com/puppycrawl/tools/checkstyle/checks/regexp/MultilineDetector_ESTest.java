/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:49:58 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions;
import com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector;
import java.io.File;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultilineDetector_ESTest extends MultilineDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", (-319));
      DetectorOptions detectorOptions0 = mock(DetectorOptions.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.Multimaps$Keys").when(detectorOptions0).getFormat();
      doReturn(2324).when(detectorOptions0).getMaximum();
      doReturn(0).when(detectorOptions0).getMinimum();
      doReturn(pattern0).when(detectorOptions0).getPattern();
      MultilineDetector multilineDetector0 = new MultilineDetector(detectorOptions0);
      MockFile mockFile0 = new MockFile("regexp.minimum", "regexp.empty");
      Stack<String> stack0 = new Stack<String>();
      FileText fileText0 = new FileText(mockFile0, stack0);
      multilineDetector0.processLines(fileText0);
      assertEquals(0, fileText0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractViolationReporter abstractViolationReporter0 = mock(AbstractViolationReporter.class, new ViolatedAssumptionAnswer());
      Pattern pattern0 = Pattern.compile("regexp.exceeded", 2);
      Pattern pattern1 = Pattern.compile("", (-32));
      AbstractViolationReporter abstractViolationReporter1 = mock(AbstractViolationReporter.class, new ViolatedAssumptionAnswer());
      DetectorOptions detectorOptions0 = mock(DetectorOptions.class, new ViolatedAssumptionAnswer());
      doReturn("regexp.exceeded", "BloomFilters must have equal strategies (%s != %s)").when(detectorOptions0).getFormat();
      doReturn(1).when(detectorOptions0).getMaximum();
      doReturn("\n|\r\n?", "", "\n|\r\n?", "E7OE;x)1").when(detectorOptions0).getMessage();
      doReturn(2, 2147483645).when(detectorOptions0).getMinimum();
      doReturn(pattern0, pattern1).when(detectorOptions0).getPattern();
      doReturn(abstractViolationReporter0, abstractViolationReporter1).when(detectorOptions0).getReporter();
      MultilineDetector multilineDetector0 = new MultilineDetector(detectorOptions0);
      MockFile mockFile0 = new MockFile("regexp.minimum", "regexp.StackOverflowError");
      Stack<String> stack0 = new Stack<String>();
      FileText fileText0 = new FileText(mockFile0, stack0);
      multilineDetector0.processLines(fileText0);
      multilineDetector0.processLines(fileText0);
      assertEquals(0, fileText0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Y8qXb>_]h");
      DetectorOptions detectorOptions0 = mock(DetectorOptions.class, new ViolatedAssumptionAnswer());
      doReturn("Y8qXb>_]h").when(detectorOptions0).getFormat();
      doReturn(0).when(detectorOptions0).getMinimum();
      doReturn(pattern0).when(detectorOptions0).getPattern();
      MultilineDetector multilineDetector0 = new MultilineDetector(detectorOptions0);
      MockFile mockFile0 = new MockFile("regexp.minimum", "pr;VTtkg#7l)^f");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(mockFile0, vector0);
      multilineDetector0.processLines(fileText0);
      assertEquals(0, fileText0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractViolationReporter abstractViolationReporter0 = mock(AbstractViolationReporter.class, new ViolatedAssumptionAnswer());
      Pattern pattern0 = Pattern.compile("", (-319));
      AbstractViolationReporter abstractViolationReporter1 = mock(AbstractViolationReporter.class, new ViolatedAssumptionAnswer());
      AbstractViolationReporter abstractViolationReporter2 = mock(AbstractViolationReporter.class, new ViolatedAssumptionAnswer());
      DetectorOptions detectorOptions0 = mock(DetectorOptions.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.Multimaps$Keys", "y").when(detectorOptions0).getFormat();
      doReturn((-319), (-319)).when(detectorOptions0).getMaximum();
      doReturn("", "y", "", "").when(detectorOptions0).getMessage();
      doReturn(250, (-1)).when(detectorOptions0).getMinimum();
      doReturn(pattern0).when(detectorOptions0).getPattern();
      doReturn(abstractViolationReporter1, abstractViolationReporter0, abstractViolationReporter2).when(detectorOptions0).getReporter();
      MultilineDetector multilineDetector0 = new MultilineDetector(detectorOptions0);
      MockFile mockFile0 = new MockFile("haPH=Pw^(Vaa_2t0Q,", "regexp.empty");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      FileText fileText0 = new FileText(mockFile0, stack0);
      multilineDetector0.processLines(fileText0);
      assertEquals(1, fileText0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DetectorOptions detectorOptions0 = mock(DetectorOptions.class, new ViolatedAssumptionAnswer());
      doReturn("").when(detectorOptions0).getFormat();
      doReturn((AbstractViolationReporter) null).when(detectorOptions0).getReporter();
      MultilineDetector multilineDetector0 = new MultilineDetector(detectorOptions0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      FileText fileText0 = new FileText((File) null, list0);
      // Undeclared exception!
      try { 
        multilineDetector0.processLines(fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DetectorOptions detectorOptions0 = mock(DetectorOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(detectorOptions0).getFormat();
      doReturn((AbstractViolationReporter) null).when(detectorOptions0).getReporter();
      MultilineDetector multilineDetector0 = new MultilineDetector(detectorOptions0);
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText((File) null, vector0);
      // Undeclared exception!
      try { 
        multilineDetector0.processLines(fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector", e);
      }
  }
}
