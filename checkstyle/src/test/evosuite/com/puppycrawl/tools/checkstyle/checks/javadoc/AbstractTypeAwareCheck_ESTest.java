/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:15:16 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FullIdent;
import com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractTypeAwareCheck_ESTest extends AbstractTypeAwareCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token((String) null, (-359), 44);
      assertEquals(44, abstractTypeAwareCheck_Token0.getColumnNo());
      assertEquals((-359), abstractTypeAwareCheck_Token0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      String[] stringArray0 = new String[8];
      javadocMethodCheck0.setLogLoadErrors(false);
      // Undeclared exception!
      try { 
        javadocMethodCheck0.logLoadErrorImpl(2147483641, 13, "H78yES(<", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // H78yES(<
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(38, "javadoc.classInfo");
      javadocMethodCheck0.leaveToken(detailAST0);
      assertNull(javadocMethodCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(2542, "javadoc.duplicateTag");
      // Undeclared exception!
      try { 
        javadocMethodCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      FullIdent fullIdent0 = FullIdent.createFullIdent(detailAST0);
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token(fullIdent0);
      int int0 = abstractTypeAwareCheck_Token0.getLineNo();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      FullIdent fullIdent0 = FullIdent.createFullIdent(detailAST0);
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token(fullIdent0);
      int int0 = abstractTypeAwareCheck_Token0.getColumnNo();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      FullIdent fullIdent0 = FullIdent.createFullIdent(detailAST0);
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token(fullIdent0);
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      AbstractTypeAwareCheck.AbstractClassInfo abstractTypeAwareCheck_AbstractClassInfo0 = javadocMethodCheck0.createClassInfo(abstractTypeAwareCheck_Token0, (String) null);
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token1 = abstractTypeAwareCheck_AbstractClassInfo0.getName();
      assertEquals(Integer.MIN_VALUE, abstractTypeAwareCheck_Token1.getLineNo());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = AbstractTypeAwareCheck.isSubclass(class1, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = AbstractTypeAwareCheck.isSubclass(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      javadocMethodCheck0.beginTree((DetailAST) null);
      String string0 = javadocMethodCheck0.getCurrentClassName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      AbstractTypeAwareCheck.AbstractClassInfo abstractTypeAwareCheck_AbstractClassInfo0 = javadocMethodCheck0.findClassAlias("javadoc.unusedTagGeneral");
      assertNull(abstractTypeAwareCheck_AbstractClassInfo0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token("javadoc.return.expected", (-2758), (-2758));
      // Undeclared exception!
      try { 
        javadocMethodCheck0.tryLoadClass(abstractTypeAwareCheck_Token0, "messages");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      // Undeclared exception!
      try { 
        javadocMethodCheck0.resolveClass("'wGnCg#g", "javadoc.unusedTag");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        javadocMethodCheck0.logLoadErrorImpl((-1412), 288, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      // Undeclared exception!
      try { 
        javadocMethodCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      // Undeclared exception!
      try { 
        javadocMethodCheck0.createClassInfo((AbstractTypeAwareCheck.Token) null, "error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token("The suffix must not be null", 16, 16);
      abstractTypeAwareCheck_Token0.getText();
      assertEquals(16, abstractTypeAwareCheck_Token0.getColumnNo());
      assertEquals(16, abstractTypeAwareCheck_Token0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      javadocMethodCheck0.setSuppressLoadErrors(true);
      DetailAST detailAST0 = new DetailAST();
      FullIdent fullIdent0 = FullIdent.createFullIdent(detailAST0);
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token(fullIdent0);
      javadocMethodCheck0.logLoadError(abstractTypeAwareCheck_Token0);
      assertEquals(Integer.MIN_VALUE, abstractTypeAwareCheck_Token0.getLineNo());
      assertEquals(Integer.MIN_VALUE, abstractTypeAwareCheck_Token0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      javadocMethodCheck0.beginTree((DetailAST) null);
      javadocMethodCheck0.resolveClass("&", "");
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token("javadoc.return.expected", (-868), (-868));
      AbstractTypeAwareCheck.AbstractClassInfo abstractTypeAwareCheck_AbstractClassInfo0 = javadocMethodCheck0.createClassInfo(abstractTypeAwareCheck_Token0, "");
      // Undeclared exception!
      try { 
        abstractTypeAwareCheck_AbstractClassInfo0.getClazz();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = AbstractTypeAwareCheck.isUnchecked(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = AbstractTypeAwareCheck.isUnchecked((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = AbstractTypeAwareCheck.isUnchecked(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      DetailAST detailAST0 = new DetailAST();
      javadocMethodCheck0.leaveToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(154, "javadoc.duplicateTag");
      // Undeclared exception!
      try { 
        javadocMethodCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(15, "javadoc.duplicateTag");
      // Undeclared exception!
      try { 
        javadocMethodCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      // Undeclared exception!
      try { 
        javadocMethodCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      FullIdent fullIdent0 = FullIdent.createFullIdentBelow(detailAST0);
      AbstractTypeAwareCheck.Token abstractTypeAwareCheck_Token0 = new AbstractTypeAwareCheck.Token(fullIdent0);
      String string0 = abstractTypeAwareCheck_Token0.toString();
      assertEquals("Token[(0x0)]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      String string0 = javadocMethodCheck0.getCurrentClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavadocMethodCheck javadocMethodCheck0 = new JavadocMethodCheck();
      int[] intArray0 = javadocMethodCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {16, 30, 14, 15, 154}, intArray0);
  }
}
