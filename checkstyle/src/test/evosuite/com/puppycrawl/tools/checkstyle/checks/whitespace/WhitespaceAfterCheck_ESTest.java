/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:53:53 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.whitespace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WhitespaceAfterCheck_ESTest extends WhitespaceAfterCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(85);
      // Undeclared exception!
      try { 
        whitespaceAfterCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setFirstChild(detailAST0);
      // Undeclared exception!
      whitespaceAfterCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      MockFile mockFile0 = new MockFile("' has no mapped getter method on bean class '");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(mockFile0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      whitespaceAfterCheck0.setFileContents(fileContents0);
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        whitespaceAfterCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      int[] intArray0 = whitespaceAfterCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {74, 45, 23, 83, 92, 84, 85, 91, 175}, intArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(23, "ws.typeCast");
      // Undeclared exception!
      try { 
        whitespaceAfterCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      int[] intArray0 = whitespaceAfterCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WhitespaceAfterCheck whitespaceAfterCheck0 = new WhitespaceAfterCheck();
      int[] intArray0 = whitespaceAfterCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {74, 45, 23, 83, 92, 84, 85, 91, 175}, intArray0);
  }
}
