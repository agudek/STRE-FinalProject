/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:32:24 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.coding.OverloadMethodsDeclarationOrderCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OverloadMethodsDeclarationOrderCheck_ESTest extends OverloadMethodsDeclarationOrderCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(56319, " bits");
      detailAST0.addChild(detailAST0);
      overloadMethodsDeclarationOrderCheck0.visitToken(detailAST0);
      assertFalse(overloadMethodsDeclarationOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      int[] intArray0 = overloadMethodsDeclarationOrderCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST1.initialize(14, "overload.methods.declaration");
      detailAST1.addPreviousSibling(detailAST0);
      detailAST0.initialize(9, "overload.methods.declaration");
      detailAST1.addChild(detailAST0);
      // Undeclared exception!
      try { 
        overloadMethodsDeclarationOrderCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.OverloadMethodsDeclarationOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(136, "overload.methods.declaration");
      detailAST0.addChild(detailAST0);
      overloadMethodsDeclarationOrderCheck0.visitToken(detailAST0);
      assertEquals("overload.methods.declaration", detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST1.initialize(15, "overload.methods.declaration");
      detailAST1.addPreviousSibling(detailAST0);
      detailAST1.addChild(detailAST0);
      overloadMethodsDeclarationOrderCheck0.visitToken(detailAST1);
      assertEquals("overload.methods.declaration", detailAST1.getText());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(154, "overload.methods.declaration");
      detailAST0.addChild(detailAST0);
      overloadMethodsDeclarationOrderCheck0.visitToken(detailAST0);
      assertEquals("overload.methods.declaration", detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST1.addPreviousSibling(detailAST0);
      detailAST1.addChild(detailAST0);
      overloadMethodsDeclarationOrderCheck0.visitToken(detailAST1);
      assertEquals(0, detailAST1.getType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      int[] intArray0 = overloadMethodsDeclarationOrderCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OverloadMethodsDeclarationOrderCheck overloadMethodsDeclarationOrderCheck0 = new OverloadMethodsDeclarationOrderCheck();
      int[] intArray0 = overloadMethodsDeclarationOrderCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {6}, intArray0);
  }
}
