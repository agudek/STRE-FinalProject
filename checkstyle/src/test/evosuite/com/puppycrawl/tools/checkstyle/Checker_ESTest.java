/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:01:17 GMT 2018
 */

package com.puppycrawl.tools.checkstyle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.Checker;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.PackageObjectFactory;
import com.puppycrawl.tools.checkstyle.ThreadModeSettings;
import com.puppycrawl.tools.checkstyle.TreeWalker;
import com.puppycrawl.tools.checkstyle.XMLLogger;
import com.puppycrawl.tools.checkstyle.api.AuditListener;
import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter;
import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilterSet;
import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
import com.puppycrawl.tools.checkstyle.api.FilterSet;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Checker_ESTest extends Checker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("^a65Hogk;7%au");
      checker0.fireFileFinished("QwZYSf");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Checker checker0 = new Checker();
      TreeSet<LocalizedMessage> treeSet0 = new TreeSet<LocalizedMessage>();
      checker0.setBasedir("^a65Hogk;7%au");
      Object[] objectArray0 = new Object[1];
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      Class<XMLLogger> class0 = XMLLogger.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-253), (-487), 6, (String) null, "k[klS;LGx*P<QA>%", objectArray0, severityLevel0, "k[klS;LGx*P<QA>%", class0, "");
      treeSet0.add(localizedMessage0);
      checker0.fireErrors("[F", treeSet0);
      assertTrue(treeSet0.contains(localizedMessage0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("`");
      checker0.fireFileStarted("u[;]{Dx!@,z5");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Checker checker0 = new Checker();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PackageObjectFactory packageObjectFactory0 = new PackageObjectFactory(set0, classLoader0);
      checker0.setModuleFactory(packageObjectFactory0);
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("");
      checker0.configure(defaultConfiguration0);
      checker0.setCacheFile(", ");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Checker checker0 = new Checker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PackageObjectFactory packageObjectFactory0 = new PackageObjectFactory(">)<6|jEOi(", classLoader0);
      checker0.setModuleFactory(packageObjectFactory0);
      ThreadModeSettings threadModeSettings0 = new ThreadModeSettings((-699), (-2945));
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("A-xuB||UsI", threadModeSettings0);
      try { 
        checker0.setupChild(defaultConfiguration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cannot initialize module A-xuB||UsI - Unable to instantiate 'A-xuB||UsI' class, it is also not possible to instantiate it as >)<6|jEOi(.A-xuB||UsI, A-xuB||UsICheck, >)<6|jEOi(.A-xuB||UsICheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly.
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Checker checker0 = new Checker();
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("general.exception");
      // Undeclared exception!
      try { 
        checker0.setupChild(defaultConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Checker checker0 = new Checker();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        checker0.setFileExtensions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Checker checker0 = new Checker();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "general.exception");
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PackageObjectFactory packageObjectFactory0 = new PackageObjectFactory(set0, classLoader0);
      checker0.setModuleFactory(packageObjectFactory0);
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("");
      checker0.configure(defaultConfiguration0);
      // Undeclared exception!
      try { 
        checker0.setCacheFile(", ");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.process((List<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("ya[Oj6");
      // Undeclared exception!
      try { 
        checker0.fireFileStarted("[g2p:MkC'.w@{YXkQ");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("iWHdg6EcY*dpMwj");
      // Undeclared exception!
      try { 
        checker0.fireFileFinished("iWHdg6EcY*dpMwj");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("ya[Oj6");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<LocalizedMessage> treeSet0 = new TreeSet<LocalizedMessage>(comparator0);
      // Undeclared exception!
      try { 
        checker0.fireErrors("Could not create BloomFilter of ", treeSet0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.fireErrors("f=(k'Dd9R@Mq|", (SortedSet<LocalizedMessage>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setLocaleLanguage((String) null);
      // Undeclared exception!
      try { 
        checker0.finishLocalSetup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Checker checker0 = new Checker();
      FilterSet filterSet0 = new FilterSet();
      FilterSet filterSet1 = new FilterSet();
      filterSet1.addFilter(filterSet0);
      filterSet0.addFilter(filterSet1);
      // Undeclared exception!
      try { 
        checker0.addFilter(filterSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.addFileSetCheck((FileSetCheck) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.addListener((AuditListener) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.clearCache();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Checker checker0 = new Checker();
      try { 
        checker0.setCharset("Check");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // unsupported charset: 'Check'
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Checker checker0 = new Checker();
      TreeWalker treeWalker0 = new TreeWalker();
      String[] stringArray0 = treeWalker0.getFileExtensions();
      checker0.setFileExtensions(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setFileExtensions((String[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Checker checker0 = new Checker();
      try { 
        checker0.finishLocalSetup();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // if no custom moduleFactory is set, moduleClassLoader must be specified
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Checker checker0 = new Checker();
      TreeSet<LocalizedMessage> treeSet0 = new TreeSet<LocalizedMessage>();
      checker0.fireErrors("[F", treeSet0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Checker checker0 = new Checker();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MockFile mockFile0 = new MockFile("BooleanExpressionComplexityCheck", "7myV*~");
      File file0 = MockFile.createTempFile("7myV*~", "7myV*~", (File) mockFile0);
      linkedList0.offerLast(file0);
      try { 
        checker0.process(linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Exception was thrown while processing C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\BooleanExpressionComplexityCheck\\7myV*~\\7myV*~07myV*~
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Checker checker0 = new Checker();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "general.exception";
      stringArray0[1] = "if no custom moduleFactory is set, moduleClassLoader must be specified";
      stringArray0[2] = "general.exception";
      stringArray0[3] = "general.exception";
      stringArray0[4] = "general.exception";
      stringArray0[5] = "general.exception";
      stringArray0[6] = "PO0cUPH/8";
      checker0.setFileExtensions(stringArray0);
      Vector<File> vector0 = new Vector<File>(0);
      MockFile mockFile0 = new MockFile("[g2p:MkC'.w@{YXkQ", "general.exception");
      vector0.add((File) mockFile0);
      int int0 = checker0.process(vector0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.destroy();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Checker checker0 = new Checker();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      File file0 = MockFile.createTempFile("general.exception", "general.exception");
      arrayList0.add(file0);
      int int0 = checker0.process(arrayList0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setHaltOnException(false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setSeverity((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.SeverityLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setCacheFile("v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // config can not be null
         //
         verifyException("com.puppycrawl.tools.checkstyle.PropertyCacheFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Checker checker0 = new Checker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      checker0.setClassLoader(classLoader0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Checker checker0 = new Checker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      PackageObjectFactory.ModuleLoadOption packageObjectFactory_ModuleLoadOption0 = PackageObjectFactory.ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES;
      PackageObjectFactory packageObjectFactory0 = new PackageObjectFactory(set0, classLoader0, packageObjectFactory_ModuleLoadOption0);
      checker0.setModuleFactory(packageObjectFactory0);
      checker0.finishLocalSetup();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setLocaleCountry("ya[Oj6");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Checker checker0 = new Checker();
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      SeverityLevelCounter severityLevelCounter0 = new SeverityLevelCounter(severityLevel0);
      checker0.removeListener(severityLevelCounter0);
      assertEquals(0, severityLevelCounter0.getCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Checker checker0 = new Checker();
      BeforeExecutionFileFilterSet beforeExecutionFileFilterSet0 = new BeforeExecutionFileFilterSet();
      checker0.removeBeforeExecutionFileFilter(beforeExecutionFileFilterSet0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Checker checker0 = new Checker();
      FilterSet filterSet0 = new FilterSet();
      checker0.removeFilter(filterSet0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.addBeforeExecutionFileFilter((BeforeExecutionFileFilter) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Checker checker0 = new Checker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      checker0.setModuleClassLoader(classLoader0);
      checker0.finishLocalSetup();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Checker checker0 = new Checker();
      FilterSet filterSet0 = new FilterSet();
      checker0.addFilter(filterSet0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Checker checker0 = new Checker();
      TreeWalker treeWalker0 = new TreeWalker();
      checker0.addFileSetCheck(treeWalker0);
      Vector<File> vector0 = new Vector<File>();
      int int0 = checker0.process(vector0);
      assertEquals(0, int0);
  }
}
