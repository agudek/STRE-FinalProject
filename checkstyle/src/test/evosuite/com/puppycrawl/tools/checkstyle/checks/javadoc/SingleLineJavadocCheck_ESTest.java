/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:23:03 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl;
import com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingleLineJavadocCheck_ESTest extends SingleLineJavadocCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      // Undeclared exception!
      try { 
        singleLineJavadocCheck0.visitJavadocToken(javadocNodeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      // Undeclared exception!
      try { 
        singleLineJavadocCheck0.setIgnoredTags((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      int[] intArray0 = singleLineJavadocCheck0.getDefaultJavadocTokens();
      assertArrayEquals(new int[] {10000}, intArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      int[] intArray0 = singleLineJavadocCheck0.getRequiredJavadocTokens();
      assertArrayEquals(new int[] {10000}, intArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      String[] stringArray0 = new String[12];
      singleLineJavadocCheck0.setIgnoredTags(stringArray0);
      assertTrue(singleLineJavadocCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      singleLineJavadocCheck0.setIgnoreInlineTags(true);
      assertTrue(singleLineJavadocCheck0.acceptJavadocWithNonTightHtml());
  }
}
