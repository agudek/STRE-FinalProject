/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:46:43 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CaseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CatchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ClassDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.DoWhileHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ElseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ForHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ImportHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndexHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LabelHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PackageDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PrimordialHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.StaticInitHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.SwitchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.TryHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.WhileHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockParentHandler_ESTest extends BlockParentHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "3^UVg", (DetailAST) null, (AbstractExpressionHandler) null);
      blockParentHandler0.checkTopLevelToken();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "EI*s-Y5/M@t]", (DetailAST) null, (AbstractExpressionHandler) null);
      DetailAST detailAST0 = blockParentHandler0.getTopLevelAst();
      assertNull(detailAST0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(2991, "Incorrect syntax for Java regular expression");
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      DetailAST detailAST1 = tryHandler0.getTopLevelAst();
      assertSame(detailAST0, detailAST1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((-1278), "Incorrect syntax for Java regular expression");
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      DetailAST detailAST1 = tryHandler0.getTopLevelAst();
      assertEquals(0, detailAST1.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      DetailAST detailAST1 = tryHandler0.getTopLevelAst();
      assertEquals(0, detailAST1.getLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      indentationCheck0.setBasicOffset(0);
      IndentLevel indentLevel0 = methodDefHandler0.getSuggestedChildIndent(primordialHandler0);
      assertEquals(0, indentLevel0.getLastIndentLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      DetailAST detailAST1 = arrayInitHandler0.getRightCurly();
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, (DetailAST) null, packageDefHandler0);
      DetailAST detailAST0 = switchHandler0.getNonListChild();
      assertNull(detailAST0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      ForHandler forHandler0 = new ForHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, detailAST0, forHandler0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, (DetailAST) null, indexHandler0);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST0, packageDefHandler0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST0, classDefHandler0);
      DetailAST detailAST1 = arrayInitHandler0.getListChild();
      assertEquals(0, detailAST1.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST0, switchHandler0);
      DetailAST detailAST1 = arrayInitHandler0.getLeftCurly();
      assertSame(detailAST1, detailAST0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      indentationCheck0.setBasicOffset(0);
      IndentLevel indentLevel0 = methodDefHandler0.getChildrenExpectedIndent();
      assertFalse(indentLevel0.isMultiLevel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = methodDefHandler0.getChildrenExpectedIndent();
      assertEquals(4, indentLevel0.getLastIndentLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "EI*s-Y5/M@t]", (DetailAST) null, (AbstractExpressionHandler) null);
      int[] intArray0 = blockParentHandler0.getCheckedChildren();
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, (DetailAST) null, catchHandler0);
      IndentLevel indentLevel0 = elseHandler0.curlyIndent();
      assertEquals(4, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrimordialHandler primordialHandler0 = new PrimordialHandler((IndentationCheck) null);
      CaseHandler caseHandler0 = new CaseHandler((IndentationCheck) null, (DetailAST) null, primordialHandler0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler((IndentationCheck) null, (DetailAST) null, caseHandler0);
      boolean boolean0 = arrayInitHandler0.canChildrenBeNested();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      StaticInitHandler staticInitHandler0 = new StaticInitHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, (DetailAST) null, staticInitHandler0);
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, (DetailAST) null, packageDefHandler0);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, (DetailAST) null, indexHandler0);
      WhileHandler whileHandler0 = new WhileHandler(indentationCheck0, (DetailAST) null, caseHandler0);
      // Undeclared exception!
      try { 
        whileHandler0.getSuggestedChildIndent(packageDefHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST0, arrayInitHandler0);
      ForHandler forHandler0 = new ForHandler(indentationCheck0, (DetailAST) null, labelHandler0);
      // Undeclared exception!
      try { 
        forHandler0.getListChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, (String) null, (DetailAST) null, (AbstractExpressionHandler) null);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, (DetailAST) null, blockParentHandler0);
      ImportHandler importHandler0 = new ImportHandler(indentationCheck0, detailAST0, caseHandler0);
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, (DetailAST) null, importHandler0);
      // Undeclared exception!
      try { 
        catchHandler0.getLeftCurly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        tryHandler0.getChildrenExpectedIndent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      DoWhileHandler doWhileHandler0 = new DoWhileHandler((IndentationCheck) null, detailAST0, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        doWhileHandler0.curlyIndent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      indentationCheck0.setBraceAdjustment((-1445));
      // Undeclared exception!
      try { 
        methodDefHandler0.curlyIndent();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1445
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      // Undeclared exception!
      try { 
        methodDefHandler0.getRightCurly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      DetailAST detailAST1 = tryHandler0.getListChild();
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      boolean boolean0 = tryHandler0.canChildrenBeNested();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = methodDefHandler0.getSuggestedChildIndent(primordialHandler0);
      assertFalse(indentLevel0.isMultiLevel());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        tryHandler0.getNonListChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      IndentLevel indentLevel0 = methodDefHandler0.curlyIndent();
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST0, switchHandler0);
      // Undeclared exception!
      try { 
        arrayInitHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      DetailAST detailAST1 = methodDefHandler0.getLeftCurly();
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        catchHandler0.checkTopLevelToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }
}
