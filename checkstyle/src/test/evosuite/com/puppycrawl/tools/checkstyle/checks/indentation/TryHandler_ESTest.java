/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:21:57 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CatchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.FinallyHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.indentation.LabelHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MemberDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PrimordialHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.SlistHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.StaticInitHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.TryHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TryHandler_ESTest extends TryHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, primordialHandler0);
      StaticInitHandler staticInitHandler0 = new StaticInitHandler(indentationCheck0, detailAST0, memberDefHandler0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST0, staticInitHandler0);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, labelHandler0);
      IndentLevel indentLevel0 = tryHandler0.getSuggestedChildIndent(staticInitHandler0);
      assertEquals(8, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      indentationCheck0.setBasicOffset(0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      IndentLevel indentLevel0 = tryHandler0.getSuggestedChildIndent(primordialHandler0);
      assertEquals(0, indentLevel0.getFirstIndentLevel());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      indentationCheck0.setBasicOffset((-4238));
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      // Undeclared exception!
      try { 
        tryHandler0.getSuggestedChildIndent(primordialHandler0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -4238
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, primordialHandler0);
      // Undeclared exception!
      try { 
        tryHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST0, primordialHandler0);
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST0, labelHandler0);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST0, slistHandler0);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, memberDefHandler0);
      // Undeclared exception!
      try { 
        tryHandler0.checkIndentation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -4
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      FinallyHandler finallyHandler0 = new FinallyHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, finallyHandler0);
      // Undeclared exception!
      try { 
        tryHandler0.getSuggestedChildIndent(finallyHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IndentationCheck indentationCheck0 = new IndentationCheck();
      DetailAST detailAST0 = new DetailAST();
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST0, (AbstractExpressionHandler) null);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST0, catchHandler0);
      // Undeclared exception!
      try { 
        tryHandler0.getSuggestedChildIndent(catchHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }
}
