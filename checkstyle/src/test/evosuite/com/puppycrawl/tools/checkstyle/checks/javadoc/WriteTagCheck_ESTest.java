/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:54:48 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WriteTagCheck_ESTest extends WriteTagCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      // Undeclared exception!
      try { 
        writeTagCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      MockFile mockFile0 = new MockFile("type.missingTag", "$`oFyiRb");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) priorityQueue0);
      FileText fileText0 = new FileText(mockFile0, list0);
      FileContents fileContents0 = new FileContents(fileText0);
      writeTagCheck0.setFileContents(fileContents0);
      // Undeclared exception!
      try { 
        writeTagCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483646
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      // Undeclared exception!
      try { 
        writeTagCheck0.setTag(".converterTo(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression .converterTo(\\s*(.*$)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      writeTagCheck0.setTag("type.tagFormat");
      assertFalse(writeTagCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      int[] intArray0 = writeTagCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      Pattern pattern0 = Pattern.compile("type.missingTag");
      writeTagCheck0.setTagFormat(pattern0);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      int[] intArray0 = writeTagCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {15, 14, 154, 157, 9, 8, 155, 161}, intArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      writeTagCheck0.setTagSeverity(severityLevel0);
      assertEquals(SeverityLevel.ERROR, writeTagCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      WriteTagCheck writeTagCheck0 = new WriteTagCheck();
      int[] intArray0 = writeTagCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {15, 14, 154, 157}, intArray0);
  }
}
