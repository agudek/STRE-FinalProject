/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:59:48 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.utils.AnnotationUtility;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationUtility_ESTest extends AnnotationUtility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(243);
      // Undeclared exception!
      try { 
        AnnotationUtility.getAnnotation(detailAST0, "the annotation is null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        AnnotationUtility.containsAnnotation(detailAST0, "rK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        AnnotationUtility.getAnnotation(detailAST0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the annotation is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(16, "yZTMYMMTnx-~Ja_ 9");
      DetailAST detailAST1 = AnnotationUtility.getAnnotationHolder(detailAST0);
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(155);
      DetailAST detailAST1 = AnnotationUtility.getAnnotationHolder(detailAST0);
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = AnnotationUtility.getAnnotationHolder(detailAST0);
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        AnnotationUtility.getAnnotation(detailAST0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the annotation is empty or spaces
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtility.getAnnotation((DetailAST) null, "the annotation is empty or spaces");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(155);
      boolean boolean0 = AnnotationUtility.containsAnnotation(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtility.getAnnotationHolder((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtility.containsAnnotation((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtility.containsAnnotation((DetailAST) null, "s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtility", e);
      }
  }
}
