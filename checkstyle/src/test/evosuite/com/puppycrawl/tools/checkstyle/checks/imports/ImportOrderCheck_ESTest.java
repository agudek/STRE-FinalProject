/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:07:26 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.imports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImportOrderCheck_ESTest extends ImportOrderCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(1073741824);
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      // Undeclared exception!
      try { 
        importOrderCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      importOrderCheck0.setOption("INFLOW");
      assertEquals(SeverityLevel.ERROR, importOrderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      // Undeclared exception!
      try { 
        importOrderCheck0.setOption((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      int[] intArray0 = importOrderCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        importOrderCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "aMndphXU@N([%E:=.";
      // Undeclared exception!
      try { 
        importOrderCheck0.setGroups(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S";
      stringArray0[1] = "import.ordering";
      stringArray0[2] = "import.separation";
      stringArray0[3] = "import.separation";
      stringArray0[4] = "import.separation";
      stringArray0[5] = "import.groups.separated.internally";
      stringArray0[6] = "import.ordering";
      stringArray0[7] = "/#k";
      // Undeclared exception!
      try { 
        importOrderCheck0.setGroups(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid group
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "import.ordering";
      stringArray0[1] = "import.groups.separated.internally";
      stringArray0[2] = "*";
      stringArray0[3] = "s(m";
      stringArray0[4] = "import.ordering";
      stringArray0[5] = "import.ordering";
      importOrderCheck0.setGroups(stringArray0);
      assertEquals(SeverityLevel.ERROR, importOrderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      importOrderCheck0.setUseContainerOrderingForStatic(false);
      assertNull(importOrderCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      importOrderCheck0.setSeparated(false);
      assertFalse(importOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      int[] intArray0 = importOrderCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {30}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      importOrderCheck0.setCaseSensitive(true);
      assertEquals(SeverityLevel.ERROR, importOrderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      importOrderCheck0.setSortStaticImportsAlphabetically(true);
      assertNull(importOrderCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      // Undeclared exception!
      try { 
        importOrderCheck0.setOption("import.groups.separated.internally");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse import.groups.separated.internally
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      DetailAST detailAST0 = new DetailAST();
      importOrderCheck0.beginTree(detailAST0);
      assertFalse(importOrderCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      int[] intArray0 = importOrderCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {30, 152}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImportOrderCheck importOrderCheck0 = new ImportOrderCheck();
      importOrderCheck0.setOrdered(true);
      assertEquals(SeverityLevel.ERROR, importOrderCheck0.getSeverityLevel());
  }
}
