/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:55:03 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.design;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import antlr.ParseTreeToken;
import antlr.Token;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.ThreadModeSettings;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisibilityModifierCheck_ESTest extends VisibilityModifierCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(30, "ioL\"<~__+qJAk=R\"r");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.initialize(30, "");
      detailAST0.addNextSibling(detailAST1);
      detailAST0.addChild(detailAST1);
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.getAcceptableTokens();
      VisibilityModifierCheck visibilityModifierCheck1 = new VisibilityModifierCheck();
      visibilityModifierCheck1.visitToken(detailAST0);
      visibilityModifierCheck0.getRequiredTokens();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(30, "ioL\"<<~0__+qJAk=R\"r");
      DetailAST detailAST1 = new DetailAST();
      detailAST0.addNextSibling(detailAST1);
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.getRequiredTokens();
      VisibilityModifierCheck visibilityModifierCheck1 = new VisibilityModifierCheck();
      assertFalse(visibilityModifierCheck1.isCommentNodesRequired());
      
      // Undeclared exception!
      try { 
        visibilityModifierCheck1.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(30, "ioL\"<<~0__+qJAk=R\"r");
      visibilityModifierCheck0.setAllowPublicImmutableFields(false);
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "variable.notPrivate";
      stringArray0[2] = "variable.notPrivate";
      stringArray0[3] = "variable.notPrivate";
      visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames(stringArray0);
      Pattern pattern0 = Pattern.compile("variable.notPrivate", 10);
      pattern0.splitAsStream("variable.notPrivate");
      visibilityModifierCheck0.setPublicMemberPattern(pattern0);
      visibilityModifierCheck0.getRequiredTokens();
      visibilityModifierCheck0.getDefaultTokens();
      DetailAST detailAST0 = new DetailAST();
      visibilityModifierCheck0.getDefaultTokens();
      detailAST0.initialize(10, "1|,48EQ");
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "variable.notPrivate";
      stringArray0[2] = "variable.notPrivate";
      stringArray0[3] = "variable.notPrivate";
      stringArray0[4] = "variable.notPrivate";
      stringArray0[5] = "variable.notPrivate";
      stringArray0[6] = "variable.notPrivate";
      visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames(stringArray0);
      visibilityModifierCheck0.getAcceptableTokens();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "variable.notPrivate";
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findFirstToken(0);
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.beginTree((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.setProtectedAllowed(false);
      DetailAST detailAST0 = new DetailAST();
      Token token0 = new Token((-3178), "variable.notPrivate");
      ParseTreeToken parseTreeToken0 = new ParseTreeToken(token0);
      detailAST0.getParent();
      detailAST0.addNextSibling((DetailAST) null);
      detailAST0.findAll(parseTreeToken0);
      visibilityModifierCheck0.beginTree(detailAST0);
      visibilityModifierCheck0.setAllowPublicFinalFields(false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      ThreadModeSettings threadModeSettings0 = new ThreadModeSettings(1370, 1370);
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("tQ", threadModeSettings0);
      visibilityModifierCheck0.configure(defaultConfiguration0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.setAllowPublicImmutableFields(false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.setAllowPublicFinalFields(false);
      visibilityModifierCheck0.setPackageAllowed(true);
      visibilityModifierCheck0.setTabWidth(15);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "variable.notPrivate";
      stringArray0[1] = "variable.notPrivate";
      stringArray0[2] = "variable.notPrivate";
      stringArray0[3] = "variable.notPrivate";
      visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames(stringArray0);
      visibilityModifierCheck0.setTokens(stringArray0);
      visibilityModifierCheck0.setAllowPublicFinalFields(false);
      visibilityModifierCheck0.getSeverity();
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.setImmutableClassCanonicalNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "variable.notPrivate";
      stringArray0[1] = "variable.notPrivate";
      stringArray0[2] = "variable.notPrivate";
      visibilityModifierCheck0.setImmutableClassCanonicalNames(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NOT_NULL";
      stringArray0[1] = "variable.notPrivate";
      stringArray0[2] = "variable.notPrivate";
      stringArray0[3] = "variable.notPrivate";
      stringArray0[4] = "variable.notPrivate";
      visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames(stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.getSeverity();
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.setAllowPublicFinalFields(false);
      visibilityModifierCheck0.getSeverity();
      visibilityModifierCheck0.getDefaultTokens();
      visibilityModifierCheck0.getDefaultTokens();
      visibilityModifierCheck0.getAcceptableTokens();
      visibilityModifierCheck0.setPackageAllowed(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      Pattern pattern0 = Pattern.compile("G", 1700);
      pattern0.asPredicate();
      Pattern.matches("com.google.common.annotations.VisibleForTesting", "G");
      visibilityModifierCheck0.setPublicMemberPattern(pattern0);
      visibilityModifierCheck0.getRequiredTokens();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected token type: null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getNextSibling();
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.getDefaultTokens();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.clearMessages();
      visibilityModifierCheck0.getAcceptableTokens();
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.getLine(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(30, "ioL\"<~__+qJAk=R\"r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DetailAST detailAST1 = new DetailAST();
      detailAST1.initialize(30, "");
      detailAST0.addNextSibling(detailAST1);
      detailAST0.addChild(detailAST1);
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.getAcceptableTokens();
      visibilityModifierCheck0.visitToken(detailAST0);
      VisibilityModifierCheck visibilityModifierCheck1 = new VisibilityModifierCheck();
      visibilityModifierCheck1.visitToken(detailAST0);
      visibilityModifierCheck0.getRequiredTokens();
      visibilityModifierCheck1.getDefaultTokens();
      // Undeclared exception!
      visibilityModifierCheck1.visitToken(detailAST1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      DetailAST detailAST0 = new DetailAST();
      visibilityModifierCheck0.setAllowPublicImmutableFields(false);
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected token type: null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      String[] stringArray0 = new String[4];
      visibilityModifierCheck0.setIgnoreAnnotationCanonicalNames(stringArray0);
      Pattern pattern0 = Pattern.compile("variable.notPrivate", 10);
      visibilityModifierCheck0.setPublicMemberPattern(pattern0);
      visibilityModifierCheck0.getAcceptableTokens();
      DetailAST detailAST0 = new DetailAST();
      visibilityModifierCheck0.getDefaultTokens();
      detailAST0.initialize(10, "variable.notPrivate");
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      DetailAST detailAST0 = new DetailAST();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "variable.notPrivate";
      stringArray0[1] = "variable.notPrivate";
      stringArray0[2] = "variable.notPrivate";
      stringArray0[3] = "variable.notPrivate";
      visibilityModifierCheck0.setImmutableClassCanonicalNames(stringArray0);
      visibilityModifierCheck0.beginTree(detailAST0);
      // Undeclared exception!
      try { 
        visibilityModifierCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected token type: null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisibilityModifierCheck visibilityModifierCheck0 = new VisibilityModifierCheck();
      visibilityModifierCheck0.setAllowPublicFinalFields(true);
      visibilityModifierCheck0.setProtectedAllowed(true);
      visibilityModifierCheck0.setPackageAllowed(true);
      assertFalse(visibilityModifierCheck0.isCommentNodesRequired());
  }
}
