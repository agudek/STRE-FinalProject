/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:40:16 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.header;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.ThreadModeSettings;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedSet;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegexpHeaderCheck_ESTest extends RegexpHeaderCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertNotNull(regexpHeaderCheck0);
      
      regexpHeaderCheck0.setHeader("/2");
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      
      int[] intArray0 = new int[8];
      intArray0[4] = 1;
      regexpHeaderCheck0.setMultiLines(intArray0);
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertArrayEquals(new int[] {0, 0, 0, 0, 1, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      MockFile mockFile0 = new MockFile("/2", "header.missing");
      assertNotNull(mockFile0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("header.missing"));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("/2");
      assertFalse(stack0.isEmpty());
      assertEquals("[/2]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("/2"));
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("JeYk%Xu@X");
      assertFalse(stack0.isEmpty());
      assertEquals("[/2, JeYk%Xu@X]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("JeYk%Xu@X"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileText fileText0 = new FileText(mockFile0, stack0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("header.missing", mockFile0.getName());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2\\header.missing", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(stack0.isEmpty());
      assertEquals("[/2, JeYk%Xu@X]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(2, fileText0.size());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("JeYk%Xu@X"));
      assertNotNull(fileText0);
      
      regexpHeaderCheck0.processFiltered(mockFile0, fileText0);
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("header.missing", mockFile0.getName());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2\\header.missing", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(stack0.isEmpty());
      assertEquals("[/2, JeYk%Xu@X]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(2, fileText0.size());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("JeYk%Xu@X"));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNotNull(regexpHeaderCheck0);
      
      regexpHeaderCheck0.postProcessHeaderLines();
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertNotNull(regexpHeaderCheck0);
      
      regexpHeaderCheck0.setHeader("com.google.common.hash.Funnels$UnencodedCharsFunnel");
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      
      int[] intArray0 = new int[2];
      MockFile mockFile0 = new MockFile("header.mismatch", "com.google.common.hash.Funnels$UnencodedCharsFunnel");
      assertNotNull(mockFile0);
      
      ThreadModeSettings threadModeSettings0 = new ThreadModeSettings(117, 117);
      assertEquals(117, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(117, threadModeSettings0.getCheckerThreadsNumber());
      assertNotNull(threadModeSettings0);
      
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("header.mismatch", threadModeSettings0);
      assertEquals(117, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(117, threadModeSettings0.getCheckerThreadsNumber());
      assertEquals("header.mismatch", defaultConfiguration0.getName());
      assertNotNull(defaultConfiguration0);
      
      regexpHeaderCheck0.configure(defaultConfiguration0);
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(117, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(117, threadModeSettings0.getCheckerThreadsNumber());
      assertEquals("header.mismatch", defaultConfiguration0.getName());
      
      regexpHeaderCheck0.setMultiLines(intArray0);
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("header.mismatch"));
      assertNotNull(arrayList0);
      
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      assertEquals("com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch\\com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertFalse(arrayList0.contains("header.mismatch"));
      assertNotNull(fileText0);
      
      SortedSet<LocalizedMessage> sortedSet0 = regexpHeaderCheck0.process(mockFile0, fileText0);
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertEquals("com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch\\com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fileText0.size());
      assertEquals(1, sortedSet0.size());
      assertFalse(sortedSet0.isEmpty());
      assertFalse(arrayList0.contains("header.mismatch"));
      assertNotNull(sortedSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertNotNull(regexpHeaderCheck0);
      
      // Undeclared exception!
      try { 
        regexpHeaderCheck0.setMultiLines((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNull(regexpHeaderCheck0.getId());
      assertNotNull(regexpHeaderCheck0);
      
      // Undeclared exception!
      try { 
        regexpHeaderCheck0.setHeader("qV[0U=(&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to parse format: qV[0U=(&
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNotNull(regexpHeaderCheck0);
      
      regexpHeaderCheck0.setHeader((String) null);
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNotNull(regexpHeaderCheck0);
      
      regexpHeaderCheck0.setHeader("com.google.common.hash.Funnels$UnencodedCharsFunnel");
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      
      MockFile mockFile0 = new MockFile("header.mismatch", "com.google.common.hash.Funnels$UnencodedCharsFunnel");
      assertNotNull(mockFile0);
      
      ThreadModeSettings threadModeSettings0 = new ThreadModeSettings(117, 117);
      assertEquals(117, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(117, threadModeSettings0.getCheckerThreadsNumber());
      assertNotNull(threadModeSettings0);
      
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("header.mismatch", threadModeSettings0);
      assertEquals(117, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(117, threadModeSettings0.getCheckerThreadsNumber());
      assertEquals("header.mismatch", defaultConfiguration0.getName());
      assertNotNull(defaultConfiguration0);
      
      regexpHeaderCheck0.configure(defaultConfiguration0);
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertEquals(117, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(117, threadModeSettings0.getCheckerThreadsNumber());
      assertEquals("header.mismatch", defaultConfiguration0.getName());
      
      List<String> list0 = regexpHeaderCheck0.getHeaderLines();
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains("header.mismatch"));
      assertTrue(list0.contains("com.google.common.hash.Funnels$UnencodedCharsFunnel"));
      assertNotNull(list0);
      
      FileText fileText0 = new FileText(mockFile0, list0);
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertFalse(mockFile0.canRead());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch\\com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, fileText0.size());
      assertFalse(list0.contains("header.mismatch"));
      assertTrue(list0.contains("com.google.common.hash.Funnels$UnencodedCharsFunnel"));
      assertNotNull(fileText0);
      
      SortedSet<LocalizedMessage> sortedSet0 = regexpHeaderCheck0.process(mockFile0, fileText0);
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertFalse(mockFile0.canRead());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch\\com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.google.common.hash.Funnels$UnencodedCharsFunnel", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\header.mismatch", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, fileText0.size());
      assertFalse(sortedSet0.isEmpty());
      assertEquals(1, sortedSet0.size());
      assertFalse(list0.contains("header.mismatch"));
      assertTrue(list0.contains("com.google.common.hash.Funnels$UnencodedCharsFunnel"));
      assertNotNull(sortedSet0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertNotNull(regexpHeaderCheck0);
      
      regexpHeaderCheck0.setHeader("/2");
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      
      int[] intArray0 = new int[8];
      intArray0[4] = 1;
      regexpHeaderCheck0.setMultiLines(intArray0);
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertArrayEquals(new int[] {0, 0, 0, 0, 1, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      MockFile mockFile0 = new MockFile("/2", "header.missing");
      assertNotNull(mockFile0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("/2"));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("/2");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[/2]", stack0.toString());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("/2"));
      assertTrue(boolean0);
      
      FileText fileText0 = new FileText(mockFile0, stack0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2\\header.missing", mockFile0.toString());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("header.missing", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[/2]", stack0.toString());
      assertEquals(1, fileText0.size());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("/2"));
      assertNotNull(fileText0);
      
      regexpHeaderCheck0.processFiltered(mockFile0, fileText0);
      assertNull(regexpHeaderCheck0.getId());
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2\\header.missing", mockFile0.toString());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\2", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("header.missing", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[/2]", stack0.toString());
      assertEquals(1, fileText0.size());
      assertFalse(stack0.contains("header.missing"));
      assertTrue(stack0.contains("/2"));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      regexpHeaderCheck0.setHeader("header.missing");
      int[] intArray0 = new int[8];
      intArray0[3] = 1;
      regexpHeaderCheck0.setMultiLines(intArray0);
      MockFile mockFile0 = new MockFile("header.missing");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      FileText fileText0 = new FileText(mockFile0, stack0);
      regexpHeaderCheck0.processFiltered(mockFile0, fileText0);
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      regexpHeaderCheck0.setHeader("header.missing");
      MockFile mockFile0 = new MockFile("header.missing");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      FileText fileText0 = new FileText(mockFile0, stack0);
      // Undeclared exception!
      try { 
        regexpHeaderCheck0.processFiltered(mockFile0, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      regexpHeaderCheck0.setHeader("header.mismatch");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText((File) null, linkedList0);
      // Undeclared exception!
      try { 
        regexpHeaderCheck0.processFiltered((File) null, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      int[] intArray0 = new int[0];
      regexpHeaderCheck0.setMultiLines(intArray0);
      assertEquals(SeverityLevel.ERROR, regexpHeaderCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegexpHeaderCheck regexpHeaderCheck0 = new RegexpHeaderCheck();
      regexpHeaderCheck0.setHeader("/2");
      MockFile mockFile0 = new MockFile("/2", "header.missing");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("/2");
      FileText fileText0 = new FileText(mockFile0, stack0);
      regexpHeaderCheck0.processFiltered(mockFile0, fileText0);
      assertNull(regexpHeaderCheck0.getId());
  }
}
