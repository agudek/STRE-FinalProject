/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:11:54 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HiddenFieldCheck_ESTest extends HiddenFieldCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(456, "_._vHj{D4;N^");
      hiddenFieldCheck0.leaveToken(detailAST0);
      assertNull(hiddenFieldCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(456);
      hiddenFieldCheck0.visitToken(detailAST0);
      assertNull(hiddenFieldCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      int[] intArray0 = hiddenFieldCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {10, 21, 14, 154, 155, 181}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(181);
      DetailAST detailAST1 = new DetailAST();
      detailAST0.addChild(detailAST1);
      hiddenFieldCheck0.visitToken(detailAST0);
      assertFalse(hiddenFieldCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(155);
      // Undeclared exception!
      try { 
        hiddenFieldCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      hiddenFieldCheck0.leaveToken(detailAST0);
      assertFalse(hiddenFieldCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(14, "hidden.field");
      // Undeclared exception!
      try { 
        hiddenFieldCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(181);
      detailAST0.addChild(detailAST0);
      // Undeclared exception!
      hiddenFieldCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(21);
      hiddenFieldCheck0.visitToken(detailAST0);
      assertNull(hiddenFieldCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      hiddenFieldCheck0.visitToken(detailAST0);
      assertNull(hiddenFieldCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(10);
      // Undeclared exception!
      try { 
        hiddenFieldCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(14, "hidden.field");
      hiddenFieldCheck0.beginTree(detailAST0);
      hiddenFieldCheck0.leaveToken(detailAST0);
      assertEquals("hidden.field", detailAST0.getText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      int[] intArray0 = hiddenFieldCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {14, 154, 155}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      Pattern pattern0 = Pattern.compile("hidden.field");
      hiddenFieldCheck0.setIgnoreFormat(pattern0);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      hiddenFieldCheck0.setSetterCanReturnItsClass(false);
      assertNull(hiddenFieldCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      hiddenFieldCheck0.setIgnoreSetter(true);
      assertEquals(SeverityLevel.ERROR, hiddenFieldCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      int[] intArray0 = hiddenFieldCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {10, 21, 14, 154, 155, 181}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      hiddenFieldCheck0.setIgnoreAbstractMethods(true);
      assertNull(hiddenFieldCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HiddenFieldCheck hiddenFieldCheck0 = new HiddenFieldCheck();
      hiddenFieldCheck0.setIgnoreConstructorParameter(false);
      assertNull(hiddenFieldCheck0.getId());
  }
}
