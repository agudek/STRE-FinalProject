/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:44:05 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.xpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.xpath.AttributeNode;
import com.puppycrawl.tools.checkstyle.xpath.RootNode;
import net.sf.saxon.om.NodeInfo;
import net.sf.saxon.tree.iter.ArrayIterator;
import net.sf.saxon.tree.iter.AxisIterator;
import net.sf.saxon.tree.iter.EmptyIterator;
import net.sf.saxon.tree.iter.SingleNodeIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RootNode_ESTest extends RootNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(105, (String) null);
      RootNode rootNode0 = new RootNode(detailAST0);
      rootNode0.getUnderlyingNode();
      assertTrue(rootNode0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      rootNode0.addChild(rootNode0);
      NodeInfo nodeInfo0 = rootNode0.getRoot();
      assertTrue(nodeInfo0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(105, (String) null);
      RootNode rootNode0 = new RootNode(detailAST0);
      rootNode0.getLineNumber();
      assertTrue(rootNode0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(105, (String) null);
      detailAST0.setColumnNo(10);
      RootNode rootNode0 = new RootNode(detailAST0);
      rootNode0.getColumnNumber();
      assertTrue(rootNode0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setFirstChild(detailAST0);
      RootNode rootNode0 = null;
      try {
        rootNode0 = new RootNode(detailAST0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((-2965), "YGC'kRi");
      RootNode rootNode0 = null;
      try {
        rootNode0 = new RootNode(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2965
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      rootNode0.addChild(rootNode0);
      AxisIterator axisIterator0 = rootNode0.iterateAxis((byte)4);
      assertEquals(0, axisIterator0.getProperties());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      AttributeNode attributeNode0 = new AttributeNode("$j[N", "$j[N");
      rootNode0.addChild(attributeNode0);
      ArrayIterator.OfNodes arrayIterator_OfNodes0 = (ArrayIterator.OfNodes)rootNode0.iterateAxis((byte)3);
      assertEquals(0, arrayIterator_OfNodes0.getStartPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.iterateAxis((byte)16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.iterateAxis((byte)11);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.iterateAxis((byte)10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      AxisIterator axisIterator0 = rootNode0.iterateAxis((byte)9);
      assertEquals(15, axisIterator0.getProperties());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.iterateAxis((byte)8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.iterateAxis((byte)7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.iterateAxis((byte)6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      AxisIterator axisIterator0 = rootNode0.iterateAxis((byte)5);
      assertEquals(0, axisIterator0.getProperties());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      AxisIterator axisIterator0 = rootNode0.iterateAxis((byte)4);
      assertEquals(15, axisIterator0.getProperties());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      EmptyIterator.OfNodes emptyIterator_OfNodes0 = (EmptyIterator.OfNodes)rootNode0.iterateAxis((byte)3);
      assertFalse(emptyIterator_OfNodes0.hasNext());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      EmptyIterator.OfNodes emptyIterator_OfNodes0 = (EmptyIterator.OfNodes)rootNode0.iterateAxis((byte)2);
      assertEquals(0, emptyIterator_OfNodes0.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      SingleNodeIterator singleNodeIterator0 = (SingleNodeIterator)rootNode0.iterateAxis((byte)1);
      assertTrue(singleNodeIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      SingleNodeIterator singleNodeIterator0 = (SingleNodeIterator)rootNode0.iterateAxis((byte)12);
      assertTrue(singleNodeIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      EmptyIterator.OfNodes emptyIterator_OfNodes0 = (EmptyIterator.OfNodes)rootNode0.iterateAxis((byte)0);
      assertFalse(emptyIterator_OfNodes0.hasNext());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(105, (String) null);
      RootNode rootNode0 = new RootNode(detailAST0);
      rootNode0.getColumnNumber();
      assertTrue(rootNode0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      RootNode rootNode0 = null;
      try {
        rootNode0 = new RootNode(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given id 0
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      DetailAST detailAST0 = rootNode0.getUnderlyingNode();
      assertNull(detailAST0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.getLineNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      NodeInfo nodeInfo0 = rootNode0.getRoot();
      assertEquals(9, nodeInfo0.getNodeKind());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      NodeInfo nodeInfo0 = rootNode0.getParent();
      assertNull(nodeInfo0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      int int0 = rootNode0.getTokenType();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.getColumnNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      String string0 = rootNode0.getStringValue();
      assertEquals("ROOT", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      int int0 = rootNode0.getNodeKind();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      String string0 = rootNode0.getLocalPart();
      assertEquals("ROOT", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RootNode rootNode0 = new RootNode((DetailAST) null);
      // Undeclared exception!
      try { 
        rootNode0.getAttributeValue("", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation is not supported
         //
         verifyException("com.puppycrawl.tools.checkstyle.xpath.RootNode", e);
      }
  }
}
