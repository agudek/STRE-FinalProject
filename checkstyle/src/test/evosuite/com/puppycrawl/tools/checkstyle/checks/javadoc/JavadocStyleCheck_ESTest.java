/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:19:53 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.Scope;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavadocStyleCheck_ESTest extends JavadocStyleCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(1632, "_[7&-M]<&yHmOwP$");
      // Undeclared exception!
      try { 
        javadocStyleCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      int[] intArray0 = javadocStyleCheck0.getAcceptableTokens();
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {157, 161, 14, 8, 155, 154, 15, 9, 16, 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      DetailAST detailAST0 = new DetailAST();
      Scope scope0 = Scope.NOTHING;
      javadocStyleCheck0.setExcludeScope(scope0);
      detailAST0.initialize(155, "javadoc.unclosedHtml");
      // Undeclared exception!
      try { 
        javadocStyleCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        javadocStyleCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(155, "javadoc.unclosedHtml");
      // Undeclared exception!
      try { 
        javadocStyleCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      DetailAST detailAST0 = new DetailAST();
      Scope scope0 = Scope.PROTECTED;
      javadocStyleCheck0.setExcludeScope(scope0);
      detailAST0.initialize(155, "javadoc.unclosedHtml");
      javadocStyleCheck0.visitToken(detailAST0);
      assertFalse(javadocStyleCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      int[] intArray0 = javadocStyleCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      int[] intArray0 = javadocStyleCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {157, 161, 14, 8, 155, 154, 15, 9, 16, 10}, intArray0);
      assertEquals(10, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      javadocStyleCheck0.setCheckEmptyJavadoc(false);
      assertFalse(javadocStyleCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      Pattern pattern0 = Pattern.compile("javadoc.noPeriod");
      javadocStyleCheck0.setEndOfSentenceFormat(pattern0);
      assertEquals("javadoc.noPeriod", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      javadocStyleCheck0.setCheckFirstSentence(false);
      assertNull(javadocStyleCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      Scope scope0 = Scope.PUBLIC;
      javadocStyleCheck0.setScope(scope0);
      assertFalse(javadocStyleCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavadocStyleCheck javadocStyleCheck0 = new JavadocStyleCheck();
      javadocStyleCheck0.setCheckHtml(false);
      assertFalse(javadocStyleCheck0.isCommentNodesRequired());
  }
}
