/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:59:25 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.LineColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineColumn_ESTest extends LineColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-357), 0);
      LineColumn lineColumn1 = new LineColumn((-357), 0);
      int int0 = lineColumn0.compareTo(lineColumn1);
      assertEquals(0, lineColumn1.getColumn());
      assertEquals((-357), lineColumn1.getLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn(0, 0);
      int int0 = lineColumn0.getLine();
      assertEquals(0, lineColumn0.getColumn());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn(2693, (-1));
      int int0 = lineColumn0.getLine();
      assertEquals((-1), lineColumn0.getColumn());
      assertEquals(2693, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-357), 0);
      int int0 = lineColumn0.getColumn();
      assertEquals(0, int0);
      assertEquals((-357), lineColumn0.getLine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn(168, 168);
      int int0 = lineColumn0.getColumn();
      assertEquals(168, lineColumn0.getLine());
      assertEquals(168, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn(0, 0);
      LineColumn lineColumn1 = new LineColumn(2693, (-1));
      int int0 = lineColumn0.compareTo(lineColumn1);
      assertEquals(2693, lineColumn1.getLine());
      assertEquals((-1), lineColumn1.getColumn());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-1), (-1));
      // Undeclared exception!
      try { 
        lineColumn0.compareTo((LineColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.LineColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-3389), (-1));
      LineColumn lineColumn1 = new LineColumn((-3389), (-3389));
      boolean boolean0 = lineColumn1.equals(lineColumn0);
      assertEquals((-3389), lineColumn1.getColumn());
      assertEquals((-3389), lineColumn0.getLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-357), 0);
      LineColumn lineColumn1 = new LineColumn((-357), 0);
      boolean boolean0 = lineColumn0.equals(lineColumn1);
      assertEquals(0, lineColumn1.getColumn());
      assertTrue(boolean0);
      assertEquals((-357), lineColumn1.getLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-357), 0);
      Object object0 = new Object();
      boolean boolean0 = lineColumn0.equals(object0);
      assertEquals((-357), lineColumn0.getLine());
      assertFalse(boolean0);
      assertEquals(0, lineColumn0.getColumn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-357), 0);
      boolean boolean0 = lineColumn0.equals((Object) null);
      assertEquals(0, lineColumn0.getColumn());
      assertFalse(boolean0);
      assertEquals((-357), lineColumn0.getLine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn(0, 0);
      boolean boolean0 = lineColumn0.equals(lineColumn0);
      assertEquals(0, lineColumn0.getColumn());
      assertEquals(0, lineColumn0.getLine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn(0, 0);
      LineColumn lineColumn1 = new LineColumn(2693, (-1));
      boolean boolean0 = lineColumn1.equals(lineColumn0);
      assertEquals((-1), lineColumn1.getColumn());
      assertFalse(boolean0);
      assertEquals(2693, lineColumn1.getLine());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-1), (-1));
      LineColumn lineColumn1 = new LineColumn(992, (-1));
      int int0 = lineColumn1.compareTo(lineColumn0);
      assertEquals(1, int0);
      assertEquals(992, lineColumn1.getLine());
      assertEquals((-1), lineColumn1.getColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-1), (-1));
      int int0 = lineColumn0.getLine();
      assertEquals((-1), int0);
      assertEquals((-1), lineColumn0.getColumn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-1), (-1));
      int int0 = lineColumn0.getColumn();
      assertEquals((-1), lineColumn0.getLine());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineColumn lineColumn0 = new LineColumn((-1), (-1));
      lineColumn0.hashCode();
      assertEquals((-1), lineColumn0.getColumn());
      assertEquals((-1), lineColumn0.getLine());
  }
}
