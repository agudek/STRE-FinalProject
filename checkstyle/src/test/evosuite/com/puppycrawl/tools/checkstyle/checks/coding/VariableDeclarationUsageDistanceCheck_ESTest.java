/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:48:35 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VariableDeclarationUsageDistanceCheck_ESTest extends VariableDeclarationUsageDistanceCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        variableDeclarationUsageDistanceCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      int[] intArray0 = variableDeclarationUsageDistanceCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      int[] intArray0 = variableDeclarationUsageDistanceCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      Pattern pattern0 = Pattern.compile("XC^Zf6DdhG:kXjto");
      variableDeclarationUsageDistanceCheck0.setIgnoreVariablePattern(pattern0);
      assertEquals(SeverityLevel.ERROR, variableDeclarationUsageDistanceCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      variableDeclarationUsageDistanceCheck0.setIgnoreFinal(true);
      assertEquals(SeverityLevel.ERROR, variableDeclarationUsageDistanceCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      variableDeclarationUsageDistanceCheck0.setAllowedDistance(54);
      assertNull(variableDeclarationUsageDistanceCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      variableDeclarationUsageDistanceCheck0.setValidateBetweenScopes(false);
      assertFalse(variableDeclarationUsageDistanceCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VariableDeclarationUsageDistanceCheck variableDeclarationUsageDistanceCheck0 = new VariableDeclarationUsageDistanceCheck();
      int[] intArray0 = variableDeclarationUsageDistanceCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {10}, intArray0);
  }
}
