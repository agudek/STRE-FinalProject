/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:58:15 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import antlr.BaseAST;
import antlr.CommonAST;
import antlr.CommonASTWithHiddenTokens;
import antlr.ParseTreeRule;
import antlr.Token;
import antlr.collections.AST;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.utils.CheckUtils;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckUtils_ESTest extends CheckUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CommonASTWithHiddenTokens commonASTWithHiddenTokens0 = new CommonASTWithHiddenTokens();
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("&E7[?8", 141);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&E7[?8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 137;
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("0b&E !8", 137);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&E !8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setColumnNo((-1601));
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST1);
      CheckUtils.isNonVoidMethod(detailAST1);
      CheckUtils.isElseIf(detailAST0);
      CheckUtils.isEqualsMethod(detailAST0);
      CheckUtils.getTypeParameters(detailAST1);
      CheckUtils.isSetterMethod(detailAST0);
      CheckUtils.parseDouble("^set[A-Z].*", 138);
      CheckUtils.isGetterMethod(detailAST1);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken(detailAST1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckUtils.parseDouble("fLN~A#\"Uzfh*[#", 139);
      DetailAST detailAST0 = new DetailAST();
      Token token0 = new Token(31);
      // Undeclared exception!
      try { 
        detailAST0.initialize(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // antlr.Token cannot be cast to antlr.CommonHiddenStreamToken
         //
         verifyException("antlr.CommonASTWithHiddenTokens", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      int int0 = 83;
      String string0 = "expected non-null AST-token with type 'MODIFIERS'";
      detailAST0.initialize(83, "expected non-null AST-token with type 'MODIFIERS'");
      // Undeclared exception!
      try { 
        CheckUtils.isElseIf(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      detailAST1.initialize(5, "");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.isElseIf(detailAST2);
      DetailAST detailAST3 = CheckUtils.getFirstNode(detailAST2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[1] = "7Tb_]";
      stringArray0[2] = "7Tb_]";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      CheckUtils.parseClassNames(stringArray0);
      CheckUtils.isEqualsMethod(detailAST1);
      CheckUtils.isNonVoidMethod(detailAST3);
      CheckUtils.getAccessModifierFromModifiersToken(detailAST1);
      CheckUtils.getTypeParameters(detailAST3);
      CheckUtils.getTypeParameters(detailAST0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CommonAST commonAST0 = new CommonAST();
      detailAST0.findAllPartial(commonAST0);
      detailAST0.setLineNo(40);
      detailAST0.setType(46);
      detailAST0.addPreviousSibling(detailAST0);
      detailAST0.getLineNo();
      detailAST0.setLineNo(40);
      CheckUtils.getTypeParameterNames(detailAST0);
      CheckUtils.isSetterMethod(detailAST0);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findAllPartial(detailAST0);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      detailAST0.addChild(detailAST1);
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST2);
      CheckUtils.isNonVoidMethod(detailAST2);
      int int0 = 243;
      String string0 = "!E2)E9";
      detailAST0.initialize(int0, string0);
      CheckUtils.isElseIf(detailAST0);
      CheckUtils.isGetterMethod(detailAST2);
      CheckUtils.getTypeParameters(detailAST2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.setLineNo(101);
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.isReceiverParameter(detailAST0);
      DetailAST detailAST3 = CheckUtils.getFirstNode(detailAST2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[1] = "7Tb_]";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      CheckUtils.parseClassNames(stringArray0);
      CheckUtils.isEqualsMethod(detailAST1);
      CheckUtils.isNonVoidMethod(detailAST3);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken(detailAST1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findAllPartial((AST) null);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST1);
      detailAST1.initialize(2000, " )");
      CheckUtils.isNonVoidMethod(detailAST1);
      CheckUtils.isElseIf(detailAST0);
      CheckUtils.createFullType(detailAST0);
      CheckUtils.isEqualsMethod(detailAST0);
      CheckUtils.getTypeParameters(detailAST1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0x";
      stringArray0[1] = "yA1[V2{/";
      stringArray0[2] = "PACKAGE";
      stringArray0[3] = "&quot;";
      stringArray0[4] = "";
      CheckUtils.parseClassNames(stringArray0);
      CheckUtils.getTypeParameterNames(detailAST0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      detailAST0.setColumnNo(101);
      detailAST0.getPreviousSibling();
      detailAST2.addChild((AST) null);
      CheckUtils.isReceiverParameter(detailAST0);
      CheckUtils.getFirstNode(detailAST2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[1] = "7Tb_]";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      CheckUtils.parseClassNames(stringArray0);
      CheckUtils.isEqualsMethod(detailAST1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      String string1 = "7Tb_]";
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      detailAST2.addChild(detailAST1);
      CheckUtils.isReceiverParameter(detailAST0);
      // Undeclared exception!
      CheckUtils.getFirstNode(detailAST2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<ASTNULL>";
      stringArray0[1] = "G0~9^Fp`+4tx#";
      stringArray0[2] = ":4Ik<0";
      stringArray0[3] = "";
      stringArray0[4] = "NCTh";
      stringArray0[5] = "";
      stringArray0[6] = "^(is|get)[A-Z].*";
      stringArray0[7] = "M8G>=7{=vZ.kW`v";
      BaseAST.setVerboseStringConversion(true, stringArray0);
      CheckUtils.isNonVoidMethod(detailAST0);
      detailAST0.getLineNo();
      detailAST0.initialize(109, (String) null);
      CheckUtils.isGetterMethod(detailAST0);
      CheckUtils.isEqualsMethod(detailAST0);
      CheckUtils.getFirstNode(detailAST0);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        detailAST1.xmlSerializeNode(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("antlr.BaseAST", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.removeChildren();
      detailAST0.toString();
      detailAST0.setType(859);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      detailAST1.addNextSibling(detailAST0);
      // Undeclared exception!
      detailAST1.findAllPartial(detailAST0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(27);
      boolean boolean0 = CheckUtils.isReceiverParameter(detailAST0);
      boolean boolean1 = CheckUtils.isElseIf(detailAST0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      String string1 = "7Tb_]";
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      detailAST2.findAll(detailAST0);
      detailAST2.addPreviousSibling(detailAST1);
      // Undeclared exception!
      CheckUtils.createFullType(detailAST0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      assertEquals(Double.NaN, double0, 0.01);
      
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST0);
      boolean boolean0 = CheckUtils.isReceiverParameter(detailAST0);
      CheckUtils.getFirstNode(detailAST2);
      detailAST1.setType(1090);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[1] = "7Tb_]";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      Set<String> set0 = CheckUtils.parseClassNames(stringArray0);
      assertEquals(3, set0.size());
      
      boolean boolean1 = CheckUtils.isEqualsMethod(detailAST1);
      assertTrue(boolean1 == boolean0);
      
      DetailAST detailAST3 = CheckUtils.getFirstNode(detailAST0);
      assertEquals(1, detailAST3.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(7);
      CheckUtils.isReceiverParameter(detailAST0);
      CheckUtils.isEqualsMethod(detailAST0);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      assertEquals(Double.NaN, double0, 0.01);
      
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST0);
      boolean boolean0 = CheckUtils.isReceiverParameter(detailAST0);
      DetailAST detailAST3 = CheckUtils.getFirstNode(detailAST2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[1] = "7Tb_]";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      Set<String> set0 = CheckUtils.parseClassNames(stringArray0);
      assertEquals(3, set0.size());
      
      boolean boolean1 = CheckUtils.isEqualsMethod(detailAST1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(detailAST1, detailAST3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType((-1088));
      detailAST0.findAll((AST) null);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST1);
      BaseAST.decode("expected non-null AST-token with type 'MODIFIERS'");
      CheckUtils.isNonVoidMethod(detailAST1);
      detailAST1.addChild(detailAST0);
      // Undeclared exception!
      CheckUtils.createFullType(detailAST0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findAll((AST) null);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST1);
      boolean boolean0 = CheckUtils.isNonVoidMethod(detailAST1);
      BaseAST.decode("");
      CheckUtils.isNonVoidMethod(detailAST1);
      CheckUtils.createFullType(detailAST0);
      boolean boolean1 = CheckUtils.isEqualsMethod(detailAST0);
      assertTrue(boolean1 == boolean0);
      
      CheckUtils.getTypeParameters(detailAST1);
      boolean boolean2 = CheckUtils.isElseIf(detailAST0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findAll((AST) null);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.createFullType(detailAST1);
      CheckUtils.isNonVoidMethod(detailAST1);
      CheckUtils.isNonVoidMethod(detailAST1);
      CheckUtils.createFullType(detailAST0);
      CheckUtils.isEqualsMethod(detailAST0);
      List<DetailAST> list0 = CheckUtils.getTypeParameters(detailAST1);
      assertFalse(list0.contains(detailAST1));
      
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("\" type=\"", 142);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "~!C=-m`X";
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("~!C=-m`X", 140);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Set<String> set0 = CheckUtils.parseClassNames(stringArray0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      String string0 = "#]*),";
      detailAST0.setText("#]*),");
      CheckUtils.isReceiverParameter(detailAST0);
      int int0 = (-2061);
      detailAST0.getColumnNo();
      // Undeclared exception!
      try { 
        detailAST0.branchContains((-2061));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2061
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      DetailAST detailAST1 = new DetailAST();
      detailAST1.setLineNo(59);
      detailAST0.addPreviousSibling(detailAST1);
      detailAST0.getLineNo();
      detailAST0.setLineNo(59);
      List<String> list0 = CheckUtils.getTypeParameterNames(detailAST0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = CheckUtils.isEqualsMethod(detailAST0);
      assertFalse(boolean0);
      
      CheckUtils.isSetterMethod(detailAST0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getNextSibling();
      detailAST0.findAll((AST) null);
      detailAST0.setText("");
      DetailAST detailAST1 = new DetailAST();
      detailAST0.addPreviousSibling(detailAST1);
      boolean boolean0 = CheckUtils.isSetterMethod(detailAST1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getPreviousSibling();
      // Undeclared exception!
      try { 
        CheckUtils.isSetterMethod((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      CheckUtils.parseClassNames(stringArray0);
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findFirstToken(0);
      // Undeclared exception!
      try { 
        CheckUtils.isGetterMethod((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.isGetterMethod((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.isNonVoidMethod((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      boolean boolean0 = CheckUtils.isReceiverParameter(detailAST0);
      assertFalse(boolean0);
      
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      detailAST0.setFirstChild(detailAST1);
      detailAST1.initialize(1423, "7kwC&Fq");
      CheckUtils.isElseIf(detailAST0);
      CheckUtils.parseDouble("expected non-null AST-token with type 'MODIFIERS'", 4714);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "expected non-null AST-token with type 'MODIFIERS'";
      stringArray0[1] = "expected non-null AST-token with type 'MODIFIERS'";
      stringArray0[2] = "expected non-null AST-token with type 'MODIFIERS'";
      stringArray0[3] = "expected non-null AST-token with type 'MODIFIERS'";
      stringArray0[4] = "expected non-null AST-token with type 'MODIFIERS'";
      stringArray0[5] = "expected non-null AST-token with type 'MODIFIERS'";
      stringArray0[6] = " QGD^e)";
      stringArray0[7] = "c45mh,a";
      CheckUtils.parseClassNames(stringArray0);
      CheckUtils.getTypeParameterNames(detailAST0);
      // Undeclared exception!
      detailAST0.initialize((AST) detailAST1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.parseClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getNextSibling();
      detailAST0.findAll((AST) null);
      detailAST0.setText("");
      DetailAST detailAST1 = new DetailAST();
      detailAST0.addPreviousSibling(detailAST1);
      boolean boolean0 = CheckUtils.isGetterMethod(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.isGetterMethod((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.toStringList();
      CheckUtils.isElseIf(detailAST0);
      CheckUtils.isNonVoidMethod(detailAST0);
      CheckUtils.isNonVoidMethod(detailAST0);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.isReceiverParameter((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.createFullType((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CheckUtils.getFirstNode(detailAST0);
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('z');
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2000, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getParent();
      // Undeclared exception!
      try { 
        CheckUtils.getFirstNode((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = CheckUtils.parseDouble(">\n", (-883));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findFirstToken((-606));
      detailAST0.addPreviousSibling((DetailAST) null);
      List<String> list0 = CheckUtils.getTypeParameterNames(detailAST0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.getTypeParameters((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.getTypeParameters((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getLastChild();
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getNextSibling();
      // Undeclared exception!
      try { 
        CheckUtils.getTypeParameterNames((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.isElseIf((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getFirstChild();
      // Undeclared exception!
      try { 
        CheckUtils.isElseIf((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("<no text>");
      detailAST0.getPreviousSibling();
      detailAST0.addNextSibling((DetailAST) null);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      detailAST1.removeChildren();
      boolean boolean0 = CheckUtils.isEqualsMethod(detailAST1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.getFirstNode((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        CheckUtils.isEqualsMethod((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("&E ?8", 137);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&E ?8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 137;
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("&VE [?8", 137);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&VE [?8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0x";
      stringArray0[1] = "antlr.CommonHiddenStreamToken";
      stringArray0[2] = ".";
      stringArray0[3] = "SRer9)o9x`bZ";
      stringArray0[4] = "{Dsr";
      Set<String> set0 = CheckUtils.parseClassNames(stringArray0);
      assertEquals(6, set0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CommonASTWithHiddenTokens commonASTWithHiddenTokens0 = new CommonASTWithHiddenTokens();
      // Undeclared exception!
      try { 
        CheckUtils.parseDouble("FP7[?", 141);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"FP7[?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      int int0 = 83;
      String string0 = "expected non-null AST-token with type 'MODIFIERS'";
      detailAST0.initialize(83, "expected non-null AST-token with type 'MODIFIERS'");
      DetailAST detailAST1 = null;
      detailAST0.addNextSibling((DetailAST) null);
      // Undeclared exception!
      try { 
        CheckUtils.isElseIf(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.getPreviousSibling();
      detailAST0.findAllPartial((AST) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&gdBv)3";
      stringArray0[1] = "_";
      BaseAST.setVerboseStringConversion(true, stringArray0);
      boolean boolean0 = CheckUtils.isElseIf(detailAST0);
      boolean boolean1 = CheckUtils.isGetterMethod(detailAST0);
      assertTrue(boolean1 == boolean0);
      
      double double0 = CheckUtils.parseDouble("", 243);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      detailAST0.setColumnNo(101);
      detailAST0.getPreviousSibling();
      detailAST2.addChild((AST) null);
      CheckUtils.isReceiverParameter(detailAST0);
      CheckUtils.getFirstNode(detailAST2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      // Undeclared exception!
      try { 
        CheckUtils.parseClassNames(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CommonAST commonAST0 = new CommonAST();
      commonAST0.toStringTree();
      detailAST0.findAllPartial(commonAST0);
      detailAST0.setLineNo(40);
      detailAST0.addPreviousSibling(detailAST0);
      detailAST0.getLineNo();
      detailAST0.setLineNo(40);
      CheckUtils.getTypeParameterNames(detailAST0);
      DetailAST detailAST1 = null;
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.removeChildren();
      detailAST0.setLineNo(101);
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      DetailAST detailAST2 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.isReceiverParameter(detailAST0);
      DetailAST detailAST3 = CheckUtils.getFirstNode(detailAST2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7Tb_]";
      stringArray0[1] = "7Tb_]";
      stringArray0[2] = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      stringArray0[3] = "7Tb_]";
      stringArray0[4] = "7Tb_]";
      stringArray0[5] = "7Tb_]";
      stringArray0[6] = "7Tb_]";
      CheckUtils.parseClassNames(stringArray0);
      CheckUtils.isEqualsMethod(detailAST1);
      CheckUtils.isNonVoidMethod(detailAST3);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken(detailAST1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "com.puppycrawl.tools.checkstyle.utils.CheckUtils";
      CheckUtils.parseDouble("com.puppycrawl.tools.checkstyle.utils.CheckUtils", 101);
      DetailAST detailAST0 = new DetailAST();
      String string1 = "7Tb_]";
      BaseAST.encode("7Tb_]");
      DetailAST detailAST1 = new DetailAST();
      detailAST1.toStringTree();
      detailAST1.removeChildren();
      detailAST0.addChild(detailAST1);
      BaseAST.decode("com.puppycrawl.tools.checkstyle.utils.CheckUtils");
      detailAST1.initialize(3, "");
      DetailAST detailAST2 = detailAST0.getFirstChild();
      CheckUtils.isReceiverParameter(detailAST0);
      CheckUtils.getFirstNode(detailAST2);
      CheckUtils.isEqualsMethod(detailAST1);
      CheckUtils.isGetterMethod(detailAST2);
      // Undeclared exception!
      try { 
        CheckUtils.getAccessModifierFromModifiersToken(detailAST1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected non-null AST-token with type 'MODIFIERS'
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CheckUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.findAllPartial((AST) null);
      DetailAST detailAST1 = CheckUtils.getFirstNode(detailAST0);
      CheckUtils.isNonVoidMethod(detailAST1);
      CheckUtils.isElseIf(detailAST0);
      CheckUtils.createFullType(detailAST0);
      CheckUtils.isGetterMethod(detailAST1);
      List<DetailAST> list0 = CheckUtils.getTypeParameters(detailAST1);
      assertFalse(list0.contains(detailAST1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CheckUtils.isSetterMethod(detailAST0);
      detailAST0.removeChildren();
      detailAST0.getNextSibling();
      List<String> list0 = CheckUtils.getTypeParameterNames(detailAST0);
      assertEquals(0, list0.size());
  }
}
