/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:06:50 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.Checker;
import com.puppycrawl.tools.checkstyle.DefaultLogger;
import com.puppycrawl.tools.checkstyle.TreeWalker;
import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilterSet;
import com.puppycrawl.tools.checkstyle.api.FilterSet;
import com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck;
import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;
import com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck;
import com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck;
import com.puppycrawl.tools.checkstyle.checks.UpperEllCheck;
import com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter;
import com.puppycrawl.tools.checkstyle.filters.SuppressionXpathFilter;
import com.puppycrawl.tools.checkstyle.filters.XpathFilter;
import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtils;
import java.io.IOException;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModuleReflectionUtils_ESTest extends ModuleReflectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<SuppressionCommentFilter> class0 = SuppressionCommentFilter.class;
      boolean boolean0 = ModuleReflectionUtils.isTreeWalkerFilterModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Checker> class0 = Checker.class;
      boolean boolean0 = ModuleReflectionUtils.isRootModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<FilterSet> class0 = FilterSet.class;
      boolean boolean0 = ModuleReflectionUtils.isFilterModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<TreeWalker> class0 = TreeWalker.class;
      boolean boolean0 = ModuleReflectionUtils.isFileSetModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<BeforeExecutionFileFilterSet> class0 = BeforeExecutionFileFilterSet.class;
      boolean boolean0 = ModuleReflectionUtils.isFileFilterModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<ArrayTypeStyleCheck> class0 = ArrayTypeStyleCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleTreeWalkerCheck(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<AvoidEscapedUnicodeCharactersCheck> class0 = AvoidEscapedUnicodeCharactersCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isAuditListener(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isValidCheckstyleClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isTreeWalkerFilterModule((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isRootModule((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isFilterModule((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isFileSetModule((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isFileFilterModule((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isCheckstyleTreeWalkerCheck((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isCheckstyleModule((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.isAuditListener((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\Gudek-Home\\AppData\\Local\\Temp\\EvoSuite_pathingJar3556818508821639679.jar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      ModuleReflectionUtils.getCheckstyleModules(linkedHashSet0, classLoader0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      Set<String> set0 = arrayTypeStyleCheck0.getTokenNames();
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.getCheckstyleModules(set0, (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.ClassPath$Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SuppressionXpathFilter suppressionXpathFilter0 = new SuppressionXpathFilter();
      Set<String> set0 = suppressionXpathFilter0.getExternalResourceLocations();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ModuleReflectionUtils.getCheckstyleModules(set0, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ModuleReflectionUtils.getCheckstyleModules(list0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<DescendantTokenCheck> class0 = DescendantTokenCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isValidCheckstyleClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<FilterSet> class0 = FilterSet.class;
      boolean boolean0 = ModuleReflectionUtils.isValidCheckstyleClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<OuterTypeFilenameCheck> class0 = OuterTypeFilenameCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isFileSetModule(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<XpathFilter> class0 = XpathFilter.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleTreeWalkerCheck(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<AvoidEscapedUnicodeCharactersCheck> class0 = AvoidEscapedUnicodeCharactersCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isTreeWalkerFilterModule(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<UpperEllCheck> class0 = UpperEllCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isFileFilterModule(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<UpperEllCheck> class0 = UpperEllCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isFilterModule(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<DefaultLogger> class0 = DefaultLogger.class;
      boolean boolean0 = ModuleReflectionUtils.isAuditListener(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<DefaultLogger> class0 = DefaultLogger.class;
      boolean boolean0 = ModuleReflectionUtils.isValidCheckstyleClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<TreeWalker> class0 = TreeWalker.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<ArrayTypeStyleCheck> class0 = ArrayTypeStyleCheck.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<BeforeExecutionFileFilterSet> class0 = BeforeExecutionFileFilterSet.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleModule(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Checker> class0 = Checker.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ModuleReflectionUtils.isRootModule(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<SuppressionCommentFilter> class0 = SuppressionCommentFilter.class;
      boolean boolean0 = ModuleReflectionUtils.isCheckstyleModule(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ModuleReflectionUtils.getCheckstyleModules(set0, classLoader0);
      // Undeclared exception!
      ModuleReflectionUtils.getCheckstyleModules(set0, classLoader0);
  }
}
