/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:55:13 GMT 2018
 */

package com.puppycrawl.tools.checkstyle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.AuditEventDefaultFormatter;
import com.puppycrawl.tools.checkstyle.DefaultLogger;
import com.puppycrawl.tools.checkstyle.api.AuditEvent;
import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLRecoverableException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultLogger_ESTest extends DefaultLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DefaultLogger defaultLogger0 = new DefaultLogger(byteArrayOutputStream0, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      DefaultLogger defaultLogger0 = new DefaultLogger(objectOutputStream0, automaticBean_OutputStreamOptions0);
      AuditEvent auditEvent0 = new AuditEvent(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        defaultLogger0.auditFinished(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      AuditEventDefaultFormatter auditEventDefaultFormatter0 = new AuditEventDefaultFormatter();
      DefaultLogger defaultLogger0 = null;
      try {
        defaultLogger0 = new DefaultLogger(bufferedOutputStream0, true, (OutputStream) null, true, auditEventDefaultFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultLogger defaultLogger0 = null;
      try {
        defaultLogger0 = new DefaultLogger((OutputStream) null, true, (OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      AuditEventDefaultFormatter auditEventDefaultFormatter0 = new AuditEventDefaultFormatter();
      DefaultLogger defaultLogger0 = null;
      try {
        defaultLogger0 = new DefaultLogger((OutputStream) null, automaticBean_OutputStreamOptions0, (OutputStream) null, automaticBean_OutputStreamOptions0, auditEventDefaultFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hitCount");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      AuditEventDefaultFormatter auditEventDefaultFormatter0 = new AuditEventDefaultFormatter();
      DefaultLogger defaultLogger0 = new DefaultLogger(mockPrintStream0, automaticBean_OutputStreamOptions0, mockPrintStream0, automaticBean_OutputStreamOptions0, auditEventDefaultFormatter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".9wo", true);
      AuditEventDefaultFormatter auditEventDefaultFormatter0 = new AuditEventDefaultFormatter();
      DefaultLogger defaultLogger0 = new DefaultLogger(mockFileOutputStream0, true, mockFileOutputStream0, true, auditEventDefaultFormatter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vdDL[>iPF*&AO");
      Locale locale0 = Locale.ITALIAN;
      DefaultLogger defaultLogger0 = new DefaultLogger(mockPrintStream0, true, mockPrintStream0, true);
      AuditEvent auditEvent0 = new AuditEvent(locale0, "DefaultLogger.auditFinished");
      defaultLogger0.auditFinished(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      DefaultLogger defaultLogger0 = new DefaultLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      Object[] objectArray0 = new Object[1];
      Class<LocalizedMessage> class0 = LocalizedMessage.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, "DefaultLogger.auditFinished", "/;~k\"*A__Y*g~?h%", objectArray0, ".<t", class0, "DefaultLogger.auditStarted");
      AuditEvent auditEvent0 = new AuditEvent(defaultLogger0, "DefaultLogger.auditFinished", localizedMessage0);
      defaultLogger0.addError(auditEvent0);
      assertEquals(0, auditEvent0.getColumn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sL`", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      DefaultLogger defaultLogger0 = new DefaultLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, (-1310), 270, 270, "sL`", "", objectArray0, severityLevel0, "DefaultLogger.auditFinished", class0, "DefaultLogger.addException");
      AuditEvent auditEvent0 = new AuditEvent(object0, "", localizedMessage0);
      defaultLogger0.addError(auditEvent0);
      assertEquals(0, auditEvent0.getLine());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      AuditEventDefaultFormatter auditEventDefaultFormatter0 = new AuditEventDefaultFormatter();
      DefaultLogger defaultLogger0 = new DefaultLogger(dataOutputStream0, automaticBean_OutputStreamOptions0, mockFileOutputStream0, automaticBean_OutputStreamOptions0, auditEventDefaultFormatter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("DefaultLogger.addException", "m$9ze.U?3svj'~t]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      DefaultLogger defaultLogger0 = new DefaultLogger(mockPrintStream0, automaticBean_OutputStreamOptions0, mockPrintStream0, automaticBean_OutputStreamOptions0);
      AuditEvent auditEvent0 = new AuditEvent(mockPrintStream0, "DefaultLogger.addException");
      // Undeclared exception!
      try { 
        defaultLogger0.addError(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      AuditEventDefaultFormatter auditEventDefaultFormatter0 = new AuditEventDefaultFormatter();
      DefaultLogger defaultLogger0 = new DefaultLogger(bufferedOutputStream0, false, byteArrayOutputStream0, false, auditEventDefaultFormatter0);
      Object[] objectArray0 = new Object[0];
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-1), "DefaultLogger.addException", "DefaultLogger.auditFinished", objectArray0, severityLevel0, "DefaultLogger.auditFinished", class0, "jS>`F3L-2.&Qnf,6zUD");
      AuditEvent auditEvent0 = new AuditEvent(localizedMessage0, " x");
      // Undeclared exception!
      try { 
        defaultLogger0.fileFinished(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      DefaultLogger defaultLogger0 = new DefaultLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      Object[] objectArray0 = new Object[1];
      Class<LocalizedMessage> class0 = LocalizedMessage.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, "DefaultLogger.auditFinished", "/;~k\"*A__Y*g~?h%", objectArray0, ".<t", class0, "DefaultLogger.auditStarted");
      AuditEvent auditEvent0 = new AuditEvent(defaultLogger0, "DefaultLogger.auditFinished", localizedMessage0);
      defaultLogger0.auditFinished(auditEvent0);
      assertEquals(0, auditEvent0.getColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",Z");
      DefaultLogger defaultLogger0 = new DefaultLogger(mockFileOutputStream0, false, mockFileOutputStream0, true);
      defaultLogger0.finishLocalSetup();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DefaultLogger defaultLogger0 = new DefaultLogger(byteArrayOutputStream0, false, byteArrayOutputStream0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DefaultLogger.addException", "");
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        defaultLogger0.addException((AuditEvent) null, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.DefaultLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      DefaultLogger defaultLogger0 = new DefaultLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      Object[] objectArray0 = new Object[1];
      Class<LocalizedMessage> class0 = LocalizedMessage.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, "DefaultLogger.auditFinished", "/;~k\"*A__Y*g~?h%", objectArray0, ".<t", class0, "DefaultLogger.auditStarted");
      AuditEvent auditEvent0 = new AuditEvent(defaultLogger0, "DefaultLogger.auditFinished", localizedMessage0);
      long[] longArray0 = new long[6];
      SQLDataException sQLDataException0 = new SQLDataException("DefaultLogger.auditStarted", "DefaultLogger.auditStarted");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("I3*Sm,Wq@\"I3Y", "", 1823, longArray0, sQLDataException0);
      defaultLogger0.addException(auditEvent0, batchUpdateException0);
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultLogger defaultLogger0 = null;
      try {
        defaultLogger0 = new DefaultLogger((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      DefaultLogger defaultLogger0 = new DefaultLogger(byteArrayOutputStream0, automaticBean_OutputStreamOptions0);
      AuditEvent auditEvent0 = new AuditEvent(automaticBean_OutputStreamOptions0, (String) null, (LocalizedMessage) null);
      defaultLogger0.fileStarted(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      DefaultLogger defaultLogger0 = new DefaultLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      Object[] objectArray0 = new Object[1];
      Class<LocalizedMessage> class0 = LocalizedMessage.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, "DefaultLogger.auditFinished", "/;~k\"*A__Y*g~?h%", objectArray0, ".<t", class0, "DefaultLogger.auditStarted");
      AuditEvent auditEvent0 = new AuditEvent(defaultLogger0, "DefaultLogger.auditFinished", localizedMessage0);
      defaultLogger0.fileFinished(auditEvent0);
      assertEquals(0, auditEvent0.getColumn());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sL`", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      DefaultLogger defaultLogger0 = new DefaultLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, (-1310), 270, 270, "sL`", "", objectArray0, severityLevel0, "DefaultLogger.auditFinished", class0, "DefaultLogger.addException");
      AuditEvent auditEvent0 = new AuditEvent(object0, "", localizedMessage0);
      defaultLogger0.auditStarted(auditEvent0);
      assertEquals(19L, mockFile0.length());
  }
}
