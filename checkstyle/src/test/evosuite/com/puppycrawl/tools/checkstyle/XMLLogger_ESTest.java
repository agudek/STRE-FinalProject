/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:07:51 GMT 2018
 */

package com.puppycrawl.tools.checkstyle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.DefaultContext;
import com.puppycrawl.tools.checkstyle.ThreadModeSettings;
import com.puppycrawl.tools.checkstyle.XMLLogger;
import com.puppycrawl.tools.checkstyle.api.AuditEvent;
import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.nio.channels.FileChannel;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLLogger_ESTest extends XMLLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = XMLLogger.encode("LCv");
      assertEquals("LCv", string0);
      assertNotNull(string0);
      
      boolean boolean0 = XMLLogger.isReference("LCv");
      assertFalse(boolean0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r");
      assertNotNull(mockFileOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, false);
      assertNotNull(xMLLogger0);
      
      mockFileOutputStream0.close();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("LCv");
      assertEquals("LCv", defaultConfiguration0.getName());
      assertNotNull(defaultConfiguration0);
      
      xMLLogger0.configure(defaultConfiguration0);
      assertEquals("LCv", defaultConfiguration0.getName());
      
      boolean boolean1 = XMLLogger.isReference("LCv");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AuditEvent auditEvent0 = new AuditEvent("r", "");
      assertEquals("", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileStarted(auditEvent0);
      assertEquals("", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      
      xMLLogger0.addError(auditEvent0);
      assertEquals("", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      
      xMLLogger0.finishLocalSetup();
      // Undeclared exception!
      try { 
        xMLLogger0.fileFinished(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A@I", true);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(bufferedOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(xMLLogger0, "com.google.common.collect.RegularImmutableAsList");
      assertEquals("com.google.common.collect.RegularImmutableAsList", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      SQLException sQLException0 = new SQLException();
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("Yn4yUMYe.NR74m", "com.google.common.collect.RegularImmutableAsList", 2597, sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals(2597, sQLDataException0.getErrorCode());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("A@I", sQLDataException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals(2597, sQLDataException0.getErrorCode());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals(2597, sQLDataException0.getErrorCode());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTimeoutException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals(2597, sQLDataException0.getErrorCode());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals("", string0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals(2597, sQLDataException0.getErrorCode());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(string0);
      
      xMLLogger0.addException(auditEvent0, sQLFeatureNotSupportedException0);
      assertEquals("com.google.common.collect.RegularImmutableAsList", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals(2597, sQLDataException0.getErrorCode());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean0 = XMLLogger.isReference("com.google.common.collect.RegularImmutableAsList");
      assertFalse(boolean0);
      
      AuditEvent auditEvent1 = new AuditEvent(bufferedOutputStream0, "");
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertEquals("", auditEvent1.getFileName());
      assertNotNull(auditEvent1);
      
      xMLLogger0.fileStarted(auditEvent1);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertEquals("", auditEvent1.getFileName());
      
      xMLLogger0.finishLocalSetup();
      xMLLogger0.auditStarted(auditEvent1);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertEquals("", auditEvent1.getFileName());
      
      xMLLogger0.addError(auditEvent1);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertEquals("", auditEvent1.getFileName());
      
      String string1 = XMLLogger.encode("</exception>");
      assertEquals("&lt;/exception&gt;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      AuditEvent auditEvent2 = new AuditEvent("", "");
      assertFalse(auditEvent2.equals((Object)auditEvent1));
      assertFalse(auditEvent2.equals((Object)auditEvent0));
      assertEquals(SeverityLevel.INFO, auditEvent2.getSeverityLevel());
      assertEquals("", auditEvent2.getFileName());
      assertNotNull(auditEvent2);
      
      xMLLogger0.addError(auditEvent2);
      assertFalse(auditEvent2.equals((Object)auditEvent1));
      assertFalse(auditEvent2.equals((Object)auditEvent0));
      assertNotSame(auditEvent2, auditEvent1);
      assertNotSame(auditEvent2, auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent2.getSeverityLevel());
      assertEquals("", auditEvent2.getFileName());
      
      boolean boolean1 = XMLLogger.isReference("&lt;/exception&gt;");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(byteArrayOutputStream0, true);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(xMLLogger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "</exception>";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) "</exception>";
      objectArray0[3] = (Object) "</exception>";
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-491), 120, "</exception>", (String) null, objectArray0, (String) null, class0, (String) null);
      assertEquals(4, objectArray0.length);
      assertEquals((-491), localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(120, localizedMessage0.getColumnNo());
      assertEquals(120, localizedMessage0.getColumnCharIndex());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(object0, (String) null, localizedMessage0);
      assertEquals(4, objectArray0.length);
      assertEquals((-491), localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(120, localizedMessage0.getColumnNo());
      assertEquals(120, localizedMessage0.getColumnCharIndex());
      assertNull(auditEvent0.getFileName());
      assertEquals(120, auditEvent0.getColumn());
      assertNull(auditEvent0.getModuleId());
      assertEquals((-491), auditEvent0.getLine());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      xMLLogger0.auditFinished(auditEvent0);
      assertEquals(4, objectArray0.length);
      assertEquals("</checkstyle>\r\n", byteArrayOutputStream0.toString());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals((-491), localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(120, localizedMessage0.getColumnNo());
      assertEquals(120, localizedMessage0.getColumnCharIndex());
      assertNull(auditEvent0.getFileName());
      assertEquals(120, auditEvent0.getColumn());
      assertNull(auditEvent0.getModuleId());
      assertEquals((-491), auditEvent0.getLine());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      
      xMLLogger0.addException(auditEvent0, (Throwable) null);
      assertEquals(4, objectArray0.length);
      assertEquals("</checkstyle>\r\n", byteArrayOutputStream0.toString());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals((-491), localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(120, localizedMessage0.getColumnNo());
      assertEquals(120, localizedMessage0.getColumnCharIndex());
      assertNull(auditEvent0.getFileName());
      assertEquals(120, auditEvent0.getColumn());
      assertNull(auditEvent0.getModuleId());
      assertEquals((-491), auditEvent0.getLine());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      
      xMLLogger0.addException(auditEvent0, (Throwable) null);
      assertEquals(4, objectArray0.length);
      assertEquals("</checkstyle>\r\n", byteArrayOutputStream0.toString());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals((-491), localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(120, localizedMessage0.getColumnNo());
      assertEquals(120, localizedMessage0.getColumnCharIndex());
      assertNull(auditEvent0.getFileName());
      assertEquals(120, auditEvent0.getColumn());
      assertNull(auditEvent0.getModuleId());
      assertEquals((-491), auditEvent0.getLine());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      
      Integer integer0 = new Integer(34);
      assertEquals(34, (int)integer0);
      assertNotNull(integer0);
      
      AuditEvent auditEvent1 = new AuditEvent(integer0, "/?^O1", localizedMessage0);
      assertEquals(4, objectArray0.length);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertEquals((-491), localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(120, localizedMessage0.getColumnNo());
      assertEquals(120, localizedMessage0.getColumnCharIndex());
      assertEquals(120, auditEvent1.getColumn());
      assertNull(auditEvent1.getModuleId());
      assertEquals("/?^O1", auditEvent1.getFileName());
      assertEquals((-491), auditEvent1.getLine());
      assertEquals(SeverityLevel.ERROR, auditEvent1.getSeverityLevel());
      assertNotNull(auditEvent1);
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError(auditEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      String string1 = XMLLogger.encode("`wss");
      assertEquals("`wss#x7f;", string1);
      assertNotNull(string1);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        filterOutputStream0.write((byte[]) null, (-673), 4292);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Multi thread mode for Checker module is not implemented");
      assertNotNull(mockFileOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      boolean boolean0 = XMLLogger.isReference("Multi thread mode for Checker module is not implemented");
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-855), (-855), "Multi thread mode for Checker module is not implemented", "p&Iv93", (Object[]) null, "p&Iv93", class0, (String) null);
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals((-855), localizedMessage0.getColumnCharIndex());
      assertEquals("p&Iv93", localizedMessage0.getModuleId());
      assertEquals((-855), localizedMessage0.getColumnNo());
      assertEquals((-855), localizedMessage0.getLineNo());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals("p&Iv93", localizedMessage0.getKey());
      assertNotNull(localizedMessage0);
      
      boolean boolean1 = XMLLogger.isReference("&gt;");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      AuditEvent auditEvent0 = null;
      try {
        auditEvent0 = new AuditEvent((Object) null, "Multi thread mode for Checker module is not implemented", localizedMessage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(byteArrayOutputStream0, false);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(xMLLogger0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "jDv";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) xMLLogger0;
      objectArray0[3] = (Object) "jDv";
      objectArray0[4] = (Object) xMLLogger0;
      objectArray0[5] = (Object) xMLLogger0;
      SeverityLevel severityLevel0 = SeverityLevel.INFO;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(582, 0, 582, "jDv", "jDv", objectArray0, severityLevel0, "YPukW,&", class0, "L8I8ywQZFvZ{$6");
      assertEquals(6, objectArray0.length);
      assertEquals(582, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals("jDv", localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(582, localizedMessage0.getTokenType());
      assertEquals("YPukW,&", localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.INFO, localizedMessage0.getSeverityLevel());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(xMLLogger0, "jDv", localizedMessage0);
      assertEquals(6, objectArray0.length);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(582, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals("jDv", localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(582, localizedMessage0.getTokenType());
      assertEquals("YPukW,&", localizedMessage0.getModuleId());
      assertEquals(SeverityLevel.INFO, localizedMessage0.getSeverityLevel());
      assertEquals("jDv", auditEvent0.getFileName());
      assertEquals("YPukW,&", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals(582, auditEvent0.getLine());
      assertNotNull(auditEvent0);
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError(auditEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(pipedOutputStream0, false);
      assertNotNull(xMLLogger0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "U5AFSHxgr&Vl+";
      objectArray0[1] = (Object) "com.puppycrawl.tools.checkstyle.api.AutomaticBean";
      objectArray0[2] = (Object) "U5AFSHxgr&Vl+";
      objectArray0[3] = (Object) "U5AFSHxgr&Vl+";
      objectArray0[4] = (Object) xMLLogger0;
      objectArray0[5] = (Object) "U5AFSHxgr&Vl+";
      objectArray0[6] = (Object) pipedOutputStream0;
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(965, 965, 965, 0, ")ta>Q", "com.puppycrawl.tools.checkstyle.api.AutomaticBean", objectArray0, severityLevel0, "com.puppycrawl.tools.checkstyle.api.AutomaticBean", class0, "com.puppycrawl.tools.checkstyle.api.AutomaticBean");
      assertEquals(7, objectArray0.length);
      assertEquals(965, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", localizedMessage0.getModuleId());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", localizedMessage0.getKey());
      assertEquals(965, localizedMessage0.getColumnNo());
      assertEquals(965, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(pipedOutputStream0, "U5AFSHxgr&Vl+", localizedMessage0);
      assertEquals(7, objectArray0.length);
      assertEquals(965, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", localizedMessage0.getModuleId());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", localizedMessage0.getKey());
      assertEquals(965, localizedMessage0.getColumnNo());
      assertEquals(965, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(965, auditEvent0.getColumn());
      assertEquals("U5AFSHxgr&Vl+", auditEvent0.getFileName());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(965, auditEvent0.getLine());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileFinished(auditEvent0);
      assertEquals(7, objectArray0.length);
      assertEquals(965, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", localizedMessage0.getModuleId());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", localizedMessage0.getKey());
      assertEquals(965, localizedMessage0.getColumnNo());
      assertEquals(965, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(965, auditEvent0.getColumn());
      assertEquals("U5AFSHxgr&Vl+", auditEvent0.getFileName());
      assertEquals("com.puppycrawl.tools.checkstyle.api.AutomaticBean", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(965, auditEvent0.getLine());
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError((AuditEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.XMLLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = XMLLogger.encode("LCv");
      assertEquals("LCv", string0);
      assertNotNull(string0);
      
      boolean boolean0 = XMLLogger.isReference("LCv");
      assertFalse(boolean0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r");
      assertNotNull(mockFileOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, false);
      assertNotNull(xMLLogger0);
      
      mockFileOutputStream0.close();
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("LCv");
      assertEquals("LCv", defaultConfiguration0.getName());
      assertNotNull(defaultConfiguration0);
      
      xMLLogger0.configure(defaultConfiguration0);
      assertEquals("LCv", defaultConfiguration0.getName());
      
      boolean boolean1 = XMLLogger.isReference("LCv");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AuditEvent auditEvent0 = new AuditEvent("r", "");
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileStarted(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      
      xMLLogger0.addError(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      
      xMLLogger0.finishLocalSetup();
      // Undeclared exception!
      try { 
        auditEvent0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = XMLLogger.encode("<6:tc");
      assertEquals("&lt;6:tc", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("&lt;6:tc");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(false);
      assertFalse(boolean0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, automaticBean_OutputStreamOptions0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertNotNull(xMLLogger0);
      
      boolean boolean1 = XMLLogger.isReference("&lt;6:tc");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = XMLLogger.encode("&lt;6:tc");
      assertEquals("&amp;lt;6:tc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "&amp;lt;6:tc";
      objectArray0[2] = (Object) automaticBean_OutputStreamOptions0;
      objectArray0[3] = (Object) xMLLogger0;
      objectArray0[4] = (Object) "&lt;6:tc";
      objectArray0[5] = (Object) mockPrintStream0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "&amp;lt;6:tc";
      PrintStream printStream0 = mockPrintStream0.format("&lt;6:tc", objectArray0);
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(8L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertNotNull(printStream0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean2 = mockFile0.mkdir();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(8L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      
      AuditEvent auditEvent0 = new AuditEvent(object2, (String) null);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      String string2 = XMLLogger.encode("&lt;6:tc");
      assertEquals("&amp;lt;6:tc", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(1446, "&amp;lt;6:tc", "T2GbUI,m|2S", objectArray1, severityLevel0, "", class0, "");
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals("", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("T2GbUI,m|2S", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(1446, localizedMessage0.getLineNo());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent1 = new AuditEvent(auditEvent0, "&lt;6:tc", localizedMessage0);
      assertEquals(0, objectArray1.length);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertEquals("", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("T2GbUI,m|2S", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(1446, localizedMessage0.getLineNo());
      assertEquals("", auditEvent1.getModuleId());
      assertEquals(1446, auditEvent1.getLine());
      assertEquals("&lt;6:tc", auditEvent1.getFileName());
      assertEquals(0, auditEvent1.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent1.getSeverityLevel());
      assertNotNull(auditEvent1);
      
      String string3 = auditEvent1.getMessage();
      assertEquals("", string3);
      assertEquals(0, objectArray1.length);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(auditEvent0.equals((Object)auditEvent1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(auditEvent0, auditEvent1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertEquals("", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("T2GbUI,m|2S", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(1446, localizedMessage0.getLineNo());
      assertEquals("", auditEvent1.getModuleId());
      assertEquals(1446, auditEvent1.getLine());
      assertEquals("&lt;6:tc", auditEvent1.getFileName());
      assertEquals(0, auditEvent1.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent1.getSeverityLevel());
      assertNotNull(string3);
      
      xMLLogger0.auditFinished(auditEvent1);
      assertEquals(0, objectArray1.length);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(auditEvent0.equals((Object)auditEvent1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(auditEvent0, auditEvent1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(23L, mockFile0.length());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertEquals("", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("T2GbUI,m|2S", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(1446, localizedMessage0.getLineNo());
      assertEquals("", auditEvent1.getModuleId());
      assertEquals(1446, auditEvent1.getLine());
      assertEquals("&lt;6:tc", auditEvent1.getFileName());
      assertEquals(0, auditEvent1.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent1.getSeverityLevel());
      
      xMLLogger0.finishLocalSetup();
      assertSame(mockPrintStream0, printStream0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(23L, mockFile0.length());
      
      xMLLogger0.addError(auditEvent1);
      assertEquals(0, objectArray1.length);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(auditEvent0.equals((Object)auditEvent1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(auditEvent0, auditEvent1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(23L, mockFile0.length());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertEquals("", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("T2GbUI,m|2S", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(1446, localizedMessage0.getLineNo());
      assertEquals("", auditEvent1.getModuleId());
      assertEquals(1446, auditEvent1.getLine());
      assertEquals("&lt;6:tc", auditEvent1.getFileName());
      assertEquals(0, auditEvent1.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent1.getSeverityLevel());
      
      xMLLogger0.auditFinished(auditEvent0);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(auditEvent0.equals((Object)auditEvent1));
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(auditEvent0, auditEvent1);
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(23L, mockFile0.length());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PQjdR/cMEm");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("PQjdR\\cMEm", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("PQjdR", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("cMEm", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(xMLLogger0);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", 3588, (Throwable) null);
      assertEquals(3588, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        xMLLogger0.addException((AuditEvent) null, sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.XMLLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Error getting the Throwable initCause() method", true);
      assertNotNull(mockFileOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, false);
      assertNotNull(xMLLogger0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Error getting the Throwable initCause() method";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(696, "Error getting the Throwable initCause() method", (String) null, objectArray0, severityLevel0, (String) null, class0, "m`oc$l&~#");
      assertEquals(4, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(696, localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(xMLLogger0, "", localizedMessage0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(696, localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertNull(auditEvent0.getModuleId());
      assertEquals(696, auditEvent0.getLine());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      xMLLogger0.addError(auditEvent0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(696, localizedMessage0.getLineNo());
      assertNull(localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertNull(localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertNull(auditEvent0.getModuleId());
      assertEquals(696, auditEvent0.getLine());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.write(859);
      assertEquals("[", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.flush();
      assertEquals("[", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(byteArrayOutputStream0, automaticBean_OutputStreamOptions0);
      assertEquals("[", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertNotNull(xMLLogger0);
      
      boolean boolean0 = XMLLogger.isReference("jcEI");
      assertFalse(boolean0);
      
      byteArrayOutputStream0.reset();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      xMLLogger0.auditFinished((AuditEvent) null);
      assertEquals("</checkstyle>\r\n", byteArrayOutputStream0.toString());
      assertEquals(15, byteArrayOutputStream0.size());
      
      // Undeclared exception!
      try { 
        xMLLogger0.fileFinished((AuditEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.XMLLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(byteArrayOutputStream0, automaticBean_OutputStreamOptions0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(xMLLogger0);
      
      // Undeclared exception!
      try { 
        XMLLogger.isReference((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.XMLLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = XMLLogger.isReference("quot");
      assertFalse(boolean0);
      
      String string0 = XMLLogger.encode("quot");
      assertEquals("quot", string0);
      assertNotNull(string0);
      
      boolean boolean1 = XMLLogger.isReference("quot");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(dataOutputStream0, automaticBean_OutputStreamOptions0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      // Undeclared exception!
      try { 
        xMLLogger0.fileStarted(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("p\"");
      assertNotNull(mockPrintStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(mockPrintStream0, "mN|k<R3");
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("mN|k<R3", auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileStarted(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("mN|k<R3", auditEvent0.getFileName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("+<>Rc5\"sx");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "+<>Rc5\"sx";
      objectArray0[1] = (Object) "+<>Rc5\"sx";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "+<>Rc5\"sx";
      objectArray0[6] = (Object) "+<>Rc5\"sx";
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) "+<>Rc5\"sx";
      PrintStream printStream0 = mockPrintStream0.format("+<>Rc5\"sx", objectArray0);
      assertEquals(9, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 3161);
      assertEquals(9, objectArray0.length);
      assertNotNull(bufferedOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(bufferedOutputStream0, false);
      assertEquals(9, objectArray0.length);
      assertNotNull(xMLLogger0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(3161, (-1856), 0, (-1856), "", "+<>Rc5\"sx", objectArray0, severityLevel0, "+<>Rc5\"sx", class0, "+<>Rc5\"sx");
      assertEquals(9, objectArray0.length);
      assertEquals("+<>Rc5\"sx", localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals((-1856), localizedMessage0.getColumnNo());
      assertEquals((-1856), localizedMessage0.getTokenType());
      assertEquals(3161, localizedMessage0.getLineNo());
      assertEquals("+<>Rc5\"sx", localizedMessage0.getModuleId());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(object2, "1t%4X2F#?5K", localizedMessage0);
      assertEquals(9, objectArray0.length);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertEquals("+<>Rc5\"sx", localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals((-1856), localizedMessage0.getColumnNo());
      assertEquals((-1856), localizedMessage0.getTokenType());
      assertEquals(3161, localizedMessage0.getLineNo());
      assertEquals("+<>Rc5\"sx", localizedMessage0.getModuleId());
      assertEquals("+<>Rc5\"sx", auditEvent0.getModuleId());
      assertEquals(3161, auditEvent0.getLine());
      assertEquals("1t%4X2F#?5K", auditEvent0.getFileName());
      assertEquals((-1856), auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      xMLLogger0.addError(auditEvent0);
      assertEquals(9, objectArray0.length);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("+<>Rc5\"sx", localizedMessage0.getKey());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals((-1856), localizedMessage0.getColumnNo());
      assertEquals((-1856), localizedMessage0.getTokenType());
      assertEquals(3161, localizedMessage0.getLineNo());
      assertEquals("+<>Rc5\"sx", localizedMessage0.getModuleId());
      assertEquals("+<>Rc5\"sx", auditEvent0.getModuleId());
      assertEquals(3161, auditEvent0.getLine());
      assertEquals("1t%4X2F#?5K", auditEvent0.getFileName());
      assertEquals((-1856), auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(779);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xMLLogger0);
      
      pipedOutputStream0.write(779);
      assertEquals(1, pipedInputStream0.available());
      
      AuditEvent auditEvent0 = new AuditEvent(automaticBean_OutputStreamOptions0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(1, pipedInputStream0.available());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(string0);
      
      xMLLogger0.addException(auditEvent0, sQLIntegrityConstraintViolationException0);
      assertEquals(1, pipedInputStream0.available());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      String string1 = XMLLogger.encode("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      xMLLogger0.addException(auditEvent0, sQLIntegrityConstraintViolationException0);
      assertEquals(1, pipedInputStream0.available());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(pipedOutputStream0, false);
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(pipedOutputStream0, "");
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileFinished(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("6JA/XEEvNzxwB-'{>a", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.toString());
      assertEquals("6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLException sQLException0 = new SQLException("", sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.toString());
      assertEquals("6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      xMLLogger0.addException(auditEvent0, sQLException0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.toString());
      assertEquals("6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = XMLLogger.isReference("mnSG94o9E!<u");
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("mnSG94o9E!<u");
      assertNotNull(mockPrintStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("mnSG94o9E!<u", hashMap0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: mnSG94o9E!<u", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("mnSG94o9E!<u", sQLClientInfoException1.getMessage());
      assertNotNull(sQLClientInfoException1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "mnSG94o9E!<u";
      objectArray0[1] = (Object) "mnSG94o9E!<u";
      objectArray0[2] = (Object) mockPrintStream0;
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ClientInfoStatus clientInfoStatus1 = hashMap0.merge((String) null, clientInfoStatus0, biFunction0);
      assertEquals(ClientInfoStatus.REASON_VALUE_INVALID, clientInfoStatus1);
      assertSame(clientInfoStatus0, clientInfoStatus1);
      assertSame(clientInfoStatus1, clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Class<Throwable> class0 = Throwable.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, 0, "mnSG94o9E!<u", "mnSG94o9E!<u", objectArray0, severityLevel0, ":+~ua", class0, ":+~ua");
      assertEquals(3, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("mnSG94o9E!<u", localizedMessage0.getKey());
      assertEquals(":+~ua", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getLineNo());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(sQLClientInfoException1, "mnSG94o9E!<u", localizedMessage0);
      assertEquals(3, objectArray0.length);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("mnSG94o9E!<u", localizedMessage0.getKey());
      assertEquals(":+~ua", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getLineNo());
      assertEquals(":+~ua", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.IGNORE, auditEvent0.getSeverityLevel());
      assertEquals("mnSG94o9E!<u", auditEvent0.getFileName());
      assertEquals(0, auditEvent0.getLine());
      assertEquals(0, auditEvent0.getColumn());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: mnSG94o9E!<u", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("mnSG94o9E!<u", sQLClientInfoException1.getMessage());
      assertNotNull(auditEvent0);
      
      xMLLogger0.addError(auditEvent0);
      assertEquals(3, objectArray0.length);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("mnSG94o9E!<u", localizedMessage0.getKey());
      assertEquals(":+~ua", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getLineNo());
      assertEquals(":+~ua", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.IGNORE, auditEvent0.getSeverityLevel());
      assertEquals("mnSG94o9E!<u", auditEvent0.getFileName());
      assertEquals(0, auditEvent0.getLine());
      assertEquals(0, auditEvent0.getColumn());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: mnSG94o9E!<u", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("mnSG94o9E!<u", sQLClientInfoException1.getMessage());
      
      xMLLogger0.auditFinished(auditEvent0);
      assertEquals(3, objectArray0.length);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("mnSG94o9E!<u", localizedMessage0.getKey());
      assertEquals(":+~ua", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getLineNo());
      assertEquals(":+~ua", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.IGNORE, auditEvent0.getSeverityLevel());
      assertEquals("mnSG94o9E!<u", auditEvent0.getFileName());
      assertEquals(0, auditEvent0.getLine());
      assertEquals(0, auditEvent0.getColumn());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: mnSG94o9E!<u", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("mnSG94o9E!<u", sQLClientInfoException1.getMessage());
      
      String string0 = XMLLogger.encode(":+~ua");
      assertEquals(":+~ua", string0);
      assertNotNull(string0);
      
      String string1 = "";
      AuditEvent auditEvent1 = null;
      try {
        auditEvent1 = new AuditEvent((Object) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("&gt;");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)40;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-47), (byte)40}, byteArray0);
      
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, true);
      assertNotNull(xMLLogger0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "&gt;";
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(1207, (-1111465753), "&gt;", "&gt;", objectArray0, severityLevel0, (String) null, class0, "&gt;");
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals((-1111465753), localizedMessage0.getColumnNo());
      assertEquals("&gt;", localizedMessage0.getKey());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertNull(localizedMessage0.getModuleId());
      assertEquals((-1111465753), localizedMessage0.getColumnCharIndex());
      assertEquals(1207, localizedMessage0.getLineNo());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent("&gt;", (String) null, localizedMessage0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals((-1111465753), localizedMessage0.getColumnNo());
      assertEquals("&gt;", localizedMessage0.getKey());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertNull(localizedMessage0.getModuleId());
      assertEquals((-1111465753), localizedMessage0.getColumnCharIndex());
      assertEquals(1207, localizedMessage0.getLineNo());
      assertNull(auditEvent0.getFileName());
      assertEquals((-1111465753), auditEvent0.getColumn());
      assertNull(auditEvent0.getModuleId());
      assertEquals(SeverityLevel.IGNORE, auditEvent0.getSeverityLevel());
      assertEquals(1207, auditEvent0.getLine());
      assertNotNull(auditEvent0);
      
      xMLLogger0.addError(auditEvent0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals((-1111465753), localizedMessage0.getColumnNo());
      assertEquals("&gt;", localizedMessage0.getKey());
      assertEquals(SeverityLevel.IGNORE, localizedMessage0.getSeverityLevel());
      assertNull(localizedMessage0.getModuleId());
      assertEquals((-1111465753), localizedMessage0.getColumnCharIndex());
      assertEquals(1207, localizedMessage0.getLineNo());
      assertNull(auditEvent0.getFileName());
      assertEquals((-1111465753), auditEvent0.getColumn());
      assertNull(auditEvent0.getModuleId());
      assertEquals(SeverityLevel.IGNORE, auditEvent0.getSeverityLevel());
      assertEquals(1207, auditEvent0.getLine());
      
      String string0 = XMLLogger.encode("&gt;");
      assertEquals("&amp;gt;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g%zU", true);
      assertNotNull(mockFileOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = XMLLogger.isReference("QoZ#bQs@:.");
      assertFalse(boolean0);
      
      objectArray0[0] = (Object) "g%zU";
      objectArray0[1] = (Object) mockFileOutputStream0;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(65536, "g%zU", "g%zU", objectArray0, "^KU:t~Z", class0, "");
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(65536, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals("^KU:t~Z", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals("g%zU", localizedMessage0.getKey());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(automaticBean_OutputStreamOptions0, "g%zU", localizedMessage0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(65536, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals("^KU:t~Z", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals("g%zU", localizedMessage0.getKey());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(65536, auditEvent0.getLine());
      assertEquals("g%zU", auditEvent0.getFileName());
      assertEquals("^KU:t~Z", auditEvent0.getModuleId());
      assertNotNull(auditEvent0);
      
      xMLLogger0.auditStarted(auditEvent0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(65536, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals("^KU:t~Z", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals("g%zU", localizedMessage0.getKey());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(65536, auditEvent0.getLine());
      assertEquals("g%zU", auditEvent0.getFileName());
      assertEquals("^KU:t~Z", auditEvent0.getModuleId());
      
      xMLLogger0.finishLocalSetup();
      xMLLogger0.addError(auditEvent0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(65536, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals("^KU:t~Z", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getTokenType());
      assertEquals("g%zU", localizedMessage0.getKey());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(65536, auditEvent0.getLine());
      assertEquals("g%zU", auditEvent0.getFileName());
      assertEquals("^KU:t~Z", auditEvent0.getModuleId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("6JA/XEEvNzxwB-'{>a", hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.toString());
      assertEquals("6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLException sQLException0 = new SQLException("", sQLClientInfoException0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.toString());
      assertEquals("6JA/XEEvNzxwB-'{>a", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      String string0 = XMLLogger.encode("6JA/XEEvNzxwB-'{>a");
      assertEquals("6JA/XEEvNzxwB-&apos;{&gt;a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";l`M", true);
      assertNotNull(mockFileOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        XMLLogger.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.XMLLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = XMLLogger.encode("S6.dtG&`2}5");
      assertEquals("S6.dtG&amp;`2}5", string0);
      assertNotNull(string0);
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(byteArrayOutputStream0, true);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      xMLLogger0.auditFinished(auditEvent0);
      assertEquals("</checkstyle>\r\n", byteArrayOutputStream0.toString());
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      
      boolean boolean0 = XMLLogger.isReference("Convert null value to type '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputStream outputStream0 = null;
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = null;
      try {
        xMLLogger0 = new XMLLogger((OutputStream) null, automaticBean_OutputStreamOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = XMLLogger.isReference("h~5");
      assertFalse(boolean0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = null;
      try {
        xMLLogger0 = new XMLLogger((OutputStream) null, automaticBean_OutputStreamOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&O$RRX<}lpKaYO", "com.google.common.collect.RangeGwtSerializationDependencies");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)4;
      mockFileOutputStream0.release();
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO\\com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.toString());
      assertEquals("com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)16;
      mockFileOutputStream0.write(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)10, (byte)4, (byte)38, (byte)16}, byteArray0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(5L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO\\com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.toString());
      assertEquals("com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, false);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(5L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO\\com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.toString());
      assertEquals("com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(xMLLogger0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(5L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO\\com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.toString());
      assertEquals("com.google.common.collect.RangeGwtSerializationDependencies", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\&O$RRX<}lpKaYO", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = XMLLogger.isReference(" severity=\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(byteArrayOutputStream0, automaticBean_OutputStreamOptions0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(xMLLogger0);
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Integer integer0 = new Integer(34);
      assertEquals(34, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned((-3284), (-3284));
      assertEquals(0, int0);
      
      AuditEvent auditEvent0 = new AuditEvent(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNull(auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      xMLLogger0.auditStarted(auditEvent0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNull(auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AuditEvent auditEvent0 = new AuditEvent(object0, "5c(I.TtI60lBukfV");
      assertEquals("5c(I.TtI60lBukfV", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZsd9", "GZsd9");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, automaticBean_OutputStreamOptions0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("GZsd9", mockFile0.getName());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\GZsd9", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\GZsd9\\GZsd9", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertNotNull(xMLLogger0);
      
      xMLLogger0.finishLocalSetup();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("GZsd9", mockFile0.getName());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\GZsd9", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\GZsd9\\GZsd9", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(pipedOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent("P\"m^(dsQS!Y<", "");
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
      assertNotNull(auditEvent0);
      
      xMLLogger0.auditFinished(auditEvent0);
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertEquals("", auditEvent0.getFileName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLLogger xMLLogger0 = null;
      try {
        xMLLogger0 = new XMLLogger((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = XMLLogger.encode("]I+n\"JJOY,");
      assertEquals("]I+n&quot;JJOY,", string0);
      assertNotNull(string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, (-1652));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThreadModeSettings threadModeSettings0 = ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;
      assertEquals(1, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(1, threadModeSettings0.getCheckerThreadsNumber());
      assertNotNull(threadModeSettings0);
      
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("", threadModeSettings0);
      assertEquals(1, threadModeSettings0.getTreeWalkerThreadsNumber());
      assertEquals(1, threadModeSettings0.getCheckerThreadsNumber());
      assertEquals("", defaultConfiguration0.getName());
      assertNotNull(defaultConfiguration0);
      
      String string0 = XMLLogger.encode("Checker");
      assertEquals("Checker", string0);
      assertNotNull(string0);
      
      String string1 = XMLLogger.encode("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLLogger.isReference("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<checkstyle version=\"", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, automaticBean_OutputStreamOptions0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\<checkstyle version=\"", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle", mockFile0.getParent());
      assertEquals("<checkstyle version=\"", mockFile0.getName());
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent("", "<checkstyle version=\"");
      assertEquals("<checkstyle version=\"", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileFinished(auditEvent0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle\\<checkstyle version=\"", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("C:\\Users\\Gudek-Home\\Documents\\TU\\STRE\\STRE-FinalProject\\checkstyle", mockFile0.getParent());
      assertEquals("<checkstyle version=\"", mockFile0.getName());
      assertEquals("<checkstyle version=\"", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("BloomFilters must have the same number of hash functions (%s != %s)");
      assertNotNull(mockPrintStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, false);
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent("BloomFilters must have the same number of hash functions (%s != %s)", "BloomFilters must have the same number of hash functions (%s != %s)");
      assertEquals("BloomFilters must have the same number of hash functions (%s != %s)", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileFinished(auditEvent0);
      assertEquals("BloomFilters must have the same number of hash functions (%s != %s)", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = XMLLogger.encode("<6:tc");
      assertEquals("&lt;6:tc", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("&lt;6:tc");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(false);
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.CLOSE;
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, automaticBean_OutputStreamOptions0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(xMLLogger0);
      
      boolean boolean1 = XMLLogger.isReference("&lt;6:tc");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = XMLLogger.encode("&lt;6:tc");
      assertEquals("&amp;lt;6:tc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = (Object) "&amp;lt;6:tc";
      objectArray0[2] = (Object) automaticBean_OutputStreamOptions0;
      objectArray0[3] = (Object) xMLLogger0;
      objectArray0[4] = (Object) "&lt;6:tc";
      objectArray0[5] = (Object) mockPrintStream0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "&amp;lt;6:tc";
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean2 = mockFile0.mkdir();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      AuditEvent auditEvent0 = new AuditEvent(object2, (String) null);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNull(auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      String string2 = XMLLogger.encode("&lt;6:tc");
      assertEquals("&amp;lt;6:tc", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      xMLLogger0.finishLocalSetup();
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      xMLLogger0.auditFinished(auditEvent0);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("&lt;6:tc", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(15L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("&lt;6:tc", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      
      // Undeclared exception!
      try { 
        xMLLogger0.addError(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = XMLLogger.isReference("[NF+$Oxf;@M='Lf'(");
      assertFalse(boolean0);
      
      String string0 = XMLLogger.encode("[NF+$Oxf;@M='Lf'(");
      assertEquals("[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(", string0);
      assertNotNull(string0);
      
      String string1 = XMLLogger.encode("[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(");
      assertEquals("[NF+$#x7f;Oxf;@M=&amp;apos;Lf&amp;apos;(", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = XMLLogger.isReference("[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = XMLLogger.encode("_ZMc gOh{r17gL fZ+");
      assertEquals("_ZMc gOh{r17gL fZ+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("[NF+$Oxf;@M='Lf'(");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('B');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertNotNull(dataOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(dataOutputStream0, false);
      assertNotNull(xMLLogger0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) "[NF+$#x7f;Oxf;@M=&amp;apos;Lf&amp;apos;(";
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) "_ZMc gOh{r17gL fZ+";
      objectArray0[4] = (Object) "[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "_ZMc gOh{r17gL fZ+";
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-4141), (-4141), (-4141), (-4141), "[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(", "_ZMc gOh{r17gL fZ+", objectArray0, severityLevel0, (String) null, class0, "lt;/exception&gt");
      assertEquals(7, objectArray0.length);
      assertNull(localizedMessage0.getModuleId());
      assertEquals((-4141), localizedMessage0.getLineNo());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals((-4141), localizedMessage0.getColumnCharIndex());
      assertEquals((-4141), localizedMessage0.getColumnNo());
      assertEquals((-4141), localizedMessage0.getTokenType());
      assertEquals("_ZMc gOh{r17gL fZ+", localizedMessage0.getKey());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent(dataOutputStream0, "[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(", localizedMessage0);
      assertEquals(7, objectArray0.length);
      assertNull(localizedMessage0.getModuleId());
      assertEquals((-4141), localizedMessage0.getLineNo());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals((-4141), localizedMessage0.getColumnCharIndex());
      assertEquals((-4141), localizedMessage0.getColumnNo());
      assertEquals((-4141), localizedMessage0.getTokenType());
      assertEquals("_ZMc gOh{r17gL fZ+", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getModuleId());
      assertEquals("[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(", auditEvent0.getFileName());
      assertEquals((-4141), auditEvent0.getLine());
      assertEquals((-4141), auditEvent0.getColumn());
      assertNotNull(auditEvent0);
      
      xMLLogger0.addError(auditEvent0);
      assertEquals(7, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNull(localizedMessage0.getModuleId());
      assertEquals((-4141), localizedMessage0.getLineNo());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals((-4141), localizedMessage0.getColumnCharIndex());
      assertEquals((-4141), localizedMessage0.getColumnNo());
      assertEquals((-4141), localizedMessage0.getTokenType());
      assertEquals("_ZMc gOh{r17gL fZ+", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertNull(auditEvent0.getModuleId());
      assertEquals("[NF+$#x7f;Oxf;@M=&apos;Lf&apos;(", auditEvent0.getFileName());
      assertEquals((-4141), auditEvent0.getLine());
      assertEquals((-4141), auditEvent0.getColumn());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("lt;/exception&gt", "com.google.common.collect.RegularImmutableAsList");
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;\\exception&gt0com.google.common.collect.RegularImmutableAsList", file0.toString());
      assertEquals("exception&gt0com.google.common.collect.RegularImmutableAsList", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      assertNotNull(mockFileOutputStream0);
      
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, true);
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;\\exception&gt0com.google.common.collect.RegularImmutableAsList", file0.toString());
      assertEquals("exception&gt0com.google.common.collect.RegularImmutableAsList", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(xMLLogger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      objectArray0[2] = (Object) "com.google.common.collect.RegularImmutableAsList";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) xMLLogger0;
      objectArray0[5] = (Object) "com.google.common.collect.RegularImmutableAsList";
      objectArray0[6] = (Object) xMLLogger0;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(13, "lt;/exception&gt", "lt;/exception&gt", objectArray0, "S`1.d9Z7[f WoMF]6", class0, "lt;/exception&gt");
      assertEquals(7, objectArray0.length);
      assertEquals("lt;/exception&gt", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(13, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("S`1.d9Z7[f WoMF]6", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNotNull(localizedMessage0);
      
      AuditEvent auditEvent0 = new AuditEvent("com.google.common.collect.RegularImmutableAsList", "lt;/exception&gt", localizedMessage0);
      assertEquals(7, objectArray0.length);
      assertEquals("lt;/exception&gt", auditEvent0.getFileName());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals("S`1.d9Z7[f WoMF]6", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(13, auditEvent0.getLine());
      assertEquals("lt;/exception&gt", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(13, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("S`1.d9Z7[f WoMF]6", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getTokenType());
      assertNotNull(auditEvent0);
      
      xMLLogger0.fileFinished(auditEvent0);
      assertEquals(7, objectArray0.length);
      assertEquals("lt;/exception&gt", auditEvent0.getFileName());
      assertEquals(0, auditEvent0.getColumn());
      assertEquals("S`1.d9Z7[f WoMF]6", auditEvent0.getModuleId());
      assertEquals(SeverityLevel.ERROR, auditEvent0.getSeverityLevel());
      assertEquals(13, auditEvent0.getLine());
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;\\exception&gt0com.google.common.collect.RegularImmutableAsList", file0.toString());
      assertEquals("exception&gt0com.google.common.collect.RegularImmutableAsList", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("lt;/exception&gt", localizedMessage0.getKey());
      assertEquals(SeverityLevel.ERROR, localizedMessage0.getSeverityLevel());
      assertEquals(13, localizedMessage0.getLineNo());
      assertEquals(0, localizedMessage0.getColumnCharIndex());
      assertEquals("S`1.d9Z7[f WoMF]6", localizedMessage0.getModuleId());
      assertEquals(0, localizedMessage0.getColumnNo());
      assertEquals(0, localizedMessage0.getTokenType());
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) mockFileOutputStream0;
      objectArray1[2] = (Object) xMLLogger0;
      objectArray1[3] = (Object) mockFileOutputStream0;
      objectArray1[4] = (Object) "com.google.common.collect.RegularImmutableAsList";
      objectArray1[5] = (Object) xMLLogger0;
      objectArray1[6] = objectArray1[5];
      SeverityLevel severityLevel0 = SeverityLevel.INFO;
      Class<AuditEvent> class1 = AuditEvent.class;
      LocalizedMessage localizedMessage1 = new LocalizedMessage(2019, 708, 34, "amp", "m1OQT_XoFf,", objectArray1, severityLevel0, "com.google.common.collect.RegularImmutableAsList", class1, "lt;/exception&gt");
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(localizedMessage1.equals((Object)localizedMessage0));
      assertEquals("m1OQT_XoFf,", localizedMessage1.getKey());
      assertEquals("com.google.common.collect.RegularImmutableAsList", localizedMessage1.getModuleId());
      assertEquals(34, localizedMessage1.getTokenType());
      assertEquals(2019, localizedMessage1.getLineNo());
      assertEquals(708, localizedMessage1.getColumnNo());
      assertEquals(708, localizedMessage1.getColumnCharIndex());
      assertEquals(SeverityLevel.INFO, localizedMessage1.getSeverityLevel());
      assertNotNull(localizedMessage1);
      
      AuditEvent auditEvent1 = new AuditEvent(object0, "lt;/exception&gt", localizedMessage1);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(localizedMessage1.equals((Object)localizedMessage0));
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertEquals("m1OQT_XoFf,", localizedMessage1.getKey());
      assertEquals("com.google.common.collect.RegularImmutableAsList", localizedMessage1.getModuleId());
      assertEquals(34, localizedMessage1.getTokenType());
      assertEquals(2019, localizedMessage1.getLineNo());
      assertEquals(708, localizedMessage1.getColumnNo());
      assertEquals(708, localizedMessage1.getColumnCharIndex());
      assertEquals(SeverityLevel.INFO, localizedMessage1.getSeverityLevel());
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertEquals("com.google.common.collect.RegularImmutableAsList", auditEvent1.getModuleId());
      assertEquals(2019, auditEvent1.getLine());
      assertEquals("lt;/exception&gt", auditEvent1.getFileName());
      assertEquals(708, auditEvent1.getColumn());
      assertNotNull(auditEvent1);
      
      xMLLogger0.addError(auditEvent1);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(localizedMessage1.equals((Object)localizedMessage0));
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(localizedMessage1, localizedMessage0);
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;\\exception&gt0com.google.common.collect.RegularImmutableAsList", file0.toString());
      assertEquals("exception&gt0com.google.common.collect.RegularImmutableAsList", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("C:\\Users\\GUDEK-~1\\AppData\\Local\\Temp\\lt;", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("m1OQT_XoFf,", localizedMessage1.getKey());
      assertEquals("com.google.common.collect.RegularImmutableAsList", localizedMessage1.getModuleId());
      assertEquals(34, localizedMessage1.getTokenType());
      assertEquals(2019, localizedMessage1.getLineNo());
      assertEquals(708, localizedMessage1.getColumnNo());
      assertEquals(708, localizedMessage1.getColumnCharIndex());
      assertEquals(SeverityLevel.INFO, localizedMessage1.getSeverityLevel());
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertEquals("com.google.common.collect.RegularImmutableAsList", auditEvent1.getModuleId());
      assertEquals(2019, auditEvent1.getLine());
      assertEquals("lt;/exception&gt", auditEvent1.getFileName());
      assertEquals(708, auditEvent1.getColumn());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A@I", true);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(bufferedOutputStream0, automaticBean_OutputStreamOptions0);
      assertNotNull(xMLLogger0);
      
      AuditEvent auditEvent0 = new AuditEvent(xMLLogger0, "com.google.common.collect.RegularImmutableAsList");
      assertEquals("com.google.common.collect.RegularImmutableAsList", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("Yn4yUMYe.NR74m", "com.google.common.collect.RegularImmutableAsList", 2596, sQLException0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("A@I", sQLDataException0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTimeoutException0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals("", string0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(string0);
      
      xMLLogger0.addException(auditEvent0, sQLFeatureNotSupportedException0);
      assertEquals("com.google.common.collect.RegularImmutableAsList", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: A@I", sQLTimeoutException0.toString());
      assertEquals("A@I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean0 = XMLLogger.isReference("com.google.common.collect.RegularImmutableAsList");
      assertFalse(boolean0);
      
      AuditEvent auditEvent1 = new AuditEvent(bufferedOutputStream0, "");
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertEquals("", auditEvent1.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      assertNotNull(auditEvent1);
      
      xMLLogger0.fileStarted(auditEvent1);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals("", auditEvent1.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      
      xMLLogger0.finishLocalSetup();
      xMLLogger0.auditStarted(auditEvent1);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals("", auditEvent1.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      
      xMLLogger0.addError(auditEvent1);
      assertFalse(auditEvent1.equals((Object)auditEvent0));
      assertNotSame(auditEvent1, auditEvent0);
      assertEquals("", auditEvent1.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent1.getSeverityLevel());
      
      String string1 = XMLLogger.encode("</exception>");
      assertEquals("&lt;/exception&gt;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      AuditEvent auditEvent2 = new AuditEvent("", "");
      assertFalse(auditEvent2.equals((Object)auditEvent0));
      assertFalse(auditEvent2.equals((Object)auditEvent1));
      assertEquals("", auditEvent2.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent2.getSeverityLevel());
      assertNotNull(auditEvent2);
      
      xMLLogger0.addError(auditEvent2);
      assertFalse(auditEvent2.equals((Object)auditEvent0));
      assertFalse(auditEvent2.equals((Object)auditEvent1));
      assertNotSame(auditEvent2, auditEvent0);
      assertNotSame(auditEvent2, auditEvent1);
      assertEquals("", auditEvent2.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent2.getSeverityLevel());
      
      xMLLogger0.addException(auditEvent2, sQLDataException0);
      assertFalse(auditEvent2.equals((Object)auditEvent0));
      assertFalse(auditEvent2.equals((Object)auditEvent1));
      assertNotSame(auditEvent2, auditEvent0);
      assertNotSame(auditEvent2, auditEvent1);
      assertEquals("", auditEvent2.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent2.getSeverityLevel());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.google.common.collect.RegularImmutableAsList", sQLDataException0.getSQLState());
      assertEquals("Yn4yUMYe.NR74m", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Yn4yUMYe.NR74m", sQLDataException0.toString());
      assertEquals(2596, sQLDataException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " severity=\"");
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AuditEvent auditEvent0 = new AuditEvent(uRI0, "+K*[");
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("+K*[", auditEvent0.getFileName());
      assertEquals(SeverityLevel.INFO, auditEvent0.getSeverityLevel());
      assertNotNull(auditEvent0);
      
      String string0 = XMLLogger.encode("com.google.common.hash.BloomFilterStrategies$LockFreeBitArray");
      assertEquals("com.google.common.hash.BloomFilterStrategies$LockFreeBitArray", string0);
      assertNotNull(string0);
      
      boolean boolean1 = XMLLogger.isReference("sN/r| H0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = XMLLogger.isReference("F2!!`GdUB;D5");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = XMLLogger.isReference("&#10;");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("+<>Rc5\"sx");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "+<>Rc5\"sx";
      objectArray0[1] = (Object) "+<>Rc5\"sx";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "+<>Rc5\"sx";
      objectArray0[6] = (Object) "+<>Rc5\"sx";
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) "+<>Rc5\"sx";
      PrintStream printStream0 = mockPrintStream0.format("+<>Rc5\"sx", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 3161);
      XMLLogger xMLLogger0 = new XMLLogger(bufferedOutputStream0, false);
      Object object2 = new Object();
      SeverityLevel severityLevel0 = SeverityLevel.ERROR;
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(3161, (-1856), 0, (-1856), "", "+<>Rc5\"sx", objectArray0, severityLevel0, "+<>Rc5\"sx", class0, "+<>Rc5\"sx");
      AuditEvent auditEvent0 = new AuditEvent(object2, "1t%4X2F#?5K", localizedMessage0);
      xMLLogger0.addError(auditEvent0);
      boolean boolean0 = XMLLogger.isReference("com.google.common.collect.ImmutableAsList");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLLogger.encode("LCv");
      XMLLogger.isReference("LCv");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r");
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, false);
      mockFileOutputStream0.close();
      mockFileOutputStream0.getChannel();
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("");
      XMLLogger.encode("");
      XMLLogger.isReference("LCv");
      AuditEvent auditEvent0 = new AuditEvent("r", "");
      xMLLogger0.fileStarted(auditEvent0);
      mockFileOutputStream0.getChannel();
      xMLLogger0.addError(auditEvent0);
      xMLLogger0.finishLocalSetup();
      XMLLogger.encode("r");
      // Undeclared exception!
      try { 
        xMLLogger0.fileFinished(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLLogger.isReference("&6gt;");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.getSuppressed();
      MockFile mockFile0 = new MockFile("&quot;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      sQLTransientException0.getLocalizedMessage();
      XMLLogger xMLLogger0 = new XMLLogger(mockFileOutputStream0, false);
      AuditEvent auditEvent0 = new AuditEvent("com.puppycrawl.tools.checkstyle.XMLLogger");
      xMLLogger0.addException(auditEvent0, sQLTransientException0);
      assertNull(auditEvent0.getFileName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Multi thread mode for Checker module is not implemented");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      mockFileOutputStream0.write(byteArray0);
      XMLLogger.isReference("Multi thread mode for Checker module is not implemented");
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage((-855), (-855), "Multi thread mode for Checker module is not implemented", "p&Iv93", (Object[]) null, "p&Iv93", class0, (String) null);
      XMLLogger.isReference("&gt;");
      AuditEvent auditEvent0 = null;
      try {
        auditEvent0 = new AuditEvent((Object) null, "Multi thread mode for Checker module is not implemented", localizedMessage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLLogger.encode("W!zU4");
      MockPrintStream mockPrintStream0 = new MockPrintStream("W!zU4");
      AutomaticBean.OutputStreamOptions automaticBean_OutputStreamOptions0 = AutomaticBean.OutputStreamOptions.NONE;
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, automaticBean_OutputStreamOptions0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "K6Jd!mk)hT(@`Yh";
      objectArray0[2] = (Object) "6by79G},|B;'bINwp";
      objectArray0[3] = (Object) "K6Jd!mk)hT(@`Yh";
      objectArray0[4] = (Object) "6by79G},|B;'bINwp";
      objectArray0[5] = (Object) xMLLogger0;
      objectArray0[6] = (Object) "W!zU4";
      objectArray0[7] = (Object) "W!zU4";
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(0, 0, "K6Jd!mk)hT(@`Yh", "6by79G},|B;'bINwp", objectArray0, "6by79G},|B;'bINwp", class0, "ignore");
      AuditEvent auditEvent0 = new AuditEvent("W!zU4", "W!zU4", localizedMessage0);
      xMLLogger0.auditFinished(auditEvent0);
      xMLLogger0.auditFinished(auditEvent0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("W!zU4", (String) null, 0);
      xMLLogger0.addException(auditEvent0, sQLSyntaxErrorException0);
      xMLLogger0.addException(auditEvent0, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        XMLLogger.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.XMLLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("BloomFilters must have the same number of hash functions (%s != %s)");
      XMLLogger xMLLogger0 = new XMLLogger(mockPrintStream0, false);
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("BloomFilters must have the same number of hash functions (%s != %s)");
      xMLLogger0.configure(defaultConfiguration0);
      XMLLogger.encode("BloomFilters must have the same number of hash functions (%s != %s)");
      AuditEvent auditEvent0 = new AuditEvent("BloomFilters must have the same number of hash functions (%s != %s)", "BloomFilters must have the same number of hash functions (%s != %s)");
      xMLLogger0.fileStarted(auditEvent0);
      xMLLogger0.fileFinished(auditEvent0);
      // Undeclared exception!
      try { 
        auditEvent0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AuditEvent", e);
      }
  }
}
