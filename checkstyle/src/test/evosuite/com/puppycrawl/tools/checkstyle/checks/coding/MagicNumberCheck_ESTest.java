/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 12:48:17 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MagicNumberCheck_ESTest extends MagicNumberCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      magicNumberCheck0.setIgnoreAnnotation(true);
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(2847, "magic.number");
      // Undeclared exception!
      try { 
        magicNumberCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize((-1531), "magic.number");
      // Undeclared exception!
      try { 
        magicNumberCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(140, "magic.number");
      // Undeclared exception!
      try { 
        magicNumberCheck0.visitToken(detailAST0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      // Undeclared exception!
      try { 
        magicNumberCheck0.setIgnoreNumbers((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      // Undeclared exception!
      try { 
        magicNumberCheck0.setConstantWaiverParentToken((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      int[] intArray0 = magicNumberCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {142, 140, 137, 141}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      double[] doubleArray0 = new double[0];
      magicNumberCheck0.setIgnoreNumbers(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      double[] doubleArray0 = new double[15];
      magicNumberCheck0.setIgnoreNumbers(doubleArray0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        magicNumberCheck0.setConstantWaiverParentToken(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given name null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      String[] stringArray0 = new String[0];
      magicNumberCheck0.setConstantWaiverParentToken(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      magicNumberCheck0.setIgnoreAnnotation(true);
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(159, "magic.number");
      magicNumberCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      magicNumberCheck0.setIgnoreAnnotation(true);
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        magicNumberCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      int[] intArray0 = magicNumberCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      magicNumberCheck0.setIgnoreFieldDeclaration(true);
      assertEquals(SeverityLevel.ERROR, magicNumberCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      int[] intArray0 = magicNumberCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {142, 140, 137, 141}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MagicNumberCheck magicNumberCheck0 = new MagicNumberCheck();
      magicNumberCheck0.setIgnoreHashCodeMethod(true);
      assertEquals(SeverityLevel.ERROR, magicNumberCheck0.getSeverityLevel());
  }
}
