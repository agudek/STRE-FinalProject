/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:37:41 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.coding.SuperCloneCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSuperCheck_ESTest extends AbstractSuperCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(1007, "missing.super.call");
      superCloneCheck0.visitToken(detailAST0);
      assertFalse(superCloneCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(9, "missing.super.call");
      // Undeclared exception!
      try { 
        superCloneCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      int[] intArray0 = superCloneCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {9, 79}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(9, "missing.super.call");
      // Undeclared exception!
      try { 
        superCloneCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      superCloneCheck0.leaveToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(79);
      detailAST0.setNextSibling(detailAST0);
      superCloneCheck0.visitToken(detailAST0);
      assertFalse(superCloneCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(79);
      superCloneCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      superCloneCheck0.visitToken(detailAST0);
      assertNull(superCloneCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = new DetailAST();
      superCloneCheck0.beginTree(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      int[] intArray0 = superCloneCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {9, 79}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      int[] intArray0 = superCloneCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {9, 79}, intArray0);
  }
}
