/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:27:25 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalTokenTextCheck_ESTest extends IllegalTokenTextCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      DetailAST detailAST0 = new DetailAST();
      Set<String> set0 = illegalTokenTextCheck0.getTokenNames();
      detailAST0.setText("illegal.token.text");
      MockFile mockFile0 = new MockFile("illegal.token.text");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      FileText fileText0 = new FileText(mockFile0, list0);
      FileContents fileContents0 = new FileContents(fileText0);
      illegalTokenTextCheck0.setFileContents(fileContents0);
      illegalTokenTextCheck0.setFormat("");
      // Undeclared exception!
      try { 
        illegalTokenTextCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      // Undeclared exception!
      try { 
        illegalTokenTextCheck0.setFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      // Undeclared exception!
      try { 
        illegalTokenTextCheck0.setFormat("?&+72,6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression ?&+72,6
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      illegalTokenTextCheck0.setMessage((String) null);
      assertTrue(illegalTokenTextCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setText("illegal.token.text");
      illegalTokenTextCheck0.setFormat("illegal.token.text");
      illegalTokenTextCheck0.setMessage("initCause");
      // Undeclared exception!
      try { 
        illegalTokenTextCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setText("illegal.token.text");
      illegalTokenTextCheck0.visitToken(detailAST0);
      assertTrue(illegalTokenTextCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      illegalTokenTextCheck0.setIgnoreCase(true);
      assertTrue(illegalTokenTextCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      int[] intArray0 = illegalTokenTextCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {142, 140, 137, 141, 58, 183, 139, 138}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      int[] intArray0 = illegalTokenTextCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      int[] intArray0 = illegalTokenTextCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllegalTokenTextCheck illegalTokenTextCheck0 = new IllegalTokenTextCheck();
      boolean boolean0 = illegalTokenTextCheck0.isCommentNodesRequired();
      assertTrue(boolean0);
  }
}
