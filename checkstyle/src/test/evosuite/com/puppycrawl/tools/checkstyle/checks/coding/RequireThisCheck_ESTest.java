/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:39:17 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import antlr.ASTNULLType;
import antlr.CommonASTWithHiddenTokens;
import antlr.Token;
import antlr.collections.AST;
import com.puppycrawl.tools.checkstyle.DefaultContext;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequireThisCheck_ESTest extends RequireThisCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertNotNull(aSTNULLType0);
      
      Set<String> set0 = requireThisCheck0.getTokenNames();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      DefaultContext defaultContext0 = new DefaultContext();
      assertNotNull(defaultContext0);
      
      defaultContext0.add("", requireThisCheck0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.contextualize(defaultContext0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      detailAST0.addPreviousSibling(detailAST0);
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.setCheckMethods(false);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals(3, aSTNULLType1.getType());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      detailAST0.setType(9);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(9, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(0, aSTNULLType0.getColumn());
      assertNotNull(aSTNULLType0);
      
      Set<String> set0 = requireThisCheck0.getTokenNames();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      DetailAST detailAST1 = detailAST0.getFirstChild();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST1);
      
      int int0 = detailAST0.getLineNo();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(Integer.MIN_VALUE, int0);
      
      detailAST0.addPreviousSibling((DetailAST) null);
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals(3, aSTNULLType1.getType());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      detailAST0.setType(9);
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(9, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      detailAST0.setType(14);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      requireThisCheck0.setCheckMethods(true);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      
      String[] stringArray0 = new String[6];
      detailAST0.initialize(8, "require.this.method");
      assertEquals(8, detailAST0.getType());
      assertEquals("require.this.method", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      stringArray0[1] = "require.this.variable";
      stringArray0[4] = "require.this.variable";
      stringArray0[5] = "require.this.method";
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(intArray0);
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(8, detailAST0.getType());
      assertEquals("require.this.method", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      requireThisCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(8, detailAST0.getType());
      assertEquals("require.this.method", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      int[] intArray2 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      int[] intArray3 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(8, detailAST0.getType());
      assertEquals("require.this.method", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      int[] intArray4 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray4.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray4);
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      
      int[] intArray5 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray5.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray5);
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray4));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray5, intArray4);
      assertNotNull(intArray5);
      
      int[] intArray6 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray6.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray6);
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray2);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray4);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray6, intArray0);
      assertNotNull(intArray6);
      
      int[] intArray7 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray7.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray7);
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotSame(intArray7, intArray5);
      assertNotSame(intArray7, intArray3);
      assertNotSame(intArray7, intArray4);
      assertNotSame(intArray7, intArray6);
      assertNotSame(intArray7, intArray1);
      assertNotSame(intArray7, intArray2);
      assertNotSame(intArray7, intArray0);
      assertNotNull(intArray7);
      
      DetailAST detailAST1 = detailAST0.getNextSibling();
      assertEquals(8, detailAST0.getType());
      assertEquals("require.this.method", detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST1);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals(0, aSTNULLType0.getColumn());
      assertNotNull(aSTNULLType0);
      
      detailAST0.initialize(155, "require.this.variable");
      assertEquals(0, detailAST0.getColumn());
      assertEquals(155, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals("require.this.variable", detailAST0.getText());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertNotNull(aSTNULLType0);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals(3, aSTNULLType1.getType());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      int int0 = 9;
      detailAST0.setType(9);
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(9, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertNotNull(aSTNULLType0);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals(3, aSTNULLType1.getType());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int int0 = 9;
      detailAST0.setType(9);
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(9, detailAST0.getType());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals(0, aSTNULLType0.getColumn());
      assertNotNull(aSTNULLType0);
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals(3, aSTNULLType1.getType());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      detailAST0.setType(14);
      assertEquals(0, detailAST0.getLine());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      requireThisCheck0.beginTree(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getLine());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "require.this.variable";
      stringArray0[1] = "require.this.variable";
      stringArray0[4] = "require.this.variable";
      stringArray0[5] = "require.this.method";
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(intArray0);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.beginTree(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getLine());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.visitToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getLine());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      int[] intArray2 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray3 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getLine());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getType());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertNotNull(aSTNULLType0);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals(3, aSTNULLType1.getType());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      int int0 = 10;
      detailAST0.setType(10);
      assertEquals(10, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertNotNull(aSTNULLType0);
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals(3, aSTNULLType1.getType());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(intArray0);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray1 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.beginTree(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      boolean boolean0 = detailAST0.equalsTreePartial(aSTNULLType1);
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(3, aSTNULLType1.getType());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertFalse(boolean0);
      assertNotSame(aSTNULLType1, aSTNULLType0);
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray2 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      DetailAST detailAST1 = new DetailAST();
      assertFalse(detailAST1.equals((Object)detailAST0));
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getColumn());
      assertNull(detailAST1.getText());
      assertEquals(0, detailAST1.getType());
      assertEquals(0, detailAST1.getLine());
      assertNotNull(detailAST1);
      
      detailAST0.addPreviousSibling(detailAST1);
      assertFalse(detailAST1.equals((Object)detailAST0));
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getColumn());
      assertNull(detailAST1.getText());
      assertEquals(0, detailAST1.getType());
      assertEquals(0, detailAST1.getLine());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotSame(detailAST1, detailAST0);
      assertNotSame(detailAST0, detailAST1);
      
      String string0 = detailAST0.toStringList();
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(" null[-2147483648x-2147483648]", string0);
      assertNotSame(detailAST0, detailAST1);
      assertNotNull(string0);
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray3 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      
      requireThisCheck0.visitToken(detailAST0);
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotSame(detailAST0, detailAST1);
      
      int[] intArray4 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray4.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray4);
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray3);
      assertNotNull(intArray4);
      
      requireThisCheck0.beginTree(detailAST1);
      assertFalse(detailAST1.equals((Object)detailAST0));
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getColumn());
      assertNull(detailAST1.getText());
      assertEquals(0, detailAST1.getType());
      assertEquals(0, detailAST1.getLine());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(detailAST1, detailAST0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertNotNull(aSTNULLType0);
      
      requireThisCheck0.setCheckFields(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(intArray0);
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray1 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      boolean boolean0 = detailAST0.equalsTreePartial(aSTNULLType0);
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertFalse(boolean0);
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray2 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      DetailAST detailAST1 = new DetailAST();
      assertFalse(detailAST1.equals((Object)detailAST0));
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertNotNull(detailAST1);
      
      detailAST0.addPreviousSibling(detailAST1);
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertFalse(detailAST1.equals((Object)detailAST0));
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertNotSame(detailAST0, detailAST1);
      assertNotSame(detailAST1, detailAST0);
      
      String string0 = detailAST0.toStringList();
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertEquals(" null[-2147483648x-2147483648]", string0);
      assertNotSame(detailAST0, detailAST1);
      assertNotNull(string0);
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray3 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      
      requireThisCheck0.visitToken(detailAST0);
      assertFalse(detailAST0.equals((Object)detailAST1));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNotSame(detailAST0, detailAST1);
      
      int[] intArray4 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray4.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray4);
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      
      requireThisCheck0.beginTree(detailAST1);
      assertFalse(detailAST1.equals((Object)detailAST0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST1.getNumberOfChildren());
      assertEquals(0, detailAST1.getLine());
      assertEquals(0, detailAST1.getColumn());
      assertEquals(0, detailAST1.getType());
      assertNull(detailAST1.getText());
      assertNotSame(detailAST1, detailAST0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertNotNull(aSTNULLType0);
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals(3, aSTNULLType1.getType());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      detailAST0.setType(7);
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      
      requireThisCheck0.beginTree(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "require.this.variable";
      stringArray0[1] = "require.this.variable";
      stringArray0[4] = "require.this.variable";
      stringArray0[5] = "require.this.method";
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(intArray0);
      
      requireThisCheck0.setCheckMethods(false);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.setCheckMethods(false);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.beginTree(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      
      requireThisCheck0.setCheckMethods(false);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.visitToken(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      
      int[] intArray2 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      requireThisCheck0.setCheckMethods(false);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray3 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertNotNull(aSTNULLType0);
      
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      assertFalse(aSTNULLType1.equals((Object)aSTNULLType0));
      assertEquals("<ASTNULL>", aSTNULLType1.toStringTree());
      assertEquals(0, aSTNULLType1.getColumn());
      assertEquals(0, aSTNULLType1.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType1.toStringList());
      assertEquals(0, aSTNULLType1.getLine());
      assertEquals("<ASTNULL>", aSTNULLType1.toString());
      assertEquals("<ASTNULL>", aSTNULLType1.getText());
      assertEquals(3, aSTNULLType1.getType());
      assertNotNull(aSTNULLType1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      detailAST0.setType(7);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.beginTree(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "require.this.variable";
      stringArray0[1] = "require.this.variable";
      stringArray0[2] = "require.this.method";
      stringArray0[3] = "require.this.variable";
      stringArray0[4] = "require.this.variable";
      stringArray0[5] = "require.this.method";
      DetailAST detailAST1 = detailAST0.findFirstToken(7);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST1);
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(intArray0);
      
      boolean boolean0 = false;
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.beginTree(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      requireThisCheck0.setCheckMethods(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      
      int[] intArray2 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertNotNull(aSTNULLType0);
      
      AST aST0 = aSTNULLType0.getNextSibling();
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aST0.getLine());
      assertEquals(0, aST0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aST0.toStringList());
      assertEquals("<ASTNULL>", aST0.toStringTree());
      assertEquals(3, aST0.getType());
      assertEquals("<ASTNULL>", aST0.getText());
      assertEquals(0, aST0.getColumn());
      assertEquals("<ASTNULL>", aST0.toString());
      assertSame(aSTNULLType0, aST0);
      assertSame(aST0, aSTNULLType0);
      assertNotNull(aST0);
      
      requireThisCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      
      requireThisCheck0.setCheckFields(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(intArray0);
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray2 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray3 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      
      int[] intArray4 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray4.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray4);
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$VALUES");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      requireThisCheck0.setClassLoader(classLoader0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray0 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      requireThisCheck0.setValidateOnlyOverlapping(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "require.this.variable";
      stringArray0[1] = "require.this.variable";
      stringArray0[2] = "require.this.method";
      stringArray0[3] = "require.this.method";
      stringArray0[4] = "require.this.method";
      stringArray0[5] = "require.this.variable";
      requireThisCheck0.setTokens(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setValidateOnlyOverlapping(true);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      requireThisCheck0.beginTree(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      Token token0 = new Token();
      assertEquals(1, Token.EOF_TYPE);
      assertEquals(3, Token.NULL_TREE_LOOKAHEAD);
      assertEquals(4, Token.MIN_USER_TYPE);
      assertEquals(0, Token.INVALID_TYPE);
      assertEquals((-1), Token.SKIP);
      assertEquals(0, token0.getColumn());
      assertEquals(0, token0.getLine());
      assertNull(token0.getFilename());
      assertEquals("<no text>", token0.getText());
      assertEquals(0, token0.getType());
      assertNotNull(token0);
      
      CommonASTWithHiddenTokens commonASTWithHiddenTokens0 = null;
      try {
        commonASTWithHiddenTokens0 = new CommonASTWithHiddenTokens(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // antlr.Token cannot be cast to antlr.CommonHiddenStreamToken
         //
         verifyException("antlr.CommonASTWithHiddenTokens", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      requireThisCheck0.beginTree((DetailAST) null);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      
      int[] intArray0 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      Set<String> set0 = requireThisCheck0.getTokenNames();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      requireThisCheck0.setCheckMethods(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setCheckFields(true);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setValidateOnlyOverlapping(true);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray0 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(intArray0);
      
      ClassLoader classLoader0 = requireThisCheck0.getClassLoader();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(classLoader0);
      
      requireThisCheck0.setClassLoader((ClassLoader) null);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setCheckFields(false);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      DetailAST detailAST0 = null;
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      requireThisCheck0.setValidateOnlyOverlapping(true);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      requireThisCheck0.setCheckMethods(true);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      int[] intArray0 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(intArray0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      requireThisCheck0.visitToken(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getColumn());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      DetailAST detailAST1 = detailAST0.getPreviousSibling();
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST1);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      int[] intArray0 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      requireThisCheck0.setCheckFields(true);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      int[] intArray0 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNotNull(detailAST0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertNotNull(aSTNULLType0);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      requireThisCheck0.setCheckFields(true);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      detailAST0.setType(9);
      assertEquals(0, detailAST0.getLine());
      assertEquals(9, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getColumn());
      assertNotNull(aSTNULLType0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "require.this.method");
      assertFalse(boolean0);
      
      detailAST0.initialize(155, "require.this.variable");
      assertEquals("require.this.variable", detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(155, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.visitToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals("require.this.variable", detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(155, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.leaveToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertEquals("require.this.variable", detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(155, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(intArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertNotNull(aSTNULLType0);
      
      int int0 = 10;
      detailAST0.setType(10);
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(10, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.leaveToken(detailAST0);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getLine());
      assertEquals(10, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      detailAST0.setType(14);
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(intArray0);
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.beginTree(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      requireThisCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      int[] intArray2 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray2.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      requireThisCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      int[] intArray3 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray3.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray3);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      
      int[] intArray4 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray4.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray4);
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      
      int[] intArray5 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray5.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray5);
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray3));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray5, intArray3);
      assertNotNull(intArray5);
      
      int[] intArray6 = requireThisCheck0.getAcceptableTokens();
      assertEquals(9, intArray6.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray6);
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray6, intArray2);
      assertNotSame(intArray6, intArray4);
      assertNotSame(intArray6, intArray0);
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray5);
      assertNotNull(intArray6);
      
      DetailAST detailAST1 = detailAST0.getNextSibling();
      assertEquals(14, detailAST0.getType());
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST1);
      
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertNotNull(aSTNULLType0);
      
      Set<String> set0 = requireThisCheck0.getTokenNames();
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      DetailAST detailAST1 = detailAST0.getFirstChild();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertEquals(0, detailAST0.getType());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      assertNull(detailAST1);
      
      requireThisCheck0.setCheckFields(false);
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertNull(requireThisCheck0.getId());
      
      detailAST0.setType(9);
      assertEquals(0, detailAST0.getLine());
      assertEquals(9, detailAST0.getType());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getColumn());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.beginTree(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(requireThisCheck0);
      
      DetailAST detailAST0 = new DetailAST();
      assertEquals(0, detailAST0.getLine());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertEquals(0, detailAST0.getType());
      assertNotNull(detailAST0);
      
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      assertEquals("<ASTNULL>", aSTNULLType0.toString());
      assertEquals(0, aSTNULLType0.getLine());
      assertEquals(3, aSTNULLType0.getType());
      assertEquals("<ASTNULL>", aSTNULLType0.getText());
      assertEquals(0, aSTNULLType0.getColumn());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringTree());
      assertEquals(0, aSTNULLType0.getNumberOfChildren());
      assertEquals("<ASTNULL>", aSTNULLType0.toStringList());
      assertNotNull(aSTNULLType0);
      
      detailAST0.setType(7);
      assertEquals(0, detailAST0.getLine());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      requireThisCheck0.beginTree(detailAST0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertEquals(0, detailAST0.getLine());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "require.this.variable";
      stringArray0[3] = "require.this.variable";
      stringArray0[4] = "require.this.variable";
      DetailAST detailAST1 = detailAST0.getFirstChild();
      assertEquals(0, detailAST0.getLine());
      assertEquals(7, detailAST0.getType());
      assertEquals(0, detailAST0.getColumn());
      assertEquals(0, detailAST0.getNumberOfChildren());
      assertNull(detailAST0.getText());
      assertNull(detailAST1);
      
      int[] intArray0 = requireThisCheck0.getRequiredTokens();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray0);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotNull(intArray0);
      
      requireThisCheck0.beginTree((DetailAST) null);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setCheckMethods(true);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      requireThisCheck0.setCheckMethods(false);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      int[] intArray1 = requireThisCheck0.getDefaultTokens();
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {14, 15, 154, 157, 8, 9, 91, 7, 58}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      requireThisCheck0.setValidateOnlyOverlapping(true);
      assertNull(requireThisCheck0.getId());
      assertEquals(SeverityLevel.ERROR, requireThisCheck0.getSeverityLevel());
      assertFalse(requireThisCheck0.isCommentNodesRequired());
      
      // Undeclared exception!
      try { 
        requireThisCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      DetailAST detailAST0 = new DetailAST();
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASTNULLType aSTNULLType1 = new ASTNULLType();
      requireThisCheck0.setCheckFields(false);
      detailAST0.setType(7);
      requireThisCheck0.beginTree(detailAST0);
      detailAST0.findFirstToken(7);
      requireThisCheck0.setCheckMethods(false);
      requireThisCheck0.getTokenNames();
      requireThisCheck0.getDefaultTokens();
      requireThisCheck0.visitToken(detailAST0);
      // Undeclared exception!
      try { 
        requireThisCheck0.visitToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RequireThisCheck requireThisCheck0 = new RequireThisCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(156, "require.this.variable");
      requireThisCheck0.beginTree(detailAST0);
      requireThisCheck0.leaveToken(detailAST0);
      requireThisCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getColumn());
  }
}
