/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 14:08:57 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavadocTag_ESTest extends JavadocTag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(0, 1111, "param", "param");
      int int0 = javadocTag0.getLineNo();
      assertEquals(0, int0);
      assertEquals(1111, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-1894), (-1894), "param", "param");
      int int0 = javadocTag0.getLineNo();
      assertEquals((-1894), javadocTag0.getColumnNo());
      assertEquals((-1894), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(238, (-2217), "serialField");
      String string0 = javadocTag0.getFirstArg();
      assertEquals(238, javadocTag0.getLineNo());
      assertEquals((-2217), javadocTag0.getColumnNo());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-582), (-582), "code", "");
      String string0 = javadocTag0.getFirstArg();
      assertEquals((-582), javadocTag0.getLineNo());
      assertEquals((-582), javadocTag0.getColumnNo());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(3081, 0, "version");
      int int0 = javadocTag0.getColumnNo();
      assertEquals(0, int0);
      assertEquals(3081, javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(3081, 3, "version");
      int int0 = javadocTag0.getColumnNo();
      assertEquals(3081, javadocTag0.getLineNo());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavadocTag javadocTag0 = null;
      try {
        javadocTag0 = new JavadocTag((-1), 2060, "", "k.rQbCdh*D^$7z&3T~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the name [] is not a valid Javadoc tag name
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavadocTag javadocTag0 = null;
      try {
        javadocTag0 = new JavadocTag(1, 1, "3)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the name [3)] is not a valid Javadoc tag name
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(0, 0, "inheritDoc", "inheritDoc");
      boolean boolean0 = javadocTag0.isInheritDocTag();
      assertTrue(boolean0);
      assertEquals(0, javadocTag0.getLineNo());
      assertEquals(0, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(3081, 0, "version");
      boolean boolean0 = javadocTag0.isInheritDocTag();
      assertFalse(boolean0);
      assertEquals(3081, javadocTag0.getLineNo());
      assertEquals(0, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(2357, 0, "exception");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertTrue(boolean0);
      assertEquals(0, javadocTag0.getColumnNo());
      assertEquals(2357, javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-3011), 912, "throws");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertTrue(boolean0);
      assertEquals(912, javadocTag0.getColumnNo());
      assertEquals((-3011), javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-4130), (-4130), "linkplain", ", columnNo=");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertEquals((-4130), javadocTag0.getLineNo());
      assertEquals(", columnNo=", javadocTag0.getFirstArg());
      assertEquals((-4130), javadocTag0.getColumnNo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(0, 0, "value", "value");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertEquals(0, javadocTag0.getColumnNo());
      assertTrue(boolean0);
      assertEquals(0, javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(0, 0, "link", "link");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertTrue(boolean0);
      assertEquals(0, javadocTag0.getColumnNo());
      assertEquals(0, javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-2890), (-2890), "inheritDoc", "inheritDoc");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertFalse(boolean0);
      assertEquals((-2890), javadocTag0.getLineNo());
      assertEquals((-2890), javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(29, 29, "see");
      boolean boolean0 = javadocTag0.canReferenceImports();
      assertTrue(boolean0);
      assertEquals(29, javadocTag0.getLineNo());
      assertEquals(29, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-1894), (-1894), "param", "param");
      boolean boolean0 = javadocTag0.isSeeOrInheritDocTag();
      assertEquals((-1894), javadocTag0.getLineNo());
      assertFalse(boolean0);
      assertEquals((-1894), javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-2890), (-2890), "inheritDoc", "inheritDoc");
      boolean boolean0 = javadocTag0.isSeeOrInheritDocTag();
      assertEquals((-2890), javadocTag0.getColumnNo());
      assertTrue(boolean0);
      assertEquals((-2890), javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(0, 0, "see", "see");
      boolean boolean0 = javadocTag0.isSeeOrInheritDocTag();
      assertTrue(boolean0);
      assertEquals(0, javadocTag0.getLineNo());
      assertEquals(0, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(2357, 0, "exception");
      boolean boolean0 = javadocTag0.isThrowsTag();
      assertEquals(0, javadocTag0.getColumnNo());
      assertEquals(2357, javadocTag0.getLineNo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(3081, 0, "version");
      boolean boolean0 = javadocTag0.isThrowsTag();
      assertFalse(boolean0);
      assertEquals(3081, javadocTag0.getLineNo());
      assertEquals(0, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-3011), 912, "throws");
      boolean boolean0 = javadocTag0.isThrowsTag();
      assertTrue(boolean0);
      assertEquals((-3011), javadocTag0.getLineNo());
      assertEquals(912, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-1894), (-1894), "param", "param");
      boolean boolean0 = javadocTag0.isParamTag();
      assertEquals((-1894), javadocTag0.getLineNo());
      assertEquals((-1894), javadocTag0.getColumnNo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(3081, 0, "version");
      boolean boolean0 = javadocTag0.isParamTag();
      assertEquals(3081, javadocTag0.getLineNo());
      assertEquals(0, javadocTag0.getColumnNo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(1, 1, "version", "version");
      boolean boolean0 = javadocTag0.isReturnTag();
      assertEquals(1, javadocTag0.getColumnNo());
      assertFalse(boolean0);
      assertEquals(1, javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(2357, 0, "exception");
      String string0 = javadocTag0.toString();
      assertEquals("JavadocTag[tag='exception' lineNo=2357, columnNo=0, firstArg='null']", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-1876), (-1876), "param", "param");
      int int0 = javadocTag0.getColumnNo();
      assertEquals((-1876), int0);
      assertEquals((-1876), javadocTag0.getLineNo());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(1, 1, "version", "version");
      int int0 = javadocTag0.getLineNo();
      assertEquals(1, int0);
      assertEquals(1, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag(2357, 0, "exception");
      javadocTag0.getTagName();
      assertEquals(2357, javadocTag0.getLineNo());
      assertEquals(0, javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-1876), (-1876), "param", "param");
      javadocTag0.getFirstArg();
      assertEquals((-1876), javadocTag0.getLineNo());
      assertEquals((-1876), javadocTag0.getColumnNo());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavadocTag javadocTag0 = new JavadocTag((-24), (-24), "return");
      boolean boolean0 = javadocTag0.isReturnTag();
      assertEquals((-24), javadocTag0.getColumnNo());
      assertTrue(boolean0);
      assertEquals((-24), javadocTag0.getLineNo());
  }
}
