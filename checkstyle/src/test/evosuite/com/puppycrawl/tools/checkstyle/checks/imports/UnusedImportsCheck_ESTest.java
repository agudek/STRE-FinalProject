/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:49:16 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.imports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnusedImportsCheck_ESTest extends UnusedImportsCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(599);
      // Undeclared exception!
      try { 
        unusedImportsCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addNextSibling(detailAST0);
      // Undeclared exception!
      try { 
        unusedImportsCheck0.visitToken(detailAST0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      MockFile mockFile0 = new MockFile("(4Z");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = unusedImportsCheck0.getTokenNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      FileText fileText0 = new FileText(mockFile0, list0);
      FileContents fileContents0 = new FileContents(fileText0);
      unusedImportsCheck0.setFileContents(fileContents0);
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        unusedImportsCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483646
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      int[] intArray0 = unusedImportsCheck0.getRequiredTokens();
      assertEquals(13, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(152, "import.unused");
      // Undeclared exception!
      try { 
        unusedImportsCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(30, "import.unused");
      unusedImportsCheck0.visitToken(detailAST0);
      assertEquals(30, detailAST0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.initialize(58, "import.unused");
      unusedImportsCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      unusedImportsCheck0.setProcessJavadoc(false);
      DetailAST detailAST0 = new DetailAST();
      unusedImportsCheck0.visitToken(detailAST0);
      assertNull(unusedImportsCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      int[] intArray0 = unusedImportsCheck0.getAcceptableTokens();
      assertEquals(13, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      int[] intArray0 = unusedImportsCheck0.getDefaultTokens();
      assertEquals(13, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      unusedImportsCheck0.finishTree(detailAST0);
      assertNull(unusedImportsCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnusedImportsCheck unusedImportsCheck0 = new UnusedImportsCheck();
      DetailAST detailAST0 = new DetailAST();
      unusedImportsCheck0.beginTree(detailAST0);
      assertFalse(unusedImportsCheck0.isCommentNodesRequired());
  }
}
