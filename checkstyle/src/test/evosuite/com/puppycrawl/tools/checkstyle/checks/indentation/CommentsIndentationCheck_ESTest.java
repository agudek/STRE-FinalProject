/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 11:43:00 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommentsIndentationCheck_ESTest extends CommentsIndentationCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(144);
      detailAST0.addNextSibling(detailAST0);
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      // Undeclared exception!
      commentsIndentationCheck0.visitToken(detailAST0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(144);
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      MockFile mockFile0 = new MockFile("comments.indentation.single");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      commentsIndentationCheck0.setFileContents(fileContents0);
      // Undeclared exception!
      try { 
        commentsIndentationCheck0.visitToken(detailAST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(145);
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      // Undeclared exception!
      try { 
        commentsIndentationCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      // Undeclared exception!
      try { 
        commentsIndentationCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected token type: null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      int[] intArray0 = commentsIndentationCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {144, 145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      int[] intArray0 = commentsIndentationCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      boolean boolean0 = commentsIndentationCheck0.isCommentNodesRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CommentsIndentationCheck commentsIndentationCheck0 = new CommentsIndentationCheck();
      int[] intArray0 = commentsIndentationCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {144, 145}, intArray0);
  }
}
