/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:28:21 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.checks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UncommentedMainCheck_ESTest extends UncommentedMainCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(14);
      uncommentedMainCheck0.beginTree(detailAST0);
      // Undeclared exception!
      try { 
        uncommentedMainCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(16);
      uncommentedMainCheck0.leaveToken(detailAST0);
      assertNull(uncommentedMainCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(16);
      detailAST0.setFirstChild(detailAST0);
      uncommentedMainCheck0.visitToken(detailAST0);
      assertFalse(uncommentedMainCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.addPreviousSibling(detailAST0);
      // Undeclared exception!
      try { 
        uncommentedMainCheck0.visitToken(detailAST0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      // Undeclared exception!
      try { 
        uncommentedMainCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      int[] intArray0 = uncommentedMainCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {9, 14, 16}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      // Undeclared exception!
      try { 
        uncommentedMainCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // null[-2147483648x-2147483648]
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(9);
      uncommentedMainCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, uncommentedMainCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      detailAST0.setType(14);
      uncommentedMainCheck0.leaveToken(detailAST0);
      uncommentedMainCheck0.visitToken(detailAST0);
      assertEquals(0, detailAST0.getLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      DetailAST detailAST0 = new DetailAST();
      uncommentedMainCheck0.leaveToken(detailAST0);
      assertNull(uncommentedMainCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      uncommentedMainCheck0.setExcludedClasses((Pattern) null);
      assertNull(uncommentedMainCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      int[] intArray0 = uncommentedMainCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {9, 14, 16}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UncommentedMainCheck uncommentedMainCheck0 = new UncommentedMainCheck();
      int[] intArray0 = uncommentedMainCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {9, 14, 16}, intArray0);
  }
}
