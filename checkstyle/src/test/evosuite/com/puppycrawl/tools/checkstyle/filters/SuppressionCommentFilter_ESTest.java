/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 13:56:26 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.FileContents;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SuppressionCommentFilter_ESTest extends SuppressionCommentFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1681, 1681, "n #n]Vt&", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(1681, 2, "n #n]Vt&", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      int int0 = suppressionCommentFilter_Tag0.compareTo(suppressionCommentFilter_Tag1);
      assertEquals(1, int0);
      assertEquals(2, suppressionCommentFilter_Tag1.getColumn());
      assertEquals(1681, suppressionCommentFilter_Tag1.getLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(5271, 5271, "z.$#{\"Gr-VF!:8M", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(0, 0, "Tag[text='", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      int int0 = suppressionCommentFilter_Tag0.compareTo(suppressionCommentFilter_Tag1);
      assertEquals(0, suppressionCommentFilter_Tag1.getLine());
      assertEquals(1, int0);
      assertEquals(5271, suppressionCommentFilter_Tag0.getColumn());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      suppressionCommentFilter0.setCheckFormat("PS(I}IM'[]h7N^Xz:");
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = null;
      try {
        suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(60, 60, "$VALUES", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse expanded comment PS(I}IM'[]h7N^Xz:
         //
         verifyException("com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      // Undeclared exception!
      try { 
        suppressionCommentFilter0.accept((TreeWalkerAuditEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      MockFile mockFile0 = new MockFile("AxRG09H");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText(mockFile0, linkedList0);
      FileContents fileContents0 = new FileContents(fileText0);
      suppressionCommentFilter0.setFileContents(fileContents0);
      assertFalse(fileContents0.inPackageInfo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      MockFile mockFile0 = new MockFile("unable to parse expanded comment ", "unable to parse expanded comment ");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      suppressionCommentFilter0.setMessageFormat("unable to parse expanded comment ");
      FileContents fileContents0 = new FileContents(fileText0);
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      DetailAST detailAST0 = new DetailAST();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1715, 1715, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.TagType[] suppressionCommentFilter_TagTypeArray0 = SuppressionCommentFilter.TagType.values();
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(4892, 3923, (-2135), (String) null, "MURMUR128_MITZ_32", suppressionCommentFilter_TagTypeArray0, severityLevel0, "Fc0g", class0, "");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "unable to parse expanded comment ", localizedMessage0, detailAST0);
      boolean boolean0 = suppressionCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertFalse(boolean0);
      assertEquals(1715, suppressionCommentFilter_Tag0.getColumn());
      assertEquals(1715, suppressionCommentFilter_Tag0.getLine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      MockFile mockFile0 = new MockFile("unable to parse expanded comment ", "unable to parse expanded comment ");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      FileContents fileContents0 = new FileContents(fileText0);
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      DetailAST detailAST0 = new DetailAST();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1715, 1715, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.TagType[] suppressionCommentFilter_TagTypeArray0 = SuppressionCommentFilter.TagType.values();
      Class<Object> class0 = Object.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(4892, 3923, (-2135), (String) null, "MURMUR128_MITZ_32", suppressionCommentFilter_TagTypeArray0, severityLevel0, "Fc0g", class0, "");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "unable to parse expanded comment ", localizedMessage0, detailAST0);
      boolean boolean0 = suppressionCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertEquals(1715, suppressionCommentFilter_Tag0.getColumn());
      assertTrue(boolean0);
      assertEquals(1715, suppressionCommentFilter_Tag0.getLine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      MockFile mockFile0 = new MockFile("unable to parse expanded comment ", "CHECKSTYLE:ON");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[8];
      suppressionCommentFilter0.setCheckFormat(", tagMessageRegexp=");
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(677, 677, 677, 677, "", "", objectArray0, severityLevel0, "gr]TW@+?&B%", class0, "CHECKSTYLE:ON");
      DetailAST detailAST0 = new DetailAST();
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, detailAST0);
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(677, 1153, ", tagMessageRegexp=", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.isMatch(treeWalkerAuditEvent0);
      assertFalse(boolean0);
      assertEquals(1153, suppressionCommentFilter_Tag0.getColumn());
      assertEquals(677, suppressionCommentFilter_Tag0.getLine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(677, 677, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(677, 677, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_Tag1);
      assertEquals(677, suppressionCommentFilter_Tag1.getColumn());
      assertEquals(677, suppressionCommentFilter_Tag1.getLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1715, 1715, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(1715, 1715, "unable to parse expanded comment ", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_Tag1);
      assertEquals(1715, suppressionCommentFilter_Tag1.getLine());
      assertEquals(1715, suppressionCommentFilter_Tag1.getColumn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(677, 677, "CHECKSTYLE:ON", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(677, 3344, "CHECKSTYLE:ON", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_Tag1);
      assertEquals(677, suppressionCommentFilter_Tag1.getLine());
      assertEquals(3344, suppressionCommentFilter_Tag1.getColumn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(677, 677, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag((-1661), 1015, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_Tag1);
      assertFalse(boolean0);
      assertEquals((-1661), suppressionCommentFilter_Tag1.getLine());
      assertEquals(1015, suppressionCommentFilter_Tag1.getColumn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1715, 1715, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(1715, 1715, "CHECKSTYLE:ON", (SuppressionCommentFilter.TagType) null, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_Tag1);
      assertFalse(boolean0);
      assertEquals(1715, suppressionCommentFilter_Tag1.getColumn());
      assertEquals(1715, suppressionCommentFilter_Tag1.getLine());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag((-679), 477, "PNHc``tlH>42vcS", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals((Object) null);
      assertEquals((-679), suppressionCommentFilter_Tag0.getLine());
      assertEquals(477, suppressionCommentFilter_Tag0.getColumn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(677, 677, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_Tag0);
      assertEquals(677, suppressionCommentFilter_Tag0.getLine());
      assertTrue(boolean0);
      assertEquals(677, suppressionCommentFilter_Tag0.getColumn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag((-2222), (-2222), "agXI:[jS{cmxqUOzvX", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      boolean boolean0 = suppressionCommentFilter_Tag0.equals(suppressionCommentFilter_TagType0);
      assertEquals((-2222), suppressionCommentFilter_Tag0.getColumn());
      assertEquals((-2222), suppressionCommentFilter_Tag0.getLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag((-2222), (-2222), "agXI:[jS{cmxqUOzvX", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag1 = new SuppressionCommentFilter.Tag(0, 0, ", tagMessageRegexp=", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      int int0 = suppressionCommentFilter_Tag0.compareTo(suppressionCommentFilter_Tag1);
      assertEquals((-2222), suppressionCommentFilter_Tag0.getColumn());
      assertEquals((-1), int0);
      assertEquals(0, suppressionCommentFilter_Tag1.getLine());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      suppressionCommentFilter0.setMessageFormat("n #n]Vt&");
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1681, 1681, "n #n]Vt&", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      assertEquals(1681, suppressionCommentFilter_Tag0.getColumn());
      assertEquals(1681, suppressionCommentFilter_Tag0.getLine());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      MockFile mockFile0 = new MockFile("");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(mockFile0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[1];
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(1681, 93, (-243), "", ", tagCheckRegexp=", objectArray0, severityLevel0, "n #n]Vt&", class0, "n #n]Vt&");
      suppressionCommentFilter0.setCheckCPP(false);
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, (DetailAST) null);
      boolean boolean0 = suppressionCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent((FileContents) null, "~e}t(Hat", (LocalizedMessage) null, (DetailAST) null);
      boolean boolean0 = suppressionCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(554, 554, "", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      suppressionCommentFilter_Tag0.getTagType();
      assertEquals(554, suppressionCommentFilter_Tag0.getLine());
      assertEquals(554, suppressionCommentFilter_Tag0.getColumn());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.ON;
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag((-679), 477, "PNHc``tlH>42vcS", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      int int0 = suppressionCommentFilter_Tag0.getColumn();
      assertEquals((-679), suppressionCommentFilter_Tag0.getLine());
      assertEquals(477, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1681, 1681, "n #n]Vt&", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      int int0 = suppressionCommentFilter_Tag0.getLine();
      assertEquals(1681, int0);
      assertEquals(1681, suppressionCommentFilter_Tag0.getColumn());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      SuppressionCommentFilter.TagType suppressionCommentFilter_TagType0 = SuppressionCommentFilter.TagType.OFF;
      SuppressionCommentFilter.Tag suppressionCommentFilter_Tag0 = new SuppressionCommentFilter.Tag(1681, 1681, "n #n]Vt&", suppressionCommentFilter_TagType0, suppressionCommentFilter0);
      String string0 = suppressionCommentFilter_Tag0.toString();
      assertEquals("Tag[text='n #n]Vt&', line=1681, column=1681, type=OFF, tagCheckRegexp=.*, tagMessageRegexp=null]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      suppressionCommentFilter0.setCheckC(false);
      MockFile mockFile0 = new MockFile("");
      Vector<String> vector0 = new Vector<String>();
      FileText fileText0 = new FileText(mockFile0, vector0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[1];
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      Class<Integer> class0 = Integer.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(1681, 93, (-243), "", ", tagCheckRegexp=", objectArray0, severityLevel0, "n #n]Vt&", class0, "n #n]Vt&");
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, (DetailAST) null);
      boolean boolean0 = suppressionCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      Pattern pattern0 = Pattern.compile("");
      suppressionCommentFilter0.setOnCommentFormat(pattern0);
      assertEquals("", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      MockFile mockFile0 = new MockFile("unable to parse expanded comment ", "CHECKSTYLE:ON");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileText fileText0 = new FileText(mockFile0, arrayList0);
      FileContents fileContents0 = new FileContents(fileText0);
      Object[] objectArray0 = new Object[8];
      SeverityLevel severityLevel0 = SeverityLevel.WARNING;
      Class<String> class0 = String.class;
      LocalizedMessage localizedMessage0 = new LocalizedMessage(677, 677, 677, 677, "", "", objectArray0, severityLevel0, "gr]TW@+?&B%", class0, "CHECKSTYLE:ON");
      DetailAST detailAST0 = new DetailAST();
      TreeWalkerAuditEvent treeWalkerAuditEvent0 = new TreeWalkerAuditEvent(fileContents0, "", localizedMessage0, detailAST0);
      suppressionCommentFilter0.accept(treeWalkerAuditEvent0);
      boolean boolean0 = suppressionCommentFilter0.accept(treeWalkerAuditEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      suppressionCommentFilter0.finishLocalSetup();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SuppressionCommentFilter suppressionCommentFilter0 = new SuppressionCommentFilter();
      Pattern pattern0 = Pattern.compile("BUQDluGLz_6c4", 0);
      suppressionCommentFilter0.setOffCommentFormat(pattern0);
      assertEquals(0, pattern0.flags());
  }
}
