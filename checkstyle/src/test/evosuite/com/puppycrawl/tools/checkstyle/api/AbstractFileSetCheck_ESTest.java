/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 18 15:25:35 GMT 2018
 */

package com.puppycrawl.tools.checkstyle.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.Checker;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.TreeWalker;
import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import java.io.File;
import java.util.LinkedList;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFileSetCheck_ESTest extends AbstractFileSetCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      Object[] objectArray0 = new Object[7];
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("error");
      treeWalker0.configure(defaultConfiguration0);
      treeWalker0.log((-158), (-2336), "1CU-dY<biuC/<&", objectArray0);
      assertNull(treeWalker0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      treeWalker0.destroy();
      assertEquals(SeverityLevel.ERROR, treeWalker0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      Object[] objectArray0 = new Object[7];
      DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration("error");
      treeWalker0.configure(defaultConfiguration0);
      treeWalker0.log(0, "Extensions array can not be null", objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<LocalizedMessage> treeSet0 = new TreeSet<LocalizedMessage>();
      AbstractFileSetCheck.addMessages(treeSet0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      String[] stringArray0 = new String[0];
      treeWalker0.setFileExtensions(stringArray0);
      String[] stringArray1 = treeWalker0.getFileExtensions();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        treeWalker0.setFileExtensions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileText fileText0 = new FileText((File) null, linkedList0);
      // Undeclared exception!
      try { 
        treeWalker0.process((File) null, fileText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      // Undeclared exception!
      try { 
        treeWalker0.setFileExtensions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Extensions array can not be null
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "general.exception";
      stringArray0[1] = "";
      treeWalker0.setFileExtensions(stringArray0);
      MockFile mockFile0 = new MockFile(".");
      SortedSet<LocalizedMessage> sortedSet0 = treeWalker0.process(mockFile0, (FileText) null);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      MockFile mockFile0 = new MockFile("", "");
      Stack<String> stack0 = new Stack<String>();
      FileText fileText0 = new FileText(mockFile0, stack0);
      SortedSet<LocalizedMessage> sortedSet0 = treeWalker0.process(mockFile0, fileText0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractFileSetCheck.addMessages((SortedSet<LocalizedMessage>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      String[] stringArray0 = treeWalker0.getFileExtensions();
      treeWalker0.setFileExtensions(stringArray0);
      assertEquals(SeverityLevel.ERROR, treeWalker0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        treeWalker0.log(6, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      treeWalker0.init();
      assertEquals(SeverityLevel.ERROR, treeWalker0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      treeWalker0.beginProcessing("4fexists");
      assertEquals(SeverityLevel.ERROR, treeWalker0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      treeWalker0.finishProcessing();
      assertNull(treeWalker0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        treeWalker0.log((-2153), (-2153), "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeWalker treeWalker0 = new TreeWalker();
      Checker checker0 = new Checker();
      treeWalker0.setMessageDispatcher(checker0);
      assertEquals(SeverityLevel.ERROR, treeWalker0.getSeverityLevel());
  }
}
